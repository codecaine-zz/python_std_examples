{
    "Binary Data Services": [
        {
            "filename": "array - Efficient arrays of numeric values.md",
            "content": "<h1>array - Efficient arrays of numeric values</h1>\n<p>The <code>array</code> module in Python provides a way to handle homogeneous sequences of numbers efficiently. This is particularly useful when you need to work with large collections of numerical data and need to perform fast operations on them.</p>\n<p>Here are comprehensive code examples for various functionalities provided by the <code>array</code> module:</p>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-creating-arrays\">Creating Arrays</a></li>\n<li><a href=\"#example-create-an-array-of-integers\">Example: Create an array of integers</a></li>\n<li><a href=\"#example-create-an-array-of-floats\">Example: Create an array of floats</a></li>\n<li><a href=\"#2-accessing-elements\">Accessing Elements</a></li>\n<li><a href=\"#example-accessing-elements-by-index\">Example: Accessing elements by index</a></li>\n<li><a href=\"#example-accessing-elements-with-out-of-bounds\">Example: Accessing elements with out of bounds</a></li>\n<li><a href=\"#3-modifying-elements\">Modifying Elements</a></li>\n<li><a href=\"#example-modifying-an-element-by-index\">Example: Modifying an element by index</a></li>\n<li><a href=\"#4-appending-elements\">Appending Elements</a></li>\n<li><a href=\"#example-appending-a-single-element\">Example: Appending a single element</a></li>\n<li><a href=\"#example-extending-with-multiple-elements\">Example: Extending with multiple elements</a></li>\n<li><a href=\"#5-operations-on-arrays\">Operations on Arrays</a></li>\n<li><a href=\"#example-adding-elements-using-a-loop\">Example: Adding elements using a loop</a></li>\n<li><a href=\"#example-sorting-the-array\">Example: Sorting the array</a></li>\n<li><a href=\"#6-converting-arrays-to-lists\">Converting Arrays to Lists</a></li>\n<li><a href=\"#example-convert-array-to-a-list\">Example: Convert array to a list</a></li>\n<li><a href=\"#7-concatenating-arrays\">Concatenating Arrays</a></li>\n<li><a href=\"#example-concatenating-two-arrays\">Example: Concatenating two arrays</a></li>\n<li><a href=\"#8-reversing-an-array\">Reversing an Array</a></li>\n<li><a href=\"#example-reversing-the-array\">Example: Reversing the array</a></li>\n<li><a href=\"#9-indexing-with-negative-numbers\">Indexing with Negative Numbers</a></li>\n<li><a href=\"#example-accessing-elements-using-negative-indices\">Example: Accessing elements using negative indices</a></li>\n<li><a href=\"#10-iterating-over-arrays\">Iterating Over Arrays</a><ul>\n<li><a href=\"#example-iterating-over-an-array-using-a-for-loop\">Example: Iterating over an array using a for loop</a></li>\n</ul>\n</li>\n<li><a href=\"#11-comparing-arrays\">Comparing Arrays</a><ul>\n<li><a href=\"#example-comparing-two-arrays-for-equality\">Example: Comparing two arrays for equality</a></li>\n</ul>\n</li>\n<li><a href=\"#12-arithmetic-operations\">Arithmetic Operations</a><ul>\n<li><a href=\"#example-adding-two-arrays-element-wise-supported-for-integer-and-float-arrays\">Example: Adding two arrays element-wise (supported for integer and float arrays)</a></li>\n</ul>\n</li>\n<li><a href=\"#13-string-formatting\">String Formatting</a><ul>\n<li><a href=\"#example-formatting-an-array-as-a-string-supported-for-integer-and-float-arrays\">Example: Formatting an array as a string (supported for integer and float arrays)</a></li>\n</ul>\n</li>\n</ol>\n<h3>1. Creating Arrays</h3>\n<h4>Example: Create an array of integers</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import array as arr\n\n# Create an array of integers\nint_array = arr.array('i', [1, 2, 3, 4, 5])\nprint(&quot;Integer Array:&quot;, int_array)\n</code></pre>\n\n<h4>Example: Create an array of floats</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import array as arr\n\n# Create an array of floats\nfloat_array = arr.array('f', [1.1, 2.2, 3.3, 4.4, 5.5])\nprint(&quot;Float Array:&quot;, float_array)\n</code></pre>\n\n<h3>2. Accessing Elements</h3>\n<h4>Example: Accessing elements by index</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import array as arr\n\n# Access an element from the array\nint_array = arr.array('i', [10, 20, 30, 40, 50])\nprint(&quot;Element at index 2:&quot;, int_array[2])  # Output: 30\n</code></pre>\n\n<h4>Example: Accessing elements with out of bounds</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import array as arr\n\ntry:\n    int_array = arr.array('i', [10, 20, 30])\n    print(&quot;Element at index -1:&quot;, int_array[-1])  # Output: 30\n    print(&quot;Element at index 5:&quot;, int_array[5])   # Raises IndexError\nexcept IndexError as e:\n    print(e)\n</code></pre>\n\n<h3>3. Modifying Elements</h3>\n<h4>Example: Modifying an element by index</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import array as arr\n\n# Modify an element in the array\nint_array = arr.array('i', [1, 2, 3, 4, 5])\nint_array[2] = 10\nprint(&quot;Modified Integer Array:&quot;, int_array)\n</code></pre>\n\n<h3>4. Appending Elements</h3>\n<h4>Example: Appending a single element</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import array as arr\n\n# Append a single element to the array\nint_array = arr.array('i', [1, 2, 3])\nint_array.append(4)\nprint(&quot;Array after appending 4:&quot;, int_array)\n</code></pre>\n\n<h4>Example: Extending with multiple elements</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import array as arr\n\n# Extend the array with another array\nint_array = arr.array('i', [1, 2, 3])\nother_int_array = arr.array('i', [4, 5, 6])\nint_array.extend(other_int_array)\nprint(&quot;Array after extending:&quot;, int_array)\n</code></pre>\n\n<h3>5. Operations on Arrays</h3>\n<h4>Example: Adding elements using a loop</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import array as arr\n\n# Create an empty integer array and add elements\nint_array = arr.array('i')\nfor i in range(10):\n    int_array.append(i * 2)\nprint(&quot;Array after adding elements with a loop:&quot;, int_array)\n</code></pre>\n\n<h4>Example: Sorting the array</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import array as arr\n\n# Sort an array\nint_array = arr.array('i', [5, 3, 9, 1, 6])\nint_array.sort()\nprint(&quot;Sorted Integer Array:&quot;, int_array)\n</code></pre>\n\n<h3>6. Converting Arrays to Lists</h3>\n<h4>Example: Convert array to a list</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import array as arr\n\n# Convert an array to a list\nint_array = arr.array('i', [1, 2, 3])\nlist_array = int_array.tolist()\nprint(&quot;Array converted to list:&quot;, list_array)\n</code></pre>\n\n<h3>7. Concatenating Arrays</h3>\n<h4>Example: Concatenating two arrays</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import array as arr\n\n# Concatenate two integer arrays\nint_array1 = arr.array('i', [1, 2, 3])\nint_array2 = arr.array('i', [4, 5, 6])\nconcatenated_array = int_array1 + int_array2\nprint(&quot;Concatenated Integer Array:&quot;, concatenated_array)\n</code></pre>\n\n<h3>8. Reversing an Array</h3>\n<h4>Example: Reversing the array</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import array as arr\n\n# Reverse an integer array\nint_array = arr.array('i', [7, 8, 9])\nreversed_array = int_array[::-1]\nprint(&quot;Reversed Integer Array:&quot;, reversed_array)\n</code></pre>\n\n<h3>9. Indexing with Negative Numbers</h3>\n<h4>Example: Accessing elements using negative indices</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import array as arr\n\n# Access elements using negative indices\nint_array = arr.array('i', [10, 20, 30])\nprint(&quot;Element at index -1:&quot;, int_array[-1])  # Output: 30\nprint(&quot;Element at index -2:&quot;, int_array[-2])  # Output: 20\n</code></pre>\n\n<h3>10. Iterating Over Arrays</h3>\n<h4>Example: Iterating over an array using a for loop</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import array as arr\n\n# Iterate over an integer array\nint_array = arr.array('i', [4, 8, 12])\nfor element in int_array:\n    print(element)  # Output: 4, 8, 12\n</code></pre>\n\n<h3>11. Comparing Arrays</h3>\n<h4>Example: Comparing two arrays for equality</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import array as arr\n\n# Compare two integer arrays for equality\nint_array1 = arr.array('i', [1, 2, 3])\nint_array2 = arr.array('i', [1, 2, 3])\nprint(&quot;Arrays are equal:&quot;, int_array1 == int_array2)  # Output: True\n</code></pre>\n\n<h3>12. Arithmetic Operations</h3>\n<h4>Example: Adding two arrays element-wise (supported for integer and float arrays)</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import array as arr\n\n# Add two integer arrays element-wise\nint_array1 = arr.array('i', [1, 2, 3])\nint_array2 = arr.array('i', [4, 5, 6])\nresult_array = int_array1 + int_array2\nprint(&quot;Resulting Array after addition:&quot;, result_array)\n</code></pre>\n\n<h3>13. String Formatting</h3>\n<h4>Example: Formatting an array as a string (supported for integer and float arrays)</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import array as arr\n\n# Format an array as a string\nint_array = arr.array('i', [7, 8, 9])\nformatted_string = str(int_array)\nprint(&quot;Array formatted as string:&quot;, formatted_string)  # Output: array('i', [7, 8, 9])\n</code></pre>\n\n<p>These examples cover the most common functionalities of the <code>array</code> module. Each example is well-documented to help you understand how to use each method effectively in your Python programs.</p>"
        },
        {
            "filename": "bisect - Array bisection algorithm.md",
            "content": "<h1>bisect - Array bisection algorithm</h1>\n<p>The <code>bisect</code> module in Python provides a set of functions that perform binary search on sorted arrays. This module is particularly useful when you need to efficiently find the position where an item should be inserted into a list to maintain its sorted order.</p>\n<p>Here are comprehensive code examples for each functionality provided by the <code>bisect</code> module:</p>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-bisection-search\">Bisection Search</a></li>\n<li><a href=\"#example-2-bisection-search-using-bisect_right-or-bisect\">Bisection Search Using <code>bisect_right</code> or <code>bisect</code></a></li>\n<li><a href=\"#example-3-bisection-search-for-insertion\">Bisection Search for Insertion</a></li>\n<li><a href=\"#example-4-bisection-search-for-deletion\">Bisection Search for Deletion</a></li>\n<li><a href=\"#example-5-bisection-search-with-key-function\">Bisection Search with Key Function</a></li>\n<li><a href=\"#example-6-bisection-search-for-rightmost-position\">Bisection Search for Rightmost Position</a></li>\n</ol>\n<h3>Example 1: Bisection Search</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import bisect\n\n# List of numbers\nnumbers = [1, 3, 5, 7, 9]\n\n# Element to search for\nsearch_value = 6\n\n# Find the position where the element should be inserted to maintain sorted order\ninsert_position = bisect.bisect_left(numbers, search_value)\n\nprint(f&quot;The element {search_value} can be inserted at index {insert_position} to maintain the list in sorted order.&quot;)\n</code></pre>\n\n<h3>Example 2: Bisection Search Using <code>bisect_right</code> or <code>bisect</code></h3>\n<p>The <code>bisect_right</code> function is similar to <code>bisect_left</code>, but it returns the insertion point where the element should be inserted to maintain sorted order, ensuring that duplicates are added at the rightmost position.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import bisect\n\n# List of numbers with duplicates\nnumbers = [1, 2, 2, 3, 4, 5]\n\n# Element to search for\nsearch_value = 2\n\n# Find the position where the element should be inserted\ninsert_position_right = bisect.bisect(numbers, search_value)\n\nprint(f&quot;The element {search_value} can be inserted at index {insert_position_right} to maintain the list in sorted order.&quot;)\n</code></pre>\n\n<h3>Example 3: Bisection Search for Insertion</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import bisect\n\n# List of numbers\nnumbers = [1, 2, 3, 4, 5]\n\n# Element to insert\ninsert_value = 7\n\n# Find the position where the element should be inserted to maintain sorted order\ninsert_position_insert = bisect.bisect_left(numbers, insert_value)\n\n# Insert the element at the found position\nnumbers.insert(insert_position_insert, insert_value)\n\nprint(f&quot;List after inserting {insert_value}: {numbers}&quot;)\n</code></pre>\n\n<h3>Example 4: Bisection Search for Deletion</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import bisect\n\n# List of numbers\nnumbers = [1, 2, 3, 4, 5]\n\n# Element to delete\ndelete_value = 3\n\n# Find the position where the element should be deleted\ninsert_position_delete = bisect.bisect_left(numbers, delete_value)\n\n# Delete the element if it exists\nif insert_position_delete &lt; len(numbers) and numbers[insert_position_delete] == delete_value:\n    del numbers[insert_position_delete]\n\nprint(f&quot;List after deleting {delete_value}: {numbers}&quot;)\n</code></pre>\n\n<h3>Example 5: Bisection Search with Key Function</h3>\n<p>You can also use a key function to perform the bisect operation on custom keys.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import bisect\n\n# List of tuples where each tuple is (value, index)\ntuples = [(1, 'a'), (2, 'b'), (3, 'c')]\n\n# Element and its corresponding key for search\nsearch_value = 3\nkey_func = lambda x: x[0]\n\n# Find the position where the element should be inserted based on the key function\ninsert_position_key = bisect.bisect_left(tuples, (search_value, ''), key=key_func)\n\nprint(f&quot;The element {search_value} can be inserted at index {insert_position_key} based on the key function.&quot;)\n</code></pre>\n\n<h3>Example 6: Bisection Search for Rightmost Position</h3>\n<p>The <code>bisect_right</code> function is useful when you need to find the rightmost position where an element should be inserted to maintain sorted order.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import bisect\n\n# List of numbers with duplicates\nnumbers = [1, 2, 2, 3, 4, 5]\n\n# Element to search for\nsearch_value = 2\n\n# Find the position where the element should be inserted\ninsert_position_right = bisect.bisect_right(numbers, search_value)\n\nprint(f&quot;The rightmost occurrence of {search_value} is at index {insert_position_right}.&quot;)\n</code></pre>\n\n<p>These examples cover various use cases of the <code>bisect</code> module, demonstrating its versatility in maintaining sorted lists and performing efficient binary searches.</p>"
        },
        {
            "filename": "calendar - General calendar-related functions.md",
            "content": "<h1>calendar - General calendar-related functions</h1>\n<p>The <code>calendar</code> module in Python provides a set of functions that facilitate the display, generation, and manipulation of calendars. Here are comprehensive code examples demonstrating various functionalities within this module:</p>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-display-the-current-months-calendar-with-weekday-names-at-the-top\">Display the current month's calendar</a></li>\n<li><a href=\"#example-2-display-a-specific-month-and-years-calendar-with-day-numbers-centered\">Display a specific month and year's calendar</a></li>\n<li><a href=\"#example-3-format-a-date-in-the-iso-8601-format\">Format a date in ISO 8601 format</a></li>\n<li><a href=\"#example-4-determine-if-a-given-year-is-a-leap-year\">Determine if a year is a leap year</a></li>\n<li><a href=\"#example-5-generate-the-day-of-the-week-for-a-specific-date-in-a-month-and-year\">Generate the day of the week for a specific date</a></li>\n<li><a href=\"#example-6-display-the-full-calendar-for-a-year\">Display the full calendar for a year</a></li>\n<li><a href=\"#example-7-generate-a-range-of-dates\">Generate a range of dates</a></li>\n<li><a href=\"#example-8-generate-a-list-of-holidays-placeholder-as-pythons-calendar-module-does-not-support-holidays\">List of holidays</a></li>\n<li><a href=\"#example-9-format-the-month-with-weekend-days-highlighted\">Format the month with weekend days highlighted</a></li>\n<li><a href=\"#example-10-generate-a-list-of-all-days-in-a-year\">Generate a list of all days in a year</a></li>\n</ol>\n<pre class=\"codehilite\"><code class=\"language-python\">import calendar\nimport datetime\n\n# Example 1: Display the current month's calendar with weekday names at the top\nprint(&quot;Current Month Calendar:&quot;)\nprint(calendar.month(2023, 9))\n\n# Example 2: Display a specific month and year's calendar with day numbers centered\nprint(&quot;\\nSpecific Month Calendar (Centered Day Numbers):&quot;)\ncalendar.setfirstweekday(calendar.MONDAY)  # Set Monday as the first day of the week\nprint(calendar.month(2023, 10))\n\n# Example 3: Format a date in the ISO 8601 format\nformatted_date = datetime.date(2023, 9, 5).isoformat()\nprint(&quot;\\nFormatted Date (ISO 8601):&quot;, formatted_date)\n\n# Example 4: Determine if a given year is a leap year\nyear = 2024\nif calendar.isleap(year):\n    print(f&quot;{year} is a leap year.&quot;)\nelse:\n    print(f&quot;{year} is not a leap year.&quot;)\n\n# Example 5: Generate the day of the week for a specific date in a month and year\nday_of_week = calendar.weekday(2023, 9, 1)\nweekdays = [&quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;, &quot;Saturday&quot;, &quot;Sunday&quot;]\nprint(f&quot;\\nDay of Week (Monday=0): {weekdays[day_of_week]}&quot;)\n\n# Example 6: Display the full calendar for a year\nprint(&quot;\\nFull Calendar for Year 2023:&quot;)\nfull_calendar = calendar.calendar(2023)\nprint(full_calendar)\n\n# Example 7: Generate a range of dates\nstart_date = (2023, 9, 1)\nend_date = (2023, 9, 30)\ncal_range = calendar.monthrange(start_date[0], start_date[1])\nfirst_weekday_of_month = cal_range[0]\nnum_days_in_month = cal_range[1]\n\nprint(f&quot;\\nNumber of days in the month: {num_days_in_month}&quot;)\nfor day in range(1, num_days_in_month + 1):\n    print(calendar.day_name[(first_weekday_of_month + day - 1) % 7])\n\n# Example 8: Generate a list of holidays (placeholder, as Python's calendar module does not support holidays)\nholidays = [&quot;2023-01-01 New Year's Day&quot;, &quot;2023-12-25 Christmas Day&quot;]\nprint(&quot;\\nHolidays in Year 2023:&quot;)\nfor holiday in holidays:\n    print(holiday)\n\n# Example 9: Format the month with weekend days highlighted\nhighlight_weekends = calendar.monthcalendar(2023, 10)\nprint(&quot;\\nMonth Calendar with Weekends Highlighted:&quot;)\nfor week in highlight_weekends:\n    for day in week:\n        if day == 6 or day == 7:  # Saturday and Sunday\n            print(&quot;*&quot;, end=&quot; &quot;)\n        else:\n            print(day, end=&quot; &quot;)\n    print()\n\n# Example 10: Generate a list of all days in a year\ndays_of_year = calendar.Calendar().yeardays2calendar(2023)\nprint(&quot;\\nDays of the Year for Year 2023:&quot;)\nfor week_list in days_of_year:\n    for week in week_list:\n        for day in week:\n            print(day, end=&quot; &quot;)\n    print()\n</code></pre>\n\n<h3>Explanation:</h3>\n<ol>\n<li><strong>Current Month Calendar</strong>: Displays the current month's calendar with weekday names at the top.</li>\n<li><strong>Specific Month Calendar (Centered Day Numbers)</strong>: Demonstrates displaying a specific month and year's calendar with centered day numbers.</li>\n<li><strong>Formatted Date (ISO 8601)</strong>: Shows how to format a date in the ISO 8601 format.</li>\n<li><strong>Leap Year Check</strong>: Determines if a given year is a leap year using the <code>isleap</code> function.</li>\n<li><strong>Day of the Week</strong>: Finds and prints the day of the week for a specific date in a month and year.</li>\n<li><strong>Full Calendar for Year</strong>: Displays the full calendar for a specified year.</li>\n<li><strong>Generate a Range of Dates</strong>: Shows how to generate a range of dates from a start to an end date.</li>\n<li><strong>Holidays in Year</strong>: Lists all holidays for a given year using the <code>holidays</code> function.</li>\n<li><strong>Month Calendar with Weekends Highlighted</strong>: Highlights Saturday and Sunday in a month's calendar.</li>\n<li><strong>Days of the Year</strong>: Displays all days in a year in a structured format.</li>\n</ol>\n<p>These examples cover various aspects of the <code>calendar</code> module, from basic calendaring functions to more advanced date manipulation techniques.</p>"
        },
        {
            "filename": "codecs - Codec registry and base classes.md",
            "content": "<h1>codecs - Codec registry and base classes</h1>\n<p>The <code>codecs</code> module in Python provides a comprehensive set of tools for handling different character encodings, including converting between different character encodings, decoding raw bytes into strings, and encoding strings back into raw bytes. Below are several code examples demonstrating various functionalities within the <code>codecs</code> module:</p>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-encoding-and-decoding-strings\">Encoding and Decoding Strings</a></li>\n<li><a href=\"#example-2-handling-non-breaking-spaces\">Handling Non-Breaking Spaces</a></li>\n<li><a href=\"#example-3-encoding-with-different-encodings\">Encoding with Different Encodings</a></li>\n<li><a href=\"#example-4-using-codec-aliases\">Using Codec Aliases</a></li>\n<li><a href=\"#example-5-handling-unicode-characters\">Handling Unicode Characters</a></li>\n<li><a href=\"#example-6-error-handling-during-encoding-and-decoding\">Error Handling during Encoding and Decoding</a></li>\n<li><a href=\"#example-7-using-codecsopen-for-file-handling\">Using codecs.open for File Handling</a></li>\n<li><a href=\"#example-8-using-codecsiterencode-and-codecsiterdecode\">Using codecs.iterencode and codecs.iterdecode</a></li>\n</ol>\n<h3>Example 1: Encoding and Decoding Strings</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import codecs\n\n# Define a string in UTF-8 encoding\noriginal_string = &quot;Hello, World!&quot;\n\n# Encode the string to bytes using UTF-8 encoding\nencoded_bytes = original_string.encode('utf-8')\nprint(f&quot;Original String: {original_string}&quot;)\nprint(f&quot;Encoded Bytes: {encoded_bytes}&quot;)\n\n# Decode the bytes back to a string using UTF-8 decoding\ndecoded_string = encoded_bytes.decode('utf-8')\nprint(f&quot;Decoded String: {decoded_string}&quot;)\n</code></pre>\n\n<p><strong>Explanation</strong>: This example demonstrates how to encode and decode strings between UTF-8 encoding. The <code>encode</code> method converts the string into bytes, and the <code>decode</code> method converts bytes back into a string.</p>\n<h3>Example 2: Handling Non-Breaking Spaces</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import codecs\n\n# Define a string with non-breaking spaces\nnon_breaking_string = &quot;Hello,\\xa0World!&quot;\n\n# Decode the string using UTF-8 decoding to handle non-breakable spaces\ndecoded_string = non_breaking_string.decode('utf-8')\nprint(f&quot;Decoded String: {decoded_string}&quot;)\n</code></pre>\n\n<p><strong>Explanation</strong>: This example shows how to handle strings with non-breaking spaces. The <code>decode</code> method automatically handles these special characters when decoding from UTF-8.</p>\n<h3>Example 3: Encoding with Different Encodings</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import codecs\n\n# Define a string in ASCII encoding\nascii_string = &quot;Hello, World!&quot;\n\n# Encode the string to bytes using ASCII encoding\nencoded_bytes_ascii = ascii_string.encode('ascii')\nprint(f&quot;Encoded Bytes (ASCII): {encoded_bytes_ascii}&quot;)\n\n# Define another string in ISO-8859-1 encoding\niso_string = &quot;Caf\u00e9&quot;\n\n# Encode the string to bytes using ISO-8859-1 encoding\nencoded_bytes_iso = iso_string.encode('iso-8859-1')\nprint(f&quot;Encoded Bytes (ISO-8859-1): {encoded_bytes_iso}&quot;)\n</code></pre>\n\n<p><strong>Explanation</strong>: This example demonstrates how to encode strings in different character encodings, such as ASCII and ISO-8859-1. The <code>encode</code> method converts the string into bytes using the specified encoding.</p>\n<h3>Example 4: Using Codec Aliases</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import codecs\n\n# Define a string in UTF-8 encoding\noriginal_string = &quot;Hello, World!&quot;\n\n# Encode the string to bytes using the alias 'utf-8'\nencoded_bytes_alias = original_string.encode('utf-8')\nprint(f&quot;Encoded Bytes (Alias): {encoded_bytes_alias}&quot;)\n</code></pre>\n\n<p><strong>Explanation</strong>: This example shows how to use codec aliases to specify an encoding by its alias name. The <code>encode</code> method uses the specified alias to encode the string into bytes.</p>\n<h3>Example 5: Handling Unicode Characters</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import codecs\n\n# Define a string containing a Unicode character\nunicode_string = &quot;Hello, \ud83c\udf0d!&quot;\n\n# Encode the string to bytes using UTF-8 encoding\nencoded_bytes_unicode = unicode_string.encode('utf-8')\nprint(f&quot;Encoded Bytes (Unicode): {encoded_bytes_unicode}&quot;)\n\n# Decode the bytes back to a string using UTF-8 decoding\ndecoded_string_unicode = encoded_bytes_unicode.decode('utf-8')\nprint(f&quot;Decoded String (Unicode): {decoded_string_unicode}&quot;)\n</code></pre>\n\n<p><strong>Explanation</strong>: This example demonstrates how to handle Unicode characters in strings. The <code>encode</code> method converts the string into bytes, and the <code>decode</code> method converts bytes back into a string, preserving the Unicode representation.</p>\n<h3>Example 6: Error Handling during Encoding and Decoding</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import codecs\n\n# Define a string containing a character that cannot be encoded with ASCII\nnon_ascii_string = &quot;Hello, \ud83d\ude0a!&quot;\n\ntry:\n    # Attempt to encode the string using ASCII encoding (this will raise an error)\n    encoded_bytes_error = non_ascii_string.encode('ascii')\nexcept UnicodeEncodeError as e:\n    print(f&quot;Encoding Error: {e}&quot;)\n\n# Define a string containing a character that cannot be decoded with UTF-8\nunicode_non_decodable_string = &quot;Hello, \ud83c\udf0d!&quot;\n\ntry:\n    # Attempt to decode the bytes using UTF-8 decoding (this will raise an error)\n    decoded_string_error = unicode_non_decodable_string.decode('utf-8')\nexcept UnicodeDecodeError as e:\n    print(f&quot;Decoding Error: {e}&quot;)\n</code></pre>\n\n<p><strong>Explanation</strong>: This example demonstrates how to handle errors during encoding and decoding operations. The <code>encode</code> method raises a <code>UnicodeEncodeError</code> if it encounters a character that cannot be encoded, and the <code>decode</code> method raises a <code>UnicodeDecodeError</code> if it encounters an invalid byte sequence.</p>\n<h3>Example 7: Using codecs.open for File Handling</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import codecs\n\n# Define a string to write to a file using UTF-8 encoding\nwrite_string = &quot;Hello, World!&quot;\n\n# Open a file for writing and encode the string using UTF-8 encoding\nwith codecs.open('output.txt', 'w', encoding='utf-8') as file:\n    file.write(write_string)\n\n# Read the file back and decode it to a string using UTF-8 decoding\nwith codecs.open('output.txt', 'r', encoding='utf-8') as file:\n    read_string = file.read()\n    print(f&quot;Read String: {read_string}&quot;)\n</code></pre>\n\n<p><strong>Explanation</strong>: This example demonstrates how to use <code>codecs.open</code> for file handling. It writes a string to a file and then reads it back, both using UTF-8 encoding.</p>\n<h3>Example 8: Using codecs.iterencode and codecs.iterdecode</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import codecs\n\n# Define a list of Unicode characters\nunicode_chars = ['Hello', 'World', '!']\n\n# Encode each character in the list using UTF-8 encoding\nencoded_iter = codecs.iterencode(unicode_chars, 'utf-8')\nfor encoded_bytes in encoded_iter:\n    print(f&quot;Encoded Bytes: {encoded_bytes}&quot;)\n\n# Decode each byte sequence back to a string using UTF-8 decoding\ndecoded_iter = codecs.iterdecode(encoded_iter, 'utf-8')\nfor decoded_string in decoded_iter:\n    print(f&quot;Decoded String: {decoded_string}&quot;)\n</code></pre>\n\n<p><strong>Explanation</strong>: This example demonstrates how to use <code>codecs.iterencode</code> and <code>codecs.iterdecode</code> for encoding and decoding multiple strings efficiently. These functions are useful when dealing with sequences of characters.</p>\n<p>These examples cover a range of functionalities within the <code>codecs</code> module, including basic encoding/decoding operations, handling special characters, using codec aliases, handling Unicode characters, error handling, file handling with <code>codecs.open</code>, and more.</p>"
        },
        {
            "filename": "collections - Container datatypes.md",
            "content": "<h1>collections - Container datatypes</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-counter\">Counter</a> - Hash-based counting of elements</li>\n<li><a href=\"#2-ordereddict\">OrderedDict</a> - Dictionary that remembers insertion order</li>\n<li><a href=\"#3-defaultdict\">defaultdict</a> - Dictionary with automatic default values</li>\n<li><a href=\"#4-namedtuple\">namedtuple</a> - Tuple subclass with named fields</li>\n<li><a href=\"#5-deque\">deque</a> - Double-ended queue with fast operations</li>\n<li><a href=\"#6-chainmap\">ChainMap</a> - Multiple dictionaries as a single mapping</li>\n<li><a href=\"#7-userdict\">UserDict</a> - Base class for dictionary customization</li>\n<li><a href=\"#8-userlist\">UserList</a> - Base class for list customization</li>\n<li><a href=\"#9-userstring\">UserString</a> - Base class for string customization</li>\n</ol>\n<h2>Overview</h2>\n<p>The <code>collections</code> module provides specialized container datatypes as alternatives to Python's built-in containers (<code>dict</code>, <code>list</code>, <code>set</code>, and <code>tuple</code>). These containers are optimized for specific use cases and can significantly improve both code readability and performance when used appropriately.</p>\n<h2>Container Types Comparison</h2>\n<p>| Container Type | Time Complexity (Common Operations) | Memory Usage | Best For |\n|---------------|-----------------------------------|--------------|-----------|\n| Counter       | O(1) for updates/lookups          | Moderate     | Counting elements, multisets |\n| OrderedDict   | O(1) for updates/lookups          | High         | Fixed ordering requirements |\n| defaultdict   | O(1) for updates/lookups          | Moderate     | Automatic default values |\n| namedtuple    | O(1) for attribute access         | Low          | Lightweight object storage |\n| deque         | O(1) for both ends               | Moderate     | FIFO/LIFO queues |</p>\n<hr />\n<h3>1. Counter</h3>\n<p><strong>Description:</strong>\nA dictionary subclass for counting hashable objects. Elements are stored as dictionary keys and their counts as dictionary values.</p>\n<p><strong>Common Use Cases:</strong></p>\n<ol>\n<li>Word frequency analysis</li>\n<li>Character counting in strings</li>\n<li>Event counting in logs</li>\n<li>Implementation of multisets</li>\n</ol>\n<p><strong>Example:</strong></p>\n<pre class=\"codehilite\"><code class=\"language-python\">from collections import Counter\n\n# Basic counting\ntext = &quot;mississippi&quot;\nchar_count = Counter(text)\nprint(char_count)  # Output: Counter({'i': 4, 's': 4, 'p': 2, 'm': 1})\n\n# Advanced operations\ncounter1 = Counter(['a', 'b', 'b', 'c'])\ncounter2 = Counter(['b', 'b', 'c', 'd'])\n\n# Addition (union)\nprint(counter1 + counter2)  # Counter({'b': 4, 'c': 2, 'a': 1, 'd': 1})\n\n# Subtraction (difference)\nprint(counter1 - counter2)  # Counter({'a': 1})\n\n# Most common elements\nprint(char_count.most_common(2))  # [('i', 4), ('s', 4)]\n</code></pre>\n\n<p><strong>Best Practices:</strong></p>\n<ol>\n<li>Use <code>most_common()</code> for efficient top-N queries</li>\n<li>Use <code>update()</code> for batch counting instead of individual additions</li>\n<li>Use <code>total()</code> to get the sum of all counts</li>\n</ol>\n<p><strong>Common Pitfalls:</strong></p>\n<ul>\n<li>Negative counts are allowed but not included in most operations</li>\n<li><code>del</code> is needed to completely remove an element</li>\n</ul>\n<hr />\n<h3>2. OrderedDict</h3>\n<p><strong>Description:</strong>\nAn ordered dictionary that remembers the order in which its contents are added. This is useful when you need to maintain the insertion order of keys.</p>\n<p><strong>Example:</strong></p>\n<pre class=\"codehilite\"><code class=\"language-python\">from collections import OrderedDict\n\n# Example with an ordered dictionary\nordered_dict = OrderedDict()\nordered_dict['apple'] = 1\nordered_dict['banana'] = 2\nordered_dict['orange'] = 3\nprint(ordered_dict)  # Output: OrderedDict([('apple', 1), ('banana', 2), ('orange', 3)])\n\n# Example with a dictionary and sorting\nregular_dict = {'banana': 2, 'apple': 1, 'orange': 3}\nordered_dict = OrderedDict(sorted(regular_dict.items()))\nprint(ordered_dict)  # Output: OrderedDict([('apple', 1), ('banana', 2), ('orange', 3)])\n</code></pre>\n\n<p><strong>Explanation:</strong></p>\n<ul>\n<li>The <code>OrderedDict</code> class maintains the insertion order of its elements, which is not guaranteed by regular dictionaries.</li>\n<li>This can be useful in scenarios where maintaining order is important, such as caching or certain types of configurations.</li>\n</ul>\n<hr />\n<h3>3. defaultdict</h3>\n<p><strong>Description:</strong>\nA dictionary subclass that calls a factory function to provide missing values.</p>\n<p><strong>Example:</strong></p>\n<pre class=\"codehilite\"><code class=\"language-python\">from collections import defaultdict\n\n# Example with a defaultdict to count even and odd numbers\ncount_dict = defaultdict(list)\nfor number in range(10):\n    if number % 2 == 0:\n        count_dict['even'].append(number)\n    else:\n        count_dict['odd'].append(number)\n\nprint(count_dict)  # Output: defaultdict(&lt;class 'list'&gt;, {'even': [0, 2, 4, 6, 8], 'odd': [1, 3, 5, 7, 9]})\n\n# Example with a defaultdict and a custom factory function\ndef default_factory():\n    return &quot;default value&quot;\n\ncustom_dict = defaultdict(default_factory)\nprint(custom_dict[&quot;missing_key&quot;])  # Output: default value\n</code></pre>\n\n<p><strong>Explanation:</strong></p>\n<ul>\n<li>The <code>defaultdict</code> class is used to initialize dictionary values automatically.</li>\n<li>In this example, it initializes a list for each key that does not already exist in the dictionary.</li>\n</ul>\n<hr />\n<h3>4. namedtuple</h3>\n<p><strong>Description:</strong>\nA factory function returning a new tuple subclass with named fields.</p>\n<p><strong>Example:</strong></p>\n<pre class=\"codehilite\"><code class=\"language-python\">from collections import namedtuple\n\n# Example with a named tuple to represent a point in 2D space\nPoint = namedtuple('Point', ['x', 'y'])\np1 = Point(1, 2)\np2 = Point(x=3, y=4)\n\nprint(p1)  # Output: Point(x=1, y=2)\nprint(p2)  # Output: Point(x=3, y=4)\n\n# Example with a named tuple to represent a person\nPerson = namedtuple('Person', ['name', 'age'])\nperson = Person(name=&quot;Alice&quot;, age=30)\n\nprint(person)  # Output: Person(name='Alice', age=30)\nprint(person.name)  # Output: Alice\nprint(person.age)  # Output: 30\n</code></pre>\n\n<p><strong>Explanation:</strong></p>\n<ul>\n<li>The <code>namedtuple</code> function creates a subclass of tuple with named fields.</li>\n<li>This makes the tuple more readable and convenient for representing objects with specific attributes.</li>\n</ul>\n<hr />\n<h3>5. deque</h3>\n<p><strong>Description:</strong>\nA double-ended queue optimized for fast appends and pops from both ends, with optional maximum length.</p>\n<p><strong>Use Cases:</strong></p>\n<ol>\n<li>Implementing sliding windows</li>\n<li>Managing history with fixed size</li>\n<li>Round-robin scheduling</li>\n<li>Producer-consumer queues</li>\n</ol>\n<p><strong>Example:</strong></p>\n<pre class=\"codehilite\"><code class=\"language-python\">from collections import deque\n\n# Sliding window example\ndef moving_average(data, window_size):\n    window = deque(maxlen=window_size)\n    averages = []\n\n    for x in data:\n        window.append(x)\n        averages.append(sum(window) / len(window))\n\n    return averages\n\n# Example usage\ndata = [1, 2, 3, 4, 5, 6, 7]\nprint(moving_average(data, 3))  # Output: [1.0, 1.5, 2.0, 3.0, 4.0, 5.0, 6.0]\n\n# Circular buffer example\nhistory = deque(maxlen=3)\nfor i in range(5):\n    history.append(i)\nprint(history)  # Output: deque([2, 3, 4], maxlen=3)\n\n# Rotation example\nd = deque([1, 2, 3, 4, 5])\nd.rotate(2)  # Rotate two steps right\nprint(d)  # Output: deque([4, 5, 1, 2, 3])\nd.rotate(-2)  # Rotate two steps left\nprint(d)  # Output: deque([1, 2, 3, 4, 5])\n</code></pre>\n\n<p><strong>Performance Characteristics:</strong></p>\n<ul>\n<li>O(1) for append/pop at either end</li>\n<li>O(n) for random access</li>\n<li>O(k) for rotation of k elements</li>\n<li>Thread-safe for append/pop operations</li>\n</ul>\n<p><strong>Best Practices:</strong></p>\n<ol>\n<li>Use <code>maxlen</code> parameter for sliding windows</li>\n<li>Prefer <code>appendleft()</code>/<code>popleft()</code> over <code>insert(0)</code>/<code>pop(0)</code></li>\n<li>Use <code>rotate()</code> for efficient circular operations</li>\n</ol>\n<hr />\n<h3>6. ChainMap</h3>\n<p><strong>Description:</strong>\nA collection which provides a way to group multiple mappings as if they were one, but which does not actually merge them.</p>\n<p><strong>Example:</strong></p>\n<pre class=\"codehilite\"><code class=\"language-python\">from collections import ChainMap\n\n# Example with chain maps for combining multiple dictionaries\ndict1 = {'a': 1, 'b': 2}\ndict2 = {'b': 3, 'c': 4}\n\ncombined_dict = ChainMap(dict1, dict2)\nprint(combined_dict)  # Output: ChainMap({'a': 1, 'b': 2}, {'b': 3, 'c': 4})\n\n# Example with chain maps and updating values\ndict1['a'] = 5\nprint(combined_dict)  # Output: ChainMap({'a': 5, 'b': 2}, {'b': 3, 'c': 4})\n</code></pre>\n\n<p><strong>Explanation:</strong></p>\n<ul>\n<li>The <code>ChainMap</code> class allows you to create a new dictionary that combines multiple dictionaries.</li>\n<li>It will prioritize the first dictionary when retrieving values for keys that exist in more than one.</li>\n</ul>\n<hr />\n<h3>7. UserDict</h3>\n<p><strong>Description:</strong>\nA subclass of dict providing a base class for dictionary subclasses.</p>\n<p><strong>Example:</strong></p>\n<pre class=\"codehilite\"><code class=\"language-python\">from collections import UserDict\n\n# Example with a user-defined dictionary subclass\nclass MyDict(UserDict):\n    def __missing__(self, key):\n        # Custom behavior when an item is missing\n        return f&quot;Key {key} not found&quot;\n\nmy_dict = MyDict()\nmy_dict['name'] = 'Alice'\nprint(my_dict)  # Output: {'name': 'Alice'}\nprint(my_dict['age'])  # Output: Key age not found\n\n# Example with a user-defined dictionary subclass and custom initialization\nclass MyDictWithInit(UserDict):\n    def __init__(self, initial_data):\n        super().__init__(initial_data)\n        self.custom_attribute = 'custom_value'\n\nmy_dict_with_init = MyDictWithInit({'key1': 'value1'})\nprint(my_dict_with_init)  # Output: {'key1': 'value1'}\nprint(my_dict_with_init.custom_attribute)  # Output: custom_value\n</code></pre>\n\n<p><strong>Explanation:</strong></p>\n<ul>\n<li>The <code>UserDict</code> class allows you to create a custom dictionary subclass with additional behavior.</li>\n<li>It provides a method <code>__missing__</code> that can be overridden to customize the behavior when a key is missing.</li>\n</ul>\n<hr />\n<h3>8. UserList</h3>\n<p><strong>Description:</strong>\nA subclass of list providing a base class for list subclasses.</p>\n<p><strong>Example:</strong></p>\n<pre class=\"codehilite\"><code class=\"language-python\">from collections import UserList\n\n# Example with a user-defined list subclass\nclass MyList(UserList):\n    def __init__(self, iterable=()):\n        # Custom initialization behavior\n        super().__init__(iterable)\n        self.custom_attribute = 'hello'\n\nmy_list = MyList([1, 2, 3])\nprint(my_list)  # Output: [1, 2, 3]\nprint(my_list.custom_attribute)  # Output: hello\n\n# Example with a user-defined list subclass and custom method\nclass MyListWithMethod(UserList):\n    def custom_method(self):\n        return sum(self)\n\nmy_list_with_method = MyListWithMethod([1, 2, 3])\nprint(my_list_with_method)  # Output: [1, 2, 3]\nprint(my_list_with_method.custom_method())  # Output: 6\n</code></pre>\n\n<p><strong>Explanation:</strong></p>\n<ul>\n<li>The <code>UserList</code> class allows you to create a custom list subclass with additional behavior.</li>\n<li>It provides a method <code>__init__</code> that can be overridden to customize initialization.</li>\n</ul>\n<hr />\n<h3>9. UserString</h3>\n<p><strong>Description:</strong>\nA subclass of str providing a base class for string subclasses.</p>\n<p><strong>Example:</strong></p>\n<pre class=\"codehilite\"><code class=\"language-python\">from collections import UserString\n\n# Example with a user-defined string subclass\nclass MyString(UserString):\n    def __init__(self, data=''):\n        # Custom initialization behavior\n        super().__init__(data)\n        self.custom_attribute = 'world'\n\nmy_string = MyString('hello')\nprint(my_string)  # Output: hello\nprint(my_string.custom_attribute)  # Output: world\n\n# Example with a user-defined string subclass and custom method\nclass MyStringWithMethod(UserString):\n    def custom_method(self):\n        return self.data.upper()\n\nmy_string_with_method = MyStringWithMethod('hello')\nprint(my_string_with_method)  # Output: hello\nprint(my_string_with_method.custom_method())  # Output: HELLO\n</code></pre>\n\n<p><strong>Explanation:</strong></p>\n<ul>\n<li>The <code>UserString</code> class allows you to create a custom string subclass with additional behavior.</li>\n<li>It provides a method <code>__init__</code> that can be overridden to customize initialization.</li>\n</ul>\n<hr />\n<h2>Common Design Patterns with Collections</h2>\n<h3>1. Caching with OrderedDict</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from collections import OrderedDict\n\nclass LRUCache(OrderedDict):\n    def __init__(self, capacity):\n        super().__init__()\n        self.capacity = capacity\n\n    def get(self, key):\n        if key not in self:\n            return -1\n        self.move_to_end(key)\n        return self[key]\n\n    def put(self, key, value):\n        if key in self:\n            self.move_to_end(key)\n        self[key] = value\n        if len(self) &gt; self.capacity:\n            self.popitem(last=False)\n</code></pre>\n\n<h3>2. Event Handling with defaultdict</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from collections import defaultdict\n\nclass EventSystem:\n    def __init__(self):\n        self.handlers = defaultdict(list)\n\n    def subscribe(self, event_type, handler):\n        self.handlers[event_type].append(handler)\n\n    def emit(self, event_type, data):\n        for handler in self.handlers[event_type]:\n            handler(data)\n</code></pre>\n\n<h2>Best Practices Summary</h2>\n<ol>\n<li>\n<p>Choose the right container:</p>\n</li>\n<li>\n<p>Use <code>Counter</code> for counting</p>\n</li>\n<li>Use <code>defaultdict</code> for automatic defaults</li>\n<li>Use <code>deque</code> for queue operations</li>\n<li>Use <code>namedtuple</code> for lightweight objects</li>\n<li>\n<p>Use <code>OrderedDict</code> when order matters</p>\n</li>\n<li>\n<p>Performance Considerations:</p>\n</li>\n<li>\n<p><code>deque</code> over <code>list</code> for queue operations</p>\n</li>\n<li><code>Counter</code> over manual counting</li>\n<li>\n<p><code>defaultdict</code> over manual key initialization</p>\n</li>\n<li>\n<p>Memory Usage:</p>\n</li>\n<li>\n<p><code>namedtuple</code> for memory-efficient objects</p>\n</li>\n<li>Use <code>maxlen</code> with <code>deque</code> for bounded memory</li>\n<li>Clear unused collections to free memory</li>\n</ol>\n<h2>Common Pitfalls and Solutions</h2>\n<ol>\n<li><strong>Mutable Default Values</strong></li>\n<li>Problem: Using mutable default values in <code>defaultdict</code></li>\n<li>\n<p>Solution: Use factory functions that return new instances</p>\n</li>\n<li>\n<p><strong>OrderedDict vs dict</strong></p>\n</li>\n<li>Problem: Using OrderedDict when regular dict would suffice (Python 3.7+)</li>\n<li>\n<p>Solution: Use regular dict unless explicit ordering behavior is needed</p>\n</li>\n<li>\n<p><strong>Counter Arithmetic</strong></p>\n</li>\n<li>Problem: Unexpected behavior with negative counts</li>\n<li>\n<p>Solution: Use Counter's mathematical operations carefully</p>\n</li>\n<li>\n<p><strong>namedtuple Immutability</strong></p>\n</li>\n<li>Problem: Attempting to modify namedtuple fields</li>\n<li>Solution: Use _replace() method or create new instance</li>\n</ol>\n<h2>Further Reading</h2>\n<ul>\n<li><a href=\"https://docs.python.org/3/library/collections.html\">Python Collections Documentation</a></li>\n<li><a href=\"https://www.python.org/dev/peps/pep-0468/\">PEP 468 - Preserving the order of **kwargs in a function</a></li>\n<li><a href=\"https://code.activestate.com/recipes/users/178123/\">Raymond Hettinger's Python Recipes</a></li>\n</ul>"
        },
        {
            "filename": "collections.abc - Abstract Base Classes for Containers.md",
            "content": "<h1>collections.abc - Abstract Base Classes for Containers</h1>\n<p>Below are comprehensive examples of how to use the <code>collections.abc</code> module, which provides abstract base classes for various container types like sequences and mappings.</p>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-sequence-abc\">Sequence ABC</a></li>\n<li><a href=\"#example-implementing-a-custom-sequence\">Example: Implementing a Custom Sequence</a></li>\n<li><a href=\"#2-mapping-abc\">Mapping ABC</a></li>\n<li><a href=\"#example-implementing-a-custom-dictionary\">Example: Implementing a Custom Dictionary</a></li>\n<li><a href=\"#3-mutable-sequence-abc\">Mutable Sequence ABC</a></li>\n<li><a href=\"#example-implementing-a-custom-mutable-list\">Example: Implementing a Custom Mutable List</a></li>\n<li><a href=\"#4-mutable-mapping-abc\">Mutable Mapping ABC</a></li>\n<li><a href=\"#example-implementing-a-custom-mutable-dictionary\">Example: Implementing a Custom Mutable Dictionary</a></li>\n<li><a href=\"#5-set-abc\">Set ABC</a></li>\n<li><a href=\"#example-implementing-a-custom-set\">Example: Implementing a Custom Set</a></li>\n<li><a href=\"#6-deque-abc\">Deque ABC</a></li>\n<li><a href=\"#example-implementing-a-custom-double-ended-queue\">Example: Implementing a Custom Double-Ended Queue</a></li>\n</ol>\n<h3>1. Sequence ABC</h3>\n<h4>Example: Implementing a Custom Sequence</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">from collections.abc import Sequence\n\nclass MyList(Sequence):\n    def __init__(self, elements):\n        self._elements = list(elements)\n\n    def __getitem__(self, index):\n        return self._elements[index]\n\n    def __len__(self):\n        return len(self._elements)\n\n# Usage\nmy_list = MyList([1, 2, 3, 4, 5])\nprint(list(my_list))  # Output: [1, 2, 3, 4, 5]\nprint(len(my_list))    # Output: 5\n</code></pre>\n\n<h3>2. Mapping ABC</h3>\n<h4>Example: Implementing a Custom Dictionary</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">from collections.abc import Mapping\n\nclass MyDict(Mapping):\n    def __init__(self, key_value_pairs):\n        self._data = dict(key_value_pairs)\n\n    def __getitem__(self, key):\n        return self._data[key]\n\n    def __len__(self):\n        return len(self._data)\n\n    def keys(self):\n        return iter(self._data.keys())\n\n    def values(self):\n        return iter(self._data.values())\n\n# Usage\nmy_dict = MyDict({'a': 1, 'b': 2, 'c': 3})\nprint(my_dict['a'])     # Output: 1\nprint(len(my_dict))       # Output: 3\nfor key in my_dict:\n    print(key)             # Output: a b c\n</code></pre>\n\n<h3>3. Mutable Sequence ABC</h3>\n<h4>Example: Implementing a Custom Mutable List</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">from collections.abc import MutableSequence\n\nclass MyMutableList(MutableSequence):\n    def __init__(self, elements=None):\n        self._elements = list(elements) if elements is not None else []\n\n    def insert(self, index, element):\n        self._elements.insert(index, element)\n\n    def __getitem__(self, index):\n        return self._elements[index]\n\n    def __delitem__(self, index):\n        del self._elements[index]\n\n    def __len__(self):\n        return len(self._elements)\n\n# Usage\nmy_list = MyMutableList([1, 2, 3])\nprint(my_list)     # Output: [1, 2, 3]\nmy_list.insert(1, 4)\nprint(my_list)     # Output: [1, 4, 2, 3]\ndel my_list[1]\nprint(my_list)     # Output: [1, 2, 3]\n</code></pre>\n\n<h3>4. Mutable Mapping ABC</h3>\n<h4>Example: Implementing a Custom Mutable Dictionary</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">from collections.abc import MutableMapping\n\nclass MyMutableDict(MutableMapping):\n    def __init__(self, key_value_pairs=None):\n        self._data = dict(key_value_pairs) if key_value_pairs is not None else {}\n\n    def __getitem__(self, key):\n        return self._data[key]\n\n    def __setitem__(self, key, value):\n        self._data[key] = value\n\n    def __delitem__(self, key):\n        del self._data[key]\n\n    def __len__(self):\n        return len(self._data)\n\n    def keys(self):\n        return iter(self._data.keys())\n\n    def values(self):\n        return iter(self._data.values())\n\n# Usage\nmy_dict = MyMutableDict({'a': 1, 'b': 2})\nprint(my_dict)           # Output: {'a': 1, 'b': 2}\nmy_dict['c'] = 3\nprint(my_dict)           # Output: {'a': 1, 'b': 2, 'c': 3}\ndel my_dict['a']\nprint(my_dict)           # Output: {'b': 2, 'c': 3}\n</code></pre>\n\n<h3>5. Set ABC</h3>\n<h4>Example: Implementing a Custom Set</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">from collections.abc import Set\n\nclass MySet(Set):\n    def __init__(self, elements=None):\n        self._elements = set(elements) if elements is not None else set()\n\n    def add(self, element):\n        self._elements.add(element)\n\n    def remove(self, element):\n        self._elements.remove(element)\n\n    def __contains__(self, element):\n        return element in self._elements\n\n    def __len__(self):\n        return len(self._elements)\n\n# Usage\nmy_set = MySet([1, 2, 3])\nprint(1 in my_set)      # Output: True\nmy_set.add(4)\nprint(4 in my_set)      # Output: True\nmy_set.remove(1)\nprint(my_set)            # Output: {2, 3, 4}\n</code></pre>\n\n<h3>6. Deque ABC</h3>\n<h4>Example: Implementing a Custom Double-Ended Queue</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">from collections.abc import Deque\n\nclass MyDeque(Deque):\n    def appendleft(self, element):\n        self._elements.appendleft(element)\n\n    def popleft(self):\n        return self._elements.popleft()\n\n# Usage\nmy_deque = MyDeque()\nmy_deque.appendleft(1)\nmy_deque.appendleft(2)\nprint(list(my_deque))  # Output: [2, 1]\nfirst_element = my_deque.popleft()\nprint(first_element)    # Output: 2\n</code></pre>\n\n<p>These examples demonstrate how to implement custom container types by subclassing the abstract base classes provided in <code>collections.abc</code>. Each example includes comments explaining the purpose of each method and demonstrates its usage.</p>"
        },
        {
            "filename": "copy - Shallow and deep copy operations.md",
            "content": "<h1>copy - Shallow and deep copy operations</h1>\n<p>The <code>copy</code> module in Python provides a variety of functions to perform shallow and deep copies on objects, which are essential for managing complex data structures. Here are comprehensive examples demonstrating how to use these functionalities:</p>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#shallow-copy\">Shallow Copy</a></li>\n<li><a href=\"#deep-copy\">Deep Copy</a></li>\n</ol>\n<h3>Shallow Copy</h3>\n<p>A shallow copy creates a new object that is a copy of the original object but references the same objects as the originals. This means that changes to sub-objects in the copied object will affect the original object.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Import the necessary module\nimport copy\n\ndef demonstrate_shallow_copy():\n    # Example: Shallow copying a list\n    original_list = [1, 2, [3, 4]]\n    shallow_copied_list = copy.copy(original_list)\n\n    print(&quot;Original List:&quot;, original_list)  # Output: Original List: [1, 2, [3, 4]]\n    print(&quot;Shallow Copied List:&quot;, shallow_copied_list)  # Output: Shallow Copied List: [1, 2, [3, 4]]\n\n    # Modifying the sub-list in the copied list\n    shallow_copied_list[2][0] = 'a'\n\n    print(&quot;Modified Original List:&quot;, original_list)  # Output: Modified Original List: [1, 2, ['a', 4]]\n    print(&quot;Shallow Copied List After Modification:&quot;, shallow_copied_list)  # Output: Shallow Copied List After Modification: [1, 2, ['a', 4]]\n\n# Call the function to demonstrate\ndemonstrate_shallow_copy()\n</code></pre>\n\n<h3>Deep Copy</h3>\n<p>A deep copy creates a new object and recursively copies all sub-objects into it. This means that changes to sub-objects in the copied object will not affect the original object.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">def demonstrate_deep_copy():\n    # Example: Deep copying a dictionary with nested lists\n    original_dict = {\n        'a': 1,\n        'b': [2, 3],\n        'c': {'d': 4}\n    }\n\n    deep_copied_dict = copy.deepcopy(original_dict)\n\n    print(&quot;Original Dictionary:&quot;, original_dict)  # Output: Original Dictionary: {'a': 1, 'b': [2, 3], 'c': {'d': 4}}\n    print(&quot;Deep Copied Dictionary:&quot;, deep_copied_dict)  # Output: Deep Copied Dictionary: {'a': 1, 'b': [2, 3], 'c': {'d': 4}}\n\n    # Modifying the nested list in the copied dictionary\n    deep_copied_dict['b'][0] = 'x'\n\n    print(&quot;Modified Original Dictionary:&quot;, original_dict)  # Output: Modified Original Dictionary: {'a': 1, 'b': [2, 3], 'c': {'d': 4}}\n    print(&quot;Deep Copied Dictionary After Modification:&quot;, deep_copied_dict)  # Output: Deep Copied Dictionary After Modification: {'a': 1, 'b': ['x', 3], 'c': {'d': 4}}\n\n# Call the function to demonstrate\ndemonstrate_deep_copy()\n</code></pre>\n\n<h3>Explanation</h3>\n<ul>\n<li>\n<p><strong>Shallow Copy</strong>: This is useful when you want to create a copy of an object where sub-objects are shared. It is often used in cases where performance is critical.</p>\n</li>\n<li>\n<p><strong>Deep Copy</strong>: This is recommended when you need a completely independent copy of the object and its sub-objects, ensuring that changes to one do not affect the other.</p>\n</li>\n</ul>\n<p>These examples demonstrate how to use the <code>copy</code> module to perform both shallow and deep copies, highlighting their respective use cases.</p>"
        },
        {
            "filename": "Data Types.md",
            "content": "<h1>Data Types</h1>\n<p>The Python standard library includes several modules dedicated to handling different data types efficiently. Below are comprehensive code examples for some of these modules, focusing on their primary functionalities:</p>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-collections-module\">collections Module</a></li>\n<li><a href=\"#example-1-using-deque\">Example 1: Using deque</a></li>\n<li><a href=\"#example-2-using-counter\">Example 2: Using Counter</a></li>\n<li><a href=\"#example-3-using-defaultdict\">Example 3: Using defaultdict</a></li>\n<li><a href=\"#example-4-using-ordereddict\">Example 4: Using OrderedDict</a></li>\n<li><a href=\"#example-5-using-namedtuple\">Example 5: Using namedtuple</a></li>\n<li><a href=\"#2-datetime-module\">datetime Module</a></li>\n<li><a href=\"#3-array-module\">array Module</a></li>\n<li><a href=\"#4-enum-module\">enum Module</a></li>\n</ol>\n<h3>1. <code>collections</code> Module</h3>\n<p>This module provides specialized container datatypes that differ from built-in containers like lists and dictionaries.</p>\n<h4>Example 1: Using <code>deque</code></h4>\n<p>A deque (double-ended queue) is a list-like container with fast appends and pops from either end.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from collections import deque\n\n# Creating a deque\ndq = deque([1, 2, 3])\n\n# Appending to the right\ndq.append(4)\nprint(dq)  # Output: deque([1, 2, 3, 4])\n\n# Appending to the left\ndq.appendleft(0)\nprint(dq)  # Output: deque([0, 1, 2, 3, 4])\n\n# Popping from the right\nlast_element = dq.pop()\nprint(last_element)  # Output: 4\nprint(dq)  # Output: deque([0, 1, 2, 3])\n\n# Popping from the left\nfirst_element = dq.popleft()\nprint(first_element)  # Output: 0\nprint(dq)  # Output: deque([1, 2, 3])\n</code></pre>\n\n<h4>Example 2: Using <code>Counter</code></h4>\n<p>A Counter is a dictionary subclass for counting hashable objects.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from collections import Counter\n\n# Creating a Counter object\ncounter = Counter(['apple', 'banana', 'apple', 'orange', 'banana', 'banana'])\n\n# Displaying the count of each item\nprint(counter)  # Output: Counter({'banana': 3, 'apple': 2, 'orange': 1})\n\n# Finding the most common items\nmost_common_items = counter.most_common(2)\nprint(most_common_items)  # Output: [('banana', 3), ('apple', 2)]\n\n# Subtracting from another Counter\ncounter.subtract({'banana': 1})\nprint(counter)  # Output: Counter({'banana': 2, 'apple': 2, 'orange': 1})\n</code></pre>\n\n<h4>Example 3: Using <code>defaultdict</code></h4>\n<p>A defaultdict is a dictionary that provides a default value for a nonexistent key.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from collections import defaultdict\n\n# Creating a defaultdict with a default value of 0\ndd = defaultdict(int)\n\n# Incrementing the value for a key\ndd['apple'] += 1\nprint(dd)  # Output: defaultdict(&lt;class 'int'&gt;, {'apple': 1})\n\n# Accessing a nonexistent key returns the default value\nprint(dd['banana'])  # Output: 0\n</code></pre>\n\n<h4>Example 4: Using <code>OrderedDict</code></h4>\n<p>An OrderedDict is a dictionary that remembers the order in which items were inserted.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from collections import OrderedDict\n\n# Creating an OrderedDict\nod = OrderedDict()\n\n# Adding items to the OrderedDict\nod['apple'] = 1\nod['banana'] = 2\nod['cherry'] = 3\n\n# The items are ordered by the order of insertion\nprint(od)  # Output: OrderedDict([('apple', 1), ('banana', 2), ('cherry', 3)])\n</code></pre>\n\n<h4>Example 5: Using <code>namedtuple</code></h4>\n<p>A namedtuple is a tuple with named fields that you can access like attributes.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from collections import namedtuple\n\n# Creating a namedtuple class\nPoint = namedtuple('Point', ['x', 'y'])\n\n# Creating an instance of the namedtuple\np = Point(10, 20)\n\n# Accessing fields by name\nprint(p.x)  # Output: 10\nprint(p.y)  # Output: 20\n</code></pre>\n\n<h3>2. <code>datetime</code> Module</h3>\n<p>This module provides classes for manipulating dates and times.</p>\n<h4>Example 1: Basic Date Manipulation</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">from datetime import date\n\n# Creating a date object\ntoday = date.today()\nprint(today)  # Output: YYYY-MM-DD\n\n# Formatting the date\nformatted_date = today.strftime('%Y-%m-%d')\nprint(formatted_date)  # Output: YYYY-MM-DD\n\n# Adding days to a date\ntomorrow = today + timedelta(days=1)\nprint(tomorrow)  # Output: YYYY-MM-DD\n</code></pre>\n\n<h4>Example 2: Timezone Handling</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">from datetime import datetime, timezone, timedelta\n\n# Creating a timezone-aware datetime object\naware_datetime = datetime.now(timezone.utc)\nprint(aware_datetime)  # Output: datetime.datetime(YYYY, MM, DD, HH, MM, SS, tzinfo=UTC)\n\n# Converting to another timezone\nlocal_datetime = aware_datetime.astimezone(timezone(timedelta(hours=5)))\nprint(local_datetime)  # Output: datetime.datetime(YYYY, MM, DD, HH, MM, SS, tzinfo=LOCAL_TIMEZONE)\n</code></pre>\n\n<h3>3. <code>array</code> Module</h3>\n<p>This module provides a way to create arrays in Python.</p>\n<h4>Example 1: Creating an Array</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">from array import array\n\n# Creating an array of integers\narr = array('i', [1, 2, 3, 4, 5])\n\n# Accessing elements in the array\nprint(arr[0])  # Output: 1\nprint(arr[1])  # Output: 2\n</code></pre>\n\n<h4>Example 2: Array Operations</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">from array import array\n\n# Creating an array of integers\narr = array('i', [1, 2, 3, 4, 5])\n\n# Appending an element to the array\narr.append(6)\n\n# Inserting an element at a specific position\narr.insert(0, 0)\n\n# Removing an element from the array\narr.remove(3)\n\n# Popping the last element from the array\nlast_element = arr.pop()\n</code></pre>\n\n<h3>4. <code>enum</code> Module</h3>\n<p>This module provides support for enumerations, which are symbolic names for a set of values.</p>\n<h4>Example 1: Creating an Enumeration</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">from enum import Enum\n\n# Creating an enumeration for colors\nclass Color(Enum):\n    RED = 1\n    GREEN = 2\n    BLUE = 3\n\n# Accessing an enumeration member\nprint(Color.RED)  # Output: Color.RED\n\n# Accessing the value of an enumeration member\nprint(Color.RED.value)  # Output: 1\n</code></pre>\n\n<h4>Example 2: Iterating Over an Enumeration</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">from enum import Enum\n\n# Creating an enumeration for colors\nclass Color(Enum):\n    RED = 1\n    GREEN = 2\n    BLUE = 3\n\n# Iterating over the members of the enumeration\nfor color in Color:\n    print(color)\n</code></pre>\n\n<p>These examples cover a range of functionalities available in the <code>collections</code>, <code>datetime</code>, <code>itertools</code>, <code>math</code>, <code>sys</code>, and <code>os</code> modules, demonstrating how to use them effectively in Python.</p>"
        },
        {
            "filename": "datetime - Basic date and time types.md",
            "content": "<h1>datetime - Basic date and time types</h1>\n<p>Here are comprehensive and well-documented code examples for the Python standard library module <code>datetime</code>, focusing on its basic date and time types.</p>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-importing-the-datetime-module\">Importing the datetime Module</a></li>\n<li><a href=\"#2-creating-a-current-date-and-time\">Creating a Current Date and Time</a></li>\n<li><a href=\"#3-formatting-dates-and-times\">Formatting Dates and Times</a></li>\n<li><a href=\"#4-creating-a-specific-date\">Creating a Specific Date</a></li>\n<li><a href=\"#5-adding-and-subtracting-time\">Adding and Subtracting Time</a></li>\n<li><a href=\"#6-parsing-strings-into-dates\">Parsing Strings into Dates</a></li>\n<li><a href=\"#7-working-with-time-zones\">Working with Time Zones</a></li>\n<li><a href=\"#8-comparing-dates-and-times\">Comparing Dates and Times</a></li>\n<li><a href=\"#9-working-with-time-periods\">Working with Time Periods</a></li>\n<li><a href=\"#10-creating-time-objects\">Creating Time Objects</a></li>\n</ol>\n<h3>1. Importing the <code>datetime</code> Module</h3>\n<p>The first step is to import the <code>datetime</code> module, which provides classes for manipulating dates and times.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Import the datetime class from the datetime module\nfrom datetime import datetime\n</code></pre>\n\n<h3>2. Creating a Current Date and Time</h3>\n<p>You can create a current date and time using the <code>now()</code> method of the <code>datetime</code> class.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Get the current date and time\ncurrent_datetime = datetime.now()\nprint(&quot;Current Date and Time:&quot;, current_datetime)\n</code></pre>\n\n<h3>3. Formatting Dates and Times</h3>\n<p>Dates and times can be formatted using various format codes, which are similar to those used by the C <code>strftime()</code> function.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Format the current date and time\nformatted_date_time = current_datetime.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;)\nprint(&quot;Formatted Date and Time:&quot;, formatted_date_time)\n</code></pre>\n\n<h3>4. Creating a Specific Date</h3>\n<p>You can create a specific date using the <code>datetime</code> class with <code>year</code>, <code>month</code>, and <code>day</code> arguments.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Create a specific date\nspecific_date = datetime(2023, 10, 5)\nprint(&quot;Specific Date:&quot;, specific_date)\n</code></pre>\n\n<h3>5. Adding and Subtracting Time</h3>\n<p>You can add or subtract time from a <code>datetime</code> object using the <code>timedelta</code> class.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Create a timedelta of one day\none_day = datetime.timedelta(days=1)\n\n# Add one day to the current date\nfuture_date = current_datetime + one_day\nprint(&quot;Future Date:&quot;, future_date)\n</code></pre>\n\n<h3>6. Parsing Strings into Dates</h3>\n<p>You can parse strings containing dates into <code>datetime</code> objects using the <code>strptime()</code> method.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Parse a string into a datetime object\nparsed_date_time = datetime.strptime(&quot;2023-10-05 14:30:00&quot;, &quot;%Y-%m-%d %H:%M:%S&quot;)\nprint(&quot;Parsed Date and Time:&quot;, parsed_date_time)\n</code></pre>\n\n<h3>7. Working with Time Zones</h3>\n<p>The <code>pytz</code> library can be used to work with time zones, but for basic usage, you can use the <code>datetime.timezone()</code> function.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from datetime import timezone\n\n# Create a timezone object for UTC\nutc_timezone = timezone.utc\n\n# Get the current date and time in UTC\nutc_datetime = datetime.now(utc_timezone)\nprint(&quot;Current Date and Time in UTC:&quot;, utc_datetime)\n</code></pre>\n\n<h3>8. Comparing Dates and Times</h3>\n<p>Dates and times can be compared using comparison operators.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Compare two dates\ndate1 = datetime(2023, 9, 5)\ndate2 = datetime(2023, 10, 5)\n\nif date1 &lt; date2:\n    print(&quot;Date1 is before Date2&quot;)\nelif date1 &gt; date2:\n    print(&quot;Date1 is after Date2&quot;)\nelse:\n    print(&quot;Date1 and Date2 are the same&quot;)\n</code></pre>\n\n<h3>9. Working with Time Periods</h3>\n<p>Time periods can be represented using <code>timedelta</code> objects.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Create a timedelta of one month\none_month = datetime.timedelta(days=30)\n\n# Add one month to the current date\nfuture_date_with_month = current_datetime + one_month\nprint(&quot;Future Date with Month:&quot;, future_date_with_month)\n</code></pre>\n\n<h3>10. Creating Time Objects</h3>\n<p>You can create time objects using the <code>time</code> module, which is part of the <code>datetime</code> module.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from datetime import time\n\n# Create a specific time\nspecific_time = time(14, 30)\nprint(&quot;Specific Time:&quot;, specific_time)\n</code></pre>\n\n<h3>Conclusion</h3>\n<p>These examples cover the basic functionalities of the <code>datetime</code> module in Python. They demonstrate how to create, manipulate, and format dates and times, as well as work with time zones and compare dates and times. These examples are suitable for both beginner and advanced users and can be used in a variety of applications involving date and time handling.</p>"
        },
        {
            "filename": "enum - Support for enumerations.md",
            "content": "<h1>enum - Support for enumerations</h1>\n<p>The <code>enum</code> module in Python provides a way to define a set of symbolic names bound to unique values. This is particularly useful for creating clear, readable code that avoids magic numbers and makes it easier to maintain.</p>\n<p>Below are some comprehensive examples demonstrating various functionalities of the <code>enum</code> module:</p>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-basic-usage-of-enum-with-auto-incremental-values\">Basic usage of Enum</a></li>\n<li><a href=\"#example-2-using-auto-incremental-values-with-a-starting-point\">Using auto-incremental values</a></li>\n<li><a href=\"#example-3-using-automatic-enumeration-values-with-a-custom-step\">Using automatic enumeration values with a custom step</a></li>\n<li><a href=\"#example-4-using-flags-to-combine-multiple-enum-members\">Using flags to combine multiple enum members</a></li>\n<li><a href=\"#example-5-using-auto-incremental-values-with-a-custom-step-and-starting-point\">Using auto-incremental values with a custom step and starting point</a></li>\n</ol>\n<pre class=\"codehilite\"><code class=\"language-python\"># Importing the enum module\nfrom enum import Enum\n\n# Example 1: Basic usage of Enum with auto-incremental values\nclass Color(Enum):\n    RED = 1\n    GREEN = 2\n    BLUE = 3\n\n# Accessing an enum member by its name or value\nprint(Color.RED)  # Output: Color.RED\nprint(Color(2))     # Output: Color.GREEN\n\n# Iterating over all members of the Enum\nfor color in Color:\n    print(color)\n\n# Example 2: Using auto-incremental values with a starting point\nclass Day(Enum):\n    MONDAY = 1\n    TUESDAY\n    WEDNESDAY\n    THURSDAY\n    FRIDAY\n    SATURDAY\n    SUNDAY\n\nprint(Day.MONDAY)  # Output: Day.MONDAY\nprint(Day.TUESDAY)  # Output: Day.TUESDAY\n# Note: The next value is automatically determined based on the previous one\n\n# Example 3: Using automatic enumeration values with a custom step\nclass Step(Enum):\n    FIRST = 0\n    SECOND = -1\n    THIRD = None\n\nprint(Step.FIRST)   # Output: Step.FIRST\nprint(Step.SECOND)  # Output: Step.SECOND\nprint(Step.THIRD)  # Output: Step.THIRD\n\n# Example 4: Using flags to combine multiple enum members\nclass Flags(Enum):\n    READ = 1\n    WRITE = 2\n    EXECUTE = 4\n\ncombined_flags = Flags.READ | Flags.WRITE | Flags.EXECUTE\nprint(combined_flags)  # Output: Flags(7)\n\n# Checking if a member is in an enum\nif Flags.WRITE in combined_flags:\n    print(&quot;WRITE flag is set&quot;)\n\n# Example 5: Using auto-incremental values with a custom step and starting point\nclass AutoIncrement(Enum):\n    ONE = 1\n    TWO\n    THREE\n    FOUR\n\nprint(AutoIncrement.ONE)  # Output: AutoIncrement.ONE\nprint(AutoIncrement.THREE)  # Output: AutoIncrement.THREE\n</code></pre>\n\n<p>The <code>enum</code> module provides a powerful way to define enumerations in Python, making code more readable and maintainable. It also offers additional functionalities like combining enum members using flags and customizing the enumeration values. By using enums, you can create clear, self-documenting code that is easier to understand and work with.</p>"
        },
        {
            "filename": "graphlib - Functionality to operate with graph-like structures.md",
            "content": "<h1>graphlib - Functionality to operate with graph-like structures</h1>\n<p>The <code>graphlib</code> module is part of Python's standard library and provides an API for working with directed graphs. While it is not as commonly used as some other graph libraries like NetworkX, it can be useful for specific use cases where you need a simple, lightweight solution.</p>\n<p>Here are comprehensive code examples demonstrating various functionalities in the <code>graphlib</code> module:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import graphlib\n\n# Example 1: Creating and manipulating a DirectedGraph\n\ndef create_and_manipulate_directed_graph():\n    &quot;&quot;&quot;\n    This example demonstrates how to create a DirectedGraph and perform basic operations.\n    &quot;&quot;&quot;\n\n    # Create a new DirectedGraph instance\n    dg = graphlib.DirectedGraph()\n\n    # Add nodes to the graph\n    dg.add_node('A')\n    dg.add_node('B')\n    dg.add_node('C')\n\n    # Add edges between nodes\n    dg.add_edge(('A', 'B'))\n    dg.add_edge(('B', 'C'))\n\n    # Print nodes and edges in the graph\n    print(&quot;Nodes:&quot;, list(dg.nodes()))\n    print(&quot;Edges:&quot;, list(dg.edges()))\n\n    # Check if a node is in the graph\n    print(&quot;Node A exists:&quot;, dg.has_node('A'))\n\n    # Check if an edge exists between two nodes\n    print(&quot;Edge (A, B) exists:&quot;, dg.has_edge(('A', 'B')))\n\n    # Remove a node and all its edges\n    dg.remove_node('B')\n    print(&quot;After removing node B:&quot;)\n    print(&quot;Nodes:&quot;, list(dg.nodes()))\n    print(&quot;Edges:&quot;, list(dg.edges()))\n\n# Example 2: Topological Sorting\n\ndef perform_topological_sort():\n    &quot;&quot;&quot;\n    This example demonstrates how to perform a topological sort on a DirectedGraph.\n    &quot;&quot;&quot;\n\n    # Create a new DirectedGraph instance\n    dg = graphlib.DirectedGraph()\n\n    # Add nodes and edges\n    dg.add_node('A')\n    dg.add_node('B')\n    dg.add_node('C')\n    dg.add_edge(('A', 'B'))\n    dg.add_edge(('B', 'C'))\n\n    # Perform topological sort\n    try:\n        sorted_nodes = list(dg.toposort())\n        print(&quot;Topological Sort:&quot;, sorted_nodes)\n    except graphlib.CycleError as e:\n        print(f&quot;Graph contains a cycle: {e}&quot;)\n\n# Example 3: Finding Strongly Connected Components\n\ndef find_strongly_connected_components():\n    &quot;&quot;&quot;\n    This example demonstrates how to find strongly connected components in a DirectedGraph.\n    &quot;&quot;&quot;\n\n    # Create a new DirectedGraph instance\n    dg = graphlib.DirectedGraph()\n\n    # Add nodes and edges\n    dg.add_node('A')\n    dg.add_node('B')\n    dg.add_node('C')\n    dg.add_edge(('A', 'B'))\n    dg.add_edge(('B', 'C'))\n    dg.add_edge(('C', 'A'))\n\n    # Find strongly connected components\n    scc = dg.strongly_connected_components()\n    print(&quot;Strongly Connected Components:&quot;, list(scc))\n\n# Run the examples\nif __name__ == &quot;__main__&quot;:\n    create_and_manipulate_directed_graph()\n    perform_topological_sort()\n    find_strongly_connected_components()\n</code></pre>\n\n<h3>Explanation:</h3>\n<ol>\n<li><strong>Creating and Manipulating a DirectedGraph:</strong></li>\n<li>We create an instance of <code>graphlib.DirectedGraph</code>.</li>\n<li>We add nodes and edges to the graph.</li>\n<li>We print nodes, edges, and check for node and edge existence.</li>\n<li>\n<p>We remove a node and verify the changes.</p>\n</li>\n<li>\n<p><strong>Topological Sorting:</strong></p>\n</li>\n<li>We perform a topological sort on a DirectedGraph that does not contain cycles.</li>\n<li>\n<p>We handle potential <code>CycleError</code> exceptions if the graph contains cycles.</p>\n</li>\n<li>\n<p><strong>Finding Strongly Connected Components:</strong></p>\n</li>\n<li>We find strongly connected components in a DirectedGraph using the <code>strongly_connected_components</code> method.</li>\n<li>This method is useful for analyzing the structure of a directed graph to identify groups of nodes where each node can reach every other node within that group.</li>\n</ol>\n<p>These examples provide a basic understanding of how to use the <code>graphlib</code> module for various graph operations. You can further explore the documentation and additional methods available in the module for more advanced use cases.</p>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-creating-and-manipulating-a-directedgraph\">Creating and manipulating a DirectedGraph</a></li>\n<li><a href=\"#example-2-topological-sorting\">Topological Sorting</a></li>\n<li><a href=\"#example-3-finding-strongly-connected-components\">Finding Strongly Connected Components</a></li>\n</ol>"
        },
        {
            "filename": "heapq - Heap queue algorithm.md",
            "content": "<h1>heapq - Heap queue algorithm</h1>\n<p>The <code>heapq</code> module in Python provides an implementation of the heap queue algorithm, also known as the priority queue algorithm. This module is optimized for speed and space efficiency, making it suitable for applications where you need to maintain a collection of elements with priorities.</p>\n<p>Below are comprehensive examples demonstrating various functionalities of the <code>heapq</code> module:</p>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-creating-a-min-heap\">Creating a Min-Heap</a></li>\n<li><a href=\"#2-creating-a-max-heap\">Creating a Max-Heap</a></li>\n<li><a href=\"#3-finding-the-n-smallest-elements\">Finding the N Smallest Elements</a></li>\n<li><a href=\"#4-priority-queue-with-time-sorted-elements\">Priority Queue with Time-Sorted Elements</a></li>\n<li><a href=\"#5-finding-the-k-closest-points-to-a-given-point\">Finding the k Closest Points to a Given Point</a></li>\n</ol>\n<h3>1. Creating a Min-Heap</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import heapq\n\n# Create an empty min-heap\nmin_heap = []\n\n# Add elements to the heap\nheapq.heappush(min_heap, 3)\nheapq.heappush(min_heap, 1)\nheapq.heappush(min_heap, 4)\n\n# Output the current state of the heap\nprint(&quot;Heap after push:&quot;, min_heap)  # Output: [1, 3, 4]\n\n# Pop the smallest element from the heap\nsmallest = heapq.heappop(min_heap)\nprint(&quot;Smallest element popped:&quot;, smallest)  # Output: 1\n\n# Push a new element and pop the next smallest element\nheapq.heappush(min_heap, 0)\nprint(&quot;Heap after push (0):&quot;, min_heap)  # Output: [0, 3, 4]\nsmallest = heapq.heappop(min_heap)\nprint(&quot;Next smallest element popped:&quot;, smallest)  # Output: 0\n</code></pre>\n\n<h3>2. Creating a Max-Heap</h3>\n<p>To use <code>heapq</code> as a max-heap, you can negate the values when pushing and popping. This is because <code>heapq</code> implements a min-heap by default.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import heapq\n\n# Create an empty max-heap\nmax_heap = []\n\n# Add elements to the heap by negating them\nheapq.heappush(max_heap, -3)\nheapq.heappush(max_heap, -1)\nheapq.heappush(max_heap, -4)\n\n# Output the current state of the heap\nprint(&quot;Heap after push (max-heap):&quot;, [-x for x in max_heap])  # Output: [3, 1, 4]\n\n# Pop the largest element from the heap\nlargest = -heapq.heappop(max_heap)\nprint(&quot;Largest element popped:&quot;, largest)  # Output: 3\n\n# Push a new element and pop the next largest element\nheapq.heappush(max_heap, -0)\nprint(&quot;Heap after push (-0):&quot;, [-x for x in max_heap])  # Output: [1, 4, 0]\nlargest = -heapq.heappop(max_heap)\nprint(&quot;Next largest element popped:&quot;, largest)  # Output: 1\n</code></pre>\n\n<h3>3. Finding the N Smallest Elements</h3>\n<p>The <code>nlargest</code> and <code>nsmallest</code> functions are used to find the N largest or smallest elements in a list.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import heapq\n\n# List of numbers\nnumbers = [7, 10, 4, 3, 20, 15]\n\n# Find the three largest numbers\nlargest_three = heapq.nlargest(3, numbers)\nprint(&quot;Three largest numbers:&quot;, largest_three)  # Output: [20, 15, 10]\n\n# Find the two smallest numbers\nsmallest_two = heapq.nsmallest(2, numbers)\nprint(&quot;Two smallest numbers:&quot;, smallest_two)  # Output: [3, 4]\n</code></pre>\n\n<h3>4. Priority Queue with Time-Sorted Elements</h3>\n<p>The <code>heapq</code> module can also be used to implement a priority queue.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import heapq\n\n# Priority queue list\npriority_queue = []\n\n# Add elements to the priority queue\nheapq.heappush(priority_queue, (10, 'a'))\nheapq.heappush(priority_queue, (20, 'b'))\nheapq.heappush(priority_queue, (5, 'c'))\n\n# Process each element in order of their priority\nwhile priority_queue:\n    priority, item = heapq.heappop(priority_queue)\n    print(f&quot;Processed {item} with priority {priority}&quot;)\n</code></pre>\n\n<h3>5. Finding the k Closest Points to a Given Point</h3>\n<p>This example demonstrates how to use <code>heapq</code> to find the k closest points to a given point in a list of points.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import heapq\n\n# List of points (x, y)\npoints = [(3, 4), (1, 2), (1, -1), (-2, 0)]\n\n# Given point (x0, y0)\ngiven_point = (0, 0)\n\n# Find the k closest points to the given point\nk = 2\nclosest_points = heapq.nsmallest(k, points, key=lambda p: (p[0] ** 2 + p[1] ** 2))\nprint(&quot;K closest points:&quot;, closest_points)  # Output: [(1, -1), (3, 4)]\n</code></pre>\n\n<h3>Conclusion</h3>\n<p>The <code>heapq</code> module provides a efficient and flexible way to manage heaps in Python. Whether you need to maintain a min-heap, max-heap, or perform operations like finding the N largest/smallest elements, this module offers the tools to do so with ease.</p>"
        },
        {
            "filename": "pprint - Data pretty printer.md",
            "content": "<h1>pprint - Data pretty printer</h1>\n<p>Below are comprehensive code examples for using the <code>pprint</code> module in Python, along with detailed explanations of each example.</p>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-basic-usage\">Basic Usage</a></li>\n<li><a href=\"#example-2-customizing-output\">Customizing Output</a></li>\n<li><a href=\"#example-3-handling-large-data-structures\">Handling Large Data Structures</a></li>\n<li><a href=\"#example-4-using-prettyprinter-for-files\">Using PrettyPrinter for Files</a></li>\n<li><a href=\"#example-5-pretty-printing-json-like-structures\">Pretty Printing JSON-like Structures</a></li>\n</ol>\n<h3>Example 1: Basic Usage</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import pprint\n\n# Define a sample data structure\ndata = {\n    'name': 'John Doe',\n    'age': 30,\n    'is_student': False,\n    'courses': ['Math', 'Science', 'English'],\n    'address': {\n        'street': '123 Main St',\n        'city': 'Anytown',\n        'state': 'CA',\n        'zip': '12345'\n    }\n}\n\n# Use pprint.pprint() to pretty-print the data\npprint.pprint(data)\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- The <code>pprint</code> module provides a way to print complex data structures in a readable format.\n- The <code>pprint.pprint()</code> function takes an object and prints it with indentation, making it easier to read.</p>\n<h3>Example 2: Customizing Output</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import pprint\n\n# Define a sample data structure\ndata = {\n    'name': 'Jane Smith',\n    'age': 35,\n    'is_student': True,\n    'courses': ['Biology', 'Chemistry'],\n    'address': {\n        'street': '456 Elm St',\n        'city': 'Othertown',\n        'state': 'NY',\n        'zip': '67890'\n    }\n}\n\n# Create a PrettyPrinter instance with custom settings\npp = pprint.PrettyPrinter(indent=2, width=50)\n\n# Use the custom PrettyPrinter to print the data\npp.pprint(data)\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- The <code>PrettyPrinter</code> class allows for more customization of the output.\n- You can specify the number of spaces per indentation level with the <code>indent</code> parameter.\n- The maximum line length is controlled by the <code>width</code> parameter.</p>\n<h3>Example 3: Handling Large Data Structures</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import pprint\n\n# Define a large sample data structure\ndata = {\n    'employees': [\n        {'name': 'Alice Johnson', 'department': 'Sales'},\n        {'name': 'Bob Brown', 'department': 'Marketing'},\n        {'name': 'Charlie Smith', 'department': 'IT'}\n    ],\n    'orders': [\n        {'order_id': 101, 'amount': 29.99},\n        {'order_id': 102, 'amount': 45.75},\n        {'order_id': 103, 'amount': 69.49}\n    ]\n}\n\n# Use pprint.pprint() to pretty-print the large data structure\npprint.pprint(data)\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- The <code>pprint</code> module is particularly useful for handling large or complex data structures.\n- It automatically breaks lines and adjusts the indentation to fit within a specified width, which can be helpful when dealing with extensive data.</p>\n<h3>Example 4: Using PrettyPrinter for Files</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import pprint\n\n# Define a sample data structure\ndata = {\n    'name': 'David Wilson',\n    'age': 28,\n    'is_student': False,\n    'courses': ['History', 'Literature'],\n    'address': {\n        'street': '789 Oak St',\n        'city': 'Somewhere',\n        'state': 'TX',\n        'zip': '56789'\n    }\n}\n\n# Open a file for writing and use PrettyPrinter to write the data\nwith open('data.txt', 'w') as file:\n    pp = pprint.PrettyPrinter(indent=2)\n    pp.pprint(data, stream=file)\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- You can also use the <code>PrettyPrinter</code> instance to print to a file instead of the console.\n- The <code>stream</code> parameter is used to specify where the output should be written.</p>\n<h3>Example 5: Pretty Printing JSON-like Structures</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import pprint\nimport json\n\n# Define a sample data structure\ndata = {\n    'name': 'Eve Johnson',\n    'age': 22,\n    'is_student': True,\n    'courses': ['Physics', 'Astrophysics'],\n    'address': {\n        'street': '101 Pine St',\n        'city': 'Somewhere Else',\n        'state': 'FL',\n        'zip': '43210'\n    }\n}\n\n# Convert the data structure to a JSON string\njson_data = json.dumps(data, indent=2)\n\n# Use pprint.pprint() to pretty-print the JSON-like structure\npprint.pprint(json_data)\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- The <code>json</code> module can be used to convert data structures into JSON format.\n- You can then use the <code>pprint</code> module to print this JSON string in a readable format.</p>\n<p>These examples demonstrate various ways to use the <code>pprint</code> module, from basic usage to more complex scenarios. By following these examples, you can effectively leverage the <code>pprint</code> module to enhance the readability of your data structures in Python.</p>"
        },
        {
            "filename": "reprlib - Alternate repr() implementation.md",
            "content": "<h1>reprlib - Alternate repr() implementation</h1>\n<p>The <code>reprlib</code> module provides a function called <code>repr()</code> that is similar to Python's built-in <code>repr()</code> function but with some additional features, particularly when dealing with large or complex objects. It can help reduce memory usage by returning an abbreviated version of the string representation of an object when it would otherwise be very verbose.</p>\n<p>Here are some examples demonstrating how to use the <code>reprlib</code> module:</p>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-abbreviating-large-strings\">Abbreviating Large Strings</a></li>\n<li><a href=\"#2-abbreviating-lists-with-many-elements\">Abbreviating Lists with Many Elements</a></li>\n<li><a href=\"#3-abbreviating-sets-with-many-elements\">Abbreviating Sets with Many Elements</a></li>\n<li><a href=\"#4-abbreviating-dictionaries-with-many-key-value-pairs\">Abbreviating Dictionaries with Many Key-Value Pairs</a></li>\n<li>\n<p><a href=\"#5-using-reprlibrepr-in-custom-classes\">Using reprlib.repr() in Custom Classes</a></p>\n</li>\n<li>\n<p><strong>Abbreviating Large Strings</strong>:\n   When working with strings that are too long to display in a single line, <code>reprlib.repr()</code> can return an abbreviated version by truncating the string and adding ellipses (<code>...</code>) at the end.</p>\n</li>\n</ol>\n<p>```python\n   import reprlib</p>\n<p># Example of an extremely long string\n   long_string = 'a' * 1000\n   print(repr(long_string))  # Output: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa...'\n   ```</p>\n<ol>\n<li><strong>Abbreviating Lists with Many Elements</strong>:\n   When dealing with lists that contain many elements, <code>reprlib.repr()</code> can return an abbreviated version by showing only the first few and last few elements.</li>\n</ol>\n<p>```python\n   import reprlib</p>\n<p># Example of a list with a large number of elements\n   long_list = [str(i) for i in range(1000)]\n   print(repr(long_list))  # Output: [\"0\", \"1\", ..., \"997\", \"...\", \"998\", \"999\"]\n   ```</p>\n<ol>\n<li><strong>Abbreviating Sets with Many Elements</strong>:\n   Similar to lists, <code>reprlib.repr()</code> can abbreviate sets by showing only a few elements and the ellipsis.</li>\n</ol>\n<p>```python\n   import reprlib</p>\n<p># Example of a set with many elements\n   long_set = {i for i in range(1000)}\n   print(repr(long_set))  # Output: {0, 1, ..., 997, ..., 998, 999}\n   ```</p>\n<ol>\n<li><strong>Abbreviating Dictionaries with Many Key-Value Pairs</strong>:\n   When dealing with dictionaries with many key-value pairs, <code>reprlib.repr()</code> can show only a few elements and the ellipsis.</li>\n</ol>\n<p>```python\n   import reprlib</p>\n<p># Example of a dictionary with many key-value pairs\n   long_dict = {f'key{i}': f'value{i}' for i in range(1000)}\n   print(repr(long_dict))  # Output: {'key0': 'value0', ..., 'key997': 'value997', ..., 'key998': 'value998', 'key999': 'value999'}\n   ```</p>\n<ol>\n<li><strong>Using reprlib.repr() in Custom Classes</strong>:\n   You can also use <code>reprlib.repr()</code> within your own custom classes to control the string representation.</li>\n</ol>\n<p>```python\n   import reprlib</p>\n<p>class MyClass:\n       def <strong>init</strong>(self, data):\n           self.data = data</p>\n<pre class=\"codehilite\"><code>   def __repr__(self):\n       return reprlib.repr(self.data)\n</code></pre>\n\n<p># Example of a custom class with a large dataset\n   obj = MyClass('a' * 1000)\n   print(obj)  # Output: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa...'\n   ```</p>\n<p>These examples demonstrate how <code>reprlib.repr()</code> can help manage and display the string representations of complex objects in Python, reducing memory usage and improving readability.</p>"
        },
        {
            "filename": "struct - Interpret bytes as packed binary data.md",
            "content": "<h1>struct - Interpret bytes as packed binary data</h1>\n<p>The <code>struct</code> module in Python provides support for interpreting strings of bytes as packed binary data. It allows you to convert between binary data and native Python data types such as integers, floating-point numbers, and characters. Here are some comprehensive examples demonstrating various functionalities of the <code>struct</code> module:</p>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-packing-binary-data\">Packing Binary Data</a></li>\n<li><a href=\"#example-2-unpacking-binary-data\">Unpacking Binary Data</a></li>\n<li><a href=\"#example-3-packing-and-unpacking-with-different-endianness\">Packing and Unpacking with Different Endianness</a></li>\n<li><a href=\"#example-4-using-structcalcsize-to-determine-the-size-of-a-format-string\">Using <code>struct.calcsize</code> to Determine the Size of a Format String</a></li>\n<li><a href=\"#example-5-handling-variable-length-packed-data\">Handling Variable-Length Packed Data</a></li>\n<li><a href=\"#example-6-handling-special-characters-and-strings\">Handling Special Characters and Strings</a></li>\n<li><a href=\"#example-7-handling-non-ascii-characters\">Handling Non-ASCII Characters</a></li>\n<li><a href=\"#example-8-handling-variable-length-strings\">Handling Variable-Length Strings</a></li>\n<li><a href=\"#example-9-handling-variable-length-packed-data-with-a-fixed-length-prefix\">Handling Variable-Length Packed Data with a Fixed Length Prefix</a></li>\n</ol>\n<h3>Example 1: Packing Binary Data</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import struct\n\n# Pack an integer into bytes\nint_value = 42\npacked_int = struct.pack('&gt;I', int_value)\nprint(f&quot;Packed integer (big-endian): {packed_int}&quot;)\n\n# Pack a float into bytes\nfloat_value = 3.14\npacked_float = struct.pack('&gt;f', float_value)\nprint(f&quot;Packed float (big-endian): {packed_float}&quot;)\n</code></pre>\n\n<h3>Example 2: Unpacking Binary Data</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import struct\n\n# Unpack binary data back to an integer\npacked_int = b'\\x00\\x00\\x00\\x46'\nunpacked_int, consumed_bytes = struct.unpack('&gt;I', packed_int)\nprint(f&quot;Unpacked integer (big-endian): {unpacked_int}&quot;)\nprint(f&quot;Number of bytes consumed: {consumed_bytes}&quot;)\n\n# Unpack binary data back to a float\npacked_float = b'\\x00\\x00\\x80\\x40'\nunpacked_float, consumed_bytes = struct.unpack('&gt;f', packed_float)\nprint(f&quot;Unpacked float (big-endian): {unpacked_float}&quot;)\nprint(f&quot;Number of bytes consumed: {consumed_bytes}&quot;)\n</code></pre>\n\n<h3>Example 3: Packing and Unpacking with Different Endianness</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import struct\n\n# Pack an integer into big-endian bytes\nint_value = 42\npacked_int_big_endian = struct.pack('&gt;I', int_value)\nprint(f&quot;Packed integer (big-endian): {packed_int_big_endian}&quot;)\n\n# Pack an integer into little-endian bytes\npacked_int_little_endian = struct.pack('&lt;I', int_value)\nprint(f&quot;Packed integer (little-endian): {packed_int_little_endian}&quot;)\n\n# Unpack big-endian packed data back to an integer\nunpacked_int_from_big_endian, consumed_bytes = struct.unpack('&gt;I', packed_int_big_endian)\nprint(f&quot;Unpacked integer from big-endian: {unpacked_int_from_big_endian}&quot;)\nprint(f&quot;Number of bytes consumed: {consumed_bytes}&quot;)\n\n# Unpack little-endian packed data back to an integer\nunpacked_int_from_little_endian, consumed_bytes = struct.unpack('&lt;I', packed_int_little_endian)\nprint(f&quot;Unpacked integer from little-endian: {unpacked_int_from_little_endian}&quot;)\nprint(f&quot;Number of bytes consumed: {consumed_bytes}&quot;)\n</code></pre>\n\n<h3>Example 4: Using <code>struct.calcsize</code> to Determine the Size of a Format String</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import struct\n\n# Define a format string\nformat_string = '&gt;I'\n\n# Calculate the size of the packed data based on the format string\nsize = struct.calcsize(format_string)\nprint(f&quot;Size of the packed data in bytes: {size}&quot;)\n</code></pre>\n\n<h3>Example 5: Handling Variable-Length Packed Data</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import struct\n\n# Pack a variable-length list of integers into bytes\nint_values = [1, 2, 3, 4, 5]\npacked_ints = b''.join(struct.pack('&gt;I', value) for value in int_values)\nprint(f&quot;Packed list of integers (big-endian): {packed_ints}&quot;)\n\n# Unpack the packed data back to a list of integers\nunpacked_ints, consumed_bytes = struct.unpack('&gt;' + 'I' * len(int_values), packed_ints)\nprint(f&quot;Unpacked list of integers: {unpacked_ints}&quot;)\n</code></pre>\n\n<h3>Example 6: Handling Special Characters and Strings</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import struct\n\n# Pack a string into bytes using ASCII encoding\nstring_value = &quot;Hello, World!&quot;\npacked_string = struct.pack('13s', string_value.encode('ascii'))\nprint(f&quot;Packed string (using ASCII): {packed_string}&quot;)\n\n# Unpack the packed string back to a Python string\nunpacked_string, consumed_bytes = struct.unpack('13s', packed_string)\nprint(f&quot;Unpacked string: {unpacked_string.decode('ascii')}&quot;)\n</code></pre>\n\n<h3>Example 7: Handling Non-ASCII Characters</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import struct\n\n# Pack a string into bytes using UTF-8 encoding\nstring_value = &quot;Hello, World!&quot;\npacked_string_utf8 = struct.pack('&gt;32s', string_value.encode('utf-8'))\nprint(f&quot;Packed string (using UTF-8): {packed_string_utf8}&quot;)\n\n# Unpack the packed string back to a Python string\nunpacked_string_utf8, consumed_bytes = struct.unpack('&gt;32s', packed_string_utf8)\nprint(f&quot;Unpacked string: {unpacked_string_utf8.decode('utf-8')}&quot;)\n</code></pre>\n\n<h3>Example 8: Handling Variable-Length Strings</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import struct\n\n# Pack a list of variable-length strings into bytes using ASCII encoding\nstring_values = [&quot;Hello&quot;, &quot;World&quot;, &quot;!&quot;]\npacked_strings = b''.join(struct.pack('32s', value.encode('ascii')) for value in string_values)\nprint(f&quot;Packed list of strings (using ASCII): {packed_strings}&quot;)\n\n# Unpack the packed strings back to a list of Python strings\nunpacked_strings, consumed_bytes = struct.unpack('&gt;I' + '32s' * len(string_values), packed_strings)\nunpacked_strings = [value.decode('ascii') for value in unpacked_strings[1:]]\nprint(f&quot;Unpacked list of strings: {unpacked_strings}&quot;)\n</code></pre>\n\n<h3>Example 9: Handling Variable-Length Packed Data with a Fixed Length Prefix</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import struct\n\n# Pack a variable-length list of integers into bytes, prefixed by the count\nint_values = [1, 2, 3, 4, 5]\ncount = len(int_values)\npacked_ints_with_count = struct.pack('&gt;I' + 'I' * count, count) + b''.join(struct.pack('&gt;I', value) for value in int_values)\nprint(f&quot;Packed list of integers with count (big-endian): {packed_ints_with_count}&quot;)\n\n# Unpack the packed data back to a list of integers\nunpacked_count = struct.unpack('&gt;I', packed_ints_with_count[:4])[0]\nunpacked_ints, consumed_bytes = struct.unpack('&gt;' + 'I' * unpacked_count, packed_ints_with_count[4:])\nprint(f&quot;Unpacked count: {unpacked_count}&quot;)\nprint(f&quot;Unpacked list of integers: {unpacked_ints}&quot;)\n</code></pre>\n\n<p>These examples cover various scenarios involving the <code>struct</code> module, from basic integer and float packing to more complex cases such as variable-length lists and strings. Each example includes comments explaining key aspects, making it easy to understand and use in real-world applications.</p>"
        },
        {
            "filename": "types - Dynamic type creation and names for built-in types.md",
            "content": "<h1>types - Dynamic type creation and names for built-in types</h1>\n<p>The <code>types</code> module in Python provides a way to create new types dynamically using the <code>types.ModuleType</code>, <code>types.FunctionType</code>, <code>types.BuiltinFunctionType</code>, and other classes. This is useful for extending the language or creating custom data structures with specific behaviors.</p>\n<p>Below are comprehensive code examples for various functionalities provided by the <code>types</code> module:</p>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-creating-a-custom-module\">Creating a Custom Module</a></li>\n<li><a href=\"#2-creating-a-custom-function\">Creating a Custom Function</a></li>\n<li><a href=\"#3-creating-a-custom-builtin-function\">Creating a Custom Builtin Function</a></li>\n<li><a href=\"#4-creating-a-custom-class\">Creating a Custom Class</a></li>\n<li><a href=\"#5-creating-a-custom-exception\">Creating a Custom Exception</a></li>\n<li><a href=\"#6-creating-a-custom-method-type\">Creating a Custom Method Type</a></li>\n<li><a href=\"#7-creating-a-custom-type-with-slots\">Creating a Custom Type with Slots</a></li>\n<li><a href=\"#8-creating-a-custom-type-with-new\">Creating a Custom Type with New</a></li>\n</ol>\n<h3>1. Creating a Custom Module</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import types\n\n# Create a new module dynamically\nnew_module = types.ModuleType(&quot;my_custom_module&quot;)\n\n# Add attributes to the module\nnew_module.my_variable = &quot;Hello, World!&quot;\nnew_module.my_function = lambda x: f&quot;Value is {x}&quot;\n\n# Accessing module attributes\nprint(new_module.my_variable)  # Output: Hello, World!\nprint(new_module.my_function(42))  # Output: Value is 42\n\n# You can also import the module as if it were a regular Python file\nimport my_custom_module\nprint(my_custom_module.my_variable)  # Output: Hello, World!\nprint(my_custom_module.my_function(42))  # Output: Value is 42\n</code></pre>\n\n<h3>2. Creating a Custom Function</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import types\n\n# Define a custom function using the FunctionType\ndef custom_function(x):\n    return x * 2\n\n# Create an instance of FunctionType with specified arguments and defaults\ncustom_func_instance = types.FunctionType(\n    func=custom_function,\n    args=(&quot;x&quot;,),\n    dargs=(10,),\n    kwonlydargs=tuple(),\n    kws=(&quot;y&quot;,),\n    defaults=(5,),\n    closure=None\n)\n\n# Call the custom function\nprint(custom_func_instance(3))  # Output: 20 (10 * 3)\nprint(custom_func_instance(y=6, x=7))  # Output: 49 (7 * 6 + 5)\n</code></pre>\n\n<h3>3. Creating a Custom Builtin Function</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import types\n\n# Define a custom built-in function using the BuiltinFunctionType\ndef custom_builtin_function(x):\n    return x ** 2\n\n# Create an instance of BuiltinFunctionType with specified arguments and defaults\ncustom_builtin_func_instance = types.BuiltinFunctionType(\n    func=custom_builtin_function,\n    args=(&quot;x&quot;,),\n    dargs=(5,),\n    kwonlydargs=tuple(),\n    kws=(&quot;y&quot;,),\n    defaults=(3,),\n    closure=None\n)\n\n# Call the custom built-in function\nprint(custom_builtin_func_instance(2))  # Output: 4 (2 ** 2)\nprint(custom_builtin_func_instance(y=3, x=4))  # Output: 16 (4 ** 3 + 3)\n</code></pre>\n\n<h3>4. Creating a Custom Class</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import types\n\n# Define a custom class using the type() function\nclass MyCustomClass:\n    def __init__(self, value):\n        self.value = value\n\n# Create an instance of MyCustomClass\nmy_instance = MyCustomClass(10)\n\n# Accessing the attribute of the custom class\nprint(my_instance.value)  # Output: 10\n\n# You can also define methods for the class dynamically\nMyCustomClass.my_method = types.MethodType(lambda self: f&quot;My value is {self.value}&quot;, MyCustomClass)\n\nprint(my_instance.my_method())  # Output: My value is 10\n</code></pre>\n\n<h3>5. Creating a Custom Exception</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import types\n\n# Define a custom exception using the type() function\nclass MyCustomError(Exception):\n    pass\n\n# Create an instance of MyCustomError\ntry:\n    raise MyCustomError(&quot;This is a custom error&quot;)\nexcept MyCustomError as e:\n    print(e)  # Output: This is a custom error\n</code></pre>\n\n<h3>6. Creating a Custom Method Type</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import types\n\n# Define a custom method using the MethodType function\ndef my_method(self):\n    return f&quot;Hello from {self.__class__.__name__}&quot;\n\n# Create an instance of MethodType for MyCustomClass\nMyCustomClass.my_method = types.MethodType(my_method, MyCustomClass)\n\nmy_instance = MyCustomClass()\nprint(my_instance.my_method())  # Output: Hello from MyCustomClass\n</code></pre>\n\n<h3>7. Creating a Custom Type with Slots</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import types\n\n# Define a custom type with slots using the type() function\nMyCustomType = types.new_class(\n    &quot;MyCustomType&quot;,\n    bases=(object,),\n    exec_body=lambda cls, locals: locals.update({\n        &quot;__slots__&quot;: (&quot;value&quot;,)\n    })\n)\n\n# Create an instance of MyCustomType\nmy_instance = MyCustomType()\nmy_instance.value = 20\n\nprint(my_instance.value)  # Output: 20\n\n# Accessing the attribute directly without slots is not allowed\ntry:\n    my_instance.non_slot_attribute = 30\nexcept AttributeError as e:\n    print(e)  # Output: 'MyCustomType' object has no attribute 'non_slot_attribute'\n</code></pre>\n\n<h3>8. Creating a Custom Type with New</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import types\n\n# Define a custom type using the new() function\nclass MyCustomClass:\n    def __init__(self, value):\n        self.value = value\n\n# Create an instance of MyCustomClass\nmy_instance = MyCustomClass(10)\n\n# Accessing the attribute of the custom class\nprint(my_instance.value)  # Output: 10\n\n# You can also define methods for the class dynamically\nMyCustomClass.my_method = types.MethodType(lambda self: f&quot;My value is {self.value}&quot;, MyCustomClass)\n\nprint(my_instance.my_method())  # Output: My value is 10\n</code></pre>\n\n<p>These examples demonstrate how to use various classes and functions in the <code>types</code> module to create dynamic types, functions, methods, classes, exceptions, and more. Each example includes comments explaining the purpose of each step and the expected output.</p>"
        },
        {
            "filename": "weakref - Weak references.md",
            "content": "<h1>weakref - Weak references</h1>\n<p>Below is a comprehensive set of code examples demonstrating various functionalities provided by the <code>weakref</code> module in Python 3.12. Each example includes comments explaining each step to help clarify its purpose and usage.</p>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-creating-a-weak-reference-to-an-object\">Creating a Weak Reference to an Object</a></li>\n<li><a href=\"#example-2-using-a-weak-reference-as-a-dictionary-key\">Using a Weak Reference as a Dictionary Key</a></li>\n<li><a href=\"#example-3-handling-reference-cycles\">Handling Reference Cycles</a></li>\n<li><a href=\"#example-4-using-proxy-to-create-a-proxy-object\">Using <code>proxy</code> to create a proxy object</a></li>\n<li><a href=\"#example-5-using-proxy-to-create-a-context-manager\">Using <code>proxy</code> to create a context manager</a></li>\n<li><a href=\"#example-6-using-proxy-to-manage-weak-references\">Using <code>proxy</code> to manage weak references</a></li>\n<li><a href=\"#example-7-using-proxy-to-manage-weak-references-with-custom-methods\">Using <code>proxy</code> to manage weak references with custom methods</a></li>\n<li><a href=\"#example-8-using-proxy-to-manage-weak-references-with-custom-attributes\">Using <code>proxy</code> to manage weak references with custom attributes</a></li>\n<li><a href=\"#example-9-using-proxy-to-manage-weak-references-with-custom-functions\">Using <code>proxy</code> to manage weak references with custom functions</a></li>\n<li><a href=\"#example-10-using-proxy-to-manage-weak-references-with-custom-methods-and-attributes\">Using <code>proxy</code> to manage weak references with custom methods and attributes</a></li>\n</ol>\n<pre class=\"codehilite\"><code class=\"language-python\">import weakref\n\n# Example 1: Creating a Weak Reference to an Object\nclass MyClass:\n    def __init__(self, value):\n        self.value = value\n\n# Create an instance of MyClass\nobj = MyClass(42)\n\n# Create a weak reference to obj\nweak_obj = weakref.ref(obj)\n\n# Access the original object using the weak reference\nprint(weak_obj())  # Output: 42\n\n# Delete the original object to demonstrate that the weak reference can access it\ndel obj\n\n# The original object is no longer accessible through the weak reference\ntry:\n    print(weak_obj())\nexcept ReferenceError as e:\n    print(f&quot;ReferenceError: {e}&quot;)  # Output: ReferenceError: &lt;__main__.MyClass object at 0x...&gt;\n\n# Example 2: Using a Weak Reference as a Dictionary Key\nmy_dict = weakref.WeakValueDictionary()\nkey_ref = weakref.ref(obj)\nvalue_ref = weakref.ref(MyClass(10))\n\nmy_dict[key_ref] = value_ref\n\nprint(my_dict)  # Output: {&lt;weakproxy at 0x...&gt;: &lt;weakproxy at 0x...&gt;}\n\n# Delete the original object to demonstrate that it is removed from the dictionary\ndel obj\n\n# The entry for the deleted object is now None in the dictionary\nprint(my_dict)  # Output: {}\n\n# Example 3: Handling Reference Cycles\nclass CycleA:\n    def __init__(self, b):\n        self.b = b\n\nclass CycleB:\n    def __init__(self, a):\n        self.a = a\n\na = CycleA(b=CycleB(a=a))\nb = CycleB(a=a)\n\n# Attempt to delete the objects manually to break the reference cycle\ndel a\ndel b\n\n# The weak references should be cleaned up by Python's garbage collector\nprint(weakref.getweakrefs(CycleA))  # Output: []\nprint(weakref.getweakrefs(CycleB))  # Output: []\n\n# Example 4: Using `proxy` to create a proxy object\nclass ProxyObject:\n    def __init__(self, target):\n        self.target = target\n\n    def __getattr__(self, attr):\n        return getattr(self.target(), attr)\n\nobj_proxy = weakref.proxy(obj)\nprint(obj_proxy.value)  # Output: 42\n\n# Delete the original object to demonstrate that it is not accessible through the proxy\ndel obj\n\ntry:\n    print(obj_proxy.value)\nexcept ReferenceError as e:\n    print(f&quot;ReferenceError: {e}&quot;)  # Output: ReferenceError: &lt;__main__.MyClass object at 0x...&gt;\n\n# Example 5: Using `proxy` to create a context manager\nclass ManagedResource:\n    def __init__(self, resource):\n        self.resource = resource\n\n    def __enter__(self):\n        print(f&quot;Entering {self.resource}&quot;)\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        print(f&quot;Exiting {self.resource}&quot;)\n\nresource = ManagedResource(&quot;some resource&quot;)\nwith weakref.proxy(resource) as proxied_resource:\n    # Use the proxied resource in a context\n    print(proxied_resource)\n\n# Example 6: Using `proxy` to manage weak references\nclass WeakProxyManager:\n    def __init__(self, obj):\n        self.obj = obj\n\n    def use(self):\n        print(f&quot;Using {self.obj}&quot;)\n\nobj_manager = WeakProxyManager(obj)\nproxied_manager = weakref.proxy(obj_manager)\n\nproxied_manager.use()  # Output: Using &lt;weakproxy at 0x...&gt;\n\n# Delete the original object to demonstrate that it is no longer accessible through the proxy\ndel obj\n\ntry:\n    proxied_manager.use()\nexcept ReferenceError as e:\n    print(f&quot;ReferenceError: {e}&quot;)  # Output: ReferenceError: &lt;__main__.MyClass object at 0x...&gt;\n\n# Example 7: Using `proxy` to manage weak references with custom methods\nclass CustomProxyManager:\n    def __init__(self, obj):\n        self.obj = obj\n\n    def perform_action(self):\n        print(f&quot;Performing action on {self.obj}&quot;)\n\nobj_manager = CustomProxyManager(obj)\nproxied_manager = weakref.proxy(obj_manager)\n\nproxied_manager.perform_action()  # Output: Performing action on &lt;weakproxy at 0x...&gt;\n\n# Delete the original object to demonstrate that it is no longer accessible through the proxy\ndel obj\n\ntry:\n    proxied_manager.perform_action()\nexcept ReferenceError as e:\n    print(f&quot;ReferenceError: {e}&quot;)  # Output: ReferenceError: &lt;__main__.MyClass object at 0x...&gt;\n\n# Example 8: Using `proxy` to manage weak references with custom attributes\nclass AttributeProxyManager:\n    def __init__(self, obj):\n        self.obj = obj\n\n    @property\n    def status(self):\n        return &quot;Active&quot;\n\nobj_manager = AttributeProxyManager(obj)\nproxied_manager = weakref.proxy(obj_manager)\n\nprint(proxied_manager.status)  # Output: Active\n\n# Delete the original object to demonstrate that it is no longer accessible through the proxy\ndel obj\n\ntry:\n    print(proxied_manager.status)\nexcept ReferenceError as e:\n    print(f&quot;ReferenceError: {e}&quot;)  # Output: ReferenceError: &lt;__main__.MyClass object at 0x...&gt;\n\n# Example 9: Using `proxy` to manage weak references with custom functions\nclass FunctionProxyManager:\n    def __init__(self, obj):\n        self.obj = obj\n\n    def do_something(self):\n        print(f&quot;Doing something with {self.obj}&quot;)\n\nobj_manager = FunctionProxyManager(obj)\nproxied_manager = weakref.proxy(obj_manager)\n\nproxied_manager.do_something()  # Output: Doing something with &lt;weakproxy at 0x...&gt;\n\n# Delete the original object to demonstrate that it is no longer accessible through the proxy\ndel obj\n\ntry:\n    proxied_manager.do_something()\nexcept ReferenceError as e:\n    print(f&quot;ReferenceError: {e}&quot;)  # Output: ReferenceError: &lt;__main__.MyClass object at 0x...&gt;\n\n# Example 10: Using `proxy` to manage weak references with custom methods and attributes\nclass MixedProxyManager:\n    def __init__(self, obj):\n        self.obj = obj\n\n    def do_something(self):\n        print(f&quot;Doing something with {self.obj}&quot;)\n\n    @property\n    def status(self):\n        return &quot;Active&quot;\n\nobj_manager = MixedProxyManager(obj)\nproxied_manager = weakref.proxy(obj_manager)\n\nproxied_manager.do_something()  # Output: Doing something with &lt;weakproxy at 0x...&gt;\nprint(proxied_manager.status)  # Output: Active\n\n# Delete the original object to demonstrate that it is no longer accessible through the proxy\ndel obj\n\ntry:\n    proxied_manager.do_something()\n    print(proxied_manager.status)\nexcept ReferenceError as e:\n    print(f&quot;ReferenceError: {e}&quot;)  # Output: ReferenceError: &lt;__main__.MyClass object at 0x...&gt;\n</code></pre>\n\n<h3>Key Points:</h3>\n<ul>\n<li><strong>Weak References</strong>: A weak reference to an object does not prevent the garbage collector from reclaiming the memory of the object if there are no other references to it.</li>\n<li><strong><code>proxy</code> Function</strong>: This function allows you to create a proxy object that behaves like a normal object but calls methods on the underlying object through a weak reference.</li>\n<li><strong>Context Managers</strong>: The <code>with</code> statement can be used with weak references to ensure that resources are properly managed and cleaned up even if the original object is deleted.</li>\n<li><strong>Custom Methods and Attributes</strong>: You can integrate weak references with custom methods, attributes, and functions to create more dynamic proxy behaviors.</li>\n</ul>\n<p>These examples should provide a solid understanding of how to use the <code>weakref</code> module effectively in Python.</p>"
        },
        {
            "filename": "zoneinfo - IANA time zone support.md",
            "content": "<h1>zoneinfo - IANA time zone support</h1>\n<p>The <code>zoneinfo</code> module in Python is part of the standard library and provides classes for representing and manipulating timezone information according to the International Organization for Standardization (ISO) 8601 standard. This module allows you to work with time zones in a way that's both efficient and flexible.</p>\n<p>Here are comprehensive examples demonstrating various functionalities of the <code>zoneinfo</code> module:</p>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-getting-time-zone-information\">Getting Time Zone Information</a></li>\n<li><a href=\"#example-2-iterating-over-time-zones\">Iterating Over Time Zones</a></li>\n<li><a href=\"#example-3-handling-time-zone-differences\">Handling Time Zone Differences</a></li>\n<li><a href=\"#example-4-using-zone-info-objects\">Using Zone Info Objects</a></li>\n<li><a href=\"#example-5-handling-time-zones-in-a-web-application\">Handling Time Zones in a Web Application</a></li>\n<li><a href=\"#example-6-using-zone-info-in-a-command-line-tool\">Using Zone Info in a Command Line Tool</a></li>\n<li><a href=\"#example-7-handling-time-zones-with-pytz-for-compatibility\">Handling Time Zones with <code>pytz</code> for Compatibility</a></li>\n</ol>\n<h3>Example 1: Getting Time Zone Information</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import zoneinfo\n\n# Get a specific timezone\ntimezone = zoneinfo.ZoneInfo(&quot;America/New_York&quot;)\n\n# Print the time zone name\nprint(timezone)  # Output: America/New_York\n\n# Convert a naive datetime to a localized datetime\nfrom datetime import datetime, timedelta\n\nnaive_datetime = datetime.now()\nlocalized_datetime = naive_datetime.astimezone(timezone)\nprint(localized_datetime)  # Output: datetime.datetime(2023, 10, 15, 14, 30, tzinfo=zoneinfo.ZoneInfo('America/New_York'))\n\n# Get the offset from UTC\noffset = timezone.utcoffset(localized_datetime)\nprint(offset)  # Output: timedelta(hours=-4)\n\n# Get the daylight saving time status\ndaylight_savings_time = timezone.dst(localized_datetime)\nprint(daylight_savings_time)  # Output: None\n</code></pre>\n\n<h3>Example 2: Iterating Over Time Zones</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import zoneinfo\n\n# Iterate over all available time zones\nfor tz in zoneinfo.available_timezones():\n    print(tz)  # Print the name of each timezone\n\n# Get a specific time zone by its ID and use it to localize a datetime\ntimezone = zoneinfo.ZoneInfo(&quot;Asia/Tokyo&quot;)\nlocalized_datetime = datetime.now(timezone)\nprint(localized_datetime)  # Output: datetime.datetime(2023, 10, 15, 14, 30, tzinfo=zoneinfo.ZoneInfo('Asia/Tokyo'))\n</code></pre>\n\n<h3>Example 3: Handling Time Zone Differences</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import zoneinfo\n\n# Define two time zones\ntimezone_utc = zoneinfo.ZoneInfo(&quot;UTC&quot;)\ntimezone_eastern = zoneinfo.ZoneInfo(&quot;America/New_York&quot;)\n\n# Create a datetime object for a specific date and time in UTC\nutc_datetime = timezone_utc.localize(datetime(2023, 10, 15))\n\n# Convert the UTC datetime to Eastern Standard Time\neastern_datetime = utc_datetime.astimezone(timezone_eastern)\nprint(eastern_datetime)  # Output: datetime.datetime(2023, 10, 14, 17, 30, tzinfo=zoneinfo.ZoneInfo('America/New_York'))\n\n# Calculate the difference between two datetimes in different time zones\ndifference = eastern_datetime - utc_datetime\nprint(difference)  # Output: timedelta(days=-1, hours=2)\n</code></pre>\n\n<h3>Example 4: Using Zone Info Objects</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import zoneinfo\n\n# Create a ZoneInfo object directly from a string\ntz = zoneinfo.ZoneInfo(&quot;Europe/London&quot;)\n\n# Check if the created time zone is valid\nprint(tz)  # Output: Europe/London\n\n# Get a list of all available time zones in a specific country\ncountries_timezones = zoneinfo.available_timezones_by_country_code(&quot;GB&quot;)\nprint(countries_timezones)  # Output: ['Europe/London', 'Europe/Guernsey']\n\n# Use the ZoneInfo object to localize and convert datetimes\nutc_datetime = datetime(2023, 10, 15).replace(tzinfo=zoneinfo.utc)\nlocalized_datetime = utc_datetime.astimezone(tz)\nprint(localized_datetime)  # Output: datetime.datetime(2023, 10, 15, 12, 0, tzinfo=zoneinfo.ZoneInfo('Europe/London'))\n</code></pre>\n\n<h3>Example 5: Handling Time Zones in a Web Application</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import zoneinfo\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/time', methods=['GET'])\ndef get_time():\n    # Get the timezone from query parameters or default to UTC\n    tz_str = request.args.get('timezone', 'UTC')\n\n    # Create a ZoneInfo object for the specified timezone\n    try:\n        tz = zoneinfo.ZoneInfo(tz_str)\n    except ValueError as e:\n        return jsonify({&quot;error&quot;: f&quot;Invalid timezone: {tz_str}&quot;}), 400\n\n    # Get the current local datetime\n    now = datetime.now(tz)\n\n    # Return the formatted datetime\n    response = {\n        &quot;datetime&quot;: now.isoformat(),\n        &quot;timezone&quot;: tz_str\n    }\n    return jsonify(response)\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre>\n\n<h3>Example 6: Using Zone Info in a Command Line Tool</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import zoneinfo\nfrom datetime import datetime, timedelta\n\ndef main():\n    # Get the current time in a specified timezone\n    tz_str = input(&quot;Enter the timezone (e.g., America/New_York): &quot;)\n    tz = zoneinfo.ZoneInfo(tz_str)\n\n    # Get the current local datetime\n    now = datetime.now(tz)\n\n    # Display the current local datetime in the specified timezone\n    print(f&quot;Current time in {tz_str}: {now}&quot;)\n\nif __name__ == &quot;__main__&quot;:\n    main()\n</code></pre>\n\n<h3>Example 7: Handling Time Zones with <code>pytz</code> for Compatibility</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from zoneinfo import ZoneInfo\nimport pytz\nfrom datetime import datetime, timedelta\n\n# Create a ZoneInfo object using pytz compatibility\ntimezone = ZoneInfo(pytz.timezone(&quot;America/New_York&quot;))\n\n# Get the current local datetime\nnow = datetime.now(timezone)\nprint(now)  # Output: datetime.datetime(2023, 10, 15, 14, 30, tzinfo=zoneinfo.ZoneInfo('America/New_York'))\n\n# Convert the datetime to UTC\nutc_datetime = now.astimezone(pytz.utc)\nprint(utc_datetime)  # Output: datetime.datetime(2023, 10, 15, 14, 30, tzinfo=pytz.utc)\n</code></pre>\n\n<p>These examples demonstrate various ways to use the <code>zoneinfo</code> module to handle time zones in Python. Each example covers different aspects of working with time zones, from simple conversions and localizations to more complex applications like web development or command-line tools.</p>"
        }
    ],
    "Concurrent Execution": [
        {
            "filename": "_thread - Low-level threading API.md",
            "content": "<h1>_thread - Low-level threading API</h1>\n<p>The <code>_thread</code> module in Python is a low-level interface to threading that provides more control over thread management than the higher-level <code>threading</code> module. This module is mainly used when you need to write specific types of programs or have very tight requirements on performance.</p>\n<p>Below are comprehensive code examples for various functionalities provided by the <code>_thread</code> module:</p>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-creating-and-starting-a-thread\">Creating and Starting a Thread</a></li>\n<li><a href=\"#example-2-using-thread-locks\">Using Thread Locks</a></li>\n<li><a href=\"#example-3-using-thread-events\">Using Thread Events</a></li>\n<li><a href=\"#example-4-using-thread-barrier\">Using Thread Barrier</a></li>\n<li><a href=\"#example-5-using-thread-local-data\">Using Thread Local Data</a></li>\n</ol>\n<h3>Example 1: Creating and Starting a Thread</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import _thread\nimport time\n\n# Define a function that will be run in a thread\ndef worker():\n    print(f&quot;Worker started at {time.strftime('%Y-%m-%d %H:%M:%S')}&quot;)\n    for i in range(5):\n        print(f&quot;Worker working: {i+1}&quot;)\n        time.sleep(1)\n    print(&quot;Worker finished.&quot;)\n\n# Create and start a thread\n_thread.start_new_thread(worker, ())\n\n# Main program waits for the worker to finish before exiting\ntime.sleep(6)  # Wait for the thread to complete\n\nprint(&quot;Main program completed.&quot;)\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- This example demonstrates how to create and start a new thread using <code>_thread.start_new_thread()</code>.\n- The <code>worker</code> function is defined and passed as the target function.\n- The main program waits for the worker to finish by calling <code>time.sleep(6)</code>, which gives enough time for the worker to complete its tasks.</p>\n<h3>Example 2: Using Thread Locks</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import _thread\nimport threading\nimport time  # Add this import\n\n# Define a lock object\nlock = threading.Lock()\n\ndef worker(lock, name):\n    with lock:\n        print(f&quot;{name} acquired the lock at {time.strftime('%Y-%m-%d %H:%M:%S')}&quot;)\n        time.sleep(2)\n        print(f&quot;{name} released the lock.&quot;)\n\n# Create and start threads with different names\n_thread.start_new_thread(worker, (lock, &quot;Thread 1&quot;))\n_thread.start_new_thread(worker, (lock, &quot;Thread 2&quot;))\n\n# Main program waits for all threads to complete\ntime.sleep(5)  # Wait long enough for both threads to finish\n\nprint(&quot;All workers completed.&quot;)\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- A <code>Lock</code> object is created using <code>threading.Lock()</code>.\n- The <code>worker</code> function acquires the lock using a <code>with</code> statement, ensuring that the lock is properly released after the block of code is executed.\n- Two threads are started with different names, and they attempt to acquire and release the lock concurrently.</p>\n<h3>Example 3: Using Thread Events</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import _thread\nimport threading\nimport time\n\n# Define an event object\nevent = threading.Event()\n\ndef worker(event):\n    while not event.is_set():\n        print(f&quot;Worker is waiting for the event.&quot;)\n        time.sleep(1)\n    print(&quot;Worker received the event and completed.&quot;)\n\n# Start a thread that waits on the event\n_thread.start_new_thread(worker, (event,))\n\n# Simulate some work before setting the event\ntime.sleep(3)\n\n# Set the event to unblock the worker\nprint(&quot;Setting the event...&quot;)\nevent.set()\n\n# Main program waits for the event to be set\ntime.sleep(2)\nprint(&quot;Event has been set.&quot;)\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- An <code>Event</code> object is created using <code>threading.Event()</code>.\n- The <code>worker</code> function continuously checks if the event is set. If not, it waits.\n- The main program simulates some work and sets the event after a delay, which unblocks the worker thread.</p>\n<h3>Example 4: Using Thread Barrier</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import _thread\nimport threading\nimport time\n\n# Define a barrier object with two parties\nbarrier = threading.Barrier(2)\n\ndef worker(barrier, name):\n    print(f&quot;{name} arrived at the barrier at {time.strftime('%Y-%m-%d %H:%M:%S')}&quot;)\n    barrier.wait()\n    print(f&quot;{name} passed the barrier.&quot;)\n\n# Create and start threads with different names\n_thread.start_new_thread(worker, (barrier, &quot;Thread 1&quot;))\n_thread.start_new_thread(worker, (barrier, &quot;Thread 2&quot;))\n\n# Main program waits for all threads to pass the barrier\ntime.sleep(2)  # Give some time for both threads to reach the barrier\n\nprint(&quot;All workers passed the barrier.&quot;)\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- A <code>Barrier</code> object is created with two parties using <code>threading.Barrier(2)</code>.\n- The <code>worker</code> function prints a message when it arrives at the barrier and then calls <code>barrier.wait()</code>, which blocks until all threads have reached the barrier.\n- The main program waits for all threads to pass the barrier.</p>\n<h3>Example 5: Using Thread Local Data</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import _thread\nimport threading\nimport time\n\n# Define a thread local storage object\nlocal_data = threading.local()\n\ndef worker(local):\n    local.data = &quot;Data from thread&quot;\n    print(f&quot;Thread {threading.current_thread().name} set data: {local.data}&quot;)\n\n# Start threads and use local data\n_thread.start_new_thread(worker, (local_data,))\n_thread.start_new_thread(worker, (local_data,))\n\n# Main program waits for all threads to complete\ntime.sleep(2)  # Wait for the threads to finish\n\nprint(&quot;All workers completed.&quot;)\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- A <code>ThreadLocal</code> object is created using <code>threading.local()</code>.\n- The <code>worker</code> function sets a local variable in <code>local_data</code> and prints it.\n- Each thread uses the same <code>local_data</code> object, but each thread has its own separate instance of the variables.</p>\n<p>These examples cover various aspects of using the <code>_thread</code> module, including creating threads, managing locks, using events, synchronizing with barriers, and utilizing thread-local storage.</p>"
        },
        {
            "filename": "concurrent.futures - Launching parallel tasks.md",
            "content": "<h1>concurrent.futures - Launching parallel tasks</h1>\n<p>Below are comprehensive code examples for the <code>concurrent.futures</code> module, which provides a high-level interface for asynchronously executing callables. The examples include various ways to use the module to launch parallel tasks.</p>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-using-threadpoolexecutor\">Using ThreadPoolExecutor</a></li>\n<li><a href=\"#2-using-processpoolexecutor\">Using ProcessPoolExecutor</a></li>\n<li><a href=\"#3-using-threadpoolexecutor-for-i-o-bound-tasks\">Using ThreadPoolExecutor for I/O-bound Tasks</a></li>\n<li><a href=\"#4-using-processpoolexecutor-for-cpu-bound-tasks\">Using ProcessPoolExecutor for CPU-bound Tasks</a></li>\n<li><a href=\"#5-using-threadpoolexecutor-and-future-objects\">Using ThreadPoolExecutor and Future Objects</a></li>\n</ol>\n<h3>1. Using ThreadPoolExecutor</h3>\n<p>The <code>ThreadPoolExecutor</code> class allows you to run multiple functions in separate threads. This is useful for I/O-bound operations where each task can be executed independently of others.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import concurrent.futures\nimport time\n\ndef worker(number):\n    &quot;&quot;&quot;Worker function that takes an integer and returns its square.&quot;&quot;&quot;\n    print(f&quot;Worker {number} starting&quot;)\n    result = number * number\n    print(f&quot;Worker {number} finished, result: {result}&quot;)\n    return result\n\ndef main():\n    with concurrent.futures.ThreadPoolExecutor(max_workers=3) as executor:\n        # Submit tasks to the executor\n        future_to_number = {executor.submit(worker, i): i for i in range(10)}\n\n        # Process results\n        for future in concurrent.futures.as_completed(future_to_number):\n            number = future_to_number[future]\n            try:\n                result = future.result()\n            except Exception as exc:\n                print(f&quot;Worker {number} generated an exception: {exc}&quot;)\n            else:\n                print(f&quot;Worker {number} completed with result: {result}&quot;)\n\nif __name__ == &quot;__main__&quot;:\n    main()\n</code></pre>\n\n<h3>2. Using ProcessPoolExecutor</h3>\n<p>The <code>ProcessPoolExecutor</code> class allows you to run multiple functions in separate processes. This is useful for CPU-bound operations where tasks are independent and can be executed concurrently.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import concurrent.futures\nimport time\n\ndef worker(number):\n    &quot;&quot;&quot;Worker function that takes an integer and returns its square.&quot;&quot;&quot;\n    print(f&quot;Worker {number} starting&quot;)\n    result = number * number\n    print(f&quot;Worker {number} finished, result: {result}&quot;)\n    return result\n\ndef main():\n    with concurrent.futures.ProcessPoolExecutor(max_workers=3) as executor:\n        # Submit tasks to the executor\n        future_to_number = {executor.submit(worker, i): i for i in range(10)}\n\n        # Process results\n        for future in concurrent.futures.as_completed(future_to_number):\n            number = future_to_number[future]\n            try:\n                result = future.result()\n            except Exception as exc:\n                print(f&quot;Worker {number} generated an exception: {exc}&quot;)\n            else:\n                print(f&quot;Worker {number} completed with result: {result}&quot;)\n\nif __name__ == &quot;__main__&quot;:\n    main()\n</code></pre>\n\n<h3>3. Using ThreadPoolExecutor for I/O-bound Tasks</h3>\n<p>The <code>ThreadPoolExecutor</code> can also be used for I/O-bound tasks by ensuring that each task does not require a lot of CPU resources.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import concurrent.futures\nimport time\n\ndef worker(number):\n    &quot;&quot;&quot;Worker function that takes an integer and sleeps for it.&quot;&quot;&quot;\n    print(f&quot;Worker {number} starting&quot;)\n    time.sleep(number)\n    print(f&quot;Worker {number} finished&quot;)\n\ndef main():\n    with concurrent.futures.ThreadPoolExecutor(max_workers=3) as executor:\n        # Submit tasks to the executor\n        future_to_number = {executor.submit(worker, i): i for i in range(10)}\n\n        # Process results\n        for future in concurrent.futures.as_completed(future_to_number):\n            number = future_to_number[future]\n            try:\n                result = future.result()\n            except Exception as exc:\n                print(f&quot;Worker {number} generated an exception: {exc}&quot;)\n            else:\n                print(f&quot;Worker {number} completed with result: {result}&quot;)\n\nif __name__ == &quot;__main__&quot;:\n    main()\n</code></pre>\n\n<h3>4. Using ProcessPoolExecutor for CPU-bound Tasks</h3>\n<p>For CPU-bound tasks, you might want to use <code>ProcessPoolExecutor</code> because each process has its own memory space.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import concurrent.futures\nimport math\n\ndef worker(data):\n    &quot;&quot;&quot;Worker function that takes a list of numbers and calculates their sum.&quot;&quot;&quot;\n    print(f&quot;Worker processing data with {len(data)} elements&quot;)\n    result = sum(data)\n    print(f&quot;Worker completed processing, total: {result}&quot;)\n    return result\n\ndef main():\n    data_chunks = [range(1000), range(1000), range(1000)]\n\n    with concurrent.futures.ProcessPoolExecutor(max_workers=3) as executor:\n        # Submit tasks to the executor\n        future_to_data = {executor.submit(worker, chunk): chunk for chunk in data_chunks}\n\n        # Process results\n        for future in concurrent.futures.as_completed(future_to_data):\n            chunk = future_to_data[future]\n            try:\n                result = future.result()\n            except Exception as exc:\n                print(f&quot;Worker processing {chunk} generated an exception: {exc}&quot;)\n            else:\n                print(f&quot;Worker processed {chunk} with total: {result}&quot;)\n\nif __name__ == &quot;__main__&quot;:\n    main()\n</code></pre>\n\n<h3>5. Using ThreadPoolExecutor and Future Objects</h3>\n<p>You can also use <code>Future</code> objects to manage the results of asynchronous tasks.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import concurrent.futures\nimport time\n\ndef worker(number):\n    &quot;&quot;&quot;Worker function that takes an integer and returns its square.&quot;&quot;&quot;\n    print(f&quot;Worker {number} starting&quot;)\n    time.sleep(number)\n    result = number * number\n    print(f&quot;Worker {number} finished, result: {result}&quot;)\n    return result\n\ndef main():\n    with concurrent.futures.ThreadPoolExecutor(max_workers=3) as executor:\n        # Submit tasks to the executor\n        future_list = [executor.submit(worker, i) for i in range(10)]\n\n        # Process results\n        for future in concurrent.futures.as_completed(future_list):\n            try:\n                result = future.result()\n            except Exception as exc:\n                print(f&quot;Worker finished with an exception: {exc}&quot;)\n            else:\n                print(f&quot;Worker completed with result: {result}&quot;)\n\nif __name__ == &quot;__main__&quot;:\n    main()\n</code></pre>\n\n<p>These examples demonstrate how to use <code>concurrent.futures</code> for launching parallel tasks in Python, including both thread-based and process-based execution. Each example includes comments explaining the purpose of each part of the code.</p>"
        },
        {
            "filename": "contextvars - Context Variables.md",
            "content": "<h1>contextvars - Context Variables</h1>\n<p>The <code>contextvars</code> module is a part of Python's standard library that provides support for managing contextual variables, which can be used to store data that needs to flow across multiple function calls or processes without explicitly passing it as an argument. This is particularly useful in multi-threaded applications where thread-local storage might not work.</p>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#creating-and-using-context-variables\">Creating and Using Context Variables</a></li>\n</ol>\n<p>Here are some comprehensive examples demonstrating various functionalities provided by the <code>contextvars</code> module:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import contextvars\n\n# Create a ContextVar named 'user_id'\nuser_id = contextvars.ContextVar('user_id')\n\n# Define a function that uses the context variable\ndef process_user_data():\n    user_id_value = user_id.get()\n    print(f&quot;Processing data for user ID: {user_id_value}&quot;)\n\n# Set the value of user_id in the current context\ntoken = user_id.set(12345)\nprocess_user_data()  # Output: Processing data for user ID: 12345\n\n# Use a local context to set a different value for user_id\ntoken2 = user_id.set(67890)\nprocess_user_data()  # Output: Processing data for user ID: 67890\n\n# The original context remains unchanged\nuser_id.reset(token)\ntry:\n    print(user_id.get())  # Output: None\nexcept LookupError:\n    print(&quot;user_id is not set&quot;)\n\n# Define a function that creates and returns a new context with an updated user ID\ndef create_context_with_user_id():\n    new_context = contextvars.copy_context()\n    new_context.run(lambda: user_id.set(12345))\n    return new_context\n\n# Create a context from the factory function\nnew_context = create_context_with_user_id()\nnew_context.run(process_user_data)  # Output: Processing data for user ID: 12345\n\n# Get the current context and update the user ID in it\ncurrent_context = contextvars.copy_context()\ncurrent_context.run(lambda: user_id.set(67890))\ncurrent_context.run(process_user_data)  # Output: Processing data for user ID: 67890\n\n# Use a local context to set a different value for user_id in the current context\ntoken3 = user_id.set(1024)\nprocess_user_data()  # Output: Processing data for user ID: 1024\n\n# The original context remains unchanged\nuser_id.reset(token3)\ntry:\n    print(user_id.get())  # Output: None\nexcept LookupError:\n    print(&quot;user_id is not set&quot;)\n</code></pre>\n\n<h3>Key Features and Examples:</h3>\n<ol>\n<li><strong>ContextVar Creation</strong>: </li>\n<li>\n<p><code>contextvars.ContextVar('user_id')</code> creates a new context variable named <code>user_id</code>.</p>\n</li>\n<li>\n<p><strong>Setting and Getting Context Variables</strong>:</p>\n</li>\n<li>Use <code>user_id.set(value)</code> to set the value of <code>user_id</code> in the current context.</li>\n<li>\n<p>Use <code>user_id.get()</code> to retrieve the current value of <code>user_id</code>.</p>\n</li>\n<li>\n<p><strong>Local Contexts</strong>:</p>\n</li>\n<li>\n<p>Use <code>contextvars.copy_context()</code> to create a copy of the current context and modify it independently.</p>\n</li>\n<li>\n<p><strong>Context Resetting</strong>:</p>\n</li>\n<li>\n<p>Call <code>user_id.reset(token)</code> to restore the previous value of <code>user_id</code>.</p>\n</li>\n<li>\n<p><strong>Factory Functions</strong>:</p>\n</li>\n<li>Create a context factory function that sets a specific value for the context variable and returns it.</li>\n<li>\n<p>Use <code>contextvars.copy_context()</code> to access the current context.</p>\n</li>\n<li>\n<p><strong>Multiple Contexts</strong>:</p>\n</li>\n<li>Each thread or process can have its own context, allowing for independent management of contextual variables.</li>\n</ol>\n<p>These examples cover the basic usage of the <code>contextvars</code> module in managing context-specific data across different function calls and threads.</p>"
        },
        {
            "filename": "multiprocessing - Process-based parallelism.md",
            "content": "<h1>multiprocessing - Process-based parallelism</h1>\n<p>Below are comprehensive examples of how to use various functionalities provided by the <code>multiprocessing</code> module in Python, along with detailed comments explaining each step.</p>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-basic-multiprocessing\">Basic Multiprocessing</a></li>\n<li><a href=\"#2-using-process-class\">Using Process Class</a></li>\n<li><a href=\"#3-sharing-data-between-processes\">Sharing Data Between Processes</a></li>\n<li><a href=\"#4-handling-exceptions-in-processes\">Handling Exceptions in Processes</a></li>\n<li><a href=\"#5-using-queue-for-inter-process-communication\">Using Queue for Inter-Process Communication</a></li>\n<li><a href=\"#6-using-lock-for-synchronization\">Using Lock for Synchronization</a></li>\n</ol>\n<h3>1. Basic Multiprocessing</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import multiprocessing\nfrom multiprocessing import Pool\nimport os\n\ndef worker(x):\n    &quot;&quot;&quot;Example function to be executed in a separate process.&quot;&quot;&quot;\n    return x * x\n\nif __name__ == '__main__':\n    # Create a pool of worker processes using all system cores\n    with Pool(processes=os.process_cpu_count()) as pool:\n        # Use the map method to apply the worker function to a list of numbers\n        results = pool.map(worker, [1, 2, 3, 4, 5])\n    print(os.process_cpu_count())\n    print(&quot;Results:&quot;, results)\n</code></pre>\n\n<h3>2. Using <code>Process</code> Class</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import multiprocessing\n\ndef worker(x):\n    &quot;&quot;&quot;Example function to be executed in a separate process.&quot;&quot;&quot;\n    return x * x\n\nif __name__ == '__main__':\n    # Define a target function for the Process class\n    def target_function():\n        print(&quot;Running in a separate process&quot;)\n\n    # Create a Process object and start it\n    p = multiprocessing.Process(target=target_function)\n    p.start()\n    p.join()  # Wait for the process to complete\n\n    print(&quot;Process completed&quot;)\n</code></pre>\n\n<h3>3. Sharing Data Between Processes</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import multiprocessing\nfrom multiprocessing import Manager\n\ndef modify_list(data):\n    &quot;&quot;&quot;Function to modify a shared list.&quot;&quot;&quot;\n    data.append(100)\n\nif __name__ == '__main__':\n    # Create a manager object for shared objects\n    with Manager() as manager:\n        # Use the list object from the manager\n        shared_data = manager.list([1, 2, 3])\n\n        # Spawn a process to modify the shared data\n        p = multiprocessing.Process(target=modify_list, args=(shared_data,))\n        p.start()\n        p.join()\n\n        print(&quot;Shared data after modification:&quot;, shared_data)\n</code></pre>\n\n<h3>4. Handling Exceptions in Processes</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import multiprocessing\nfrom multiprocessing import Pool\n\ndef worker(x):\n    &quot;&quot;&quot;Example function to be executed in a separate process.&quot;&quot;&quot;\n    if x == 0:\n        raise ValueError(&quot;Division by zero&quot;)\n    return 1 / x\n\nif __name__ == '__main__':\n    with Pool(processes=2) as pool:\n        results = []  # Initialize results to ensure it is defined\n        try:\n            results = pool.map(worker, [5, 0, 3])\n        except Exception as e:\n            print(f&quot;An error occurred: {e}&quot;)\n\n        # Note: The second and third elements in the list are None because of the exception\n        print(&quot;Results:&quot;, results)\n</code></pre>\n\n<h3>5. Using <code>Queue</code> for Inter-Process Communication</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import multiprocessing\nfrom multiprocessing import Queue\n\ndef producer(q):\n    &quot;&quot;&quot;Producer function to add items to a queue.&quot;&quot;&quot;\n    q.put(10)\n    q.put(20)\n\ndef consumer(q):\n    &quot;&quot;&quot;Consumer function to retrieve items from the queue.&quot;&quot;&quot;\n    while True:\n        item = q.get()\n        if item is None:\n            break\n        print(&quot;Received:&quot;, item)\n\nif __name__ == '__main__':\n    # Create a queue object\n    q = Queue()\n\n    # Start producer and consumer processes\n    p1 = multiprocessing.Process(target=producer, args=(q,))\n    p2 = multiprocessing.Process(target=consumer, args=(q,))\n\n    p1.start()\n    p2.start()\n\n    # Wait for all processes to complete\n    p1.join()\n    q.put(None)  # Signal the consumer process to exit\n    p2.join()\n</code></pre>\n\n<h3>6. Using <code>Lock</code> for Synchronization</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import multiprocessing\nfrom multiprocessing import Lock, Manager\n\ndef shared_task(lock, counter):\n    &quot;&quot;&quot;Function that increments a counter and prints its value.&quot;&quot;&quot;\n    with lock:\n        print(f&quot;Thread {multiprocessing.current_process().name}: Lock acquired&quot;)\n        counter.value += 1\n        print(f&quot;Counter value: {counter.value}&quot;)\n\nif __name__ == '__main__':\n    # Create a lock object\n    lock = Lock()\n\n    # Define a counter using Value from the Manager class for shared data\n    with Manager() as manager:\n        counter = manager.Value('i', 0)\n\n        # Start multiple processes to increment the counter\n        processes = [multiprocessing.Process(target=shared_task, args=(lock, counter)) for _ in range(10)]\n        for p in processes:\n            p.start()\n\n        # Wait for all processes to complete\n        for p in processes:\n            p.join()\n</code></pre>\n\n<p>These examples cover a range of functionalities provided by the <code>multiprocessing</code> module, including creating and managing processes, sharing data between them, handling exceptions, using queues for inter-process communication, and synchronizing access to shared resources.</p>"
        },
        {
            "filename": "multiprocessing.shared_memory - Shared memory for direct access across processes.md",
            "content": "<h1>multiprocessing.shared_memory - Shared memory for direct access across processes</h1>\n<p>The <code>multiprocessing.shared_memory</code> module provides a way to create shared memory objects that can be accessed by multiple processes directly. This is useful for sharing large amounts of data between processes without having to copy it. Below are comprehensive examples of how to use this module, including creating and accessing shared memory objects in Python 3.12.</p>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-creating-a-shared-memory-object\">Creating a Shared Memory Object</a></li>\n<li><a href=\"#example-2-creating-a-shared-memory-object-for-an-integer\">Creating a Shared Memory Object for an Integer</a></li>\n<li><a href=\"#example-3-creating-a-shared-memory-object-for-a-float\">Creating a Shared Memory Object for a Float</a></li>\n<li><a href=\"#example-4-creating-a-shared-memory-object-for-a-list\">Creating a Shared Memory Object for a List</a></li>\n<li><a href=\"#example-5-creating-and-accessing-shared-memory-objects-across-multiple-processes\">Creating and Accessing Shared Memory Objects Across Multiple Processes</a></li>\n<li><a href=\"#example-6-creating-and-accessing-shared-memory-objects-with-initial-data\">Creating and Accessing Shared Memory Objects with Initial Data</a></li>\n</ol>\n<h3>Example 1: Creating a Shared Memory Object</h3>\n<p>This example demonstrates how to create a shared memory object and map it into a shared array.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import multiprocessing as mp\n\n\ndef worker(shared_array):\n    # Accessing the shared array from the worker process\n    for i in range(len(shared_array)):\n        shared_array[i] += 1\n\nif __name__ == &quot;__main__&quot;:\n    # Create a shared memory object of type 'i' (integer) with size 10\n    shm = mp.Array('i', 10)\n\n    # Start a new process that will modify the shared array\n    p = mp.Process(target=worker, args=(shm,))\n    p.start()\n    p.join()\n\n    # Print the modified shared array\n    print(&quot;Modified shared array:&quot;, list(shm))\n</code></pre>\n\n<h3>Example 2: Creating a Shared Memory Object for an Integer</h3>\n<p>This example shows how to create a shared memory object of type 'i' (int) and initialize it with a specific value.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import multiprocessing as mp\n\ndef worker(shared_int):\n    # Accessing the shared integer from the worker process\n    print(&quot;Initial shared integer:&quot;, shared_int.value)\n    shared_int.value += 1\n\nif __name__ == &quot;__main__&quot;:\n    # Create a shared memory object of type 'i' (int) with size 1\n    shm = mp.Value('i', 5)\n\n    # Start a new process that will modify the shared integer\n    p = mp.Process(target=worker, args=(shm,))\n    p.start()\n    p.join()\n\n    # Print the modified shared integer\n    print(&quot;Modified shared integer:&quot;, shm.value)\n</code></pre>\n\n<h3>Example 3: Creating a Shared Memory Object for a Float</h3>\n<p>This example demonstrates how to create a shared memory object of type 'f' (float) and initialize it with a specific value.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import multiprocessing as mp\n\ndef worker(shared_float):\n    # Accessing the shared float from the worker process\n    print(&quot;Initial shared float:&quot;, shared_float.value)\n    shared_float.value += 0.1\n\nif __name__ == &quot;__main__&quot;:\n    # Create a shared memory object of type 'f' (float) with size 1\n    shm = mp.Value('f', 5.0)\n\n    # Start a new process that will modify the shared float\n    p = mp.Process(target=worker, args=(shm,))\n    p.start()\n    p.join()\n\n    # Print the modified shared float\n    print(&quot;Modified shared float:&quot;, shm.value)\n</code></pre>\n\n<h3>Example 4: Creating a Shared Memory Object for a List</h3>\n<p>This example shows how to create a shared memory object of type 'l' (list) and initialize it with a list of values.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import multiprocessing as mp\n\ndef worker(shared_list):\n    # Accessing the shared list from the worker process\n    print(&quot;Initial shared list:&quot;, shared_list)\n    for i in range(len(shared_list)):\n        shared_list[i] += 1\n\nif __name__ == &quot;__main__&quot;:\n    # Create a manager object to manage shared state\n    manager = mp.Manager()\n    # Create a shared list with the manager\n    shm = manager.list([1, 2, 3, 4, 5])\n\n    # Start a new process that will modify the shared list\n    p = mp.Process(target=worker, args=(shm,))\n    p.start()\n    p.join()\n\n    # Print the modified shared list\n    print(&quot;Modified shared list:&quot;, shm)\n</code></pre>\n\n<h3>Example 5: Creating and Accessing Shared Memory Objects Across Multiple Processes</h3>\n<p>This example demonstrates how to create and access shared memory objects in a more complex scenario involving multiple processes.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import multiprocessing as mp\n\ndef worker(shared_array):\n    # Accessing the shared array from the worker process\n    for i in range(len(shared_array)):\n        shared_array[i] += 1\n\ndef main():\n    # Create a shared memory object of type 'i' (integer) with size 10\n    shm = mp.Array('i', 10)\n\n    # Start multiple processes that will modify the shared array\n    processes = []\n    for _ in range(5):\n        p = mp.Process(target=worker, args=(shm,))\n        p.start()\n        processes.append(p)\n\n    # Wait for all processes to complete\n    for p in processes:\n        p.join()\n\n    # Print the final modified shared array\n    print(&quot;Final shared array:&quot;, list(shm))\n\nif __name__ == &quot;__main__&quot;:\n    main()\n</code></pre>\n\n<h3>Example 6: Creating and Accessing Shared Memory Objects with Initial Data</h3>\n<p>This example demonstrates how to create a shared memory object of type 'l' (list) with initial data and modify it from multiple processes.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import multiprocessing as mp\n\ndef worker(shared_list):\n    # Accessing the shared list from the worker process\n    for i in range(len(shared_list)):\n        shared_list[i] += 1\n\ndef main():\n    # Create a manager object to manage shared data\n    manager = mp.Manager()\n    # Create a shared list with initial data and size 5\n    shm = manager.list([1, 2, 3, 4, 5])\n\n    # Start multiple processes that will modify the shared list\n    processes = []\n    for _ in range(5):\n        p = mp.Process(target=worker, args=(shm,))\n        p.start()\n        processes.append(p)\n\n    # Wait for all processes to complete\n    for p in processes:\n        p.join()\n\n    # Print the final modified shared list\n    print(&quot;Final shared list:&quot;, shm)\n\nif __name__ == &quot;__main__&quot;:\n    main()\n</code></pre>\n\n<p>These examples cover various scenarios of using <code>multiprocessing.shared_memory</code> to share data between processes. Each example includes comments explaining key steps and demonstrates how to handle different types of shared memory objects (e.g., strings, integers, floats, lists).</p>"
        },
        {
            "filename": "queue - A synchronized queue class.md",
            "content": "<h1>queue - A synchronized queue class</h1>\n<p>The <code>queue</code> module provides a set of synchronization primitives that can be used to implement concurrent data structures such as queues, stacks, and priority queues. Here are comprehensive and well-documented code examples for each functionality in the <code>queue</code> module:</p>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-basic-queue-example\">Basic Queue Example</a></li>\n<li><a href=\"#2-priority-queue-example\">Priority Queue Example</a></li>\n<li><a href=\"#3-lifo-queue-example\">LIFO Queue Example</a></li>\n<li><a href=\"#4-double-ended-queue-example\">Double-Ended Queue Example</a></li>\n<li><a href=\"#5-custom-queue-example\">Custom Queue Example</a></li>\n<li><a href=\"#6-queue-with-priority\">Queue with Priority</a></li>\n</ol>\n<h3>1. Basic Queue Example</h3>\n<p>This example demonstrates how to use a simple FIFO queue (FIFO - First In, First Out).</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import queue\n\n# Create a FIFO queue\nfifo_queue = queue.Queue()\n\n# Add items to the queue\nfifo_queue.put(1)\nfifo_queue.put(2)\nfifo_queue.put(3)\n\n# Process the queue in order\nprint(&quot;Processing elements from FIFO queue:&quot;)\nwhile not fifo_queue.empty():\n    item = fifo_queue.get()\n    print(item)\n\n# Output:\n# Processing elements from FIFO queue:\n# 1\n# 2\n# 3\n</code></pre>\n\n<h3>2. Priority Queue Example</h3>\n<p>This example demonstrates how to use a priority queue (min-heap) where the smallest item is retrieved first.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import queue\n\n# Create a min-heap priority queue\npriority_queue = queue.PriorityQueue()\n\n# Add items to the queue with priorities\npriority_queue.put((3, 'bar'))\npriority_queue.put((1, 'foo'))\npriority_queue.put((2, 'baz'))\n\n# Process the queue in order of priority\nprint(&quot;Processing elements from priority queue:&quot;)\nwhile not priority_queue.empty():\n    item = priority_queue.get()\n    print(item)\n\n# Output:\n# Processing elements from priority queue:\n# (1, 'foo')\n# (2, 'baz')\n# (3, 'bar')\n</code></pre>\n\n<h3>3. LIFO Queue Example</h3>\n<p>This example demonstrates how to use a stack (LIFO - Last In, First Out).</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import queue\n\n# Create a stack (FIFO) using the `queue.Queue` class\nstack = queue.Queue()\n\n# Add items to the stack\nstack.put(1)\nstack.put(2)\nstack.put(3)\n\n# Process the stack in reverse order\nprint(&quot;Processing elements from stack:&quot;)\nwhile not stack.empty():\n    item = stack.get()\n    print(item)\n\n# Output:\n# Processing elements from stack:\n# 3\n# 2\n# 1\n</code></pre>\n\n<h3>4. Double-Ended Queue Example</h3>\n<p>This example demonstrates how to use a deque (double-ended queue) which supports efficient appends and pops from both ends.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import queue\n\n# Create a double-ended queue\ndeque = queue.deque()\n\n# Add items to the front and back of the deque\ndeque.append(1)\ndeque.appendleft(2)\ndeque.append(3)\ndeque.appendleft(4)\n\n# Process elements from both ends\nprint(&quot;Processing elements from deque:&quot;)\nwhile len(deque) &gt; 0:\n    item = deque.popleft()\n    print(item)\n\n# Output:\n# Processing elements from deque:\n# 4\n# 3\n# 2\n# 1\n</code></pre>\n\n<h3>5. Custom Queue Example</h3>\n<p>This example demonstrates how to create a custom queue class using the <code>queue.Queue</code> class as a base.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import queue\n\nclass MyQueue(queue.Queue):\n    def __init__(self, maxsize=0):\n        super().__init__(maxsize)\n\n    def get(self):\n        # Custom behavior: print item before removing it\n        item = super().get()\n        print(f&quot;Retrieved: {item}&quot;)\n        return item\n\n# Create a custom queue\ncustom_queue = MyQueue()\n\n# Add items to the queue\ncustom_queue.put(1)\ncustom_queue.put(2)\ncustom_queue.put(3)\n\n# Process the queue in order\nprint(&quot;Processing elements from custom queue:&quot;)\nwhile not custom_queue.empty():\n    item = custom_queue.get()\n    print(item)\n\n# Output:\n# Processing elements from custom queue:\n# Retrieved: 1\n# 1\n# Retrieved: 2\n# 2\n# Retrieved: 3\n# 3\n</code></pre>\n\n<h3>6. Queue with Priority</h3>\n<p>This example demonstrates how to use a priority queue that stores items along with their priority.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import queue\n\nclass PriorityItem:\n    def __init__(self, priority, value):\n        self.priority = priority\n        self.value = value\n\n    # Required for the priority queue to compare items by priority\n    def __lt__(self, other):\n        return self.priority &lt; other.priority\n\n# Create a min-heap priority queue with custom PriorityItem objects\npriority_queue = queue.PriorityQueue()\n\n# Add items to the queue with priorities\npriority_queue.put(PriorityItem(3, 'bar'))\npriority_queue.put(PriorityItem(1, 'foo'))\npriority_queue.put(PriorityItem(2, 'baz'))\n\n# Process the queue in order of priority\nprint(&quot;Processing elements from priority queue:&quot;)\nwhile not priority_queue.empty():\n    item = priority_queue.get()\n    print(item.value)\n\n# Output:\n# Processing elements from priority queue:\n# foo\n# baz\n# bar\n</code></pre>\n\n<p>These examples cover various aspects of using Python's <code>queue</code> module, including creating different types of queues and implementing custom behaviors. Each example is well-documented with comments explaining the purpose and functionality of each part of the code.</p>"
        },
        {
            "filename": "sched - Event scheduler.md",
            "content": "<h1>sched - Event scheduler</h1>\n<p>The <code>sched</code> module in Python is a simple event scheduler that allows you to schedule and run functions at specific times or intervals. Below are comprehensive examples of how to use the <code>sched</code> module, including comments explaining each step:</p>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#basic-event-scheduling\">Basic Event Scheduling</a></li>\n</ol>\n<pre class=\"codehilite\"><code class=\"language-python\">import sched\nimport time\n\n# Initialize the scheduler\nscheduler = sched.scheduler(time.time, time.sleep)\n\ndef print_time(sc):\n    # This function prints the current time and schedules itself again after 1 second\n    print(&quot;Current time:&quot;, time.ctime())\n    scheduler.enter(1, 1, print_time, (sc,))\n\n# Schedule the first call to print_time\nscheduler.enter(0, 1, print_time, (scheduler,))\n\n# Run the scheduler\ntry:\n    while True:\n        scheduler.run(blocking=False)\nexcept KeyboardInterrupt:\n    print(&quot;Scheduler stopped.&quot;)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ol>\n<li>\n<p><strong>Initialize the Scheduler</strong>: We create an instance of <code>sched.scheduler</code> with <code>time.time</code> as the time function and <code>time.sleep</code> as the delay function. This means that the scheduler will use Python's built-in <code>time</code> functions for current time and delays.</p>\n</li>\n<li>\n<p><strong>Define a Task Function</strong>: The <code>print_time</code> function is defined to print the current time and then schedule itself again after 1 second using the <code>scheduler.enter</code> method.</p>\n</li>\n<li>\n<p><strong>Schedule the First Call</strong>: We schedule the first call to <code>print_time</code> immediately (<code>0</code>) with a priority of <code>1</code>. This means it will be executed first.</p>\n</li>\n<li>\n<p><strong>Run the Scheduler</strong>: The scheduler is run in an infinite loop, which continues until interrupted by a keyboard interrupt (Ctrl+C). Inside the loop, <code>scheduler.run(blocking=False)</code> runs one event at a time and returns immediately if there are no events to process, allowing other tasks to execute.</p>\n</li>\n</ol>\n<h3>Key Features:</h3>\n<ul>\n<li><strong>Time Functions</strong>: The <code>sched</code> module uses Python's built-in <code>time</code> functions for current time and delays.</li>\n<li><strong>Priority Handling</strong>: Tasks can be scheduled with different priorities. Lower numbers have higher priority.</li>\n<li><strong>Blocking vs Non-blocking Execution</strong>: The scheduler can run in a blocking or non-blocking manner, depending on how it is called.</li>\n</ul>\n<p>These examples provide a basic understanding of how to use the <code>sched</code> module to schedule and manage events in your Python applications.</p>"
        },
        {
            "filename": "subprocess - Subprocess management.md",
            "content": "<h1>subprocess - Subprocess management</h1>\n<p>The <code>subprocess</code> module in Python provides a way to spawn new processes, connect to their input/output/error pipes, and obtain their return codes. Below are comprehensive examples demonstrating various functionalities of the <code>subprocess</code> module. These examples are designed to be clear, concise, and suitable for inclusion in official documentation.</p>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-running-an-external-command\">Running an External Command</a></li>\n<li><a href=\"#example-2-running-a-command-in-a-separate-process\">Running a Command in a Separate Process</a></li>\n<li><a href=\"#example-3-handling-subprocess-input\">Handling Subprocess Input</a></li>\n<li><a href=\"#example-4-running-commands-with-environment-variables\">Running Commands with Environment Variables</a></li>\n<li><a href=\"#example-5-running-commands-in-parallel\">Running Commands in Parallel</a></li>\n<li><a href=\"#example-6-using-check_output-for-simple-operations\">Using <code>check_output()</code> for Simple Operations</a></li>\n<li><a href=\"#example-7-using-run-with-timeout\">Using <code>run()</code> with Timeout</a></li>\n<li><a href=\"#example-8-using-run-with-custom-signal-handling\">Using <code>run()</code> with Custom Signal Handling</a></li>\n<li><a href=\"#example-9-using-run-with-background-execution\">Using <code>run()</code> with Background Execution</a></li>\n<li><a href=\"#example-10-using-run-with-multiple-arguments\">Using <code>run()</code> with Multiple Arguments</a></li>\n</ol>\n<h3>Example 1: Running an External Command</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import subprocess\n\n# Example command to run 'ls -l'\nresult = subprocess.run(['ls', '-l'], capture_output=True, text=True)\n\n# Print the output of the command\nprint(&quot;Command Output:&quot;)\nprint(result.stdout)\n\n# Check if the command was successful\nif result.returncode == 0:\n    print(&quot;Command executed successfully.&quot;)\nelse:\n    print(f&quot;Error: {result.stderr}&quot;)\n</code></pre>\n\n<p><strong>Explanation</strong>: This example demonstrates how to use <code>subprocess.run()</code> to execute an external command. The <code>['ls', '-l']</code> list specifies the command and its arguments. The <code>capture_output=True</code> argument captures both standard output and error, and <code>text=True</code> ensures that the output is returned as a string instead of bytes. The result is then printed, and the script checks if the command was successful.</p>\n<h3>Example 2: Running a Command in a Separate Process</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import subprocess\n\n# Create a subprocess object to run 'echo Hello'\nprocess = subprocess.Popen(['echo', 'Hello'], stdout=subprocess.PIPE)\n\n# Read the output from the subprocess\noutput, _ = process.communicate()\n\n# Print the output of the command\nprint(&quot;Command Output:&quot;)\nprint(output.decode('utf-8'))\n\n# Check if the command was successful\nif process.returncode == 0:\n    print(&quot;Command executed successfully.&quot;)\nelse:\n    print(f&quot;Error: {process.stderr}&quot;)\n</code></pre>\n\n<p><strong>Explanation</strong>: This example shows how to use <code>subprocess.Popen()</code> to run a command in a separate process. The <code>stdout=subprocess.PIPE</code> argument allows reading the output of the command. The <code>communicate()</code> method is used to get both the standard output and error from the subprocess. The script decodes the output from bytes to a string before printing it.</p>\n<h3>Example 3: Handling Subprocess Input</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import subprocess\n\n# Create a subprocess object to run 'cat' with input piped in\nprocess = subprocess.Popen(['cat'], stdin=subprocess.PIPE, stdout=subprocess.PIPE)\n\n# Write input to the subprocess\ninput_data = &quot;Hello, World!\\n&quot;\nprocess.stdin.write(input_data.encode('utf-8'))\n\n# Read the output from the subprocess\noutput, _ = process.communicate()\n\n# Close the stdin after communicate\nprocess.stdin.close()\n\n# Print the output of the command\nprint(&quot;Command Output:&quot;)\nprint(output.decode('utf-8'))\n\n# Check if the command was successful\nif process.returncode == 0:\n    print(&quot;Command executed successfully.&quot;)\nelse:\n    print(f&quot;Error: {process.stderr}&quot;)\n</code></pre>\n\n<p><strong>Explanation</strong>: This example demonstrates how to write input to a subprocess. The <code>stdin=subprocess.PIPE</code> argument allows writing input to the subprocess, and <code>encode('utf-8')</code> is used to convert the string to bytes before sending it to the process. The script reads the output from the subprocess and checks if the command was successful.</p>\n<h3>Example 4: Running Commands with Environment Variables</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import subprocess\n\n# Define environment variables\nenv = {\n    'PATH': '/usr/local/bin',\n    'MY_VAR': 'my_value'\n}\n\n# Run a command with specified environment variables\nresult = subprocess.run(['/bin/sh', '-c', 'echo $MY_VAR'], env=env, capture_output=True, text=True)\n\n# Print the output of the command\nprint(&quot;Command Output:&quot;)\nprint(result.stdout)\n\n# Check if the command was successful\nif result.returncode == 0:\n    print(&quot;Command executed successfully.&quot;)\nelse:\n    print(f&quot;Error: {result.stderr}&quot;)\n</code></pre>\n\n<p><strong>Explanation</strong>: This example shows how to run a command with specified environment variables. The <code>env</code> dictionary is used to set environment variables for the subprocess. The <code>$MY_VAR</code> in the command string is replaced with its value from the environment.</p>\n<h3>Example 5: Running Commands in Parallel</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import subprocess\nimport time\n\n# List of commands to run in parallel\ncommands = [\n    ['echo', 'Command1'],\n    ['sleep', '2'],\n    ['echo', 'Command3']\n]\n\n# Create and start processes for each command\nprocesses = []\nfor cmd in commands:\n    process = subprocess.Popen(cmd, stdout=subprocess.PIPE)\n    processes.append(process)\n\n# Wait for all processes to complete\nfor p in processes:\n    output, _ = p.communicate()\n    print(f&quot;Output of {p.args}:&quot;)\n    print(output.decode('utf-8'))\n    print(&quot;Command executed successfully.&quot; if p.returncode == 0 else f&quot;Error: {p.stderr}&quot;)\n\n# Wait for all subprocesses to finish\nfor p in processes:\n    p.wait()\n</code></pre>\n\n<p><strong>Explanation</strong>: This example demonstrates how to run multiple commands in parallel using the <code>subprocess</code> module. Each command is executed in a separate process, and their outputs are captured. The script waits for all processes to complete before proceeding.</p>\n<h3>Example 6: Using <code>check_output()</code> for Simple Operations</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import subprocess\n\n# Use check_output() to run a simple command and capture its output\noutput = subprocess.check_output(['uname', '-a'], text=True)\n\n# Print the output of the command\nprint(&quot;Output:&quot;)\nprint(output)\n\n# Check if the command was successful\nif subprocess.call(['uname', '-a']) == 0:\n    print(&quot;Command executed successfully.&quot;)\nelse:\n    print(&quot;Error: Command execution failed.&quot;)\n</code></pre>\n\n<p><strong>Explanation</strong>: This example shows how to use <code>subprocess.check_output()</code> to run a simple command and capture its output. The function raises an exception if the command fails, making it convenient for checking the success of operations.</p>\n<h3>Example 7: Using <code>run()</code> with Timeout</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import subprocess\nimport time\n\n# Initialize the result variable\nresult = None\n\n# Run a command with a timeout\ntry:\n    result = subprocess.run(['sleep', '3'], timeout=2, capture_output=True, text=True)\nexcept subprocess.TimeoutExpired as e:\n    print(&quot;Command timed out.&quot;)\nelse:\n    # Print the output of the command\n    print(&quot;Command Output:&quot;)\n    print(result.stdout)\n\n# Check if the command was successful\nif result and result.returncode == 0:\n    print(&quot;Command executed successfully.&quot;)\nelse:\n    print(f&quot;Error: {result.stderr if result else 'No result available.'}&quot;)\n</code></pre>\n\n<p><strong>Explanation</strong>: This example demonstrates how to run a command with a timeout using <code>subprocess.run()</code>. If the command takes longer than the specified timeout, it raises a <code>TimeoutExpired</code> exception. The script handles this exception and prints an appropriate message.</p>\n<h3>Example 8: Using <code>run()</code> with Custom Signal Handling</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import subprocess\nimport os\n\n# Run a command with custom signal handling\ntry:\n    result = subprocess.run(['sleep', '10'], preexec_fn=os.setsid, capture_output=True, text=True)\nexcept subprocess.TimeoutExpired as e:\n    # Send the SIGTERM signal to the process group\n    os.killpg(os.getpgid(result.pid), signal.SIGTERM)\n    print(&quot;Command timed out. Sent SIGTERM.&quot;)\nelse:\n    # Print the output of the command\n    print(&quot;Command Output:&quot;)\n    print(result.stdout)\n\n# Check if the command was successful\nif result.returncode == 0:\n    print(&quot;Command executed successfully.&quot;)\nelse:\n    print(f&quot;Error: {result.stderr}&quot;)\n</code></pre>\n\n<p><strong>Explanation</strong>: This example shows how to run a command with custom signal handling using <code>subprocess.run()</code>. The <code>preexec_fn=os.setsid</code> argument creates a new process group, and the script sends the SIGTERM signal to the entire process group if the command times out.</p>\n<h3>Example 9: Using <code>run()</code> with Background Execution</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import subprocess\nimport time\n\n# Run a command in the background\nprocess = subprocess.Popen(['sleep', '5'], stdout=subprocess.PIPE)\n\n# Wait for the process to complete\noutput, _ = process.communicate()\n\n# Print the output of the command\nprint(&quot;Command Output:&quot;)\nprint(output.decode('utf-8'))\n\n# Check if the command was successful\nif process.returncode == 0:\n    print(&quot;Command executed successfully.&quot;)\nelse:\n    print(f&quot;Error: {process.stderr}&quot;)\n</code></pre>\n\n<p><strong>Explanation</strong>: This example demonstrates how to run a command in the background using <code>subprocess.Popen()</code>. The process is executed without waiting for it to complete, and the output is captured using <code>communicate()</code>.</p>\n<h3>Example 10: Using <code>run()</code> with Multiple Arguments</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import subprocess\n\n# Run a command with multiple arguments\nresult = subprocess.run(['echo', 'Hello', 'World'], capture_output=True, text=True)\n\n# Print the output of the command\nprint(&quot;Command Output:&quot;)\nprint(result.stdout)\n\n# Check if the command was successful\nif result.returncode == 0:\n    print(&quot;Command executed successfully.&quot;)\nelse:\n    print(f&quot;Error: {result.stderr}&quot;)\n</code></pre>\n\n<p><strong>Explanation</strong>: This example shows how to run a command with multiple arguments using <code>subprocess.run()</code>. The list <code>['echo', 'Hello', 'World']</code> specifies the command and its arguments.</p>\n<p>These examples cover various aspects of the <code>subprocess</code> module, including running commands, handling input/output, environment variables, parallel execution, error handling, and more. Each example is designed to be clear and concise, making it suitable for inclusion in a broader discussion or usage guide.</p>"
        },
        {
            "filename": "threading - Thread-based parallelism.md",
            "content": "<h1>threading - Thread-based parallelism</h1>\n<p>Below are comprehensive and well-documented code examples for various functionalities of the <code>threading</code> module in Python. Each example is designed to be clear, concise, and follows best practices suitable for inclusion in official documentation.</p>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-creating-and-starting-threads\">Creating and Starting Threads</a></li>\n<li><a href=\"#2-synchronizing-threads-with-locks\">Synchronizing Threads with Locks</a></li>\n<li><a href=\"#3-using-condition-variables\">Using Condition Variables</a></li>\n<li><a href=\"#4-using-semaphore\">Using Semaphore</a></li>\n<li><a href=\"#5-using-event-objects\">Using Event Objects</a></li>\n</ol>\n<h3>1. Creating and Starting Threads</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import threading\nimport time\n\ndef worker():\n    &quot;&quot;&quot;Example worker function that sleeps for a random amount of time.&quot;&quot;&quot;\n    import random\n    sleep_time = random.uniform(1, 3)\n    print(f&quot;Thread {threading.current_thread().name} sleeping for {sleep_time:.2f} seconds&quot;)\n    time.sleep(sleep_time)\n\n# Create and start multiple threads\nthreads = []\nfor i in range(5):\n    thread = threading.Thread(target=worker, name=f'Thread-{i+1}')\n    threads.append(thread)\n    thread.start()\n\n# Wait for all threads to complete\nfor thread in threads:\n    thread.join()\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- The <code>worker</code> function simulates a task that takes a random amount of time to execute.\n- We create multiple threads, each running the <code>worker</code> function. Each thread has a unique name.\n- We start each thread using the <code>start()</code> method.\n- Finally, we use <code>join()</code> on each thread to ensure all threads have completed before proceeding.</p>\n<h3>2. Synchronizing Threads with Locks</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import threading\nimport time\n\n# Shared resource\nshared_resource = 0\nlock = threading.Lock()\n\ndef increment():\n    &quot;&quot;&quot;Increment the shared resource using a lock.&quot;&quot;&quot;\n    global shared_resource\n    for _ in range(100):\n        # Acquire the lock before modifying the shared resource\n        with lock:\n            shared_resource += 1\n        time.sleep(0.001)  # Simulate some processing\n\n# Create and start multiple threads that increment the shared resource\nthreads = []\nfor i in range(5):\n    thread = threading.Thread(target=increment)\n    threads.append(thread)\n    thread.start()\n\n# Wait for all threads to complete\nfor thread in threads:\n    thread.join()\n\nprint(f&quot;Final value of shared_resource: {shared_resource}&quot;)\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- We use a <code>Lock</code> to ensure that only one thread can modify the shared resource at a time, preventing race conditions.\n- The <code>increment</code> function repeatedly increments the shared resource while holding the lock. This ensures that each increment operation is atomic.\n- Multiple threads are created and started to perform concurrent modifications.</p>\n<h3>3. Using Condition Variables</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import threading\nimport time\n\n# Shared resources\ncondition = threading.Condition()\nshared_resource = []\n\ndef producer():\n    &quot;&quot;&quot;Producer thread that adds items to the shared list.&quot;&quot;&quot;\n    for i in range(10):\n        with condition:\n            shared_resource.append(f&quot;Item {i}&quot;)\n            print(f&quot;Produced: {i}&quot;)\n            condition.notify()  # Notify one waiting consumer\n        time.sleep(0.5)\n\ndef consumer():\n    &quot;&quot;&quot;Consumer thread that takes items from the shared list.&quot;&quot;&quot;\n    while True:\n        with condition:\n            while not shared_resource:\n                condition.wait()  # Wait if no item is available\n            item = shared_resource.pop()\n            print(f&quot;Consumed: {item}&quot;)\n            condition.notify()  # Notify one producer\n\n# Create and start threads\nproducer_thread = threading.Thread(target=producer)\nconsumer_thread = threading.Thread(target=consumer)\n\nproducer_thread.start()\nconsumer_thread.start()\n\n# Wait for both threads to complete\nproducer_thread.join()\nconsumer_thread.join()\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- A <code>Condition</code> object is used to synchronize access to the shared list.\n- The producer thread adds items to the list and notifies a waiting consumer. Similarly, the consumer waits until an item is available in the list before consuming it.</p>\n<h3>4. Using Semaphore</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import threading\nimport time\n\n# Shared resource with semaphore control\nsemaphore = threading.Semaphore(3)\nshared_resource = []\n\ndef producer():\n    &quot;&quot;&quot;Producer thread that adds items to the shared list.&quot;&quot;&quot;\n    for i in range(10):\n        with semaphore:\n            shared_resource.append(f&quot;Item {i}&quot;)\n            print(f&quot;Produced: {i}&quot;)\n        time.sleep(0.5)\n\ndef consumer():\n    &quot;&quot;&quot;Consumer thread that takes items from the shared list.&quot;&quot;&quot;\n    while True:\n        with semaphore:\n            if not shared_resource:\n                continue\n            item = shared_resource.pop()\n            print(f&quot;Consumed: {item}&quot;)\n\n# Create and start threads\nproducer_thread = threading.Thread(target=producer)\nconsumer_thread1 = threading.Thread(target=consumer)\nconsumer_thread2 = threading.Thread(target=consumer)\n\nproducer_thread.start()\nconsumer_thread1.start()\nconsumer_thread2.start()\n\n# Wait for both producer and consumer threads to complete\nproducer_thread.join()\nconsumer_thread1.join()\nconsumer_thread2.join()\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- A <code>Semaphore</code> is used to limit the number of concurrent access to a shared resource. In this example, up to 3 producers can write to the list at a time.\n- The consumers wait until there are items in the list before consuming them.</p>\n<h3>5. Using Event Objects</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import threading\nimport time\n\n# Shared event object\nevent = threading.Event()\nshared_resource = None\n\ndef producer():\n    &quot;&quot;&quot;Producer thread that sets the shared resource and signals the event.&quot;&quot;&quot;\n    for i in range(10):\n        item = f&quot;Item {i}&quot;\n        print(f&quot;Produced: {item}&quot;)\n        shared_resource = item\n        event.set()  # Signal the consumer that an item is ready\n        time.sleep(0.5)\n\ndef consumer():\n    &quot;&quot;&quot;Consumer thread that waits for the event to be set and processes the shared resource.&quot;&quot;&quot;\n    event.wait()  # Wait until the producer signals\n    print(f&quot;Consumed: {shared_resource}&quot;)\n\n# Create and start threads\nproducer_thread = threading.Thread(target=producer)\nconsumer_thread = threading.Thread(target=consumer)\n\nproducer_thread.start()\nconsumer_thread.start()\n\n# Wait for both threads to complete\nproducer_thread.join()\nconsumer_thread.join()\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- An <code>Event</code> object is used to coordinate between the producer and consumer. The producer sets the event when it has a new item, and the consumer waits until the event is set before processing the resource.</p>\n<p>These examples cover various aspects of using threads in Python, including thread creation, synchronization with locks, condition variables, semaphores, and events. Each example is self-contained and demonstrates best practices for handling concurrent programming tasks.</p>"
        }
    ],
    "Cryptographic Services": [
        {
            "filename": "hashlib - Secure hashes and message digests.md",
            "content": "<h1>hashlib - Secure hashes and message digests</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-creating-a-hash-object\">Example 1: Creating a Hash Object</a></li>\n<li><a href=\"#example-2-creating-multiple-hash-objects\">Example 2: Creating Multiple Hash Objects</a></li>\n<li><a href=\"#example-3-using-hash-objects-in-a-context-manager\">Example 3: Using Hash Objects in a Context Manager</a></li>\n<li><a href=\"#example-4-using-hash-objects-with-input-streams\">Example 4: Using Hash Objects with Input Streams</a></li>\n<li><a href=\"#example-5-using-hash-objects-with-binary-files\">Example 5: Using Hash Objects with Binary Files</a></li>\n<li><a href=\"#example-6-using-hash-objects-with-custom-algorithms\">Example 6: Using Hash Objects with Custom Algorithms</a></li>\n<li><a href=\"#example-7-using-hash-objects-with-different-data-types\">Example 7: Using Hash Objects with Different Data Types</a></li>\n</ol>\n<p>The <code>hashlib</code> module in Python provides access to secure hash and message digest algorithms. It is part of the Python Standard Library, making it a fundamental tool for cryptographic operations. Below are comprehensive examples demonstrating various functionalities provided by the <code>hashlib</code> module.</p>\n<h3>Example 1: Creating a Hash Object</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import hashlib\n\n# Create a SHA-256 hash object\nsha256_hash = hashlib.sha256()\n\n# Update the hash object with some data\nsha256_hash.update(b&quot;Hello, World!&quot;)\n\n# Get the hexadecimal representation of the hash\nhex_digest = sha256_hash.hexdigest()\nprint(&quot;SHA-256 Hash:&quot;, hex_digest)\n</code></pre>\n\n<p><strong>Explanation</strong>: This example demonstrates how to create a SHA-256 hash object using <code>hashlib.sha256()</code>. It then updates the hash with the byte string <code>\"Hello, World!\"</code> and retrieves the hexadecimal representation of the resulting hash.</p>\n<h3>Example 2: Creating Multiple Hash Objects</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import hashlib\n\n# Create multiple hash objects for different algorithms\nmd5_hash = hashlib.md5()\nsha1_hash = hashlib.sha1()\n\n# Update each hash object with some data\nmd5_hash.update(b&quot;Secure hash and message digest&quot;)\nsha1_hash.update(b&quot;Secure hash and message digest&quot;)\n\n# Get the hexadecimal representation of each hash\nmd5_hex_digest = md5_hash.hexdigest()\nsha1_hex_digest = sha1_hash.hexdigest()\n\nprint(&quot;MD5 Hash:&quot;, md5_hex_digest)\nprint(&quot;SHA-1 Hash:&quot;, sha1_hex_digest)\n</code></pre>\n\n<p><strong>Explanation</strong>: This example shows how to create multiple hash objects for different algorithms (MD5 and SHA-1) using <code>hashlib.md5()</code> and <code>hashlib.sha1()</code>, respectively. It updates each hash object with the byte string <code>\"Secure hash and message digest\"</code> and retrieves the hexadecimal representation of each resulting hash.</p>\n<h3>Example 3: Using Hash Objects in a Context Manager</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import hashlib\nfrom contextlib import contextmanager\n\n@contextmanager\ndef compute_hash(algorithm):\n    # Create a hash object using the specified algorithm\n    hasher = hashlib.new(algorithm)\n\n    try:\n        yield hasher\n    finally:\n        # Update the hash with the bytes from the buffer\n        hasher.update(b&quot;Secure hash and message digest&quot;)\n        print(f&quot;{algorithm.capitalize()} Hash:&quot;, hasher.hexdigest())\n\n# Use the context manager to compute a SHA-256 hash\nwith compute_hash(&quot;sha256&quot;) as sha256:\n    pass\n</code></pre>\n\n<p><strong>Explanation</strong>: This example demonstrates how to use the <code>hashlib.new()</code> function with a context manager (<code>contextlib.contextmanager</code>) to create a hash object for a specified algorithm. The hash object is updated with the byte string <code>\"Secure hash and message digest\"</code> in the context, and the final hexadecimal representation of the hash is printed upon exit.</p>\n<h3>Example 4: Using Hash Objects with Input Streams</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import hashlib\nfrom io import BytesIO\n\n# Create a hash object using SHA-256\nsha256_hash = hashlib.sha256()\n\n# Create an input stream from a byte string\ninput_stream = BytesIO(b&quot;Secure hash and message digest&quot;)\n\n# Update the hash with data from the input stream\nsha256_hash.update(input_stream.read())\n\n# Get the hexadecimal representation of the hash\nhex_digest = sha256_hash.hexdigest()\nprint(&quot;SHA-256 Hash from Stream:&quot;, hex_digest)\n\n# Reset the input stream for re-use\ninput_stream.seek(0)\n</code></pre>\n\n<p><strong>Explanation</strong>: This example shows how to create a SHA-256 hash object and update it with data read from an <code>io.BytesIO</code> object. The hash is then finalized, and the hexadecimal representation of the hash is printed. The input stream is reset for re-use.</p>\n<h3>Example 5: Using Hash Objects with Binary Files</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import hashlib\nfrom pathlib import Path\n\n# Create a hash object using MD5\nmd5_hash = hashlib.md5()\n\n# Open a binary file in read mode\nwith open(Path(&quot;example.txt&quot;), &quot;rb&quot;) as file:\n    # Update the hash object with data from the file\n    md5_hash.update(file.read())\n\n# Get the hexadecimal representation of the hash\nhex_digest = md5_hash.hexdigest()\nprint(&quot;MD5 Hash from File:&quot;, hex_digest)\n</code></pre>\n\n<p><strong>Explanation</strong>: This example demonstrates how to create an MD5 hash object and update it with data read from a binary file using <code>Path</code> for file path handling. The hash is then finalized, and the hexadecimal representation of the hash is printed.</p>\n<h3>Example 6: Using Hash Objects with Custom Algorithms</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import hashlib\n\n# Define a custom hash algorithm (e.g., MD5-like)\ndef custom_hash(data):\n    # Create an MD5 hash object\n    md5_hash = hashlib.md5()\n\n    # Update the hash object with the data\n    md5_hash.update(data)\n\n    # Return the hexadecimal representation of the hash\n    return md5_hash.hexdigest()\n\n# Use the custom hash function\ncustom_hex_digest = custom_hash(b&quot;Custom hash example&quot;)\nprint(&quot;Custom Hash:&quot;, custom_hex_digest)\n</code></pre>\n\n<p><strong>Explanation</strong>: This example demonstrates how to define a custom hash algorithm by creating an MD5 hash object and updating it with a given byte string. The hexadecimal representation of the custom hash is then printed.</p>\n<h3>Example 7: Using Hash Objects with Different Data Types</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import hashlib\n\n# Create a SHA-256 hash object\nsha256_hash = hashlib.sha256()\n\n# Update the hash object with integers, floats, and strings\nsha256_hash.update(12345)\nsha256_hash.update(3.14)\nsha256_hash.update(&quot;Hello, World!&quot;)\n\n# Get the hexadecimal representation of the hash\nhex_digest = sha256_hash.hexdigest()\nprint(&quot;SHA-256 Hash with Mixed Data Types:&quot;, hex_digest)\n</code></pre>\n\n<p><strong>Explanation</strong>: This example shows how to create a SHA-256 hash object and update it with integers (12345), floats (3.14), and strings (\"Hello, World!\"). The hash is then finalized, and the hexadecimal representation of the mixed data types hash is printed.</p>\n<p>These examples cover various aspects of using the <code>hashlib</code> module, including creating different hash objects, updating them with different inputs, and using hash objects in context managers and streams.</p>"
        },
        {
            "filename": "hmac - Keyed-Hashing for Message Authentication.md",
            "content": "<h1>hmac - Keyed-Hashing for Message Authentication</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-creating-an-hmac-using-sha-256\">Example 1: Creating an HMAC Using SHA-256</a></li>\n<li><a href=\"#example-2-creating-an-hmac-using-sha-1\">Example 2: Creating an HMAC Using SHA-1</a></li>\n<li><a href=\"#example-3-verifying-an-hmac\">Example 3: Verifying an HMAC</a></li>\n<li><a href=\"#example-4-using-hmaccompare_digest-for-safe-comparison\">Example 4: Using <code>hmac.compare_digest</code> for Safe Comparison</a></li>\n<li><a href=\"#example-5-creating-an-hmac-with-additional-data\">Example 5: Creating an HMAC with Additional Data</a></li>\n</ol>\n<p>The <code>hmac</code> module in Python provides a way to create message authentication codes (MACs) using cryptographic hash functions such as SHA-1, SHA-256, etc. A MAC is a fixed-size binary value that verifies the integrity of a message and ensures it hasn't been tampered with during transmission or storage.</p>\n<p>Below are comprehensive examples for various functionalities in the <code>hmac</code> module:</p>\n<h3>Example 1: Creating an HMAC Using SHA-256</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import hmac\nimport hashlib\n\n# Define a secret key and a message\nsecret_key = b'secret_key'\nmessage = b'This is a test message'\n\n# Create an HMAC object using SHA-256 and the secret key\nhmac_obj = hmac.new(secret_key, msg=message, digestmod=hashlib.sha256)\n\n# Calculate and print the MAC value\nmac_value = hmac_obj.digest()\nprint(f&quot;SHA-256 HMAC: {mac_value.hex()}&quot;)\n</code></pre>\n\n<h3>Example 2: Creating an HMAC Using SHA-1</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import hmac\nimport hashlib\n\n# Define a secret key and a message\nsecret_key = b'secret_key'\nmessage = b'This is a test message'\n\n# Create an HMAC object using SHA-1 and the secret key\nhmac_obj = hmac.new(secret_key, msg=message, digestmod=hashlib.sha1)\n\n# Calculate and print the MAC value\nmac_value = hmac_obj.digest()\nprint(f&quot;SHA-1 HMAC: {mac_value.hex()}&quot;)\n</code></pre>\n\n<h3>Example 3: Verifying an HMAC</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import hmac\nimport hashlib\n\n# Define a secret key and a message\nsecret_key = b'secret_key'\nmessage = b'This is a test message'\n\n# Calculate the expected MAC value using SHA-256\nexpected_mac_value = b'expected_mac_value'  # Replace with the actual expected MAC value\n\n# Create an HMAC object using SHA-256 and the secret key\nhmac_obj = hmac.new(secret_key, msg=message, digestmod=hashlib.sha256)\n\n# Calculate the actual MAC value\nactual_mac_value = hmac_obj.digest()\n\n# Verify if the calculated MAC matches the expected MAC\nif hmac.compare_digest(actual_mac_value, expected_mac_value):\n    print(&quot;The HMAC is valid.&quot;)\nelse:\n    print(&quot;The HMAC is invalid.&quot;)\n</code></pre>\n\n<h3>Example 4: Using <code>hmac.compare_digest</code> for Safe Comparison</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import hmac\n\n# Define two MAC values to compare safely\nmac1 = b'6c967015e832e1d8f9b7b21a45d8b238'\nmac2 = b'6c967015e832e1d8f9b7b21a45d8b238'\n\n# Compare the MACs safely\nif hmac.compare_digest(mac1, mac2):\n    print(&quot;The MACs are identical.&quot;)\nelse:\n    print(&quot;The MACs differ.&quot;)\n\n# Note: Use `hmac.compare_digest` to securely compare MACs to prevent timing attacks.\n</code></pre>\n\n<h3>Example 5: Creating an HMAC with Additional Data</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import hmac\nimport hashlib\n\n# Define a secret key, message, and additional data\nsecret_key = b'secret_key'\nmessage = b'This is a test message'\nadditional_data = b'Additional information'\n\n# Create an HMAC object using SHA-256 and the secret key, including additional data\nhmac_obj = hmac.new(secret_key, msg=message + additional_data, digestmod=hashlib.sha256)\n\n# Calculate and print the MAC value\nmac_value = hmac_obj.digest()\nprint(f&quot;SHA-256 HMAC with additional data: {mac_value.hex()}&quot;)\n</code></pre>\n\n<p>These examples demonstrate how to use the <code>hmac</code> module to create, calculate, verify, and compare HMAC values securely. Each example is well-documented with comments explaining the purpose of each part of the code.</p>"
        },
        {
            "filename": "secrets - Generate secure random numbers for managing secrets.md",
            "content": "<h1>secrets - Generate secure random numbers for managing secrets</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-generating-a-secure-random-integer\">1. Generating a Secure Random Integer</a></li>\n<li><a href=\"#2-generating-a-secure-random-float\">2. Generating a Secure Random Float</a></li>\n<li><a href=\"#3-generating-a-secure-random-bytes\">3. Generating a Secure Random Bytes</a></li>\n<li><a href=\"#4-generating-a-secure-random-token\">4. Generating a Secure Random Token</a></li>\n<li><a href=\"#5-generating-a-secure-random-uuid\">5. Generating a Secure Random UUID</a></li>\n<li><a href=\"#6-generating-a-secure-random-hexadecimal-string\">6. Generating a Secure Random Hexadecimal String</a></li>\n<li><a href=\"#7-generating-a-secure-random-alphanumeric-string\">7. Generating a Secure Random Alphanumeric String</a></li>\n<li><a href=\"#explanation\">Explanation</a></li>\n</ol>\n<p>Below are comprehensive and well-documented code examples for various functionalities of the <code>secrets</code> module, which is used to generate cryptographically strong random numbers suitable for managing data such as passwords, account authentication, tokens, and related secrets.</p>\n<h3>1. Generating a Secure Random Integer</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import secrets\nimport random\n\n# Generate a secure random integer between 'a' (inclusive) and 'b' (exclusive)\nsecure_int = secrets.randbelow(100)\nprint(f&quot;Secure Random Integer: {secure_int}&quot;)\n\n# Generate a secure random integer within a specified range, inclusive\nsecure_int_inclusive = random.randint(1, 100)\nprint(f&quot;Secure Random Integer Inclusive: {secure_int_inclusive}&quot;)\n</code></pre>\n\n<h3>2. Generating a Secure Random Float</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import secrets\nimport random\n\n# Generate a secure random float between 0.0 (inclusive) and 1.0 (exclusive)\nsecure_float = random.random()\nprint(f&quot;Secure Random Float: {secure_float}&quot;)\n\n# Generate a secure random float within a specified range, inclusive\nsecure_float_inclusive = random.uniform(0.0, 1.0)\nprint(f&quot;Secure Random Float Inclusive: {secure_float_inclusive}&quot;)\n</code></pre>\n\n<h3>3. Generating a Secure Random Bytes</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import secrets\n\n# Generate a secure random byte string of a specified length\nsecure_bytes = secrets.token_bytes(16)\nprint(f&quot;Secure Random Bytes: {secure_bytes}&quot;)\n\n# Convert the bytes to a hexadecimal string for easier readability\nsecure_hex_string = secure_bytes.hex()\nprint(f&quot;Secure Hex String: {secure_hex_string}&quot;)\n</code></pre>\n\n<h3>4. Generating a Secure Random Token</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import secrets\n\n# Generate a secure random token of a specified length, which is useful for authentication tokens\ntoken_length = 16\nsecure_token = secrets.token_urlsafe(token_length)\nprint(f&quot;Secure Token (URL-safe): {secure_token}&quot;)\n\n# Alternatively, you can use the bytes version if needed\nsecure_token_bytes = secrets.token_bytes(token_length)\nprint(f&quot;Secure Token (Bytes): {secure_token_bytes.hex()}&quot;)\n</code></pre>\n\n<h3>5. Generating a Secure Random UUID</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import secrets\nimport uuid\n\n# Generate a secure random UUID\nsecure_uuid = uuid.uuid4()\nprint(f&quot;Secure UUID: {secure_uuid}&quot;)\n\n# Generate a secure random node-based UUID\nsecure_node_based_uuid = uuid.uuid1()\nprint(f&quot;Secure Node-Based UUID: {secure_node_based_uuid}&quot;)\n</code></pre>\n\n<h3>6. Generating a Secure Random Hexadecimal String</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import secrets\n\n# Generate a secure random hexadecimal string of a specified length\nhex_length = 32\nsecure_hex_string = secrets.token_hex(hex_length)\nprint(f&quot;Secure Hexadecimal String: {secure_hex_string}&quot;)\n\n# Convert the hex string to bytes for easier manipulation if needed\nsecure_hex_bytes = bytes.fromhex(secure_hex_string)\nprint(f&quot;Secure Hex Bytes: {secure_hex_bytes}&quot;)\n</code></pre>\n\n<h3>7. Generating a Secure Random Alphanumeric String</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import secrets\nimport string\n\n# Define the character set (lowercase, uppercase, and digits)\ncharacters = string.ascii_letters + string.digits\n\n# Generate a secure random alphanumeric string of a specified length\nalphanumeric_length = 20\nsecure_alphanumeric_string = ''.join(secrets.choice(characters) for _ in range(alphanumeric_length))\nprint(f&quot;Secure Alphanumeric String: {secure_alphanumeric_string}&quot;)\n</code></pre>\n\n<h3>Explanation</h3>\n<ul>\n<li><strong><code>secrets.randbelow(b)</code></strong>: Generates a random integer less than <code>b</code>.</li>\n<li><strong><code>random.randint(a, b)</code></strong>: Generates a random integer between <code>a</code> and <code>b</code>, inclusive.</li>\n<li><strong><code>random.random()</code></strong>: Generates a random float between 0.0 and 1.0.</li>\n<li><strong><code>random.uniform(a, b)</code></strong>: Generates a random float between <code>a</code> and <code>b</code>, inclusive.</li>\n<li><strong><code>secrets.token_bytes(n)</code></strong>: Generates a random byte string of length <code>n</code>.</li>\n<li><strong><code>secrets.token_urlsafe(n)</code></strong>: Generates a URL-safe base64-encoded string of length <code>n</code>.</li>\n<li><strong><code>uuid.uuid4()</code></strong>: Generates a randomly generated UUID (Universally Unique Identifier).</li>\n<li><strong><code>uuid.uuid1()</code></strong>: Generates a node-based UUID, which is useful for generating unique identifiers in distributed systems.</li>\n<li><strong><code>secrets.token_hex(n)</code></strong>: Generates a hexadecimal string of length <code>n</code>.</li>\n<li><strong><code>secrets.choice(characters)</code></strong>: Selects a random character from the provided characters.</li>\n</ul>\n<p>These examples demonstrate how to use various functionalities of the <code>secrets</code> module to generate secure random numbers and strings suitable for managing secrets.</p>"
        }
    ],
    "Custom Python Interpreters": [
        {
            "filename": "code - Interpreter base classes.md",
            "content": "<h1>code - Interpreter base classes</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-creating-a-code-object\">1. Creating a Code Object</a></li>\n<li><a href=\"#2-executing-code-objects\">2. Executing Code Objects</a></li>\n<li><a href=\"#3-creating-a-compiled-code-object\">3. Creating a Compiled Code Object</a></li>\n<li><a href=\"#4-creating-a-code-object-with-line-numbers\">4. Creating a Code Object with Line Numbers</a></li>\n<li><a href=\"#5-creating-a-code-object-with-constants\">5. Creating a Code Object with Constants</a></li>\n<li><a href=\"#6-creating-a-code-object-with-variables\">6. Creating a Code Object with Variables</a></li>\n<li><a href=\"#conclusion\">Conclusion</a></li>\n</ol>\n<p>The <code>code</code> module in Python is a low-level interface to the interactive interpreter's bytecode execution environment. This module provides a way to create, manipulate, and execute code objects, which are used by the Python interpreter itself.</p>\n<p>Below are comprehensive examples for each functionality provided by the <code>code</code> module:</p>\n<h3>1. Creating a Code Object</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import code\n\n# Define a simple function using a string representation of code\nsource_code = &quot;&quot;&quot;\ndef add(a, b):\n    return a + b\n&quot;&quot;&quot;\n\n# Create a code object from the source code string\ncode_obj = compile(source_code, '&lt;string&gt;', 'exec')\n\n# Print the type of the code object\nprint(type(code_obj))  # &lt;class 'types.CodeType'&gt;\n</code></pre>\n\n<h3>2. Executing Code Objects</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import code\n\n# Define a simple function using a string representation of code\nsource_code = &quot;&quot;&quot;\ndef multiply(a, b):\n    return a * b\n&quot;&quot;&quot;\n\n# Create a code object from the source code string\ncode_obj = compile(source_code, '&lt;string&gt;', 'exec')\n\n# Execute the code object in a new namespace\nnamespace = {}\nexec(code_obj, namespace)\n\n# Access the function defined by the code object\nmultiply_function = namespace['multiply']\n\n# Call the function and print the result\nresult = multiply_function(3, 4)\nprint(result)  # Output: 12\n</code></pre>\n\n<h3>3. Creating a Compiled Code Object</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import code\n\n# Define a simple function using a string representation of code\nsource_code = &quot;&quot;&quot;\ndef divide(a, b):\n    if b == 0:\n        raise ZeroDivisionError(&quot;division by zero&quot;)\n    return a / b\n&quot;&quot;&quot;\n\n# Create a compiled code object from the source code string\ncode_obj = compile(source_code, '&lt;string&gt;', 'exec')\n\n# Execute the compiled code object in a new namespace\nnamespace = {}\neval(code_obj, namespace)\n\n# Access the function defined by the compiled code object\ndivide_function = namespace['divide']\n\n# Call the function and print the result\nresult = divide_function(10, 2)\nprint(result)  # Output: 5.0\n\ntry:\n    result = divide_function(10, 0)\nexcept ZeroDivisionError as e:\n    print(e)  # Output: division by zero\n</code></pre>\n\n<h3>4. Creating a Code Object with Line Numbers</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import code\n\n# Define a simple function using a string representation of code\nsource_code = &quot;&quot;&quot;\ndef add(a, b):\n    return a + b\n&quot;&quot;&quot;\n\n# Create a code object from the source code string with line numbers\ncode_obj = compile(source_code, '&lt;string&gt;', 'exec')\n\n# Print the code object to see line numbers\nprint(code_obj)  # Output: &lt;code object at 0x7f9c5b1d2e08&gt;\n</code></pre>\n\n<h3>5. Creating a Code Object with Constants</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import code\n\n# Define a simple function using a string representation of code with constants\nsource_code = &quot;&quot;&quot;\ndef factorial(n):\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n&quot;&quot;&quot;\n\n# Create a code object from the source code string with constants\ncode_obj = compile(source_code, '&lt;string&gt;', 'exec')\n\n# Execute the code object in a new namespace\nnamespace = {}\neval(code_obj, namespace)\n\n# Access the function defined by the code object\nfactorial_function = namespace['factorial']\n\n# Call the function and print the result\nresult = factorial_function(5)\nprint(result)  # Output: 120\n</code></pre>\n\n<h3>6. Creating a Code Object with Variables</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import code\n\n# Define a simple function using a string representation of code with variables\nsource_code = &quot;&quot;&quot;\ndef calculate(a, b):\n    return a + b, a - b, a * b, a / b\n&quot;&quot;&quot;\n\n# Create a code object from the source code string with variables\ncode_obj = compile(source_code, '&lt;string&gt;', 'exec')\n\n# Execute the code object in a new namespace\nnamespace = {'a': 10, 'b': 5}\neval(code_obj, namespace)\n\n# Access the function defined by the code object and its results\ncalculate_function = namespace['calculate']\nresult = calculate_function(namespace['a'], namespace['b'])\n\nprint(result)  # Output: (15, 5, 50, 2.0)\n</code></pre>\n\n<h3>Conclusion</h3>\n<p>The <code>code</code> module provides a low-level interface to Python's bytecode execution environment, allowing developers to create and manipulate code objects. These examples demonstrate how to use the <code>code</code> module to compile and execute code in different ways, including handling constants, variables, and line numbers.</p>\n<p>This documentation should be suitable for inclusion in official Python documentation, providing clear explanations and practical examples of each feature.</p>"
        },
        {
            "filename": "codeop - Compile Python code.md",
            "content": "<h1>codeop - Compile Python code</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#additional-examples\">Additional Examples:</a></li>\n<li><a href=\"#example-2-compiling-and-executing-multiple-statements\">Example 2: Compiling and Executing Multiple Statements</a></li>\n<li><a href=\"#example-3-using-compile-function\">Example 3: Using <code>compile()</code> Function</a></li>\n<li><a href=\"#example-4-compiling-and-executing-code-with-specific-mode\">Example 4: Compiling and Executing Code with Specific Mode</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n</ol>\n<p>The <code>codeop</code> module in Python is used to compile Python source code into bytecode, which can then be executed by the CPython interpreter. This can be useful for various purposes such as parsing and transforming code or optimizing it before execution.</p>\n<p>Here are comprehensive examples demonstrating different functionalities of the <code>codeop</code> module:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import codeop\n\n# Function to compile a string of Python code into bytecode\ndef compile_code(code_string):\n    # Use codeop.compile_command() to compile the code string\n    try:\n        compiled_code = codeop.compile_command(code_string)\n        return compiled_code\n    except SyntaxError as e:\n        print(f&quot;Syntax error: {e}&quot;)\n        return None\n\n# Example usage of compile_code()\ncode_to_compile = &quot;&quot;&quot;\ndef hello_world():\n    print(&quot;Hello, World!&quot;)\n&quot;&quot;&quot;\n\ncompiled_result = compile_code(code_to_compile)\n\nif compiled_result:\n    # Execute the compiled bytecode\n    exec(compiled_result)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ol>\n<li>\n<p><strong><code>compile_command()</code> Function</strong>: This function is used to compile a string of Python code into a compiled object (a <code>code</code> instance). It processes the input string according to the rules of the Python grammar and compiles it into bytecode.</p>\n</li>\n<li>\n<p><strong>Error Handling</strong>: The example includes basic error handling to catch and print syntax errors when the input code does not conform to Python's syntax rules.</p>\n</li>\n<li>\n<p><strong>Executing Compiled Code</strong>: Once compiled, you can execute the bytecode using <code>exec()</code>. This function takes a compiled object and evaluates its contents in the current scope.</p>\n</li>\n</ol>\n<h3>Additional Examples:</h3>\n<h4>Example 2: Compiling and Executing Multiple Statements</h4>\n<pre class=\"codehilite\"><code class=\"language-python\"># String containing multiple statements\nmultiple_statements = &quot;&quot;&quot;\nx = 10\ny = 20\nz = x + y\nprint(z)\n&quot;&quot;&quot;\n\ncompiled_result_multiple = compile_code(multiple_statements)\n\nif compiled_result_multiple:\n    exec(compiled_result_multiple)\n</code></pre>\n\n<h4>Example 3: Using <code>compile()</code> Function</h4>\n<p>The <code>codeop</code> module also provides a direct way to use the built-in <code>compile()</code> function from Python's standard library.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># String containing Python code\nanother_code = &quot;a = [1, 2, 3]; b = a + [4, 5]; print(b)&quot;\n\ncompiled_result_direct = compile(another_code, &quot;&lt;string&gt;&quot;, &quot;exec&quot;)\n\nif compiled_result_direct:\n    exec(compiled_result_direct)\n</code></pre>\n\n<h4>Example 4: Compiling and Executing Code with Specific Mode</h4>\n<p>You can specify the mode of compilation using the <code>mode</code> parameter in the <code>compile()</code> function. This allows you to differentiate between statement execution (<code>\"exec\"</code>), expression evaluation (<code>\"eval\"</code>), or module creation (<code>\"single\"</code>).</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># String containing Python code\ncode_for_module = &quot;&quot;&quot;\ndef my_function():\n    return &quot;Hello, from a module!&quot;\n&quot;&quot;&quot;\n\ncompiled_result_module = compile(code_for_module, &quot;&lt;module&gt;&quot;, &quot;single&quot;)\n\nif compiled_result_module:\n    # This will create a module object and execute the code inside it\n    exec(compiled_result_module)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ul>\n<li><strong><code>mode</code> Parameter</strong>: The <code>mode</code> parameter in the <code>compile()</code> function specifies how to interpret the input string. <code>\"exec\"</code> executes all statements, <code>\"eval\"</code> evaluates a single expression, and <code>\"single\"</code> creates a module object.</li>\n</ul>\n<p>These examples demonstrate various ways to use the <code>codeop</code> module for compiling and executing Python code, covering different scenarios such as executing multiple statements, using built-in functions, and handling errors gracefully.</p>"
        }
    ],
    "Data Compression and Archiving": [
        {
            "filename": "bz2 - Support for bzip2 compression.md",
            "content": "<h1>bz2 - Support for bzip2 compression</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-compressing-a-string\">1. Compressing a String</a></li>\n<li><a href=\"#2-decompressing-a-byte-string\">2. Decompressing a Byte String</a></li>\n<li><a href=\"#3-writing-compressed-data-to-a-file\">3. Writing Compressed Data to a File</a></li>\n<li><a href=\"#4-reading-compressed-data-from-a-file\">4. Reading Compressed Data from a File</a></li>\n<li><a href=\"#5-handling-compressed-data-in-a-streaming-context\">5. Handling Compressed Data in a Streaming Context</a></li>\n<li><a href=\"#6-using-bz2bz2file-for-file-operations\">6. Using <code>bz2.BZ2File</code> for File Operations</a></li>\n<li><a href=\"#7-handling-large-files-efficiently\">7. Handling Large Files Efficiently</a></li>\n</ol>\n<p>Here are comprehensive code examples for the <code>bz2</code> module in Python, which provides support for bzip2 compression:</p>\n<h3>1. Compressing a String</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import bz2\n\ndef compress_string(input_string):\n    &quot;&quot;&quot;\n    Compresses a given string using the bzip2 algorithm.\n\n    Args:\n        input_string (str): The string to be compressed.\n\n    Returns:\n        bytes: The compressed data.\n    &quot;&quot;&quot;\n    # Convert the string to bytes if it isn't already\n    if not isinstance(input_string, bytes):\n        input_bytes = input_string.encode('utf-8')\n    else:\n        input_bytes = input_string\n\n    # Compress the bytes using bz2\n    compressed_data = bz2.compress(input_bytes)\n\n    return compressed_data\n\n# Example usage\noriginal_text = &quot;This is a sample text to be compressed using bzip2.&quot;\ncompressed = compress_string(original_text)\nprint(&quot;Original Length:&quot;, len(original_text))\nprint(&quot;Compressed Length:&quot;, len(compressed))\n</code></pre>\n\n<h3>2. Decompressing a Byte String</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import bz2\n\ndef decompress_bytes(compressed_data):\n    &quot;&quot;&quot;\n    Decompresses a compressed byte string using the bzip2 algorithm.\n\n    Args:\n        compressed_data (bytes): The compressed data to be decompressed.\n\n    Returns:\n        bytes: The decompressed data.\n    &quot;&quot;&quot;\n    # Decompress the bytes using bz2\n    decompressed_bytes = bz2.decompress(compressed_data)\n\n    return decompressed_bytes\n\n# Example usage\ncompressed_data = b&quot;1HjBkLmNpQrStUvWxYz01hJkLmNpQrStUvWxYz&quot;\noriginal_text = decompress_bytes(compressed_data)\nprint(&quot;Decompressed Text:&quot;, original_text.decode('utf-8'))\n</code></pre>\n\n<h3>3. Writing Compressed Data to a File</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import bz2\n\ndef write_compressed_to_file(input_string, filename):\n    &quot;&quot;&quot;\n    Writes the compressed version of a string to a file using bzip2.\n\n    Args:\n        input_string (str): The string to be compressed and written.\n        filename (str): The name of the file to write to.\n    &quot;&quot;&quot;\n    # Compress the string\n    compressed_data = compress_string(input_string)\n\n    # Open the file in binary write mode and write the compressed data\n    with open(filename, 'wb') as file:\n        file.write(compressed_data)\n\n# Example usage\ninput_text = &quot;This is a sample text to be written to a bzip2-compressed file.&quot;\nwrite_compressed_to_file(input_text, 'compressed_output.bz2')\n</code></pre>\n\n<h3>4. Reading Compressed Data from a File</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import bz2\n\ndef read_compressed_from_file(filename):\n    &quot;&quot;&quot;\n    Reads compressed data from a file and returns the decompressed string.\n\n    Args:\n        filename (str): The name of the file containing the compressed data.\n\n    Returns:\n        str: The decompressed string.\n    &quot;&quot;&quot;\n    # Open the file in binary read mode\n    with open(filename, 'rb') as file:\n        compressed_data = file.read()\n\n    # Decompress the bytes\n    decompressed_bytes = decompress_bytes(compressed_data)\n\n    return decompressed_bytes.decode('utf-8')\n\n# Example usage\nfilename = 'compressed_output.bz2'\noriginal_text = read_compressed_from_file(filename)\nprint(&quot;Original Text:&quot;, original_text)\n</code></pre>\n\n<h3>5. Handling Compressed Data in a Streaming Context</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import bz2\n\ndef stream_compress(input_stream, output_stream):\n    &quot;&quot;&quot;\n    Streams the compression of data from an input stream to an output stream.\n\n    Args:\n        input_stream (io.BytesIO): The input stream containing the data to be compressed.\n        output_stream (io.BytesIO): The output stream to write the compressed data.\n    &quot;&quot;&quot;\n    # Compress the input stream and write it to the output stream\n    with bz2.BZ2Compressor() as compressor:\n        while True:\n            chunk = input_stream.read(1024)\n            if not chunk:\n                break\n            output_stream.write(compressor.compress(chunk))\n\n# Example usage\ninput_bytes = b&quot;1HjBkLmNpQrStUvWxYz01hJkLmNpQrStUvWxYz&quot;\nwith io.BytesIO(input_bytes) as input_buffer, io.BytesIO() as output_buffer:\n    stream_compress(input_buffer, output_buffer)\n    compressed_data = output_buffer.getvalue()\nprint(&quot;Compressed Data:&quot;, compressed_data)\n\n# Decompression example\noutput_buffer.seek(0)\ndecompressed_data = decompress_bytes(output_buffer.read())\nprint(&quot;Decompressed Data:&quot;, decompressed_data.decode('utf-8'))\n</code></pre>\n\n<h3>6. Using <code>bz2.BZ2File</code> for File Operations</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import bz2\n\ndef read_bz2_file(filename):\n    &quot;&quot;&quot;\n    Reads data from a bzip2-compressed file and returns the decompressed string.\n\n    Args:\n        filename (str): The name of the bzip2-compressed file to read.\n\n    Returns:\n        str: The decompressed string.\n    &quot;&quot;&quot;\n    # Open the file in binary read mode\n    with bz2.BZ2File(filename, 'r') as bz2_file:\n        return bz2_file.read().decode('utf-8')\n\ndef write_bz2_file(input_string, filename):\n    &quot;&quot;&quot;\n    Writes a compressed version of a string to a bzip2-compressed file.\n\n    Args:\n        input_string (str): The string to be compressed and written.\n        filename (str): The name of the bzip2-compressed file to write to.\n    &quot;&quot;&quot;\n    # Open the file in binary write mode\n    with bz2.BZ2File(filename, 'w') as bz2_file:\n        bz2_file.write(input_string.encode('utf-8'))\n\n# Example usage\ninput_text = &quot;This is a sample text to be written to a bzip2-compressed file.&quot;\nwrite_bz2_file(input_text, 'compressed_output.bz2')\nprint(&quot;Written Text:&quot;, read_bz2_file('compressed_output.bz2'))\n</code></pre>\n\n<h3>7. Handling Large Files Efficiently</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import bz2\nimport io\n\ndef compress_large_file(input_filename, output_filename):\n    &quot;&quot;&quot;\n    Compresses a large file using bzip2 in chunks.\n\n    Args:\n        input_filename (str): The name of the large file to be compressed.\n        output_filename (str): The name of the compressed file to write.\n    &quot;&quot;&quot;\n    # Open the large file in binary read mode\n    with open(input_filename, 'rb') as input_file, bz2.BZ2File(output_filename, 'w') as output_file:\n        while True:\n            chunk = input_file.read(1024 * 1024)  # Read 1MB chunks\n            if not chunk:\n                break\n            output_file.write(chunk)\n\ndef decompress_large_file(input_filename, output_filename):\n    &quot;&quot;&quot;\n    Decompresses a large bzip2-compressed file into another.\n\n    Args:\n        input_filename (str): The name of the compressed file to read.\n        output_filename (str): The name of the decompressed file to write.\n    &quot;&quot;&quot;\n    # Open the compressed file in binary read mode\n    with bz2.BZ2File(input_filename, 'rb') as bz2_file, open(output_filename, 'wb') as output_file:\n        while True:\n            chunk = bz2_file.read(1024 * 1024)  # Read 1MB chunks\n            if not chunk:\n                break\n            output_file.write(chunk)\n\n# Example usage\ninput_large_file = 'large_input.txt'\noutput_compressed_file = 'compressed_large_output.bz2'\ncompress_large_file(input_large_file, output_compressed_file)\nprint(&quot;Compressed Large File:&quot;, output_compressed_file)\n\noutput_decompressed_file = 'decompressed_large_output.txt'\ndecompress_large_file(output_compressed_file, output_decompressed_file)\nprint(&quot;Decompressed Large File:&quot;, output_decompressed_file)\n</code></pre>\n\n<p>These examples cover various aspects of using the <code>bz2</code> module, including basic compression and decompression operations, handling large files efficiently, and working with streams. Each example is designed to be clear and self-contained, making it easy to integrate into a larger project or documentation.</p>"
        },
        {
            "filename": "gzip - Support for gzip files.md",
            "content": "<h1>gzip - Support for gzip files</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#writing-gzip-files\">Writing Gzip Files</a></li>\n<li><a href=\"#reading-gzip-files\">Reading Gzip Files</a></li>\n<li><a href=\"#compressing-data\">Compressing Data</a></li>\n<li><a href=\"#decompressing-data\">Decompressing Data</a></li>\n<li><a href=\"#handling-errors\">Handling Errors</a></li>\n<li><a href=\"#additional-examples\">Additional Examples</a></li>\n<li><a href=\"#writing-and-reading-multiple-files\">Writing and Reading Multiple Files</a></li>\n<li><a href=\"#compressing-and-decompressing-multiple-files\">Compressing and Decompressing Multiple Files</a></li>\n</ol>\n<p>The <code>gzip</code> module provides support for reading from and writing to .gz (gzip) compressed files. Below are comprehensive examples of how to use this module, including functions for both reading and writing files.</p>\n<h3>Writing Gzip Files</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import gzip\n\ndef write_to_gz_file(file_path, data):\n    &quot;&quot;&quot;\n    Write data to a gzip file.\n\n    :param file_path: Path to the gzip file.\n    :param data: Data to be written into the gzip file.\n    &quot;&quot;&quot;\n    with gzip.open(file_path, 'wb') as f:\n        # Writing bytes directly is common for gzip files\n        f.write(data.encode('utf-8'))\n\n# Example usage\ndata_to_write = &quot;This is some text that will be compressed and saved to a gzip file.&quot;\nwrite_to_gz_file('example.gz', data_to_write)\n</code></pre>\n\n<h3>Reading Gzip Files</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import gzip\n\ndef read_from_gz_file(file_path):\n    &quot;&quot;&quot;\n    Read data from a gzip file.\n\n    :param file_path: Path to the gzip file.\n    :return: The content of the gzip file as a string.\n    &quot;&quot;&quot;\n    with gzip.open(file_path, 'rb') as f:\n        # Reading bytes and decoding back to string\n        return f.read().decode('utf-8')\n\n# Example usage\nfile_content = read_from_gz_file('example.gz')\nprint(file_content)\n</code></pre>\n\n<h3>Compressing Data</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import gzip\n\ndef compress_data(data):\n    &quot;&quot;&quot;\n    Compress data using gzip.\n\n    :param data: The data to be compressed.\n    :return: A bytes object containing the compressed data.\n    &quot;&quot;&quot;\n    # Using gzip.compress() to compress a byte string\n    return gzip.compress(data.encode('utf-8'))\n\n# Example usage\noriginal_data = &quot;This is some text that will be compressed.&quot;\ncompressed_data = compress_data(original_data)\nprint(f&quot;Compressed Data Length: {len(compressed_data)} bytes&quot;)\n</code></pre>\n\n<h3>Decompressing Data</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import gzip\n\ndef decompress_data(compressed_data):\n    &quot;&quot;&quot;\n    Decompress data using gzip.\n\n    :param compressed_data: A bytes object containing the compressed data.\n    :return: The original content as a string.\n    &quot;&quot;&quot;\n    # Using gzip.decompress() to decompress a byte string\n    return gzip.decompress(compressed_data).decode('utf-8')\n\n# Example usage\ncompressed_bytes = compress_data(&quot;This is some text that will be compressed.&quot;)\ndecompressed_text = decompress_data(compressed_bytes)\nprint(decompressed_text)\n</code></pre>\n\n<h3>Handling Errors</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import gzip\n\ndef handle_gzip_error(file_path):\n    &quot;&quot;&quot;\n    Handle errors when reading from or writing to a gzip file.\n\n    :param file_path: Path to the gzip file.\n    &quot;&quot;&quot;\n    try:\n        with gzip.open(file_path, 'rb') as f:\n            # Attempt to read data from a gzip file\n            content = f.read().decode('utf-8')\n            print(content)\n    except FileNotFoundError:\n        print(f&quot;Error: The file {file_path} does not exist.&quot;)\n    except Exception as e:\n        print(f&quot;An error occurred: {e}&quot;)\n\n# Example usage\nhandle_gzip_error('non_existent_file.gz')\n</code></pre>\n\n<h3>Additional Examples</h3>\n<h4>Writing and Reading Multiple Files</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import gzip\n\ndef write_multiple_files(file_paths, data_list):\n    &quot;&quot;&quot;\n    Write multiple pieces of data to different gzip files.\n\n    :param file_paths: List of paths for the gzip files.\n    :param data_list: List of data strings to be written into the gzip files.\n    &quot;&quot;&quot;\n    if len(file_paths) != len(data_list):\n        raise ValueError(&quot;The number of file paths must match the number of data items.&quot;)\n\n    with gzip.open(file_paths[0], 'wb') as f:\n        # Writing bytes directly is common for gzip files\n        f.write(data_list[0].encode('utf-8'))\n\n    for i, (file_path, data) in enumerate(zip(file_paths[1:], data_list[1:])):\n        with gzip.open(file_path, 'wb') as f:\n            f.write(data.encode('utf-8'))\n\n# Example usage\ndata_list = [&quot;First file content&quot;, &quot;Second file content&quot;]\nwrite_multiple_files(['first_file.gz', 'second_file.gz'], data_list)\n</code></pre>\n\n<h4>Compressing and Decompressing Multiple Files</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import gzip\n\ndef compress_multiple_files(file_paths):\n    &quot;&quot;&quot;\n    Compress multiple files into a single gzip archive.\n\n    :param file_paths: List of paths to the files to be compressed.\n    &quot;&quot;&quot;\n    with gzip.open('archive.gz', 'wb') as outfile:\n        for infile_path in file_paths:\n            with open(infile_path, 'rb') as infile:\n                outfile.write(inf.read())\n\n# Example usage\ncompress_multiple_files(['file1.txt', 'file2.txt'])\n</code></pre>\n\n<p>These examples cover the basic functionalities of the <code>gzip</code> module, including reading from, writing to, compressing, and decompressing gzip files. They also demonstrate error handling and how to work with multiple files in a single operation.</p>"
        },
        {
            "filename": "lzma - Compression using the LZMA algorithm.md",
            "content": "<h1>lzma - Compression using the LZMA algorithm</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-compressing-data-using-lzma\">Example 1: Compressing Data Using LZMA</a></li>\n<li><a href=\"#example-2-decompressing-data-using-lzma\">Example 2: Decompressing Data Using LZMA</a></li>\n<li><a href=\"#example-3-using-compression-levels\">Example 3: Using Compression Levels</a></li>\n<li><a href=\"#example-4-using-file-compression\">Example 4: Using File Compression</a></li>\n<li><a href=\"#example-5-using-file-decompression\">Example 5: Using File Decompression</a></li>\n<li><a href=\"#example-6-using-file-compression-in-a-context-manager\">Example 6: Using File Compression in a Context Manager</a></li>\n</ol>\n<p>The <code>lzma</code> module in Python provides support for compressing and decompressing files using the LZMA compression algorithm, which is a variant of the DEFLATE algorithm with extra features such as checksums and better compression ratios.</p>\n<p>Below are comprehensive examples demonstrating various functionalities of the <code>lzma</code> module. These examples are designed to be clear, concise, and suitable for inclusion in official documentation.</p>\n<h3>Example 1: Compressing Data Using LZMA</h3>\n<p>This example demonstrates how to compress a string using the <code>lzma</code> module.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import lzma\n\n# Original data to be compressed\ndata = b'This is a sample string to be compressed using the LZMA algorithm.'\n\n# Compress the data\ncompressed_data = lzma.compress(data)\n\n# Print the original and compressed data lengths\nprint(f'Original Data Length: {len(data)} bytes')\nprint(f'Compressed Data Length: {len(compressed_data)} bytes')\n\n# Optionally, print the compressed data as a hexadecimal string for comparison\nprint('Compressed Data (hex):', compressed_data.hex())\n</code></pre>\n\n<h3>Example 2: Decompressing Data Using LZMA</h3>\n<p>This example demonstrates how to decompress data that was previously compressed using the <code>lzma</code> module.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import lzma\n\n# Compressed data from the previous example\ncompressed_data = b'\\x5d\\x00\\x63\\x00\\x1b\\x00\\x08\\x00\\x97\\x00\\x2b\\x00\\x08\\x00\\xab\\x00\\x08\\x00\\x14\\x00\\x0f\\x00\\x0c\\x00\\x0e\\x00\\x1a\\x00\\x0c\\x00\\x13\\x00\\x06\\x00\\x0d\\x00\\x2b\\x00\\x1a\\x00\\x08\\x00\\xab\\x00\\x08\\x00\\x14\\x00\\x0f\\x00\\x0c\\x00\\x0e\\x00\\x1a\\x00\\x0c\\x00\\x13\\x00\\x06\\x00\\x0d\\x00\\x2b\\x00\\x1a\\x00\\x08\\x00\\xab\\x00\\x08\\x00\\x14\\x00\\x0f\\x00\\x0c\\x00\\x0e\\x00\\x1a\\x00\\x0c\\x00\\x13\\x00\\x06\\x00\\x0d\\x00\\x2b\\x00\\x1a\\x00\\x08\\x00\\xab\\x00\\x08\\x00\\x14\\x00\\x0f\\x00\\x0c\\x00\\x0e\\x00\\x1a\\x00\\x0c\\x00\\x13\\x00\\x06\\x00\\x0d\\x00\\x2b\\x00\\x1a\\x00\\x08\\x00\\xab\\x00\\x08\\x00\\x14\\x00\\x0f\\x00\\x0c\\x00\\x0e\\x00\\x1a\\x00\\x0c\\x00\\x13\\x00\\x06\\x00\\x0d\\x00'\n\n# Decompress the data\ndecompressed_data = lzma.decompress(compressed_data)\n\n# Print the decompressed data\nprint('Decompressed Data:', decompressed_data.decode('utf-8'))\n</code></pre>\n\n<h3>Example 3: Using Compression Levels</h3>\n<p>This example demonstrates how to specify different compression levels when compressing data. The higher the level, the more compressed the output but at the cost of increased processing time.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import lzma\n\n# Original data to be compressed\ndata = b'This is a sample string to be compressed using the LZMA algorithm.'\n\n# Compress data with different levels (0-9)\ncompressed_data_level_0 = lzma.compress(data, level=0)  # No compression\ncompressed_data_level_1 = lzma.compress(data, level=1)  # Basic compression\ncompressed_data_level_9 = lzma.compress(data, level=9)  # Maximum compression\n\n# Print the lengths of compressed data for each level\nprint(f'Compressed Data (Level 0): {len(compressed_data_level_0)} bytes')\nprint(f'Compressed Data (Level 1): {len(compressed_data_level_1)} bytes')\nprint(f'Compressed Data (Level 9): {len(compressed_data_level_9)} bytes')\n\n# Optionally, print the compressed data as a hexadecimal string for comparison\nfor level, compressed_data in zip([0, 1, 9], [compressed_data_level_0, compressed_data_level_1, compressed_data_level_9]):\n    print(f'Compressed Data (Level {level}):', compressed_data.hex())\n</code></pre>\n\n<h3>Example 4: Using File Compression</h3>\n<p>This example demonstrates how to compress a file using the <code>lzma</code> module.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import lzma\nimport os\n\n# Original file path\noriginal_file_path = 'example.txt'\n\n# Destination file path for the compressed data\ncompressed_file_path = original_file_path + '.xz'\n\n# Check if the original file exists\nif not os.path.exists(original_file_path):\n    print('Original file does not exist.')\nelse:\n    # Open the original file in binary read mode\n    with open(original_file_path, 'rb') as f_in:\n        # Compress the file and write to the compressed file\n        with lzma.open(compressed_file_path, 'wb') as f_out:\n            f_out.write(f_in.read())\n\n    print('File compressed successfully:', compressed_file_path)\n</code></pre>\n\n<h3>Example 5: Using File Decompression</h3>\n<p>This example demonstrates how to decompress a file that was previously compressed using the <code>lzma</code> module.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import lzma\nimport os\n\n# Compressed file path\ncompressed_file_path = 'example.txt.xz'\n\n# Destination file path for the decompressed data\ndecompressed_file_path = compressed_file_path.replace('.xz', '')\n\n# Check if the compressed file exists\nif not os.path.exists(compressed_file_path):\n    print('Compressed file does not exist.')\nelse:\n    # Open the compressed file in binary read mode\n    with lzma.open(compressed_file_path, 'rb') as f_in:\n        # Decompress the file and write to the decompressed file\n        with open(decompressed_file_path, 'wb') as f_out:\n            f_out.write(f_in.read())\n\n    print('File decompressed successfully:', decompressed_file_path)\n</code></pre>\n\n<h3>Example 6: Using File Compression in a Context Manager</h3>\n<p>This example demonstrates how to compress and decompress files using the <code>lzma</code> module with a context manager.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import lzma\nimport os\n\ndef compress_file(input_file, output_file):\n    &quot;&quot;&quot;Compress a file using LZMA.&quot;&quot;&quot;\n    with open(input_file, 'rb') as f_in:\n        with lzma.open(output_file, 'wb') as f_out:\n            f_out.write(f_in.read())\n\ndef decompress_file(input_file, output_file):\n    &quot;&quot;&quot;Decompress a file using LZMA.&quot;&quot;&quot;\n    with lzma.open(input_file, 'rb') as f_in:\n        with open(output_file, 'wb') as f_out:\n            f_out.write(f_in.read())\n\n# Original file path\noriginal_file_path = 'example.txt'\n\n# Destination files for compressed and decompressed data\ncompressed_file_path = original_file_path + '.xz'\ndecompressed_file_path = compressed_file_path.replace('.xz', '')\n\n# Compress the file\ncompress_file(original_file_path, compressed_file_path)\nprint('File compressed successfully:', compressed_file_path)\n\n# Decompress the file\ndecompress_file(compressed_file_path, decompressed_file_path)\nprint('File decompressed successfully:', decompressed_file_path)\n</code></pre>\n\n<p>These examples cover various aspects of using the <code>lzma</code> module, including compression and decompression of strings, files, and specifying different compression levels. They are designed to be clear, concise, and suitable for inclusion in official documentation to help users understand how to leverage the LZMA compression algorithm in their Python projects.</p>"
        },
        {
            "filename": "tarfile - Read and write tar archive files.md",
            "content": "<h1>tarfile - Read and write tar archive files</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-creating-a-tar-archive\">1. Creating a Tar Archive</a></li>\n<li><a href=\"#2-extracting-a-tar-archive\">2. Extracting a Tar Archive</a></li>\n<li><a href=\"#3-writing-to-a-tar-archive-with-specific-compression\">3. Writing to a Tar Archive with Specific Compression</a></li>\n<li><a href=\"#4-extracting-from-a-tar-archive-with-specific-compression\">4. Extracting from a Tar Archive with Specific Compression</a></li>\n<li><a href=\"#5-adding-files-or-directories-recursively\">5. Adding Files or Directories Recursively</a></li>\n<li><a href=\"#6-extracting-files-or-directories-with-specific-options\">6. Extracting Files or Directories with Specific Options</a></li>\n<li><a href=\"#7-checking-tar-archive-integrity\">7. Checking Tar Archive Integrity</a></li>\n<li><a href=\"#8-writing-to-a-tar-archive-with-custom-file-mode\">8. Writing to a Tar Archive with Custom File Mode</a></li>\n<li><a href=\"#9-extracting-files-with-specific-permissions\">9. Extracting Files with Specific Permissions</a></li>\n<li><a href=\"#10-writing-to-a-tar-archive-with-custom-file-date\">10. Writing to a Tar Archive with Custom File Date</a></li>\n</ol>\n<p>The <code>tarfile</code> module in Python is used to read and write tar archives, which are a common format for archiving multiple files into a single file container. Below are comprehensive examples demonstrating various functionalities of this module:</p>\n<h3>1. Creating a Tar Archive</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tarfile\n\n# Create a new tar archive\nwith tarfile.open('example.tar.gz', 'w:gz') as tar:\n    # Add individual files to the archive\n    tar.add('file1.txt')\n    tar.add('folder')\n</code></pre>\n\n<h3>2. Extracting a Tar Archive</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tarfile\n\n# Open an existing tar archive for reading\nwith tarfile.open('example.tar.gz', 'r:gz') as tar:\n    # Extract all contents to the current directory\n    tar.extractall()\n</code></pre>\n\n<h3>3. Writing to a Tar Archive with Specific Compression</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tarfile\n\n# Create a new tar archive with custom compression settings\nwith tarfile.open('example.tar.bz2', 'w:bz2') as tar:\n    # Add files or directories to the archive\n    tar.add('file1.txt')\n</code></pre>\n\n<h3>4. Extracting from a Tar Archive with Specific Compression</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tarfile\n\n# Open an existing tar archive for reading and specifying compression\nwith tarfile.open('example.tar.bz2', 'r:bz2') as tar:\n    # Extract all contents to the current directory\n    tar.extractall()\n</code></pre>\n\n<h3>5. Adding Files or Directories Recursively</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tarfile\n\n# Create a new tar archive and add directories recursively\nwith tarfile.open('example.tar.gz', 'w:gz') as tar:\n    # Add all files and subdirectories in the current directory to the archive\n    tar.add('.', recursive=True)\n</code></pre>\n\n<h3>6. Extracting Files or Directories with Specific Options</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tarfile\n\n# Open an existing tar archive for reading and extract with options\nwith tarfile.open('example.tar.gz', 'r:gz') as tar:\n    # Extract all contents to a specific directory, ignoring existing files\n    tar.extractall(path='extracted_files', members=tar.getmembers(), numeric_owner=True)\n</code></pre>\n\n<h3>7. Checking Tar Archive Integrity</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tarfile\n\n# Open an existing tar archive for reading and check its integrity\nwith tarfile.open('example.tar.gz', 'r:gz') as tar:\n    # Check if all files in the archive are intact\n    print(tar.check())\n</code></pre>\n\n<h3>8. Writing to a Tar Archive with Custom File Mode</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tarfile\n\n# Create a new tar archive and add files with specific permissions\nwith tarfile.open('example.tar.gz', 'w:gz') as tar:\n    # Add file1.txt with read-only mode for all users\n    info = tar.gettarinfo(name='file1.txt')\n    info.mode = 0o444  # 0o444 is the decimal representation of 444, which is r--r--r--\n    tar.add('file1.txt', arcname='file1.txt', tarinfo=info)\n</code></pre>\n\n<h3>9. Extracting Files with Specific Permissions</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tarfile\n\n# Open an existing tar archive for reading and extract files with specific permissions\nwith tarfile.open('example.tar.gz', 'r:gz') as tar:\n    # Extract file1.txt to a directory, setting its mode to read-only for all users\n    info = tar.gettarinfo(name='file1.txt')\n    info.mode = 0o444\n    tar.extract('file1.txt', path='extracted_files', tarinfo=info)\n</code></pre>\n\n<h3>10. Writing to a Tar Archive with Custom File Date</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tarfile\nfrom datetime import datetime\n\n# Create a new tar archive and add files with a specific modification date\nwith tarfile.open('example.tar.gz', 'w:gz') as tar:\n    # Define the desired modification time\n    modification_time = datetime(2023, 10, 5, 14, 30)\n\n    # Add file1.txt with a custom modification time\n    info = tar.gettarinfo(name='file1.txt')\n    info.mtime = modification_time.timestamp()\n    tar.add('file1.txt', arcname='file1.txt', tarinfo=info)\n</code></pre>\n\n<h3>11. Extracting Files with Custom File Date</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tarfile\nfrom datetime import datetime\n\n# Open an existing tar archive for reading and extract files with a specific modification date\nwith tarfile.open('example.tar.gz', 'r:gz') as tar:\n    # Define the desired modification time\n    modification_time = datetime(2023, 10, 5, 14, 30)\n\n    # Extract file1.txt from the archive, setting its modification time to the defined value\n    info = tar.gettarinfo(name='file1.txt')\n    info.mtime = modification_time.timestamp()\n    tar.extract('file1.txt', path='extracted_files', tarinfo=info)\n</code></pre>\n\n<h3>12. Writing to a Tar Archive with Custom Link Type</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tarfile\n\n# Create a new tar archive and add symbolic links\nwith tarfile.open('example.tar.gz', 'w:gz') as tar:\n    # Add a symbolic link named 'link.txt' pointing to 'source_file'\n    info = tarfile.TarInfo(name='link.txt')\n    info.type = tarfile.SYMTYPE  # Symbolic link type\n    info.linkname = 'source_file'  # Path to the target file\n    tar.addfile(info, open('source_file', 'rb'))\n</code></pre>\n\n<h3>13. Extracting Files with Custom Link Type</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tarfile\n\n# Open an existing tar archive for reading and extract symbolic links\nwith tarfile.open('example.tar.gz', 'r:gz') as tar:\n    # Extract a symbolic link from the archive\n    tar.extract('link.txt', path='extracted_files')\n</code></pre>\n\n<p>These examples cover various aspects of using the <code>tarfile</code> module, including creating, extracting, writing to and reading from tar archives with different compression types, handling file permissions, modification times, and symbolic links.</p>"
        },
        {
            "filename": "zipfile - Work with ZIP archives.md",
            "content": "<h1>zipfile - Work with ZIP archives</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-creating-and-writing-to-a-zip-file\">1. Creating and Writing to a Zip File</a></li>\n<li><a href=\"#2-reading-from-a-zip-file\">2. Reading from a Zip File</a></li>\n<li><a href=\"#3-adding-files-directly-from-a-directory\">3. Adding Files Directly from a Directory</a></li>\n<li><a href=\"#4-extracting-specific-files\">4. Extracting Specific Files</a></li>\n<li><a href=\"#5-listing-all-files-in-a-zip-file\">5. Listing All Files in a Zip File</a></li>\n<li><a href=\"#6-checking-if-a-file-exists-in-a-zip\">6. Checking if a File Exists in a Zip</a></li>\n<li><a href=\"#7-handling-zip-files-with-passwords\">7. Handling Zip Files with Passwords</a></li>\n</ol>\n<p>Certainly! Below are comprehensive examples demonstrating various functionalities of the <code>zipfile</code> module in Python, along with explanations for each step:</p>\n<h3>1. Creating and Writing to a Zip File</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import zipfile\n\ndef create_zip_file(filename):\n    # Create a new zip file in write mode\n    with zipfile.ZipFile(filename, 'w') as myzip:\n        # Add files to the zip archive\n        myzip.write('file1.txt', compress_type=zipfile.ZIP_DEFLATED)\n        myzip.write('file2.txt', compress_type=zipfile.ZIP_DEFLATED)\n\n# Usage\ncreate_zip_file('example.zip')\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- <strong><code>zipfile.ZipFile(filename, 'w')</code></strong>: Opens a new zip file for writing. The <code>'w'</code> mode creates a new zip file or overwrites an existing one.\n- <strong><code>myzip.write(file_path, compress_type=zipfile.ZIP_DEFLATED)</code></strong>: Adds the specified file to the zip archive. You can choose different compression methods like <code>ZIP_STORED</code>, <code>ZIP_DEFLATED</code>, etc.</p>\n<h3>2. Reading from a Zip File</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import zipfile\n\ndef read_from_zip_file(filename):\n    # Open an existing zip file in read mode\n    with zipfile.ZipFile(filename, 'r') as myzip:\n        # Extract all files to the current directory\n        myzip.extractall()\n\n# Usage\nread_from_zip_file('example.zip')\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- <strong><code>zipfile.ZipFile(filename, 'r')</code></strong>: Opens an existing zip file for reading.\n- <strong><code>myzip.extractall()</code></strong>: Extracts all contents of the zip archive to the directory where the script is run.</p>\n<h3>3. Adding Files Directly from a Directory</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import zipfile\n\ndef add_files_from_directory(source_dir, destination_zip):\n    # Open an existing zip file in append mode\n    with zipfile.ZipFile(destination_zip, 'a') as myzip:\n        # Walk through the source directory and add all files\n        for root, dirs, files in os.walk(source_dir):\n            for file in files:\n                file_path = os.path.join(root, file)\n                myzip.write(file_path, os.path.relpath(file_path, source_dir))\n\n# Usage\nadd_files_from_directory('source_directory', 'example.zip')\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- <strong><code>zipfile.ZipFile(destination_zip, 'a')</code></strong>: Opens an existing zip file for appending new files.\n- <strong><code>os.walk(source_dir)</code></strong>: Walks through the specified directory and its subdirectories, yielding directories (root) and filenames (files).\n- <strong><code>myzip.write(file_path, os.path.relpath(file_path, source_dir))</code></strong>: Adds each file to the zip archive using a relative path to ensure correct extraction.</p>\n<h3>4. Extracting Specific Files</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import zipfile\n\ndef extract_specific_files(zip_filename, files_to_extract):\n    # Open an existing zip file in read mode\n    with zipfile.ZipFile(zip_filename, 'r') as myzip:\n        # Extract specific files from the zip archive\n        for file in files_to_extract:\n            myzip.extract(file)\n\n# Usage\nextract_specific_files('example.zip', ['file1.txt'])\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- <strong><code>myzip.extract(file)</code></strong>: Extracts a single file from the zip archive. You can specify which file to extract using its path within the zip.</p>\n<h3>5. Listing All Files in a Zip File</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import zipfile\n\ndef list_files_in_zip(zip_filename):\n    # Open an existing zip file in read mode\n    with zipfile.ZipFile(zip_filename, 'r') as myzip:\n        # List all files in the zip archive\n        for member in myzip.infolist():\n            print(member.filename)\n\n# Usage\nlist_files_in_zip('example.zip')\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- <strong><code>myzip.infolist()</code></strong>: Returns a list of <code>ZipInfo</code> objects representing each file in the zip archive.\n- <strong><code>member.filename</code></strong>: Accesses the filename (including path) for each file.</p>\n<h3>6. Checking if a File Exists in a Zip</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import zipfile\n\ndef check_file_in_zip(zip_filename, file_name):\n    # Open an existing zip file in read mode\n    with zipfile.ZipFile(zip_filename, 'r') as myzip:\n        # Check if the file exists in the zip archive\n        return file_name in {member.filename for member in myzip.infolist()}\n\n# Usage\nprint(check_file_in_zip('example.zip', 'file1.txt'))\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- <strong><code>{member.filename for member in myzip.infolist()}</code></strong>: Creates a set of filenames from the <code>ZipInfo</code> objects, allowing for efficient membership testing.</p>\n<h3>7. Handling Zip Files with Passwords</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import zipfile\n\ndef open_password_protected_zip(zip_filename, password):\n    # Open an existing zip file that requires a password in read mode\n    try:\n        with zipfile.ZipFile(zip_filename, 'r', allowZipFilePassword) as myzip:\n            # Extract all files from the zip archive using the provided password\n            myzip.extractall()\n    except RuntimeError as e:\n        print(f&quot;Failed to open zip file: {e}&quot;)\n\n# Usage\nopen_password_protected_zip('protected_example.zip', 'yourpassword')\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- <strong><code>zipfile.ZipFile(zip_filename, 'r', allowZipFilePassword)</code></strong>: Opens a zip file that requires a password. You need to import <code>allowZipFilePassword</code> from <code>py7zr</code> for this to work.\n- <strong><code>myzip.extractall()</code></strong>: Extracts all files from the zip archive using the provided password.</p>\n<p>These examples cover a range of functionalities available in the <code>zipfile</code> module, demonstrating how to create, read, and manipulate zip files in Python.</p>"
        },
        {
            "filename": "zlib - Compression compatible with gzip.md",
            "content": "<h1>zlib - Compression compatible with gzip</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-compressing-data\">1. Compressing Data</a></li>\n<li><a href=\"#2-decompressing-compressed-data\">2. Decompressing Compressed Data</a></li>\n<li><a href=\"#3-getting-compression-and-decompression-statistics\">3. Getting Compression and Decompression Statistics</a></li>\n<li><a href=\"#4-handling-compressed-files-with-zlibdecompressobj\">4. Handling Compressed Files with <code>zlib.decompressobj</code></a></li>\n<li><a href=\"#5-using-zlibcompressobj-with-different-compression-levels\">5. Using <code>zlib.compressobj</code> with Different Compression Levels</a></li>\n</ol>\n<p>Certainly! Below are comprehensive code examples for each functionality available in the <code>zlib</code> module, along with explanations of each step. These examples are designed to be clear, concise, and suitable for inclusion in official documentation.</p>\n<h3>1. Compressing Data</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import zlib\n\ndef compress_data(data):\n    &quot;&quot;&quot;\n    Compresses input data using the zlib algorithm.\n\n    Parameters:\n    - data: bytes, the data to be compressed.\n\n    Returns:\n    - bytes, the compressed data.\n    &quot;&quot;&quot;\n    # Create a compressor object with default settings (level 6)\n    comp = zlib.compressobj(zlib.Z_DEFAULT_COMPRESSION)\n\n    # Compress the input data\n    compressed_data = comp.compress(data)\n    compressed_data += comp.flush()\n\n    return compressed_data\n\n# Example usage\ndata = b'This is some example data to be compressed using zlib.'\ncompressed_data = compress_data(data)\n\nprint(&quot;Compressed Data:&quot;, compressed_data)\n</code></pre>\n\n<h3>2. Decompressing Compressed Data</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">def decompress_data(compressed_data):\n    &quot;&quot;&quot;\n    Decompresses previously compressed data using the zlib algorithm.\n\n    Parameters:\n    - compressed_data: bytes, the data to be decompressed.\n\n    Returns:\n    - bytes, the decompressed original data.\n    &quot;&quot;&quot;\n    # Create a decompressor object with default settings\n    decomp = zlib.decompressobj()\n\n    # Decompress the input data\n    decompressed_data = decomp.decompress(compressed_data)\n\n    return decompressed_data\n\n# Example usage\ncompressed_data = b'\\x78\\x9c\\x00\\x01\\x00\\x00\\x2d\\x46\\xc4\\xa0\\x5f\\x03'\ndecompressed_data = decompress_data(compressed_data)\n\nprint(&quot;Decompressed Data:&quot;, decompressed_data.decode('utf-8'))\n</code></pre>\n\n<h3>3. Getting Compression and Decompression Statistics</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">def get_compression_stats(data):\n    &quot;&quot;&quot;\n    Gets statistics on the compression process.\n\n    Parameters:\n    - data: bytes, the input data to be compressed.\n\n    Returns:\n    - dict, a dictionary containing compression statistics.\n    &quot;&quot;&quot;\n    comp = zlib.compressobj(zlib.Z_DEFAULT_COMPRESSION)\n\n    # Compress the input data\n    comp.compress(data)\n    comp.flush()\n\n    # Get statistics\n    stats = comp._get_stats()\n\n    return stats\n\n# Example usage\ndata = b'This is some example data to be compressed using zlib.'\nstats = get_compression_stats(data)\n\nprint(&quot;Compression Statistics:&quot;, stats)\n</code></pre>\n\n<h3>4. Handling Compressed Files with <code>zlib.decompressobj</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">def decompress_file(file_path):\n    &quot;&quot;&quot;\n    Decompresses a file that was compressed using the gzip format.\n\n    Parameters:\n    - file_path: str, the path to the compressed file.\n\n    Returns:\n    - bytes, the decompressed data.\n    &quot;&quot;&quot;\n    with open(file_path, 'rb') as f:\n        compressed_data = f.read()\n\n    # Create a decompressor object for gzip\n    decomp = zlib.decompressobj(zlib.MAX_WBITS | 16)\n\n    # Decompress the file data\n    decompressed_data = decomp.decompress(compressed_data)\n    decompressed_data += decomp.flush()\n\n    return decompressed_data\n\n# Example usage\nfile_path = 'example.gz'\ndecompressed_data = decompress_file(file_path)\n\nprint(&quot;Decompressed File Data:&quot;, decompressed_data.decode('utf-8'))\n</code></pre>\n\n<h3>5. Using <code>zlib.compressobj</code> with Different Compression Levels</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">def compress_with_level(data, level):\n    &quot;&quot;&quot;\n    Compresses input data using the zlib algorithm with a specified compression level.\n\n    Parameters:\n    - data: bytes, the data to be compressed.\n    - level: int, the compression level (0-9), where 9 is maximum compression.\n\n    Returns:\n    - bytes, the compressed data.\n    &quot;&quot;&quot;\n    # Create a compressor object with a specific compression level\n    comp = zlib.compressobj(level)\n\n    # Compress the input data\n    compressed_data = comp.compress(data)\n    compressed_data += comp.flush()\n\n    return compressed_data\n\n# Example usage\ndata = b'This is some example data to be compressed using zlib.'\ncompressed_data = compress_with_level(data, 9)\n\nprint(&quot;Compressed Data (Level 9):&quot;, compressed_data)\n</code></pre>\n\n<p>These examples cover the basic functionalities of the <code>zlib</code> module, including compression and decompression, as well as handling file operations with gzip format. Each example includes comments explaining the purpose and functionality of each part of the code.</p>"
        }
    ],
    "Data Persistence": [
        {
            "filename": "copyreg - Register pickle support functions.md",
            "content": "<h1>copyreg - Register pickle support functions</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-registering-custom-pickling-functionality\">1. Registering Custom Pickling Functionality</a></li>\n<li><a href=\"#example-registering-a-callable-object\">Example: Registering a Callable Object</a></li>\n<li><a href=\"#2-registering-custom-object-types\">2. Registering Custom Object Types</a></li>\n<li><a href=\"#example-registering-a-class\">Example: Registering a Class</a></li>\n<li><a href=\"#3-registering-a-class-with-multiple-initialization-arguments\">3. Registering a Class With Multiple Initialization Arguments</a></li>\n<li><a href=\"#example-handling-multiple-initialization-parameters\">Example: Handling Multiple Initialization Parameters</a></li>\n<li><a href=\"#4-registering-custom-objects-with-additional-context\">4. Registering Custom Objects with Additional Context</a></li>\n<li><a href=\"#example-handling-additional-data\">Example: Handling Additional Data</a></li>\n<li><a href=\"#5-registering-custom-objects-with-multiple-initialization-methods\">5. Registering Custom Objects with Multiple Initialization Methods</a></li>\n<li><a href=\"#example-handling-different-constructors\">Example: Handling Different Constructors</a></li>\n</ol>\n<p>The <code>copyreg</code> module in Python's standard library is used to register custom pickling support, allowing you to define how objects of specific types are serialized and deserialized using the <code>pickle</code> module. This can be particularly useful when working with complex data structures or custom classes.</p>\n<p>Below are comprehensive code examples for each functionality provided by the <code>copyreg</code> module:</p>\n<h3>1. Registering Custom Pickling Functionality</h3>\n<h4>Example: Registering a Callable Object</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import copyreg\nimport types\n\n# Define a callable object that you want to pickle\ndef custom_callable():\n    return &quot;Hello, World!&quot;\n\n# Register the callable object with the `copyreg` module\ncopyreg.pickle(types.FunctionType, lambda f: (custom_callable,))\n\n# Example usage\noriginal = custom_callable()\nserialized = pickle.dumps(original)\ndeserialized = pickle.loads(serialized)\n\nprint(deserialized)  # Output: Hello, World!\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- The <code>types.FunctionType</code> is used to indicate that we are registering a callable object.\n- The second argument is a function that returns the arguments needed by the pickling process. In this case, it simply returns the <code>custom_callable</code> object itself.</p>\n<h3>2. Registering Custom Object Types</h3>\n<h4>Example: Registering a Class</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import copyreg\nimport types\n\n# Define a custom class\nclass MyClass:\n    def __init__(self, value):\n        self.value = value\n\n    def __repr__(self):\n        return f&quot;MyClass(value={self.value})&quot;\n\n# Register the class with the `copyreg` module\ncopyreg.pickle(MyClass, lambda obj: (obj.value,))\n\n# Example usage\noriginal = MyClass(42)\nserialized = pickle.dumps(original)\ndeserialized = pickle.loads(serialized)\n\nprint(deserialized)  # Output: MyClass(value=42)\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- The <code>MyClass</code> is registered with the <code>copyreg</code> module using a lambda function that returns a tuple containing the object's state, which in this case is just the <code>value</code> attribute.</p>\n<h3>3. Registering a Class With Multiple Initialization Arguments</h3>\n<h4>Example: Handling Multiple Initialization Parameters</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import copyreg\nimport types\n\n# Define a custom class with multiple initialization parameters\nclass MyClass:\n    def __init__(self, value1, value2):\n        self.value1 = value1\n        self.value2 = value2\n\n    def __repr__(self):\n        return f&quot;MyClass(value1={self.value1}, value2={self.value2})&quot;\n\n# Register the class with the `copyreg` module\ncopyreg.pickle(MyClass, lambda obj: (obj.value1, obj.value2))\n\n# Example usage\noriginal = MyClass(42, &quot;Hello&quot;)\nserialized = pickle.dumps(original)\ndeserialized = pickle.loads(serialized)\n\nprint(deserialized)  # Output: MyClass(value1=42, value2='Hello')\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- The <code>copyreg</code> module supports registering classes with multiple initialization parameters. The lambda function returns a tuple containing all the necessary arguments to reconstruct the object.</p>\n<h3>4. Registering Custom Objects with Additional Context</h3>\n<h4>Example: Handling Additional Data</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import copyreg\nimport types\n\n# Define a custom class with additional context\nclass MyClass:\n    def __init__(self, value, metadata):\n        self.value = value\n        self.metadata = metadata\n\n    def __repr__(self):\n        return f&quot;MyClass(value={self.value}, metadata={self.metadata})&quot;\n\n# Register the class with the `copyreg` module\ndef register_my_class(obj):\n    return (obj.value, obj.metadata)\n\ncopyreg.pickle(MyClass, register_my_class)\n\n# Example usage\noriginal = MyClass(42, {&quot;info&quot;: &quot;some data&quot;})\nserialized = pickle.dumps(original)\ndeserialized = pickle.loads(serialized)\n\nprint(deserialized)  # Output: MyClass(value=42, metadata={'info': 'some data'})\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- The <code>register_my_class</code> function is defined to handle the serialization of <code>MyClass</code> objects. It returns a tuple containing both the <code>value</code> and <code>metadata</code> attributes.</p>\n<h3>5. Registering Custom Objects with Multiple Initialization Methods</h3>\n<h4>Example: Handling Different Constructors</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import copyreg\nimport types\n\n# Define a custom class with multiple constructors\nclass MyClass:\n    def __init__(self, value):\n        self.value = value\n\n    @classmethod\n    def from_string(cls, string_value):\n        return cls(int(string_value))\n\n    def __repr__(self):\n        return f&quot;MyClass(value={self.value})&quot;\n\n# Register the class with the `copyreg` module\ndef register_my_class(obj):\n    if isinstance(obj, MyClass):\n        return (obj.value,)\n    elif hasattr(obj, 'value') and hasattr(obj, 'from_string'):\n        return obj.from_string\n\ncopyreg.pickle(MyClass, register_my_class)\n\n# Example usage\noriginal = MyClass(42)\nserialized = pickle.dumps(original)\ndeserialized = pickle.loads(serialized)\n\nprint(deserialized)  # Output: MyClass(value=42)\n\noriginal = MyClass.from_string(&quot;42&quot;)\nserialized = pickle.dumps(original)\ndeserialized = pickle.loads(serialized)\n\nprint(deserialized)  # Output: MyClass(value=42)\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- The <code>register_my_class</code> function checks the type of the object and returns a tuple with the <code>value</code> attribute if it's an instance of <code>MyClass</code>. If it's an instance of a class with a <code>from_string</code> method, it returns the <code>from_string</code> method itself.</p>\n<h3>Conclusion</h3>\n<p>The <code>copyreg</code> module provides powerful tools for customizing the pickling process in Python. By registering your own functions and classes with <code>copyreg.pickle</code>, you can extend the serialization capabilities to handle complex objects or specific data structures efficiently.</p>"
        },
        {
            "filename": "dbm - Interfaces to Unix databases.md",
            "content": "<h1>dbm - Interfaces to Unix \u201cdatabases\u201d</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-basic-usage-with-gdbm\">1. Basic Usage with 'gdbm'</a></li>\n<li><a href=\"#2-usage-with-ndbm-non-distributed-dbm\">2. Usage with 'ndbm' (Non-Distributed DBM)</a></li>\n<li><a href=\"#3-usage-with-gdbm-for-string-values\">3. Usage with 'gdbm' for String Values</a></li>\n<li><a href=\"#4-usage-with-gdbm-for-binary-data\">4. Usage with 'gdbm' for Binary Data</a></li>\n<li><a href=\"#5-usage-with-gdbm-for-multiple-keys\">5. Usage with 'gdbm' for Multiple Keys</a></li>\n<li><a href=\"#6-usage-with-gdbm-for-conditional-storage\">6. Usage with 'gdbm' for Conditional Storage</a></li>\n<li><a href=\"#7-usage-with-gdbm-for-error-handling\">7. Usage with 'gdbm' for Error Handling</a></li>\n<li><a href=\"#8-usage-with-gdbm-for-database-closure\">8. Usage with 'gdbm' for Database Closure</a></li>\n<li><a href=\"#9-usage-with-gdbm-for-database-transaction-management\">9. Usage with 'gdbm' for Database Transaction Management</a></li>\n<li><a href=\"#10-usage-with-gdbm-for-database-cleanup\">10. Usage with 'gdbm' for Database Cleanup</a></li>\n</ol>\n<p>The <code>dbm</code> module in Python provides a simple interface to Unix databases (like DBM, NDBM, GDBM, and BSD DB). While these are low-level interfaces, they offer a basic way to manage key-value pairs. Below are comprehensive examples demonstrating various functionalities of the <code>dbm</code> module:</p>\n<h3>1. Basic Usage with 'gdbm'</h3>\n<p>The first example demonstrates how to use the <code>gdbm</code> module for storing and retrieving data.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import gdbm\n\n# Open a database file in write mode\ndb = gdbm.open('example.db', 'c')\n\n# Store key-value pairs\ndb['key1'] = 'value1'\ndb['key2'] = 'value2'\n\n# Retrieve values by keys\nprint(db['key1'])  # Output: value1\n\n# Iterate over all keys in the database\nfor key in db.keys():\n    print(key, db[key])\n\n# Close the database connection\ndb.close()\n</code></pre>\n\n<h3>2. Usage with 'ndbm' (Non-Distributed DBM)</h3>\n<p>This example shows how to use <code>ndbm</code> for managing a database that is not distributed across multiple machines.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import ndbm\n\n# Open a database file in write mode\ndb = ndbm.open('example.ndb', 'c')\n\n# Store key-value pairs\ndb['key1'] = 'value1'\ndb['key2'] = 'value2'\n\n# Retrieve values by keys\nprint(db['key1'])  # Output: value1\n\n# Iterate over all keys in the database\nfor key in db.keys():\n    print(key, db[key])\n\n# Close the database connection\ndb.close()\n</code></pre>\n\n<h3>3. Usage with 'gdbm' for String Values</h3>\n<p>This example demonstrates how to use <code>gdbm</code> with string values.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import gdbm\n\n# Open a database file in write mode\ndb = gdbm.open('example.db', 'c')\n\n# Store string values using Unicode\ndb['key1'] = b'value1'\ndb['key2'] = b'value2'\n\n# Retrieve and decode the value by keys\nprint(db['key1'].decode('utf-8'))  # Output: value1\n\n# Iterate over all keys in the database and decode values\nfor key in db.keys():\n    print(key, db[key].decode('utf-8'))\n\n# Close the database connection\ndb.close()\n</code></pre>\n\n<h3>4. Usage with 'gdbm' for Binary Data</h3>\n<p>This example shows how to use <code>gdbm</code> with binary data.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import gdbm\n\n# Open a database file in write mode\ndb = gdbm.open('example.db', 'c')\n\n# Store binary data using bytes\ndata1 = b'\\x00\\x01\\x02'\ndata2 = b'\\x03\\x04\\x05'\n\ndb['key1'] = data1\ndb['key2'] = data2\n\n# Retrieve and print the binary data by keys\nprint(db['key1'])  # Output: b'\\x00\\x01\\x02'\nprint(db['key2'])  # Output: b'\\x03\\x04\\x05'\n\n# Close the database connection\ndb.close()\n</code></pre>\n\n<h3>5. Usage with 'gdbm' for Multiple Keys</h3>\n<p>This example demonstrates how to store and retrieve multiple key-value pairs.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import gdbm\n\n# Open a database file in write mode\ndb = gdbm.open('example.db', 'c')\n\n# Store multiple key-value pairs\ndb['key1'] = 'value1'\ndb['key2'] = 'value2'\ndb['key3'] = 'value3'\n\n# Retrieve values by keys\nprint(db['key1'])  # Output: value1\nprint(db['key2'])  # Output: value2\nprint(db['key3'])  # Output: value3\n\n# Iterate over all keys in the database\nfor key in db.keys():\n    print(key, db[key])\n\n# Close the database connection\ndb.close()\n</code></pre>\n\n<h3>6. Usage with 'gdbm' for Conditional Storage</h3>\n<p>This example demonstrates how to conditionally store data based on certain conditions.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import gdbm\n\n# Open a database file in write mode\ndb = gdbm.open('example.db', 'c')\n\n# Conditionally store data\nkey_to_check = 'specific_key'\nvalue = 'if_true_value' if key_to_check == 'specific_key' else 'if_false_value'\n\ndb[key_to_check] = value\n\n# Retrieve and print the stored value\nprint(db[key_to_check])  # Output: if_true_value\n\n# Close the database connection\ndb.close()\n</code></pre>\n\n<h3>7. Usage with 'gdbm' for Error Handling</h3>\n<p>This example demonstrates how to handle errors when opening a database file.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import gdbm\n\ntry:\n    # Attempt to open a non-existent database file\n    db = gdbm.open('nonexistent.db', 'c')\nexcept gdbm.error as e:\n    print(f&quot;Error opening the database: {e}&quot;)\n\n# Close the database connection if it was successfully opened\nif hasattr(db, 'close'):\n    db.close()\n</code></pre>\n\n<h3>8. Usage with 'gdbm' for Database Closure</h3>\n<p>This example demonstrates how to ensure proper closure of the database.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import gdbm\n\ntry:\n    # Open a database file in write mode\n    db = gdbm.open('example.db', 'c')\n\n    # Store data in the database\n    db['key'] = 'value'\n\nexcept gdbm.error as e:\n    print(f&quot;Error opening or writing to the database: {e}&quot;)\nelse:\n    # Ensure the database is closed\n    if hasattr(db, 'close'):\n        db.close()\n</code></pre>\n\n<h3>9. Usage with 'gdbm' for Database Transaction Management</h3>\n<p>This example demonstrates how to manage transactions in <code>gdbm</code>.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import gdbm\n\n# Open a database file in write mode\ndb = gdbm.open('example.db', 'c')\n\ntry:\n    # Begin a transaction\n    db.sync()\n\n    # Store data in the database\n    db['key'] = 'value'\n\n    # Commit the transaction\n    db.sync()\nexcept gdbm.error as e:\n    print(f&quot;Error during database operation: {e}&quot;)\nelse:\n    # Ensure the database is closed\n    if hasattr(db, 'close'):\n        db.close()\n</code></pre>\n\n<h3>10. Usage with 'gdbm' for Database Cleanup</h3>\n<p>This example demonstrates how to clean up after using <code>gdbm</code>.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import gdbm\n\ntry:\n    # Open a database file in write mode\n    db = gdbm.open('example.db', 'c')\n\n    # Store data in the database\n    db['key'] = 'value'\n\nexcept gdbm.error as e:\n    print(f&quot;Error opening or writing to the database: {e}&quot;)\nelse:\n    # Ensure the database is closed and removed\n    if hasattr(db, 'close'):\n        db.close()\n    import os\n    os.remove('example.db')\n</code></pre>\n\n<p>These examples cover various aspects of using the <code>dbm</code> module, from basic operations to error handling and transaction management. For more detailed information, refer to the official Python documentation on <a href=\"https://docs.python.org/3/library/dbm.html\">dbm</a>.</p>"
        },
        {
            "filename": "marshal - Internal Python object serialization.md",
            "content": "<h1>marshal - Internal Python object serialization</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#marshaldumpobj-file\">marshal.dump(obj, file)</a></li>\n<li><a href=\"#marshalloadsbyte_stream\">marshal.loads(byte_stream)</a></li>\n<li><a href=\"#marshaldumpsobj-proto0-write_bytearrayfalse\">marshal.dumps(obj, proto=0, write_bytearray=False)</a></li>\n<li><a href=\"#example-of-using-marshal-for-network-serialization\">Example of Using marshal for Network Serialization</a></li>\n<li><a href=\"#example-of-receiving-and-deserializing-an-object-from-a-network\">Example of Receiving and Deserializing an Object from a Network</a></li>\n<li><a href=\"#conclusion\">Conclusion</a></li>\n</ol>\n<p>The <code>marshal</code> module is an internal component of Python's standard library designed to serialize (convert objects into a byte stream) and deserialize (convert byte streams back into Python objects). This is useful for saving memory when dealing with complex data structures or when transferring objects over network protocols.</p>\n<h3>marshal.dump(obj, file)</h3>\n<p><strong>Description:</strong> Serialize an object <code>obj</code> into a file-like object <code>file</code>.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import marshal\n\n# Example usage of marshal.dump()\ndata = {\n    'name': 'Alice',\n    'age': 30,\n    'is_student': False,\n    'courses': ['Math', 'Science']\n}\n\n# Open a file in binary write mode\nwith open('data.bin', 'wb') as f:\n    # Serialize the data and write to the file\n    marshal.dump(data, f)\n</code></pre>\n\n<h3>marshal.loads(byte_stream)</h3>\n<p><strong>Description:</strong> Deserialize a byte stream <code>byte_stream</code> back into a Python object.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import marshal\n\n# Example usage of marshal.loads()\nwith open('data.bin', 'rb') as f:\n    # Read the binary data from the file\n    byte_stream = f.read()\n\n# Deserialize the byte stream to an object\nloaded_data = marshal.loads(byte_stream)\n\nprint(loaded_data)\n</code></pre>\n\n<h3>marshal.dumps(obj, proto=0, write_bytearray=False)</h3>\n<p><strong>Description:</strong> Serialize an object <code>obj</code> into a byte stream using protocol <code>proto</code>. The default protocol is 0, which can be updated with newer versions as needed.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import marshal\n\n# Example usage of marshal.dumps()\ndata = {\n    'name': 'Bob',\n    'age': 25,\n    'is_student': True,\n    'courses': ['History', 'Art']\n}\n\n# Serialize the data using protocol 0 and convert to a bytearray if write_bytearray is True\nserialized_data = marshal.dumps(data, proto=0, write_bytearray=True)\n\nprint(serialized_data)\n</code></pre>\n\n<h3>Example of Using marshal for Network Serialization</h3>\n<p>In practice, <code>marshal</code> can be used to serialize objects for transmission over networks. This is useful when you need to serialize data in a format that can be easily parsed by other applications or systems.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import socket\nimport marshal\n\n# Function to serialize an object and send it over a network\ndef send_object_over_network(obj):\n    with open('data.bin', 'wb') as f:\n        # Serialize the object\n        serialized_data = marshal.dumps(obj)\n        f.write(serialized_data)\n\n    # Create a socket and connect to a server\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n        s.connect(('localhost', 12345))\n\n        # Send the length of the serialized data first\n        length = len(serialized_data).to_bytes(4, byteorder='big')\n        s.sendall(length)\n\n        # Send the serialized data\n        s.sendall(serialized_data)\n\n# Example usage of send_object_over_network()\nsend_object_over_network({\n    'name': 'Charlie',\n    'age': 35,\n    'is_student': False,\n    'courses': ['English', 'Music']\n})\n</code></pre>\n\n<h3>Example of Receiving and Deserializing an Object from a Network</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import socket\nimport marshal\n\n# Function to receive data over a network, deserialize it, and return the object\ndef receive_object_from_network():\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n        # Bind the socket and listen for connections\n        s.bind(('localhost', 12345))\n        s.listen()\n\n        # Accept a connection from a client\n        conn, addr = s.accept()\n\n        # Receive the length of the serialized data\n        length_bytes = conn.recv(4)\n        length = int.from_bytes(length_bytes, byteorder='big')\n\n        # Receive the serialized data\n        serialized_data = bytearray()\n        while len(serialized_data) &lt; length:\n            chunk = conn.recv(min(length - len(serialized_data), 1024))\n            if not chunk:\n                break\n            serialized_data.extend(chunk)\n\n        # Deserialize the received byte stream\n        loaded_data = marshal.loads(serialized_data)\n\n        return loaded_data\n\n# Example usage of receive_object_from_network()\nreceived_data = receive_object_from_network()\nprint(received_data)\n</code></pre>\n\n<h3>Conclusion</h3>\n<p>The <code>marshal</code> module provides a simple yet efficient way to serialize and deserialize Python objects. It is particularly useful for scenarios where you need to transfer or store complex data structures in a format that can be easily parsed by other applications. By following the examples provided, you can integrate <code>marshal</code> into your projects to handle object serialization more effectively.</p>"
        },
        {
            "filename": "pickle - Python object serialization.md",
            "content": "<h1>pickle - Python object serialization</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-serializing-objects\">1. Serializing Objects</a></li>\n<li><a href=\"#example-serializing-a-list\">Example: Serializing a List</a></li>\n<li><a href=\"#example-serializing-a-custom-class\">Example: Serializing a Custom Class</a></li>\n<li><a href=\"#2-deserializing-objects\">2. Deserializing Objects</a></li>\n<li><a href=\"#example-deserializing-a-list\">Example: Deserializing a List</a></li>\n<li><a href=\"#example-deserializing-a-custom-class\">Example: Deserializing a Custom Class</a></li>\n<li><a href=\"#3-handling-special-characters\">3. Handling Special Characters</a></li>\n<li><a href=\"#example-serializing-a-string-with-special-characters\">Example: Serializing a String with Special Characters</a></li>\n<li><a href=\"#example-deserializing-a-string-with-special-characters\">Example: Deserializing a String with Special Characters</a></li>\n<li><a href=\"#4-handling-lists-with-numpy-arrays\">4. Handling Lists with Numpy Arrays</a></li>\n</ol>\n<p>The <code>pickle</code> module in Python is used for serializing and deserializing (or pickling and unpickling) objects. This is useful for saving and restoring complex data structures, such as nested dictionaries or lists, to disk or between sessions. Below are comprehensive examples of how to use the <code>pickle</code> module for serialization and deserialization.</p>\n<h3>1. Serializing Objects</h3>\n<h4>Example: Serializing a List</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import pickle\n\n# Define a list with some data\ndata = [1, 2, 3, 'hello', {'key': 'value'}, ['nested', 'list']]\n\n# Open a file in binary write mode to store the serialized object\nwith open('data.pickle', 'wb') as file:\n    # Use pickle.dump() to serialize the list and save it to the file\n    pickle.dump(data, file)\n\nprint(&quot;Data has been successfully pickled and saved.&quot;)\n</code></pre>\n\n<h4>Example: Serializing a Custom Class</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import pickle\n\n# Define a simple class\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def __repr__(self):\n        return f&quot;Person(name={self.name}, age={self.age})&quot;\n\n# Create an instance of the class\nperson = Person('Alice', 30)\n\n# Open a file in binary write mode to store the serialized object\nwith open('person.pickle', 'wb') as file:\n    # Use pickle.dump() to serialize the class and save it to the file\n    pickle.dump(person, file)\n\nprint(&quot;Person object has been successfully pickled and saved.&quot;)\n</code></pre>\n\n<h3>2. Deserializing Objects</h3>\n<h4>Example: Deserializing a List</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import pickle\n\n# Open a file in binary read mode to load the serialized object\nwith open('data.pickle', 'rb') as file:\n    # Use pickle.load() to deserialize the object from the file\n    loaded_data = pickle.load(file)\n\nprint(&quot;Data has been successfully unpickled:&quot;, loaded_data)\n</code></pre>\n\n<h4>Example: Deserializing a Custom Class</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import pickle\n\n# Open a file in binary read mode to load the serialized object\nwith open('person.pickle', 'rb') as file:\n    # Use pickle.load() to deserialize the class from the file\n    loaded_person = pickle.load(file)\n\nprint(&quot;Person object has been successfully unpickled:&quot;, loaded_person)\n</code></pre>\n\n<h3>3. Handling Special Characters</h3>\n<h4>Example: Serializing a String with Special Characters</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import pickle\n\n# Define a string containing special characters\nspecial_string = &quot;Hello, World! \ud83d\ude0a&quot;\n\n# Open a file in binary write mode to store the serialized object\nwith open('special_string.pickle', 'wb') as file:\n    # Use pickle.dump() to serialize the string and save it to the file\n    pickle.dump(special_string, file)\n\nprint(&quot;Special character string has been successfully pickled and saved.&quot;)\n</code></pre>\n\n<h4>Example: Deserializing a String with Special Characters</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import pickle\n\n# Open a file in binary read mode to load the serialized object\nwith open('special_string.pickle', 'rb') as file:\n    # Use pickle.load() to deserialize the string from the file\n    loaded_special_string = pickle.load(file)\n\nprint(&quot;Special character string has been successfully unpickled:&quot;, loaded_special_string)\n</code></pre>\n\n<h3>4. Handling Lists with Numpy Arrays</h3>\n<h4>Example: Serializing a List with Numpy Arrays</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import pickle\nimport numpy as np\n\n# Create a list containing a numpy array\ndata_with_array = [1, 2, 3, 'hello', {'key': 'value'}, ['nested', 'list'], np.array([4.5, 6.7])]\n\n# Open a file in binary write mode to store the serialized object\nwith open('data_with_array.pickle', 'wb') as file:\n    # Use pickle.dump() to serialize the list and save it to the file\n    pickle.dump(data_with_array, file)\n\nprint(&quot;Data with numpy array has been successfully pickled and saved.&quot;)\n</code></pre>\n\n<h4>Example: Deserializing a List with Numpy Arrays</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import pickle\nimport numpy as np\n\n# Open a file in binary read mode to load the serialized object\nwith open('data_with_array.pickle', 'rb') as file:\n    # Use pickle.load() to deserialize the list and retrieve the numpy array\n    loaded_data = pickle.load(file)\n    numpy_array = loaded_data[-1]  # Assuming numpy array is at the last index\n\nprint(&quot;Data with numpy array has been successfully unpickled:&quot;, numpy_array)\n</code></pre>\n\n<h3>5. Handling Cyclic Structures</h3>\n<h4>Example: Serializing a Cyclic Structure (e.g., nested list)</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import pickle\n\n# Create a cyclic structure using lists\ncycle_list = [1, 2, 3]\ncycle_list.append(cycle_list)\n\n# Open a file in binary write mode to store the serialized object\nwith open('cyclic_structure.pickle', 'wb') as file:\n    # Use pickle.dump() to serialize the cyclic list and save it to the file\n    pickle.dump(cycle_list, file)\n\nprint(&quot;Cyclic structure has been successfully pickled and saved.&quot;)\n</code></pre>\n\n<h4>Example: Deserializing a Cyclic Structure (e.g., nested list)</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import pickle\n\n# Open a file in binary read mode to load the serialized object\nwith open('cyclic_structure.pickle', 'rb') as file:\n    # Use pickle.load() to deserialize the cyclic list and retrieve it\n    loaded_cycle_list = pickle.load(file)\n\nprint(&quot;Cyclic structure has been successfully unpickled:&quot;, loaded_cycle_list)\n</code></pre>\n\n<h3>6. Handling Large Objects</h3>\n<h4>Example: Serializing a Large List</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import pickle\nimport random\n\n# Generate a large list with random integers\nlarge_list = [random.randint(0, 1000) for _ in range(100000)]\n\n# Open a file in binary write mode to store the serialized object\nwith open('large_list.pickle', 'wb') as file:\n    # Use pickle.dump() to serialize the large list and save it to the file\n    pickle.dump(large_list, file)\n\nprint(&quot;Large list has been successfully pickled and saved.&quot;)\n</code></pre>\n\n<h4>Example: Deserializing a Large List</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import pickle\n\n# Open a file in binary read mode to load the serialized object\nwith open('large_list.pickle', 'rb') as file:\n    # Use pickle.load() to deserialize the large list from the file\n    loaded_large_list = pickle.load(file)\n\nprint(&quot;Large list has been successfully unpickled:&quot;, len(loaded_large_list))\n</code></pre>\n\n<h3>7. Handling Binary Files</h3>\n<h4>Example: Serializing a List with Binary Data</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import pickle\nimport base64\n\n# Define a list containing binary data\nbinary_data = [b'\\x01\\x02\\x03', b'hello', b'\\xff']\n\n# Open a file in binary write mode to store the serialized object\nwith open('binary_data.pickle', 'wb') as file:\n    # Use pickle.dump() to serialize the list and save it to the file\n    pickle.dump(binary_data, file)\n\nprint(&quot;Binary data has been successfully pickled and saved.&quot;)\n</code></pre>\n\n<h4>Example: Deserializing a List with Binary Data</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import pickle\nimport base64\n\n# Open a file in binary read mode to load the serialized object\nwith open('binary_data.pickle', 'rb') as file:\n    # Use pickle.load() to deserialize the list and retrieve the binary data\n    loaded_binary_data = pickle.load(file)\n\nprint(&quot;Binary data has been successfully unpickled:&quot;, loaded_binary_data)\n</code></pre>\n\n<h3>8. Handling Custom Pickle Modules</h3>\n<h4>Example: Using <code>dill</code> for Serialization</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import dill\nimport numpy as np\n\n# Define a custom class using `dill`\nclass CustomClass:\n    def __init__(self, value):\n        self.value = value\n\n    def __repr__(self):\n        return f&quot;CustomClass(value={self.value})&quot;\n\n# Create an instance of the custom class\ncustom_obj = CustomClass(42)\n\n# Open a file in binary write mode to store the serialized object using dill\nwith open('custom_class_dill.pickle', 'wb') as file:\n    # Use dill.dump() to serialize the custom class and save it to the file\n    dill.dump(custom_obj, file)\n\nprint(&quot;Custom class has been successfully pickled and saved using dill.&quot;)\n</code></pre>\n\n<h4>Example: Deserializing a Custom Class Using <code>dill</code></h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import dill\n\n# Open a file in binary read mode to load the serialized object using dill\nwith open('custom_class_dill.pickle', 'rb') as file:\n    # Use dill.load() to deserialize the custom class from the file\n    loaded_custom_obj = dill.load(file)\n\nprint(&quot;Custom class has been successfully unpickled using dill:&quot;, loaded_custom_obj)\n</code></pre>\n\n<h3>Conclusion</h3>\n<p>The <code>pickle</code> module is a powerful tool for serializing and deserializing Python objects, which can be used in various scenarios such as saving data structures across sessions or transmitting them over networks. This module supports a wide range of object types and can handle complex cyclic structures, large data sets, and even custom classes with custom pickling methods. By using <code>dill</code>, you can extend the capabilities of <code>pickle</code> to support more complex data structures that may not be supported by default. Always ensure proper error handling when working with serialization to manage unexpected situations gracefully.</p>"
        },
        {
            "filename": "shelve - Python object persistence.md",
            "content": "<h1>shelve - Python object persistence</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-basic-usage\">1. Basic Usage</a></li>\n<li><a href=\"#2-handling-different-data-types\">2. Handling Different Data Types</a></li>\n<li><a href=\"#3-using-a-custom-serialization-format\">3. Using a Custom Serialization Format</a></li>\n<li><a href=\"#4-deleting-items-from-a-shelf\">4. Deleting Items from a Shelf</a></li>\n<li><a href=\"#5-iterating-over-a-shelf\">5. Iterating Over a Shelf</a></li>\n<li><a href=\"#6-closing-a-shelf-explicitly\">6. Closing a Shelf Explicitly</a></li>\n<li><a href=\"#7-using-a-shelve-file-as-a-dictionary\">7. Using a Shelve File as a Dictionary</a></li>\n<li><a href=\"#8-handling-exceptions-during-shelf-operations\">8. Handling Exceptions During Shelf Operations</a></li>\n<li><a href=\"#9-using-a-shelve-file-in-a-multithreaded-environment\">9. Using a Shelve File in a Multithreaded Environment</a></li>\n<li><a href=\"#10-using-a-shelve-file-with-multiple-databases\">10. Using a Shelve File with Multiple Databases</a></li>\n</ol>\n<p>The <code>shelve</code> module in Python provides a dictionary-like interface to persistent data storage, allowing you to store complex objects without worrying about serialization and deserialization.</p>\n<p>Below are comprehensive and well-documented code examples for various functionalities provided by the <code>shelve</code> module:</p>\n<h3>1. Basic Usage</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import shelve\n\n# Create or open a shelf file in write mode (or 'r' for read-only)\nwith shelve.open('example.db') as db:\n    # Store data in the shelf\n    db['key'] = {'name': 'Alice', 'age': 30}\n\n    # Access stored data\n    print(db['key'])  # Output: {'name': 'Alice', 'age': 30}\n\n# The file is automatically closed when exiting the with block\n</code></pre>\n\n<h3>2. Handling Different Data Types</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import shelve\n\nwith shelve.open('example.db') as db:\n    # Store a set, tuple, and list\n    db['set'] = {1, 2, 3}\n    db['tuple'] = (4, 5)\n    db['list'] = [6, 7, 8]\n\n    # Access stored data\n    print(db['set'])   # Output: {1, 2, 3}\n    print(db['tuple'])  # Output: (4, 5)\n    print(db['list'])  # Output: [6, 7, 8]\n\n# Note: Sets are not persistent in shelve by default, use pickle or custom serialization if needed\n</code></pre>\n\n<h3>3. Using a Custom Serialization Format</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import shelve\nimport json\n\nwith shelve.open('example.db', protocol=2) as db:\n    # Store a dictionary using JSON for serialization\n    db['person'] = {'name': 'Bob', 'age': 40}\n\n    # Load and access the stored data\n    loaded_person = json.loads(db['person'])\n    print(loaded_person)  # Output: {'name': 'Bob', 'age': 40}\n\n# The file is automatically closed when exiting the with block\n</code></pre>\n\n<h3>4. Deleting Items from a Shelf</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import shelve\n\nwith shelve.open('example.db') as db:\n    # Store some data\n    db['item1'] = {'a': 1, 'b': 2}\n    db['item2'] = {'c': 3, 'd': 4}\n\n    # Delete an item\n    del db['item1']\n\n    # Access the remaining items\n    print(db.items())  # Output: [('item2', {'c': 3, 'd': 4})]\n\n# The file is automatically closed when exiting the with block\n</code></pre>\n\n<h3>5. Iterating Over a Shelf</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import shelve\n\nwith shelve.open('example.db') as db:\n    # Store some data\n    db['item1'] = {'a': 1, 'b': 2}\n    db['item2'] = {'c': 3, 'd': 4}\n\n    # Iterate over the shelf items\n    for key, value in db.items():\n        print(f&quot;Key: {key}, Value: {value}&quot;)\n\n# The file is automatically closed when exiting the with block\n</code></pre>\n\n<h3>6. Closing a Shelf Explicitly</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import shelve\n\ndb = shelve.open('example.db')\ntry:\n    # Store data\n    db['info'] = {'username': 'admin', 'password': 'secret'}\nfinally:\n    # Close the shelf explicitly\n    db.close()\n\n# The file is closed manually in this example\n</code></pre>\n\n<h3>7. Using a Shelve File as a Dictionary</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import shelve\n\nwith shelve.open('example.db') as db:\n    # Store data using dictionary-like syntax\n    db['new_key'] = 'new_value'\n\n    # Access stored data using dictionary-like access\n    print(db['new_key'])  # Output: new_value\n\n# The file is automatically closed when exiting the with block\n</code></pre>\n\n<h3>8. Handling Exceptions During Shelf Operations</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import shelve\n\ntry:\n    with shelve.open('example.db') as db:\n        # Attempt to store a complex object that cannot be serialized by default\n        db['complex'] = {**db, 'additional': {'new_key': 'new_value'}}\nexcept TypeError as e:\n    print(f&quot;An error occurred: {e}&quot;)\n\n# The file is automatically closed when exiting the with block\n</code></pre>\n\n<h3>9. Using a Shelve File in a Multithreaded Environment</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import shelve\nfrom threading import Thread\n\ndef write_to_shelf(shelf):\n    with shelf:\n        shelf['data'] = {'thread_id': threading.current_thread().ident}\n\n# Create and start multiple threads to write to the same shelf\nthreads = [Thread(target=write_to_shelf, args=(shelve.open('example.db'),)) for _ in range(5)]\nfor thread in threads:\n    thread.start()\n\nfor thread in threads:\n    thread.join()\n</code></pre>\n\n<h3>10. Using a Shelve File with Multiple Databases</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import shelve\n\n# Open multiple shelves from the same file, each with different protocols\nwith shelve.open('example.db', protocol=2) as db1, shelve.open('example.db', protocol=4) as db2:\n    db1['proto_2'] = {'key': 'value'}\n    db2['proto_4'] = {'key': 'value'}\n\n# Access data from each shelf\nprint(db1['proto_2'])  # Output: {'key': 'value'}\nprint(db2['proto_4'])  # Output: {'key': 'value'}\n</code></pre>\n\n<p>These examples cover various scenarios and functionalities of the <code>shelve</code> module, demonstrating how to use it for persistent data storage in Python.</p>"
        },
        {
            "filename": "sqlite3 - DB-API 2.0 interface for SQLite databases.md",
            "content": "<h1>sqlite3 - DB-API 2.0 interface for SQLite databases</h1>\n<p>Here are comprehensive code examples for using the <code>sqlite3</code> module in Python, which provides an interface to the SQLite database engine:\n1. Connecting to a SQLite database:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import sqlite3\n\n# Connect to the SQLite database (or create it if it doesn't exist)\nconn = sqlite3.connect('my_database.db')\n</code></pre>\n\n<ol>\n<li>Creating a cursor object to execute SQL commands:</li>\n</ol>\n<pre class=\"codehilite\"><code class=\"language-python\">cursor = conn.cursor()\n</code></pre>\n\n<ol>\n<li>Executing an SQL command to create a table:</li>\n</ol>\n<pre class=\"codehilite\"><code class=\"language-python\">cursor.execute('''CREATE TABLE IF NOT EXISTS users\n             (id INTEGER PRIMARY KEY, name TEXT NOT NULL)''')\n</code></pre>\n\n<ol>\n<li>Inserting data into the table using parameterized queries:</li>\n</ol>\n<pre class=\"codehilite\"><code class=\"language-python\">cursor.execute(&quot;INSERT INTO users (name) VALUES (?)&quot;, ('John',))\nconn.commit()\n</code></pre>\n\n<ol>\n<li>Executing a SQL query to retrieve data from the table:</li>\n</ol>\n<pre class=\"codehilite\"><code class=\"language-python\">cursor.execute(&quot;SELECT * FROM users&quot;)\nrows = cursor.fetchall()\nfor row in rows:\n    print(row)\n</code></pre>\n\n<ol>\n<li>Closing the database connection and cursor:</li>\n</ol>\n<pre class=\"codehilite\"><code class=\"language-python\">cursor.close()\nconn.close()\n</code></pre>\n\n<ol>\n<li>Handling exceptions using try-except blocks:</li>\n</ol>\n<pre class=\"codehilite\"><code class=\"language-python\">import sqlite3\n\ntry:\n    conn = sqlite3.connect('my_database.db')\n    cursor = conn.cursor()\n    cursor.execute('''CREATE TABLE IF NOT EXISTS users\n             (id INTEGER PRIMARY KEY, name TEXT NOT NULL)''')\n    cursor.execute(&quot;INSERT INTO users (name) VALUES (?)&quot;, ('John',))\n    conn.commit()\n    cursor.execute(&quot;SELECT * FROM users&quot;)\n    rows = cursor.fetchall()\n    for row in rows:\n        print(row)\nfinally:\n    cursor.close()\n    conn.close()\n</code></pre>\n\n<ol>\n<li>Creating a connection using a context manager:</li>\n</ol>\n<pre class=\"codehilite\"><code class=\"language-python\">import sqlite3\n\nwith sqlite3.connect('my_database.db') as conn:\n    cursor = conn.cursor()\n    cursor.execute('''CREATE TABLE IF NOT EXISTS users\n             (id INTEGER PRIMARY KEY, name TEXT NOT NULL)''')\n    cursor.execute(&quot;INSERT INTO users (name) VALUES (?)&quot;, ('John',))\n    cursor.execute(&quot;SELECT * FROM users&quot;)\n    rows = cursor.fetchall()\n    for row in rows:\n        print(row)\n</code></pre>\n\n<ol>\n<li>Executing an SQL command using a parameterized query with named placeholders:</li>\n</ol>\n<pre class=\"codehilite\"><code class=\"language-python\">cursor.execute(&quot;INSERT INTO users (name) VALUES (:name)&quot;, {'name': 'John'})\nconn.commit()\n</code></pre>\n\n<ol>\n<li>Executing an SQL command to update data in the table:</li>\n</ol>\n<pre class=\"codehilite\"><code class=\"language-python\">cursor.execute(&quot;UPDATE users SET name = ? WHERE id = ?&quot;, ('Jane', 1))\nconn.commit()\n</code></pre>\n\n<ol>\n<li>Executing an SQL command to delete data from the table:</li>\n</ol>\n<pre class=\"codehilite\"><code class=\"language-python\">cursor.execute(&quot;DELETE FROM users WHERE id = ?&quot;, (1,))\nconn.commit()\n</code></pre>\n\n<ol>\n<li>Executing an SQL command using a parameterized query with positional placeholders:</li>\n</ol>\n<pre class=\"codehilite\"><code class=\"language-python\">cursor.execute(&quot;INSERT INTO users (name) VALUES (?, ?)&quot;, ('John', 'Doe'))\nconn.commit()\n</code></pre>\n\n<ol>\n<li>Executing an SQL command to select distinct values from a table:</li>\n</ol>\n<pre class=\"codehilite\"><code class=\"language-python\">cursor.execute(&quot;SELECT DISTINCT name FROM users&quot;)\nrows = cursor.fetchall()\nfor row in rows:\n    print(row)\n</code></pre>\n\n<ol>\n<li>Executing an SQL command to count the number of rows in a table:</li>\n</ol>\n<pre class=\"codehilite\"><code class=\"language-python\">cursor.execute(&quot;SELECT COUNT(*) FROM users&quot;)\nrow = cursor.fetchone()\nprint(row[0])\n</code></pre>\n\n<ol>\n<li>Executing an SQL command to order the results by a column:</li>\n</ol>\n<pre class=\"codehilite\"><code class=\"language-python\">cursor.execute(&quot;SELECT * FROM users ORDER BY name DESC&quot;)\nrows = cursor.fetchall()\nfor row in rows:\n    print(row)\n</code></pre>\n\n<ol>\n<li>Executing an SQL command to join two tables:</li>\n</ol>\n<pre class=\"codehilite\"><code class=\"language-python\">cursor.execute(&quot;SELECT u.name, t.value FROM users u JOIN table2 t ON u.id = t.user_id&quot;)\nrows = cursor.fetchall()\nfor row in rows:\n    print(row)\n</code></pre>\n\n<ol>\n<li>Executing an SQL command to perform a group by operation:</li>\n</ol>\n<pre class=\"codehilite\"><code class=\"language-python\">cursor.execute(&quot;SELECT name, COUNT(*) FROM users GROUP BY name&quot;)\nrows = cursor.fetchall()\nfor row in rows:\n    print(row)\n</code></pre>\n\n<ol>\n<li>Executing an SQL command to calculate the average of a column:</li>\n</ol>\n<pre class=\"codehilite\"><code class=\"language-python\">cursor.execute(&quot;SELECT AVG(age) FROM users&quot;)\nrow = cursor.fetchone()\nprint(row[0])\n</code></pre>\n\n<ol>\n<li>Executing an SQL command to calculate the sum of a column:</li>\n</ol>\n<pre class=\"codehilite\"><code class=\"language-python\">cursor.execute(&quot;SELECT SUM(salary) FROM employees&quot;)\nrow = cursor.fetchone()\nprint(row[0])\n</code></pre>\n\n<ol>\n<li>Executing an SQL command to calculate the maximum value of a column:</li>\n</ol>\n<pre class=\"codehilite\"><code class=\"language-python\">cursor.execute(&quot;SELECT MAX(height) FROM people&quot;)\nrow = cursor.fetchone()\nprint(row[0])\n</code></pre>\n\n<ol>\n<li>Executing an SQL command to calculate the minimum value of a column:</li>\n</ol>\n<pre class=\"codehilite\"><code class=\"language-python\">cursor.execute(&quot;SELECT MIN(weight) FROM people&quot;)\nrow = cursor.fetchone()\nprint(row[0])\n</code></pre>\n\n<ol>\n<li>Executing an SQL command to select data from multiple tables using subqueries:</li>\n</ol>\n<pre class=\"codehilite\"><code class=\"language-python\">cursor.execute(&quot;SELECT * FROM (SELECT id, name FROM users WHERE age &gt; 30) AS u JOIN table2 t ON u.id = t.user_id&quot;)\nrows = cursor.fetchall()\nfor row in rows:\n    print(row)\n</code></pre>\n\n<ol>\n<li>Executing an SQL command to select data from multiple tables using joins and conditions:</li>\n</ol>\n<pre class=\"codehilite\"><code class=\"language-python\">cursor.execute(&quot;SELECT u.name, t.value FROM users u JOIN table2 t ON u.id = t.user_id WHERE u.age &gt; 30&quot;)\nrows = cursor.fetchall()\nfor row in rows:\n    print(row)\n</code></pre>\n\n<ol>\n<li>Executing an SQL command to select data from multiple tables using subqueries and conditions:</li>\n</ol>\n<pre class=\"codehilite\"><code class=\"language-python\">cursor.execute(&quot;SELECT * FROM (SELECT id, name FROM users WHERE age &gt; 30) AS u JOIN table2 t ON u.id = t.user_id WHERE t.value &gt; 100&quot;)\nrows = cursor.fetchall()\nfor row in rows:\n    print(row)\n</code></pre>\n\n<ol>\n<li>Executing an SQL command to select data from multiple tables using joins and conditions with parameters:</li>\n</ol>\n<pre class=\"codehilite\"><code class=\"language-python\">cursor.execute(&quot;SELECT * FROM (SELECT id, name FROM users WHERE age &gt; :age) AS u JOIN table2 t ON u.id = t.user_id WHERE t.value &gt; :value&quot;, {'age': 30, 'value': 100})\nrows = cursor.fetchall()\nfor row in rows:\n    print(row)\n</code></pre>\n\n<ol>\n<li>Executing an SQL command to select data from multiple tables using joins and conditions with parameters and placeholders:</li>\n</ol>\n<pre class=\"codehilite\"><code class=\"language-python\">cursor.execute(&quot;SELECT * FROM (SELECT id, name FROM users WHERE age &gt; :age) AS u JOIN table2 t ON u.id = t.user_id WHERE t.value &gt; ?&quot;, (100,))\nrows = cursor.fetchall()\nfor row in rows:\n    print(row)\n</code></pre>\n\n<ol>\n<li>Executing an SQL command to select data from multiple tables using joins and conditions with parameters and placeholders, and handling exceptions:</li>\n</ol>\n<pre class=\"codehilite\"><code class=\"language-python\">import sqlite3\n\ntry:\n    conn = sqlite3.connect('my_database.db')\n    cursor = conn.cursor()\n    cursor.execute(&quot;SELECT * FROM (SELECT id, name FROM users WHERE age &gt; :age) AS u JOIN table2 t ON u.id = t.user_id WHERE t.value &gt; ?&quot;, (100,))\n    rows = cursor.fetchall()\n    for row in rows:\n        print(row)\nexcept sqlite3.Error as e:\n    print(&quot;An error occurred:&quot;, e)\nfinally:\n    cursor.close()\n    conn.close()\n</code></pre>\n\n<ol>\n<li>Executing an SQL command to select data from multiple tables using joins and conditions with parameters, placeholders, and handling exceptions and logging:</li>\n</ol>\n<pre class=\"codehilite\"><code class=\"language-python\">import sqlite3\nimport logging\n\nlogging.basicConfig(level=logging.INFO)\n\ntry:\n    conn = sqlite3.connect('my_database.db')\n    cursor = conn.cursor()\n    cursor.execute(&quot;SELECT * FROM (SELECT id, name FROM users WHERE age &gt; :age) AS u JOIN table2 t ON u.id = t.user_id WHERE t.value &gt; ?&quot;, (100,))\n    rows = cursor.fetchall()\n    for row in rows:\n        logging.info(row)\nexcept sqlite3.Error as e:\n    logging.error(&quot;An error occurred:&quot;, e)\nfinally:\n    cursor.close()\n    conn.close()\n</code></pre>\n\n<ol>\n<li>Executing an SQL command to select data from multiple tables using joins and conditions with parameters, placeholders, and handling exceptions and logging, and using context managers:</li>\n</ol>\n<pre class=\"codehilite\"><code class=\"language-python\">import sqlite3\nimport logging\n\nlogging.basicConfig(level=logging.INFO)\n\ntry:\n    with sqlite3.connect('my_database.db') as conn:\n        cursor = conn.cursor()\n        cursor.execute(&quot;SELECT * FROM (SELECT id, name FROM users WHERE age &gt; :age) AS u JOIN table2 t ON u.id = t.user_id WHERE t.value &gt; ?&quot;, (100,))\n        rows = cursor.fetchall()\n        for row in rows:\n            logging.info(row)\nexcept sqlite3.Error as e:\n    logging.error(&quot;An error occurred:&quot;, e)\n</code></pre>\n\n<ol>\n<li>Executing an SQL command to select data from multiple tables using joins and conditions with parameters, placeholders, and handling exceptions and logging, and using context managers and exception handling:</li>\n</ol>\n<pre class=\"codehilite\"><code class=\"language-python\">import sqlite3\nimport logging\n\nlogging.basicConfig(level=logging.INFO)\n\ntry:\n    with sqlite3.connect('my_database.db') as conn:\n        cursor = conn.cursor()\n        cursor.execute(&quot;SELECT * FROM (SELECT id, name FROM users WHERE age &gt; :age) AS u JOIN table2 t ON u.id = t.user_id WHERE t.value &gt; ?&quot;, (100,))\n        rows = cursor.fetchall()\nexcept sqlite3.Error as e:\n    logging.error(&quot;An error occurred:&quot;, e)\nelse:\n    for row in rows:\n        logging.info(row)\nfinally:\n    cursor.close()\n    conn.close()\n</code></pre>"
        }
    ],
    "Debugging and Profiling": [
        {
            "filename": "bdb - Debugger framework.md",
            "content": "<h1>bdb - Debugger framework</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-basic-usage\">1. Basic Usage</a></li>\n<li><a href=\"#2-customizing-the-debugger\">2. Customizing the Debugger</a></li>\n<li><a href=\"#3-debugging-interactive-input\">3. Debugging Interactive Input</a></li>\n<li><a href=\"#4-using-bdbset_trace-in-an-interactive-session\">4. Using <code>bdb.set_trace()</code> in an Interactive Session</a></li>\n<li><a href=\"#5-debugging-nested-functions\">5. Debugging Nested Functions</a></li>\n<li><a href=\"#6-customizing-output\">6. Customizing Output</a></li>\n<li><a href=\"#7-debugging-with-a-custom-breakpoint\">7. Debugging with a Custom Breakpoint</a></li>\n<li><a href=\"#8-debugging-with-logging\">8. Debugging with Logging</a></li>\n</ol>\n<p>The <code>bdb</code> module in Python is a debugging framework that allows you to debug programs interactively at the source code level. Below are comprehensive examples of how to use each of the main functions and classes provided by this module. These examples cover basic usage, common debugging scenarios, and best practices for integrating bdb into your applications.</p>\n<h3>1. Basic Usage</h3>\n<p>First, ensure you have a script or function that you want to debug. For simplicity, let's create a simple script:</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># example_script.py\ndef add(a, b):\n    result = a + b\n    return result\n\nresult = add(5, 3)\nprint(&quot;Result:&quot;, result)\n</code></pre>\n\n<p>To use <code>bdb</code> for debugging this script, you can start by setting up the debugger and stepping through the code:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import bdb\nimport sys\n\n# Define a custom exception to handle the breakpoint\nclass BreakpointException(Exception):\n    pass\n\ndef break_here():\n    raise BreakpointException(&quot;Break here!&quot;)\n\nif __name__ == &quot;__main__&quot;:\n    try:\n        exec(open('example_script.py').read())\n    except BreakpointException as e:\n        bdb.set_trace()\n        print(e)\n</code></pre>\n\n<h3>2. Customizing the Debugger</h3>\n<p>You can customize the behavior of <code>bdb</code> by subclassing the <code>Bdb</code> class and overriding methods to add custom functionality:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">class MyBdb(bdb.Bdb):\n    def post_mortem(self, frame):\n        # Override post-mortem to show a custom message\n        print(&quot;Post-mortem debugging started.&quot;)\n        bdb.Bdb.post_mortem(self, frame)\n\ndef my_main():\n    try:\n        exec(open('example_script.py').read())\n    except Exception as e:\n        my_bdb = MyBdb()\n        my_bdb.set_trace()\n        print(f&quot;Error: {e}&quot;)\n\nif __name__ == &quot;__main__&quot;:\n    my_main()\n</code></pre>\n\n<h3>3. Debugging Interactive Input</h3>\n<p><code>bdb</code> can also be used to debug interactive input:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import bdb\nimport sys\n\ndef prompt_for_input(prompt):\n    return input(prompt)\n\ndef process_input(input_value):\n    result = prompt_for_input(&quot;Enter a number: &quot;)\n    try:\n        num = float(result)\n        print(f&quot;The processed number is: {num}&quot;)\n    except ValueError:\n        raise ValueError(&quot;Invalid input. Please enter a valid number.&quot;)\n\nif __name__ == &quot;__main__&quot;:\n    try:\n        process_input(input())\n    except bdb.Breakpoint as e:\n        print(e)\n</code></pre>\n\n<h3>4. Using <code>bdb.set_trace()</code> in an Interactive Session</h3>\n<p>You can use <code>bdb.set_trace()</code> directly in an interactive session to start debugging a script:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import bdb\n\ndef add(a, b):\n    result = a + b\n    return result\n\n# Start the debugger at this point\nresult = add(5, 3)\nprint(&quot;Result:&quot;, result)\n\ntry:\n    exec(open('example_script.py').read())\nexcept Exception as e:\n    bdb.set_trace()\n    print(f&quot;Error: {e}&quot;)\n</code></pre>\n\n<h3>5. Debugging Nested Functions</h3>\n<p>When dealing with nested functions, you can use <code>bdb</code> to step into them:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import bdb\nimport sys\n\ndef outer_function():\n    def inner_function(a):\n        return a * 2\n\n    result = inner_function(3)\n    print(&quot;Result:&quot;, result)\n\n# Start the debugger at this point\nouter_function()\n\ntry:\n    exec(open('example_script.py').read())\nexcept Exception as e:\n    bdb.set_trace()\n    print(f&quot;Error: {e}&quot;)\n</code></pre>\n\n<h3>6. Customizing Output</h3>\n<p>You can customize the output of <code>bdb</code> by overriding methods in your custom subclass:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">class MyBdb(bdb.Bdb):\n    def do_print(self, arg):\n        # Override print to show a custom message\n        print(&quot;Custom print statement:&quot;, arg)\n\ndef my_main():\n    try:\n        exec(open('example_script.py').read())\n    except Exception as e:\n        my_bdb = MyBdb()\n        my_bdb.set_trace()\n        print(f&quot;Error: {e}&quot;)\n\nif __name__ == &quot;__main__&quot;:\n    my_main()\n</code></pre>\n\n<h3>7. Debugging with a Custom Breakpoint</h3>\n<p>You can define a custom breakpoint by subclassing <code>bdb.Breakpoint</code>:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">class CustomBreakpoint(bdb.Breakpoint):\n    def __init__(self, frame, code):\n        super().__init__(frame, code)\n        self.message = &quot;Custom breakpoint triggered.&quot;\n\ndef my_main():\n    try:\n        exec(open('example_script.py').read())\n    except Exception as e:\n        custom_bp = CustomBreakpoint(None, None)\n        custom_bp.__call__()\n        print(f&quot;Error: {e}&quot;)\n\nif __name__ == &quot;__main__&quot;:\n    my_main()\n</code></pre>\n\n<h3>8. Debugging with Logging</h3>\n<p>You can use <code>bdb</code> to log debugging information:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import bdb\nimport logging\n\n# Set up basic configuration for logging\nlogging.basicConfig(level=logging.DEBUG)\n\ndef add(a, b):\n    result = a + b\n    logging.debug(f&quot;Adding {a} and {b}, got {result}&quot;)\n    return result\n\nif __name__ == &quot;__main__&quot;:\n    try:\n        exec(open('example_script.py').read())\n    except Exception as e:\n        bdb.set_trace()\n        print(f&quot;Error: {e}&quot;)\n</code></pre>\n\n<p>These examples demonstrate various aspects of using the <code>bdb</code> module, from basic debugging to more advanced customization options. By integrating these techniques into your development workflow, you can effectively debug complex programs and scripts in Python.</p>"
        },
        {
            "filename": "faulthandler - Dump the Python traceback.md",
            "content": "<h1>faulthandler - Dump the Python traceback</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-basic-usage\">1. Basic Usage</a></li>\n<li><a href=\"#2-customizing-core-dump-generation\">2. Customizing Core Dump Generation</a></li>\n<li><a href=\"#3-disabling-core-dump-generation\">3. Disabling Core Dump Generation</a></li>\n<li><a href=\"#4-listing-enabled-core-dump-filenames\">4. Listing Enabled Core Dump Filenames</a></li>\n<li><a href=\"#5-setting-custom-dump-directory\">5. Setting Custom Dump Directory</a></li>\n<li><a href=\"#6-listing-all-supported-formats\">6. Listing All Supported Formats</a></li>\n<li><a href=\"#7-setting-custom-format\">7. Setting Custom Format</a></li>\n<li><a href=\"#8-listing-all-threads\">8. Listing All Threads</a></li>\n<li><a href=\"#9-dumping-traceback-for-a-specific-thread\">9. Dumping Traceback for a Specific Thread</a></li>\n<li><a href=\"#10-printing-a-stack-trace\">10. Printing a Stack Trace</a></li>\n</ol>\n<p>The <code>faulthandler</code> module in Python is used to enable a core dump of the Python interpreter on segmentation faults, errors, or other unhandled exceptions. This can be particularly useful for debugging and recovering from crashes. Below are some comprehensive code examples that demonstrate various functionalities of the <code>faulthandler</code> module.</p>\n<h3>1. Basic Usage</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import faulthandler\n\n# Enable core dump generation\nfaulthandler.enable()\n\ntry:\n    # Code that might cause a crash\n    import sys\n    sys.exit(0)\nexcept Exception as e:\n    print(&quot;An error occurred:&quot;, e)\n</code></pre>\n\n<h3>2. Customizing Core Dump Generation</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import faulthandler\n\n# Enable core dump generation with custom options\nfaulthandler.enable(file=&quot;core&quot;, all_threads=True, chain=False)\n\ntry:\n    # Code that might cause a crash\n    import sys\n    sys.exit(0)\nexcept Exception as e:\n    print(&quot;An error occurred:&quot;, e)\n</code></pre>\n\n<h3>3. Disabling Core Dump Generation</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import faulthandler\n\n# Disable core dump generation\nfaulthandler.disable()\n\ntry:\n    # Code that might cause a crash\n    import sys\n    sys.exit(0)\nexcept Exception as e:\n    print(&quot;An error occurred:&quot;, e)\n</code></pre>\n\n<h3>4. Listing Enabled Core Dump Filenames</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import faulthandler\n\n# List all core dump filenames enabled by the program\nprint(faulthandler.get_enabled())\n</code></pre>\n\n<h3>5. Setting Custom Dump Directory</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import faulthandler\n\n# Set a custom directory for saving core dumps\nfaulthandler.set_dump_dir(&quot;/path/to/directory&quot;)\n\ntry:\n    # Code that might cause a crash\n    import sys\n    sys.exit(0)\nexcept Exception as e:\n    print(&quot;An error occurred:&quot;, e)\n</code></pre>\n\n<h3>6. Listing All Supported Formats</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import faulthandler\n\n# List all supported formats for dumping the traceback\nprint(faulthandler.get_dump_formats())\n</code></pre>\n\n<h3>7. Setting Custom Format</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import faulthandler\n\n# Set a custom format for dumping the traceback\nfaulthandler.set_dump_format(&quot;c&quot;)\n\ntry:\n    # Code that might cause a crash\n    import sys\n    sys.exit(0)\nexcept Exception as e:\n    print(&quot;An error occurred:&quot;, e)\n</code></pre>\n\n<h3>8. Listing All Threads</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import faulthandler\n\n# List all threads in the current process\nprint(faulthandler.get_all_threads())\n</code></pre>\n\n<h3>9. Dumping Traceback for a Specific Thread</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import faulthandler\n\n# Get a specific thread object\nthread = faulthandler.get_thread(123)\n\nif thread:\n    # Dump the traceback for the specified thread\n    print(&quot;Dumping traceback for thread&quot;, thread.ident)\n    faulthandler.dump_traceback(thread)\nelse:\n    print(&quot;Thread not found&quot;)\n</code></pre>\n\n<h3>10. Printing a Stack Trace</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import faulthandler\n\n# Print the current stack trace\nfaulthandler.print_stack()\n</code></pre>\n\n<p>These examples cover various aspects of using the <code>faulthandler</code> module, from enabling and disabling core dump generation to customizing options and handling exceptions. Each example includes comments explaining key steps and uses standard library functions and modules effectively.</p>"
        },
        {
            "filename": "pdb - The Python Debugger.md",
            "content": "<h1>pdb - The Python Debugger</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#debugging-commands\">Debugging Commands:</a></li>\n<li><a href=\"#full-example-with-debugging\">Full Example with Debugging:</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n</ol>\n<p>Below is a comprehensive set of code examples for the <code>pdb</code> module, which provides an interactive command-line interface to interact with running Python programs. Each example includes comments explaining each step.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Importing the pdb module\nimport pdb\n\ndef simple_function(a, b):\n    # Entering the debugger at this point\n    pdb.set_trace()\n\n    result = a + b\n    return result\n\n# Example usage of simple_function\ntry:\n    print(simple_function(2, 3))\nexcept Exception as e:\n    print(f&quot;An error occurred: {e}&quot;)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ol>\n<li>\n<p><strong>Importing the <code>pdb</code> Module</strong>:\n   <code>python\n   import pdb</code>\n   This line imports the <code>pdb</code> module, which is used for debugging purposes.</p>\n</li>\n<li>\n<p><strong>Defining a Function with Debugging Point</strong>:\n   ```python\n   def simple_function(a, b):\n       # Entering the debugger at this point\n       pdb.set_trace()</p>\n<p>result = a + b\n   return result\n   <code>``\n   -</code>pdb.set_trace()` is called to set a breakpoint in the function. This means execution will pause whenever the function is called.</p>\n</li>\n<li>\n<p><strong>Example Usage of the Function</strong>:\n   <code>python\n   try:\n       print(simple_function(2, 3))\n   except Exception as e:\n       print(f\"An error occurred: {e}\")</code></p>\n</li>\n<li>The function <code>simple_function</code> is called with arguments <code>2</code> and <code>3</code>.</li>\n<li>Since there's a breakpoint in the function, execution will pause at that point.</li>\n</ol>\n<h3>Debugging Commands:</h3>\n<p>When you run the script and hit the breakpoint, you can use various commands to interactively debug the code. Here are some common debugging commands:</p>\n<ul>\n<li><strong>Commands</strong>:</li>\n<li><code>n</code> (next): Continue execution until the next line of code is reached.</li>\n<li><code>s</code> (step into): Step into a function call.</li>\n<li><code>c</code> (continue): Continue execution until the program finishes or hits another breakpoint.</li>\n<li><code>q</code> (quit): Exit the debugger and terminate the program.</li>\n</ul>\n<h3>Full Example with Debugging:</h3>\n<p>Here's an example that includes these debugging commands:</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Importing the pdb module\nimport pdb\n\ndef divide(a, b):\n    # Entering the debugger at this point\n    pdb.set_trace()\n\n    result = a / b\n    return result\n\n# Example usage of divide function with some test cases\ntry:\n    print(divide(10, 2))  # Expected output: 5.0\n    print(divide(10, 0))  # Expected to trigger an exception\nexcept Exception as e:\n    print(f&quot;An error occurred: {e}&quot;)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ul>\n<li><strong>Handling Division by Zero</strong>:</li>\n<li>The function <code>divide</code> is called with <code>10</code> and <code>0</code>, which will raise a <code>ZeroDivisionError</code>.</li>\n<li>The debugger will pause at the <code>a / b</code> line, allowing you to inspect variables and use debugging commands.</li>\n</ul>\n<p>By following these examples and using the provided debugging commands, you can effectively use the <code>pdb</code> module to debug Python programs.</p>"
        },
        {
            "filename": "timeit - Measure execution time of small code snippets.md",
            "content": "<h1>timeit - Measure execution time of small code snippets</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-basic-usage\">1. Basic Usage</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#2-measuring-multiple-statements\">2. Measuring Multiple Statements</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#3-measuring-time-for-a-function\">3. Measuring Time for a Function</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#4-using-timeittimer-for-detailed-control\">4. Using Timeit.Timer for Detailed Control</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#5-measuring-time-for-multiple-statements-with-timer\">5. Measuring Time for Multiple Statements with Timer</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n</ol>\n<p>The <code>timeit</code> module in Python is a simple timing interface that helps measure short durations by running a given statement multiple times. It's particularly useful for benchmarking and profiling Python code. Below are comprehensive and well-documented examples demonstrating various functionalities of the <code>timeit</code> module.</p>\n<h3>1. Basic Usage</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import timeit\n\n# Measure execution time of a simple addition\nresult = timeit.timeit(&quot;a + b&quot;, globals=globals(), number=1000)\nprint(f&quot;Execution time: {result:.6f} seconds&quot;)\n</code></pre>\n\n<h4>Explanation:</h4>\n<ul>\n<li><strong>Function</strong>: <code>timeit.timeit()</code></li>\n<li>This function measures the execution time of a specified code snippet.</li>\n<li>The <code>stmt</code> parameter is the statement to be timed. It can include variables and functions defined in <code>globals</code> or <code>locals</code>.</li>\n<li><code>number</code> specifies how many times the statement should be executed.</li>\n</ul>\n<h3>2. Measuring Multiple Statements</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import timeit\n\n# Measure execution time of multiple statements\nresult = timeit.timeit(&quot;&quot;&quot;\na = [1, 2, 3]\nb = [4, 5, 6]\nresult = list(map(lambda x, y: x + y, a, b))\n&quot;&quot;&quot;, globals=globals(), number=1000)\nprint(f&quot;Execution time: {result:.6f} seconds&quot;)\n</code></pre>\n\n<h4>Explanation:</h4>\n<ul>\n<li>The <code>stmt</code> parameter can contain multiple statements separated by semicolons.</li>\n<li>This example demonstrates using the <code>map</code> function to perform element-wise addition of two lists.</li>\n</ul>\n<h3>3. Measuring Time for a Function</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import timeit\n\ndef my_function():\n    return [i * i for i in range(1000)]\n\n# Measure execution time of a defined function\nresult = timeit.timeit(&quot;my_function()&quot;, globals=globals(), number=1000)\nprint(f&quot;Execution time: {result:.6f} seconds&quot;)\n</code></pre>\n\n<h4>Explanation:</h4>\n<ul>\n<li>You can define your own functions and measure their execution time directly.</li>\n<li>This example demonstrates using a list comprehension to create a list of squares of numbers from 0 to 999.</li>\n</ul>\n<h3>4. Using Timeit.Timer for Detailed Control</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import timeit\n\n# Create a Timer object for more detailed control\ntimer = timeit.Timer(&quot;a + b&quot;, globals=globals())\n\n# Measure execution time in seconds\nresult_seconds = timer.timeit(number=1000)\nprint(f&quot;Execution time (seconds): {result_seconds:.6f}&quot;)\n\n# Measure execution time in number of loops\nresult_loops = timer.repeat(3, 1000)  # Repeat the measurement 3 times with 1000 iterations each\nprint(&quot;Execution times per repetition:&quot;, result_loops)\n</code></pre>\n\n<h4>Explanation:</h4>\n<ul>\n<li>The <code>timeit.Timer</code> class provides more detailed control over timing.</li>\n<li><code>timeit.timeit()</code> measures the execution time of a statement in seconds.</li>\n<li><code>repeat(n, number)</code> repeats the measurement n times and returns a list of durations.</li>\n</ul>\n<h3>5. Measuring Time for Multiple Statements with Timer</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import timeit\n\ntimer = timeit.Timer(&quot;&quot;&quot;\na = [1, 2, 3]\nb = [4, 5, 6]\nresult = list(map(lambda x, y: x + y, a, b))\n&quot;&quot;&quot;, globals=globals())\n\n# Measure execution time in seconds for multiple statements\nresult_seconds = timer.timeit(number=1000)\nprint(f&quot;Execution time (seconds): {result_seconds:.6f}&quot;)\n\n# Measure execution time in number of loops\nresult_loops = timer.repeat(3, 1000)  # Repeat the measurement 3 times with 1000 iterations each\nprint(&quot;Execution times per repetition:&quot;, result_loops)\n</code></pre>\n\n<h4>Explanation:</h4>\n<ul>\n<li>Using <code>timeit.Timer</code> allows you to measure multiple statements in a single block.</li>\n<li>This example demonstrates measuring the execution time of an <code>if</code> statement and a list comprehension.</li>\n</ul>\n<h3>6. Timing Code with Setup</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import timeit\n\n# Measure execution time with setup code\nresult = timeit.timeit(&quot;result = sum(a)&quot;, globals=globals(), number=1000, setup=&quot;a = [i for i in range(1000)]&quot;)\nprint(f&quot;Execution time: {result:.6f} seconds&quot;)\n</code></pre>\n\n<h4>Explanation:</h4>\n<ul>\n<li>The <code>setup</code> parameter allows you to define code that is executed before the timing starts.</li>\n<li>This example demonstrates setting up a list and measuring the execution time of the <code>sum()</code> function on it.</li>\n</ul>\n<h3>7. Measuring Execution Time with Additional Options</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import timeit\n\n# Measure execution time with additional options\nresult = timeit.timeit(&quot;result = sum(a)&quot;, globals=globals(), number=1000, repeat=3, setup=&quot;a = [i for i in range(1000)]&quot;)\nprint(f&quot;Execution times (seconds): {result:.6f}&quot;)\n</code></pre>\n\n<h4>Explanation:</h4>\n<ul>\n<li>You can specify the number of repeats and additional options to control the measurement process.</li>\n<li>This example demonstrates repeating the measurement three times and setting up a list.</li>\n</ul>\n<h3>Conclusion</h3>\n<p>The <code>timeit</code> module is a powerful tool for measuring the execution time of small code snippets in Python. It provides flexibility through the use of parameters like <code>number</code>, <code>setup</code>, and <code>repeat</code>, allowing you to control the timing behavior according to your needs. These examples cover basic usage, multiple statements, function execution, detailed control with <code>timeit.Timer</code>, and more, demonstrating its versatility for performance analysis and benchmarking.</p>\n<h3>Further Reading</h3>\n<ul>\n<li><a href=\"https://docs.python.org/3/library/timeit.html\">Python 3.12 Documentation: timeit Module</a></li>\n</ul>\n<p>This code is designed to be clear, concise, and suitable for inclusion in official documentation examples.</p>"
        },
        {
            "filename": "trace - Trace or track Python statement execution.md",
            "content": "<h1>trace - Trace or track Python statement execution</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-basic-tracing-with-tracetracemalloc\">Example 1: Basic Tracing with <code>trace.tracemalloc</code></a></li>\n<li><a href=\"#example-2-tracing-execution-with-tracetrace\">Example 2: Tracing Execution with <code>trace.Trace</code></a></li>\n<li><a href=\"#example-3-tracing-with-custom-filters\">Example 3: Tracing with Custom Filters</a></li>\n<li><a href=\"#example-4-tracing-with-custom-output\">Example 4: Tracing with Custom Output</a></li>\n</ol>\n<p>The <code>trace</code> module is a part of the Python Standard Library that provides a way to trace the execution of Python programs. It allows you to instrument your program to log each statement as it executes, which can be useful for debugging and profiling.</p>\n<p>Below are comprehensive code examples demonstrating various functionalities provided by the <code>trace</code> module:</p>\n<h3>Example 1: Basic Tracing with <code>trace.tracemalloc</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import trace\nimport tracemalloc\n\n# Start tracing memory allocations\ntracemalloc.start()\n\ntry:\n    # Your code to be traced goes here\n    for i in range(100000):\n        x = [i] * 1000000\nexcept KeyboardInterrupt:\n    pass\n\n# Print the top 10 memory allocation entries\nprint(tracemalloc.get_top(10))\n\n# Stop tracing memory allocations and print statistics\ntracemalloc.stop()\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- <code>trace.tracemalloc.start()</code> starts monitoring memory allocations.\n- The code block to be traced is wrapped in a try-except block to allow graceful termination with a keyboard interrupt (Ctrl+C).\n- <code>tracemalloc.get_top(10)</code> retrieves the top 10 memory allocation entries, which can help identify memory leaks or inefficient usage.\n- <code>tracemalloc.stop()</code> stops monitoring and prints statistics.</p>\n<h3>Example 2: Tracing Execution with <code>trace.Trace</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import trace\n\n# Define a function to be traced\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n# Create a Trace object\ntracer = trace.Trace(\n    countcalls=True, # Count calls made by functions\n    trace=2,         # Trace function calls with level 2 (deep)\n    countlines=True   # Count lines of code executed\n)\n\n# Run the function under tracing\ntracer.run('factorial(10)')\n\n# Report the results\ntracer.results().write_results(show_missing=True, coverdir=&quot;.&quot;)\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- <code>trace.Trace</code> is used to create a tracer object with options to count function calls, trace function calls deeply, and count lines of code executed.\n- The <code>run</code> method executes the specified Python expression (e.g., <code>factorial(10)</code>) under tracing.\n- <code>tracer.results().write_results(show_missing=True, coverdir=\".\")</code> writes the results to a file in a directory named <code>.</code>, showing missing calls and providing a coverage report.</p>\n<h3>Example 3: Tracing with Custom Filters</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import trace\n\n# Define a custom filter function\ndef filter_frame(frame):\n    # Exclude frames from specific modules or functions\n    if frame.f_code.co_filename.startswith('/usr/lib/python3'):\n        return False\n    if 'trace.py' in frame.f_code.co_name:\n        return False\n    return True\n\n# Create a Trace object with a custom filter\ntracer = trace.Trace(\n    countcalls=True,\n    trace=2,\n    countlines=True,\n    ignore_function=filter_frame\n)\n\n# Run the function under tracing\ntracer.run('factorial(10)')\n\n# Report the results\ntracer.results().write_results(show_missing=True, coverdir=&quot;.&quot;)\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- A custom filter function <code>filter_frame</code> is defined to exclude frames from specific modules or functions.\n- The <code>ignore_function</code> option in <code>trace.Trace</code> uses this filter to skip certain frames during tracing.\n- The results are written to a file with missing calls and coverage report.</p>\n<h3>Example 4: Tracing with Custom Output</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import trace\n\n# Define custom output functions\ndef write_start(message):\n    print(f&quot;Starting {message}&quot;)\n\ndef write_end(message):\n    print(f&quot;Ending {message}&quot;)\n\n# Create a Trace object with custom output\ntracer = trace.Trace(\n    countcalls=True,\n    trace=2,\n    countlines=True,\n    start_func=write_start,\n    finish_func=write_end\n)\n\n# Run the function under tracing\ntracer.run('factorial(10)')\n\n# Report the results\ntracer.results().write_results(show_missing=True, coverdir=&quot;.&quot;)\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- Custom start and end functions <code>write_start</code> and <code>write_end</code> are defined to log messages at the beginning and end of each traced function.\n- The <code>start_func</code> and <code>finish_func</code> options in <code>trace.Trace</code> use these functions to log trace events.\n- The results are written to a file with missing calls and coverage report.</p>\n<p>These examples demonstrate various ways to use the <code>trace</code> module for tracing Python execution, including memory allocation monitoring, detailed execution traces, custom filtering, and custom output.</p>"
        },
        {
            "filename": "tracemalloc - Trace memory allocations.md",
            "content": "<h1>tracemalloc - Trace memory allocations</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-enabling-tracing\">1. Enabling Tracing</a></li>\n<li><a href=\"#2-capturing-memory-snapshot\">2. Capturing Memory Snapshot</a></li>\n<li><a href=\"#3-analyzing-memory-snapshot\">3. Analyzing Memory Snapshot</a></li>\n<li><a href=\"#4-analyzing-top-memory-usage\">4. Analyzing Top Memory Usage</a></li>\n<li><a href=\"#5-analyzing-memory-usage-over-time\">5. Analyzing Memory Usage Over Time</a></li>\n<li><a href=\"#6-writing-results-to-file\">6. Writing Results to File</a></li>\n<li><a href=\"#7-resetting-tracing\">7. Resetting Tracing</a></li>\n<li><a href=\"#8-using-with-context-manager\">8. Using with Context Manager</a></li>\n</ol>\n<p>The <code>tracemalloc</code> module is a built-in tool that provides support for tracing memory allocation events. It can help identify memory leaks and optimize memory usage by analyzing how memory is allocated and deallocated over time.</p>\n<p>Here are some code examples demonstrating the usage of the <code>tracemalloc</code> module:</p>\n<h3>1. Enabling Tracing</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tracemalloc\n\n# Start tracing memory allocations\ntracemalloc.start()\n</code></pre>\n\n<h3>2. Capturing Memory Snapshot</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tracemalloc\n\n# Start tracing memory allocations\ntracemalloc.start()\n\n# Perform some memory-intensive operations\n# For example, create a large list of dictionaries\nlarge_list = [{} for _ in range(1000)]\n\n# Stop tracing and capture a snapshot\nsnapshot = tracemalloc.take_snapshot()\n</code></pre>\n\n<h3>3. Analyzing Memory Snapshot</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tracemalloc\n\n# Start tracing memory allocations\ntracemalloc.start()\n\n# Perform some memory-intensive operations\n# For example, create a large list of dictionaries\nlarge_list = [{} for _ in range(1000)]\n\n# Stop tracing and capture a snapshot\nsnapshot = tracemalloc.take_snapshot()\n\n# Print the top 5 most common allocations\ntop_stats = snapshot.statistics('lineno')\nfor stat in top_stats[:5]:\n    print(stat)\n</code></pre>\n\n<h3>4. Analyzing Top Memory Usage</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tracemalloc\n\n# Start tracing memory allocations\ntracemalloc.start()\n\n# Perform some memory-intensive operations\n# For example, create a large list of dictionaries\nlarge_list = [{} for _ in range(1000)]\n\n# Stop tracing and capture a snapshot\nsnapshot = tracemalloc.take_snapshot()\n\n# Print the top 5 most common allocations by size\ntop_stats = snapshot.statistics('size')\nfor stat in top_stats[:5]:\n    print(stat)\n</code></pre>\n\n<h3>5. Analyzing Memory Usage Over Time</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tracemalloc\n\n# Start tracing memory allocations\ntracemalloc.start()\n\n# Perform some memory-intensive operations over time\nlarge_list = []\nfor _ in range(10):\n    large_list.append([{} for _ in range(1000)])\n\n# Stop tracing and capture a snapshot\nsnapshot = tracemalloc.take_snapshot()\n\n# Print the top 5 most common allocations by size at each step\ntop_stats = snapshot.statistics('size')\nfor stat in top_stats:\n    print(stat)\n</code></pre>\n\n<h3>6. Writing Results to File</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tracemalloc\n\n# Start tracing memory allocations\ntracemalloc.start()\n\n# Perform some memory-intensive operations\nlarge_list = [{} for _ in range(1000)]\n\n# Stop tracing and capture a snapshot\nsnapshot = tracemalloc.take_snapshot()\n\n# Write the top 5 most common allocations to a file\nwith open('memory_stats.txt', 'w') as f:\n    stats = snapshot.statistics('lineno')\n    for stat in stats[:5]:\n        f.write(f&quot;{stat.lineno}:{stat.count} bytes\\n&quot;)\n</code></pre>\n\n<h3>7. Resetting Tracing</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tracemalloc\n\n# Start tracing memory allocations\ntracemalloc.start()\n\n# Perform some memory-intensive operations\nlarge_list = [{} for _ in range(1000)]\n\n# Stop tracing and capture a snapshot\nsnapshot = tracemalloc.take_snapshot()\n\n# Reset tracing to start fresh\ntracemalloc.reset_peak()\n</code></pre>\n\n<h3>8. Using with Context Manager</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tracemalloc\n\nwith tracemalloc.start():\n    # Perform some memory-intensive operations\n    large_list = [{} for _ in range(1000)]\n\n# Stop tracing after the context manager exits\nsnapshot = tracemalloc.take_snapshot()\n\n# Print the top 5 most common allocations by size\ntop_stats = snapshot.statistics('size')\nfor stat in top_stats[:5]:\n    print(stat)\n</code></pre>\n\n<p>These examples demonstrate various functionalities of the <code>tracemalloc</code> module, including starting and stopping tracing, capturing snapshots, analyzing memory usage, writing results to a file, resetting tracing, and using the module with a context manager. Each example includes comments for clarity.</p>"
        }
    ],
    "Development Tools": [
        {
            "filename": "2to3 - Automated Python 2 to 3 code translation.md",
            "content": "<h1>2to3 - Automated Python 2 to 3 code translation</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-basic-conversion-with-a-script\">Example 1: Basic Conversion with a Script</a></li>\n<li><a href=\"#description\">Description:</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#example-2-using-fixers-manually\">Example 2: Using Fixers Manually</a></li>\n<li><a href=\"#description\">Description:</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#example-3-running-2to3-on-multiple-files\">Example 3: Running 2to3 on Multiple Files</a></li>\n<li><a href=\"#description\">Description:</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#example-4-using-2to3-as-a-command-line-tool\">Example 4: Using 2to3 as a Command-line Tool</a></li>\n</ol>\n<p>The <code>2to3</code> module is used for automatically converting Python 2 code to Python 3 code. It provides tools and utilities to help developers transition their codebases from Python 2 to Python 3, ensuring compatibility and reducing the need for manual modifications. Below are comprehensive examples demonstrating various functionalities of the <code>2to3</code> module.</p>\n<h3>Example 1: Basic Conversion with a Script</h3>\n<h4>Description:</h4>\n<p>This example demonstrates how to use the <code>2to3</code> tool as a script in your application to convert Python 2 code to Python 3.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import sys\nfrom lib2to3.main import main\n\n# Define the directory containing the Python 2 files to be converted\ninput_dir = 'path/to/your/python2/code'\n\n# Define the directory where the converted Python 3 files will be saved\noutput_dir = 'path/to/your/python3/code'\n\n# Run the conversion process\nmain(&quot;lib2to3.fixes&quot;, [input_dir, output_dir])\n</code></pre>\n\n<h4>Explanation:</h4>\n<ul>\n<li><strong><code>import sys</code></strong>: Imports the <code>sys</code> module to access command-line arguments.</li>\n<li><strong><code>from lib2to3.main import main</code></strong>: Imports the <code>main</code> function from the <code>lib2to3</code> module.</li>\n<li><strong><code>input_dir</code> and <code>output_dir</code></strong>: Define the directories where the Python 2 files are located and where the converted files will be saved, respectively.</li>\n<li><strong><code>main(\"lib2to3.fixes\", [input_dir, output_dir])</code></strong>: Calls the <code>main</code> function to perform the conversion. The first argument is a list of fixers (modules) to apply during the conversion, and the second argument is a list of directories containing the Python 2 files.</li>\n</ul>\n<h3>Example 2: Using Fixers Manually</h3>\n<h4>Description:</h4>\n<p>This example shows how to manually use the <code>fixer</code> classes provided by the <code>lib2to3</code> module to convert specific parts of your code.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import lib2to3\nfrom lib2to3 import fix_all, pytree, refactor\n\n# Define the file path containing Python 2 code\nfile_path = 'path/to/your/python2/file.py'\n\n# Create a parser object for the input file\nwith open(file_path, 'rb') as f:\n    tree = pytree.parse(f.read())\n\n# Define the fixers to apply\nfixers_to_apply = [lib2to3.fixes.fix_print, lib2to3.fixes.fix_raw_input]\n\n# Create a refactoring context\ncontext = refactor.RefactorContext()\n\n# Apply the fixers to the input tree\nrefactor.apply_fixes(tree, fixers_to_apply, context)\n\n# Output the modified code to a new file\nwith open('path/to/your/python3/file.py', 'w') as f:\n    f.write(str(tree))\n</code></pre>\n\n<h4>Explanation:</h4>\n<ul>\n<li><strong><code>import lib2to3</code></strong>: Imports the <code>lib2to3</code> module.</li>\n<li><strong><code>from lib2to3 import fix_all, pytree, refactor</code></strong>: Imports the necessary classes and functions from <code>lib2to3</code>.</li>\n<li><strong><code>file_path</code></strong>: Specifies the path to the Python 2 file that needs to be converted.</li>\n<li><strong><code>with open(file_path, 'rb') as f:</code></strong>: Opens the file in binary read mode to parse it using <code>pytree.parse()</code>.</li>\n<li><strong><code>fixers_to_apply</code></strong>: A list of fixers that will be applied to the parsed tree. In this example, <code>fix_print</code> and <code>fix_raw_input</code> are used.</li>\n<li><strong><code>refactor.RefactorContext()</code></strong>: Creates a refactoring context.</li>\n<li><strong><code>refactor.apply_fixes(tree, fixers_to_apply, context)</code></strong>: Applies the specified fixers to the parse tree.</li>\n<li><strong><code>with open('path/to/your/python3/file.py', 'w') as f:</code></strong>: Opens a new file in write mode and writes the modified tree back to it.</li>\n</ul>\n<h3>Example 3: Running 2to3 on Multiple Files</h3>\n<h4>Description:</h4>\n<p>This example demonstrates how to run <code>2to3</code> on multiple files at once using the <code>fix_all</code> function.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import lib2to3\n\n# Define a list of file paths containing Python 2 code\nfile_paths = ['path/to/your/python2/file1.py', 'path/to/your/python2/file2.py']\n\n# Run the conversion process on all specified files\nfix_all(file_paths, fixers_to_apply=[&quot;lib2to3.fixes.fix_print&quot;])\n</code></pre>\n\n<h4>Explanation:</h4>\n<ul>\n<li><strong><code>import lib2to3</code></strong>: Imports the <code>lib2to3</code> module.</li>\n<li><strong><code>file_paths</code></strong>: A list of paths to the Python 2 files that need to be converted.</li>\n<li><strong><code>fix_all(file_paths, fixers_to_apply=[\"lib2to3.fixes.fix_print\"])</code></strong>: Applies all fixers specified in the <code>fixers_to_apply</code> list to each file in the <code>file_paths</code> list.</li>\n</ul>\n<h3>Example 4: Using 2to3 as a Command-line Tool</h3>\n<h4>Description:</h4>\n<p>This example shows how to use the <code>2to3</code> tool as a command-line utility, which is often more convenient for large codebases.</p>\n<pre class=\"codehilite\"><code class=\"language-bash\"># Run the conversion process from the command line\npython -m lib2to3.fixes.fix_print path/to/your/python2/code path/to/your/python3/code\n</code></pre>\n\n<h4>Explanation:</h4>\n<ul>\n<li><strong><code>python -m lib2to3.fixes.fix_print path/to/your/python2/code path/to/your/python3/code</code></strong>: Invokes the <code>fix_print</code> fixer on all files in <code>path/to/your/python2/code</code> and saves the converted files to <code>path/to/your/python3/code</code>.</li>\n</ul>\n<p>These examples cover various aspects of using the <code>2to3</code> module, from basic script usage to manual application of fixers and running conversions on multiple files.</p>"
        },
        {
            "filename": "doctest - Test interactive Python examples.md",
            "content": "<h1>doctest - Test interactive Python examples</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-basic-usage\">Example 1: Basic Usage</a></li>\n<li><a href=\"#example-2-testing-functions-with-more-complex-arguments\">Example 2: Testing Functions with More Complex Arguments</a></li>\n<li><a href=\"#example-3-testing-functions-with-lists-and-tuples\">Example 3: Testing Functions with Lists and Tuples</a></li>\n<li><a href=\"#example-4-testing-functions-with-string-manipulation\">Example 4: Testing Functions with String Manipulation</a></li>\n<li><a href=\"#example-5-testing-functions-with-conditional-logic\">Example 5: Testing Functions with Conditional Logic</a></li>\n<li><a href=\"#example-6-testing-functions-with-class-methods\">Example 6: Testing Functions with Class Methods</a></li>\n<li><a href=\"#example-7-testing-functions-with-external-modules\">Example 7: Testing Functions with External Modules</a></li>\n<li><a href=\"#example-8-testing-functions-with-assertions\">Example 8: Testing Functions with Assertions</a></li>\n</ol>\n<p>The <code>doctest</code> module in Python is a testing framework that provides tools to run and verify tests written as docstrings in Python modules, classes, functions, and methods. It is particularly useful for verifying that the examples provided in docstrings are correct and up-to-date.</p>\n<p>Below are comprehensive code examples demonstrating various functionalities of the <code>doctest</code> module:</p>\n<h3>Example 1: Basic Usage</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import doctest\nimport unittest\n\ndef add(a, b):\n    &quot;&quot;&quot;\n    &gt;&gt;&gt; add(1, 2)\n    3\n    &gt;&gt;&gt; add(5, 7)\n    12\n    &quot;&quot;&quot;\n    return a + b\n\n# Run the doctests in the module\ndoctest.testmod()\n</code></pre>\n\n<h3>Example 2: Testing Functions with More Complex Arguments</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">def multiply(a, b):\n    &quot;&quot;&quot;\n    &gt;&gt;&gt; multiply(3, 4)\n    12\n    &gt;&gt;&gt; multiply(-2, 5)\n    -10\n    &quot;&quot;&quot;\n    return a * b\n\n# Run the doctests in the module\ndoctest.testmod()\n</code></pre>\n\n<h3>Example 3: Testing Functions with Lists and Tuples</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">def sort_and_filter(numbers):\n    &quot;&quot;&quot;\n    Sorts a list of numbers in ascending order and filters out even numbers.\n\n    &gt;&gt;&gt; sort_and_filter([5, 3, 8, 1, 4])\n    [1, 3, 5]\n    &quot;&quot;&quot;\n    return sorted(filter(lambda x: x % 2 != 0, numbers))\n\n# Run the doctests in the module\ndoctest.testmod()\n</code></pre>\n\n<h3>Example 4: Testing Functions with String Manipulation</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">def reverse_string(s):\n    &quot;&quot;&quot;\n    Reverses a given string.\n\n    &gt;&gt;&gt; reverse_string('hello')\n    'olleh'\n    &gt;&gt;&gt; reverse_string('Python')\n    'nohtyP'\n    &quot;&quot;&quot;\n    return s[::-1]\n\n# Run the doctests in the module\ndoctest.testmod()\n</code></pre>\n\n<h3>Example 5: Testing Functions with Conditional Logic</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">def is_positive(n):\n    &quot;&quot;&quot;\n    Determines if a number is positive.\n\n    &gt;&gt;&gt; is_positive(10)\n    True\n    &gt;&gt;&gt; is_positive(-3)\n    False\n    &quot;&quot;&quot;\n    return n &gt; 0\n\n# Run the doctests in the module\ndoctest.testmod()\n</code></pre>\n\n<h3>Example 6: Testing Functions with Class Methods</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">class Calculator:\n    def add(self, a, b):\n        return a + b\n\n    def multiply(self, a, b):\n        return a * b\n\n# Define the class and its method docstrings\ndoc = &quot;&quot;&quot;\nCalculator class provides basic arithmetic operations.\n\n&gt;&gt;&gt; calc = Calculator()\n&gt;&gt;&gt; calc.add(3, 4)\n7\n&gt;&gt;&gt; calc.multiply(5, 6)\n30\n&quot;&quot;&quot;\n\n# Run the doctests in the module\ndoctest.testmod()\n\n# Optionally, you can run the doctests using unittest framework\nclass TestCalculator(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(Calculator().add(3, 4), 7)\n\n    def test_multiply(self):\n        self.assertEqual(Calculator().multiply(5, 6), 30)\n\n# Run the tests\nunittest.main(argv=[''], exit=False)\n</code></pre>\n\n<h3>Example 7: Testing Functions with External Modules</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">def parse_json(json_str):\n    &quot;&quot;&quot;\n    Parses a JSON string and returns a Python dictionary.\n\n    &gt;&gt;&gt; data = parse_json('{&quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 30}')\n    {'name': 'John', 'age': 30}\n    &quot;&quot;&quot;\n    import json\n    return json.loads(json_str)\n\n# Run the doctests in the module\ndoctest.testmod()\n</code></pre>\n\n<h3>Example 8: Testing Functions with Assertions</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">def check_even(num):\n    &quot;&quot;&quot;\n    Asserts that a number is even.\n\n    &gt;&gt;&gt; check_even(4)\n    True\n    &gt;&gt;&gt; check_even(7)\n    Traceback (most recent call last):\n        ...\n    AssertionError: 7 is not even\n    &quot;&quot;&quot;\n    assert num % 2 == 0, f&quot;{num} is not even&quot;\n\n# Run the doctests in the module\ndoctest.testmod()\n</code></pre>\n\n<p>These examples cover various scenarios and functionalities of the <code>doctest</code> module. Each example includes a docstring with test cases that are verified by running the <code>testmod()</code> function or using an external testing framework like <code>unittest</code>. This approach ensures that the documentation is self-contained and easily verifiable.</p>"
        },
        {
            "filename": "pydoc - Documentation generator and online help system.md",
            "content": "<h1>pydoc - Documentation generator and online help system</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-generating-documentation-for-a-specific-module\">Example 1: Generating Documentation for a Specific Module</a></li>\n<li><a href=\"#example-2-using-interactive-help\">Example 2: Using Interactive Help</a></li>\n<li><a href=\"#example-3-generating-html-documentation-to-a-file\">Example 3: Generating HTML Documentation to a File</a></li>\n<li><a href=\"#example-4-generating-html-documentation-for-multiple-modules\">Example 4: Generating HTML Documentation for Multiple Modules</a></li>\n<li><a href=\"#example-5-generating-html-documentation-with-a-custom-template\">Example 5: Generating HTML Documentation with a Custom Template</a></li>\n<li><a href=\"#example-6-generating-text-documentation\">Example 6: Generating Text Documentation</a></li>\n<li><a href=\"#example-7-using-pydoc-with-a-script\">Example 7: Using <code>pydoc</code> with a Script</a></li>\n<li><a href=\"#example-8-generating-command-line-help\">Example 8: Generating Command-Line Help</a></li>\n</ol>\n<p>The <code>pydoc</code> module in Python is a tool that can generate HTML documentation from Python modules, classes, functions, methods, exceptions, keywords, and built-in types. It provides an interactive way to access this documentation and can also be used programmatically.</p>\n<p>Below are several examples demonstrating various functionalities of the <code>pydoc</code> module:</p>\n<h3>Example 1: Generating Documentation for a Specific Module</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import pydoc\n\n# Generate HTML documentation for the math module\nhelp(&quot;math&quot;)\n</code></pre>\n\n<p>This will open a web browser displaying the documentation for the Python <code>math</code> module. You can access this documentation by navigating to http://localhost:8000.</p>\n<h3>Example 2: Using Interactive Help</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import pydoc\n\n# Use interactive help system\npydoc.help()\n</code></pre>\n\n<p>This will start an interactive help session where you can type Python expressions and receive explanations for them, including their docstrings.</p>\n<h3>Example 3: Generating HTML Documentation to a File</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import pydoc\n\n# Generate HTML documentation for the os module to a file\npydoc.writedoc(&quot;os&quot;, &quot;os.html&quot;)\n</code></pre>\n\n<p>This will create an <code>os.html</code> file in the current directory containing HTML documentation for the <code>os</code> module.</p>\n<h3>Example 4: Generating HTML Documentation for Multiple Modules</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import pydoc\n\n# Generate HTML documentation for multiple modules to separate files\npydoc.writedoc(&quot;math&quot;, &quot;math.html&quot;)\npydoc.writedoc(&quot;os&quot;, &quot;os.html&quot;)\n</code></pre>\n\n<p>This will create two <code>html</code> files, <code>math.html</code> and <code>os.html</code>, containing HTML documentation for the <code>math</code> and <code>os</code> modules, respectively.</p>\n<h3>Example 5: Generating HTML Documentation with a Custom Template</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import pydoc\n\n# Generate HTML documentation with a custom template\npydoc.writedoc(&quot;os&quot;, &quot;custom_template.html&quot;, template=&quot;path/to/custom/template.py&quot;)\n</code></pre>\n\n<p>This will generate HTML documentation for the <code>os</code> module using a custom template located at <code>path/to/custom/template.py</code>.</p>\n<h3>Example 6: Generating Text Documentation</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import pydoc\n\n# Generate text documentation for the math module\npydoc.pager(&quot;math&quot;)\n</code></pre>\n\n<p>This will display the documentation for the <code>math</code> module in a pager window, allowing you to scroll through it.</p>\n<h3>Example 7: Using <code>pydoc</code> with a Script</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import pydoc\n\ndef my_function():\n    &quot;&quot;&quot;\n    This is a simple function that does something.\n\n    Parameters:\n    x (int): The input value.\n\n    Returns:\n    int: The result of the operation.\n    &quot;&quot;&quot;\n    pass\n\n# Generate HTML documentation for the current script\npydoc.writedoc(my_function, &quot;my_script.html&quot;)\n</code></pre>\n\n<p>This will generate HTML documentation for the <code>my_function</code> defined in the script, placing it in a file named <code>my_script.html</code>.</p>\n<h3>Example 8: Generating Command-Line Help</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import pydoc\n\n# Generate command-line help for a specific module\npydoc.web(&quot;math&quot;, &quot;http://localhost:8000&quot;)\n</code></pre>\n\n<p>This will start an interactive web server that provides command-line help for the <code>math</code> module, accessible via http://localhost:8000.</p>\n<p>These examples cover various aspects of using the <code>pydoc</code> module to generate and display documentation in different formats. You can customize these examples by modifying paths, parameters, and templates according to your needs.</p>"
        },
        {
            "filename": "test - Regression tests package for Python.md",
            "content": "<h1>test - Regression tests package for Python</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-writing-a-simple-unit-test\">Example 1: Writing a Simple Unit Test</a></li>\n<li><a href=\"#example-2-writing-a-test-for-a-custom-function\">Example 2: Writing a Test for a Custom Function</a></li>\n<li><a href=\"#example-3-writing-integration-tests\">Example 3: Writing Integration Tests</a></li>\n<li><a href=\"#example-4-writing-system-tests\">Example 4: Writing System Tests</a></li>\n<li><a href=\"#example-5-writing-a-test-using-unittestmock\">Example 5: Writing a Test Using <code>unittest.mock</code></a></li>\n</ol>\n<p>The <code>test</code> module in Python is a comprehensive testing framework that provides tools for writing unit, integration, and system tests. It includes various classes and functions to help you organize your tests and run them efficiently. Below are some examples of how to use the <code>test</code> module to write and run tests.</p>\n<h3>Example 1: Writing a Simple Unit Test</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import unittest\n\nclass TestExample(unittest.TestCase):\n    def test_addition(self):\n        self.assertEqual(2 + 2, 4)\n\n    def test_subtraction(self):\n        self.assertEqual(5 - 3, 2)\n\nif __name__ == '__main__':\n    unittest.main()\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- <strong>Import <code>unittest</code></strong>: This module provides a framework for writing tests.\n- <strong>Create a Test Class</strong>: Inherit from <code>unittest.TestCase</code>.\n- <strong>Write Test Methods</strong>: Each test method must start with <code>test_</code> to be recognized by the <code>unittest</code> framework.\n- <strong>Use Assertions</strong>: Use assertions like <code>assertEqual</code>, <code>assertTrue</code>, <code>assertFalse</code> to check the expected outcomes of your tests.\n- <strong>Run Tests</strong>: The <code>unittest.main()</code> function will discover and run all test methods in the current module.</p>\n<h3>Example 2: Writing a Test for a Custom Function</h3>\n<p>Suppose you have a simple function that calculates the factorial of a number:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">def factorial(n):\n    if n &lt; 0:\n        raise ValueError(&quot;Factorial is not defined for negative numbers&quot;)\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n\nimport unittest\n\nclass TestFactorial(unittest.TestCase):\n    def test_factorial_5(self):\n        self.assertEqual(factorial(5), 120)\n\n    def test_factorial_0(self):\n        self.assertEqual(factorial(0), 1)\n\n    def test_factorial_negative_error(self):\n        with self.assertRaises(ValueError):\n            factorial(-3)\n\nif __name__ == '__main__':\n    unittest.main()\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- <strong>Custom Function</strong>: A simple function to calculate the factorial of a number.\n- <strong>Assertions</strong>: Use <code>assertEqual</code> for numerical comparisons and <code>assertRaises</code> to test exceptions.\n- <strong>Test Cases</strong>: Ensure that the function behaves as expected under different conditions, including edge cases.</p>\n<h3>Example 3: Writing Integration Tests</h3>\n<p>Integration tests typically test how different components work together. For example, if you have a web application with separate modules for routing and user authentication:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import unittest\nfrom myapp.routing import Router\nfrom myapp.auth import Auth\n\nclass TestApp(unittest.TestCase):\n    def setUp(self):\n        self.router = Router()\n        self.auth = Auth()\n\n    def test_route_and_authenticate(self):\n        # Simulate a request to a route that requires authentication\n        response = self.router.handle_request('/protected')\n        self.assertTrue(response.startswith('401 Unauthorized'))\n\n        # Authenticate the user and try again\n        self.auth.login('user', 'password')\n        response = self.router.handle_request('/protected')\n        self.assertIn('Hello, user!', response)\n\nif __name__ == '__main__':\n    unittest.main()\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- <strong>Setup</strong>: Initialize objects for routing and authentication in <code>setUp</code>.\n- <strong>Test Methods</strong>: Simulate HTTP requests to different parts of your application and verify the responses.\n- <strong>Assertions</strong>: Use assertions to check the expected behavior after performing actions.</p>\n<h3>Example 4: Writing System Tests</h3>\n<p>System tests often test the entire system, including integration with external services or databases. For example, testing a web application that interacts with a database:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import unittest\nfrom myapp.app import create_app\nfrom sqlalchemy import create_engine, Column, Integer, String\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\nBase = declarative_base()\n\nclass User(Base):\n    __tablename__ = 'users'\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n\nengine = create_engine('sqlite:///:memory:')\nSession = sessionmaker(bind=engine)\nsession = Session()\n\nclass TestSystemApp(unittest.TestCase):\n    def setUp(self):\n        Base.metadata.create_all(engine)\n\n    def test_add_user(self):\n        new_user = User(name='John Doe')\n        session.add(new_user)\n        session.commit()\n        self.assertEqual(session.query(User).count(), 1)\n\nif __name__ == '__main__':\n    unittest.main()\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- <strong>SQLAlchemy Setup</strong>: Use SQLAlchemy to create a simple database and test it.\n- <strong>Test Methods</strong>: Add data to the database and verify that it is correctly stored.\n- <strong>Assertions</strong>: Use assertions to check the expected state of the database.</p>\n<h3>Example 5: Writing a Test Using <code>unittest.mock</code></h3>\n<p><code>unittest.mock</code> can be used to mock objects or functions during testing:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import unittest\nfrom myapp.service import UserService\n\nclass TestUserService(unittest.TestCase):\n    def test_get_user(self, mock_get_request):\n        # Mock the get_request method of UserService\n        mock_get_request.return_value = {'name': 'John Doe'}\n        user_service = UserService()\n        user = user_service.get_user('user')\n        self.assertEqual(user['name'], 'John Doe')\n\nif __name__ == '__main__':\n    unittest.main(argv=[''], exit=False)\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- <strong>Mocking</strong>: Use <code>unittest.mock.patch</code> to mock the <code>get_request</code> method of the <code>UserService</code>.\n- <strong>Test Method</strong>: Call the <code>get_user</code> method and verify that it returns the expected result.\n- <strong>Running Tests</strong>: The test can be run directly using <code>unittest.main(argv=[''], exit=False)</code>.</p>\n<p>These examples demonstrate basic usage of the <code>test</code> module in Python, including writing unit tests, integration tests, system tests, and using mocking to test complex systems. You can expand these examples by adding more test cases and scenarios as needed for your specific application or library.</p>"
        },
        {
            "filename": "test.support - Utilities for the Python test suite.md",
            "content": "<h1>test.support - Utilities for the Python test suite</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-running-tests-with-a-specific-python-version\">1. <strong>Running Tests with a Specific Python Version</strong></a></li>\n<li><a href=\"#2-generating-test-data-for-specific-cases\">2. <strong>Generating Test Data for Specific Cases</strong></a></li>\n<li><a href=\"#3-running-tests-with-different-execution-modes\">3. <strong>Running Tests with Different Execution Modes</strong></a></li>\n<li><a href=\"#4-running-tests-with-custom-test-runner\">4. <strong>Running Tests with Custom Test Runner</strong></a></li>\n<li><a href=\"#5-running-tests-with-specific-test-output-formats\">5. <strong>Running Tests with Specific Test Output Formats</strong></a></li>\n<li><a href=\"#6-running-tests-with-specific-test-suite-configuration\">6. <strong>Running Tests with Specific Test Suite Configuration</strong></a></li>\n</ol>\n<p>The <code>test.support</code> module is part of Python's standard library, designed to support testing by providing utility functions that are commonly needed across different tests. Below are comprehensive examples demonstrating various functionalities provided by this module.</p>\n<h3>1. <strong>Running Tests with a Specific Python Version</strong></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import test.support\n\ndef run_tests_with_python_version(version):\n    &quot;&quot;&quot;\n    Run the test suite using a specific Python version.\n\n    Parameters:\n        version (str): The Python version to use, e.g., '3.8', '3.9'.\n    &quot;&quot;&quot;\n    # Check if the specified version is valid\n    assert test.support.python_version_tuple &gt;= tuple(map(int, version.split('.')))\n\n    # Set the PATH environment variable to point to the desired Python binary\n    os.environ['PATH'] = '/path/to/python' + version\n\n    # Run the tests\n    test_support.run_unittest('test_module_to_run')\n\n# Example usage\nrun_tests_with_python_version('3.9')\n</code></pre>\n\n<h3>2. <strong>Generating Test Data for Specific Cases</strong></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import test.support\n\ndef generate_test_data(num_elements):\n    &quot;&quot;&quot;\n    Generate a list of random integers.\n\n    Parameters:\n        num_elements (int): The number of elements in the list to generate.\n\n    Returns:\n        list: A list of random integers.\n    &quot;&quot;&quot;\n    # Import the necessary module\n    import random\n\n    # Generate and return the list of random integers\n    return [random.randint(0, 100) for _ in range(num_elements)]\n\n# Example usage\ndata = generate_test_data(20)\nprint(data)\n</code></pre>\n\n<h3>3. <strong>Running Tests with Different Execution Modes</strong></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import test.support\n\ndef run_tests_with_mode(mode):\n    &quot;&quot;&quot;\n    Run the test suite using a specific execution mode.\n\n    Parameters:\n        mode (str): The execution mode to use, e.g., 'fast', 'slow'.\n    &quot;&quot;&quot;\n    # Set the TEST_MODE environment variable to control the execution mode\n    os.environ['TEST_MODE'] = mode\n\n    # Run the tests\n    test_support.run_unittest('test_module_to_run')\n\n# Example usage\nrun_tests_with_mode('slow')\n</code></pre>\n\n<h3>4. <strong>Running Tests with Custom Test Runner</strong></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import test.support\n\ndef run_tests_with_custom_runner():\n    &quot;&quot;&quot;\n    Run the test suite using a custom test runner.\n\n    The custom runner can be implemented using the `test_support.TestProgram` class.\n    &quot;&quot;&quot;\n    # Define the test program\n    test_program = test_support.TestProgram(\n        argv=['-m', 'unittest'],\n        exit=False,\n        module='test_module_to_run'\n    )\n\n    # Run the tests\n    test_program.run()\n\n# Example usage\nrun_tests_with_custom_runner()\n</code></pre>\n\n<h3>5. <strong>Running Tests with Specific Test Output Formats</strong></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import test.support\n\ndef run_tests_with_output_format(format):\n    &quot;&quot;&quot;\n    Run the test suite and capture its output in a specific format.\n\n    Parameters:\n        format (str): The output format, e.g., 'text', 'junitxml'.\n    &quot;&quot;&quot;\n    # Set the TEST_OUTPUT_FORMAT environment variable to control the output format\n    os.environ['TEST_OUTPUT_FORMAT'] = format\n\n    # Run the tests\n    test_support.run_unittest('test_module_to_run')\n\n# Example usage\nrun_tests_with_output_format('junitxml')\n</code></pre>\n\n<h3>6. <strong>Running Tests with Specific Test Suite Configuration</strong></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import test.support\n\ndef run_tests_with_config(config):\n    &quot;&quot;&quot;\n    Run the test suite using a specific configuration.\n\n    Parameters:\n        config (dict): The configuration settings to apply, e.g., {'verbose': True}.\n    &quot;&quot;&quot;\n    # Set the TEST_CONFIG environment variable to control the configuration\n    os.environ['TEST_CONFIG'] = json.dumps(config)\n\n    # Run the tests\n    test_support.run_unittest('test_module_to_run')\n\n# Example usage\nconfig = {'verbose': True}\nrun_tests_with_config(config)\n</code></pre>\n\n<p>These examples demonstrate how to use various functionalities provided by <code>test.support</code> to customize and control the execution of Python unit tests. Each example includes comments explaining the purpose, parameters, and usage of the functions.</p>"
        },
        {
            "filename": "test.support.script_helper - Utilities for the Python test suite.md",
            "content": "<h1>test.support.script_helper - Utilities for the Python test suite</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-using-script_runner\">Example 1: Using <code>script_runner</code></a></li>\n<li><a href=\"#example-2-using-run_command\">Example 2: Using <code>run_command</code></a></li>\n<li><a href=\"#example-3-using-check_call\">Example 3: Using <code>check_call</code></a></li>\n<li><a href=\"#example-4-using-check_output\">Example 4: Using <code>check_output</code></a></li>\n<li><a href=\"#example-5-using-run_python\">Example 5: Using <code>run_python</code></a></li>\n<li><a href=\"#example-6-using-check_call_and_capture_output\">Example 6: Using <code>check_call_and_capture_output</code></a></li>\n<li><a href=\"#example-7-using-check_output_and_capture_output\">Example 7: Using <code>check_output_and_capture_output</code></a></li>\n<li><a href=\"#example-8-using-run_python_file\">Example 8: Using <code>run_python_file</code></a></li>\n<li><a href=\"#example-9-using-run_subprocess\">Example 9: Using <code>run_subprocess</code></a></li>\n<li><a href=\"#example-10-using-check_call_and_capture_output_with_env\">Example 10: Using <code>check_call_and_capture_output_with_env</code></a></li>\n</ol>\n<p>The <code>test.support.script_helper</code> module is part of Python's standard library, designed to provide utility functions that are useful for testing purposes within the Python framework. This module is particularly useful for scripts and modules that need to run tests without relying on the full environment of a running interpreter.</p>\n<p>Below are some comprehensive examples demonstrating various functionalities provided by the <code>test.support.script_helper</code> module:</p>\n<h3>Example 1: Using <code>script_runner</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import test.support.script_helper\n\n# Define a script that will be executed by script_runner\nscript = &quot;&quot;&quot;\ndef greet(name):\n    return f&quot;Hello, {name}!&quot;\n\nprint(greet(&quot;World&quot;))\n&quot;&quot;&quot;\n\n# Run the script using script_runner\nresult = test.support.script_helper.run_script(script)\n\n# Print the output of the script\nprint(result.stdout)\n</code></pre>\n\n<h3>Example 2: Using <code>run_command</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import test.support.script_helper\n\n# Define a command that will be executed by run_command\ncommand = [&quot;ls&quot;, &quot;-l&quot;]\n\n# Run the command using run_command\nresult = test.support.script_helper.run_command(command)\n\n# Print the output of the command\nprint(result.stdout)\n</code></pre>\n\n<h3>Example 3: Using <code>check_call</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import test.support.script_helper\n\n# Define a list of commands that will be executed by check_call\ncommands = [\n    [&quot;echo&quot;, &quot;Hello, World!&quot;],\n    [&quot;sleep&quot;, &quot;2&quot;]\n]\n\n# Check the exit status and output of the commands using check_call\ntest.support.script_helper.check_call(commands)\n</code></pre>\n\n<h3>Example 4: Using <code>check_output</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import test.support.script_helper\n\n# Define a list of commands that will be executed by check_output\ncommands = [\n    [&quot;echo&quot;, &quot;Hello, World!&quot;],\n    [&quot;sleep&quot;, &quot;2&quot;]\n]\n\n# Capture the output and exit status of the commands using check_output\noutput, _ = test.support.script_helper.check_output(commands)\n\n# Print the captured output\nprint(output.decode('utf-8'))\n</code></pre>\n\n<h3>Example 5: Using <code>run_python</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import test.support.script_helper\n\n# Define a script that will be executed by run_python\nscript = &quot;&quot;&quot;\ndef add(a, b):\n    return a + b\n\nresult = add(3, 4)\nprint(result)\n&quot;&quot;&quot;\n\n# Run the Python script using run_python\nresult = test.support.script_helper.run_python(script)\n\n# Print the output of the Python script\nprint(result.stdout)\n</code></pre>\n\n<h3>Example 6: Using <code>check_call_and_capture_output</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import test.support.script_helper\n\n# Define a list of commands that will be executed by check_call_and_capture_output\ncommands = [\n    [&quot;echo&quot;, &quot;Hello, World!&quot;],\n    [&quot;sleep&quot;, &quot;2&quot;]\n]\n\n# Capture both the output and exit status of the commands using check_call_and_capture_output\noutput, _ = test.support.script_helper.check_call_and_capture_output(commands)\n\n# Print the captured output\nprint(output.decode('utf-8'))\n</code></pre>\n\n<h3>Example 7: Using <code>check_output_and_capture_output</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import test.support.script_helper\n\n# Define a list of commands that will be executed by check_output_and_capture_output\ncommands = [\n    [&quot;echo&quot;, &quot;Hello, World!&quot;],\n    [&quot;sleep&quot;, &quot;2&quot;]\n]\n\n# Capture both the output and exit status of the commands using check_output_and_capture_output\noutput, _ = test.support.script_helper.check_output_and_capture_output(commands)\n\n# Print the captured output\nprint(output.decode('utf-8'))\n</code></pre>\n\n<h3>Example 8: Using <code>run_python_file</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import test.support.script_helper\n\n# Define a script that will be executed by run_python_file\nscript_path = &quot;greet.py&quot;\nwith open(script_path, 'w') as f:\n    f.write(&quot;&quot;&quot;\ndef greet(name):\n    return f&quot;Hello, {name}!&quot;\n\nprint(greet(&quot;World&quot;))\n&quot;&quot;&quot;)\n\n# Run the Python file using run_python_file\nresult = test.support.script_helper.run_python_file(script_path)\n\n# Print the output of the Python script\nprint(result.stdout)\n</code></pre>\n\n<h3>Example 9: Using <code>run_subprocess</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import subprocess\nimport test.support.script_helper\n\n# Define a list of commands that will be executed by run_subprocess\ncommands = [\n    [&quot;echo&quot;, &quot;Hello, World!&quot;],\n    [&quot;sleep&quot;, &quot;2&quot;]\n]\n\n# Run the commands using run_subprocess\nresult = test.support.script_helper.run_subprocess(commands)\n\n# Print the output of the commands\nprint(result.stdout)\n</code></pre>\n\n<h3>Example 10: Using <code>check_call_and_capture_output_with_env</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\nimport test.support.script_helper\n\n# Define a list of commands that will be executed by check_call_and_capture_output_with_env\ncommands = [\n    [&quot;echo&quot;, &quot;Hello, World!&quot;],\n    [&quot;sleep&quot;, &quot;2&quot;]\n]\n\n# Set environment variables for the subprocess\nenv = {\n    &quot;MY_VAR&quot;: &quot;test&quot;\n}\n\n# Capture both the output and exit status of the commands using check_call_and_capture_output_with_env\noutput, _ = test.support.script_helper.check_call_and_capture_output_with_env(commands, env)\n\n# Print the captured output\nprint(output.decode('utf-8'))\n</code></pre>\n\n<h3>Example 11: Using <code>check_output_and_capture_output_with_env</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\nimport test.support.script_helper\n\n# Define a list of commands that will be executed by check_output_and_capture_output_with_env\ncommands = [\n    [&quot;echo&quot;, &quot;Hello, World!&quot;],\n    [&quot;sleep&quot;, &quot;2&quot;]\n]\n\n# Set environment variables for the subprocess\nenv = {\n    &quot;MY_VAR&quot;: &quot;test&quot;\n}\n\n# Capture both the output and exit status of the commands using check_output_and_capture_output_with_env\noutput, _ = test.support.script_helper.check_output_and_capture_output_with_env(commands, env)\n\n# Print the captured output\nprint(output.decode('utf-8'))\n</code></pre>\n\n<h3>Example 12: Using <code>run_python_file_and_capture_output</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\nimport test.support.script_helper\n\n# Define a script that will be executed by run_python_file_and_capture_output\nscript_path = &quot;greet.py&quot;\nwith open(script_path, 'w') as f:\n    f.write(&quot;&quot;&quot;\ndef greet(name):\n    return f&quot;Hello, {name}!&quot;\n\nprint(greet(&quot;World&quot;))\n&quot;&quot;&quot;)\n\n# Set environment variables for the subprocess\nenv = {\n    &quot;MY_VAR&quot;: &quot;test&quot;\n}\n\n# Run the Python file using run_python_file_and_capture_output\nresult = test.support.script_helper.run_python_file_and_capture_output(script_path, env)\n\n# Print the captured output\nprint(result.stdout)\n</code></pre>\n\n<h3>Example 13: Using <code>run_subprocess_with_env</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\nimport subprocess\nimport test.support.script_helper\n\n# Define a list of commands that will be executed by run_subprocess_with_env\ncommands = [\n    [&quot;echo&quot;, &quot;Hello, World!&quot;],\n    [&quot;sleep&quot;, &quot;2&quot;]\n]\n\n# Set environment variables for the subprocess\nenv = {\n    &quot;MY_VAR&quot;: &quot;test&quot;\n}\n\n# Run the commands using run_subprocess_with_env\nresult = test.support.script_helper.run_subprocess_with_env(commands, env)\n\n# Print the output of the commands\nprint(result.stdout)\n</code></pre>\n\n<h3>Example 14: Using <code>check_call_and_capture_output_with_cwd</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\nimport test.support.script_helper\n\n# Define a list of commands that will be executed by check_call_and_capture_output_with_cwd\ncommands = [\n    [&quot;echo&quot;, &quot;Hello, World!&quot;],\n    [&quot;sleep&quot;, &quot;2&quot;]\n]\n\n# Set the working directory for the subprocess\ncwd = &quot;/path/to/directory&quot;\n\n# Capture both the output and exit status of the commands using check_call_and_capture_output_with_cwd\noutput, _ = test.support.script_helper.check_call_and_capture_output_with_cwd(commands, cwd)\n\n# Print the captured output\nprint(output.decode('utf-8'))\n</code></pre>\n\n<h3>Example 15: Using <code>check_output_and_capture_output_with_cwd</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\nimport test.support.script_helper\n\n# Define a list of commands that will be executed by check_output_and_capture_output_with_cwd\ncommands = [\n    [&quot;echo&quot;, &quot;Hello, World!&quot;],\n    [&quot;sleep&quot;, &quot;2&quot;]\n]\n\n# Set the working directory for the subprocess\ncwd = &quot;/path/to/directory&quot;\n\n# Capture both the output and exit status of the commands using check_output_and_capture_output_with_cwd\noutput, _ = test.support.script_helper.check_output_and_capture_output_with_cwd(commands, cwd)\n\n# Print the captured output\nprint(output.decode('utf-8'))\n</code></pre>\n\n<h3>Example 16: Using <code>run_python_file_and_capture_output_with_cwd</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\nimport test.support.script_helper\n\n# Define a script that will be executed by run_python_file_and_capture_output_with_cwd\nscript_path = &quot;greet.py&quot;\nwith open(script_path, 'w') as f:\n    f.write(&quot;&quot;&quot;\ndef greet(name):\n    return f&quot;Hello, {name}!&quot;\n\nprint(greet(&quot;World&quot;))\n&quot;&quot;&quot;)\n\n# Set the working directory for the subprocess\ncwd = &quot;/path/to/directory&quot;\n\n# Set environment variables for the subprocess\nenv = {\n    &quot;MY_VAR&quot;: &quot;test&quot;\n}\n\n# Run the Python file using run_python_file_and_capture_output_with_cwd\nresult = test.support.script_helper.run_python_file_and_capture_output_with_cwd(script_path, env, cwd)\n\n# Print the captured output\nprint(result.stdout)\n</code></pre>\n\n<h3>Example 17: Using <code>run_subprocess_with_cwd</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\nimport subprocess\nimport test.support.script_helper\n\n# Define a list of commands that will be executed by run_subprocess_with_cwd\ncommands = [\n    [&quot;echo&quot;, &quot;Hello, World!&quot;],\n    [&quot;sleep&quot;, &quot;2&quot;]\n]\n\n# Set the working directory for the subprocess\ncwd = &quot;/path/to/directory&quot;\n\n# Run the commands using run_subprocess_with_cwd\nresult = test.support.script_helper.run_subprocess_with_cwd(commands, cwd)\n\n# Print the output of the commands\nprint(result.stdout)\n</code></pre>\n\n<h3>Example 18: Using <code>check_call_and_capture_output_with_timeout</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\nimport time\nimport test.support.script_helper\n\n# Define a list of commands that will be executed by check_call_and_capture_output_with_timeout\ncommands = [\n    [&quot;sleep&quot;, &quot;30&quot;]\n]\n\n# Set the timeout for the subprocess\ntimeout = 20\n\n# Capture both the output and exit status of the commands using check_call_and_capture_output_with_timeout\noutput, _ = test.support.script_helper.check_call_and_capture_output_with_timeout(commands, timeout)\n\n# Print the captured output\nprint(output.decode('utf-8'))\n</code></pre>\n\n<h3>Example 19: Using <code>check_output_and_capture_output_with_timeout</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\nimport time\nimport test.support.script_helper\n\n# Define a list of commands that will be executed by check_output_and_capture_output_with_timeout\ncommands = [\n    [&quot;sleep&quot;, &quot;30&quot;]\n]\n\n# Set the timeout for the subprocess\ntimeout = 20\n\n# Capture both the output and exit status of the commands using check_output_and_capture_output_with_timeout\noutput, _ = test.support.script_helper.check_output_and_capture_output_with_timeout(commands, timeout)\n\n# Print the captured output\nprint(output.decode('utf-8'))\n</code></pre>\n\n<h3>Example 20: Using <code>run_python_file_and_capture_output_with_timeout</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\nimport time\nimport test.support.script_helper\n\n# Define a script that will be executed by run_python_file_and_capture_output_with_timeout\nscript_path = &quot;greet.py&quot;\nwith open(script_path, 'w') as f:\n    f.write(&quot;&quot;&quot;\ndef greet(name):\n    return f&quot;Hello, {name}!&quot;\n\nprint(greet(&quot;World&quot;))\n&quot;&quot;&quot;)\n\n# Set the timeout for the subprocess\ntimeout = 20\n\n# Set environment variables for the subprocess\nenv = {\n    &quot;MY_VAR&quot;: &quot;test&quot;\n}\n\n# Run the Python file using run_python_file_and_capture_output_with_timeout\nresult = test.support.script_helper.run_python_file_and_capture_output_with_timeout(script_path, env, timeout)\n\n# Print the captured output\nprint(result.stdout)\n</code></pre>\n\n<h3>Example 21: Using <code>run_subprocess_with_timeout</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\nimport time\nimport subprocess\nimport test.support.script_helper\n\n# Define a list of commands that will be executed by run_subprocess_with_timeout\ncommands = [\n    [&quot;sleep&quot;, &quot;30&quot;]\n]\n\n# Set the timeout for the subprocess\ntimeout = 20\n\n# Run the commands using run_subprocess_with_timeout\nresult = test.support.script_helper.run_subprocess_with_timeout(commands, timeout)\n\n# Print the output of the commands\nprint(result.stdout)\n</code></pre>\n\n<h3>Example 22: Using <code>check_call_and_capture_output_with_retry</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\nimport time\nimport retrying\nimport test.support.script_helper\n\n@retrying.retry(stop_max_attempt_number=3, wait_fixed=1000)\ndef check_call_and_capture_output_with_retry(commands):\n    try:\n        output, _ = test.support.script_helper.check_call_and_capture_output(commands)\n        return output.decode('utf-8')\n    except Exception as e:\n        raise\n\n# Define a list of commands that will be executed by check_call_and_capture_output_with_retry\ncommands = [\n    [&quot;sleep&quot;, &quot;30&quot;]\n]\n\n# Run the commands using check_call_and_capture_output_with_retry\nresult = check_call_and_capture_output_with_retry(commands)\n\n# Print the captured output\nprint(result)\n</code></pre>\n\n<h3>Example 23: Using <code>check_output_and_capture_output_with_retry</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\nimport time\nimport retrying\nimport test.support.script_helper\n\n@retrying.retry(stop_max_attempt_number=3, wait_fixed=1000)\ndef check_output_and_capture_output_with_retry(commands):\n    try:\n        output, _ = test.support.script_helper.check_output_and_capture_output(commands)\n        return output.decode('utf-8')\n    except Exception as e:\n        raise\n\n# Define a list of commands that will be executed by check_output_and_capture_output_with_retry\ncommands = [\n    [&quot;sleep&quot;, &quot;30&quot;]\n]\n\n# Run the commands using check_output_and_capture_output_with_retry\nresult = check_output_and_capture_output_with_retry(commands)\n\n# Print the captured output\nprint(result)\n</code></pre>\n\n<h3>Example 24: Using <code>run_python_file_and_capture_output_with_retry</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\nimport time\nimport retrying\nimport test.support.script_helper\n\n@retrying.retry(stop_max_attempt_number=3, wait_fixed=1000)\ndef run_python_file_and_capture_output_with_retry(script_path, env):\n    try:\n        output = test.support.script_helper.run_python_file_and_capture_output(script_path, env)\n        return output.decode('utf-8')\n    except Exception as e:\n        raise\n\n# Define a script that will be executed by run_python_file_and_capture_output_with_retry\nscript_path = &quot;greet.py&quot;\nwith open(script_path, 'w') as f:\n    f.write(&quot;&quot;&quot;\ndef greet(name):\n    return f&quot;Hello, {name}!&quot;\n\nprint(greet(&quot;World&quot;))\n&quot;&quot;&quot;)\n\n# Set environment variables for the subprocess\nenv = {\n    &quot;MY_VAR&quot;: &quot;test&quot;\n}\n\n# Run the Python file using run_python_file_and_capture_output_with_retry\nresult = run_python_file_and_capture_output_with_retry(script_path, env)\n\n# Print the captured output\nprint(result)\n</code></pre>\n\n<h3>Example 25: Using <code>run_subprocess_with_retry</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\nimport time\nimport retrying\nimport subprocess\nimport test.support.script_helper\n\n@retrying.retry(stop_max_attempt_number=3, wait_fixed=1000)\ndef run_subprocess_with_retry(commands):\n    try:\n        result = subprocess.run(commands, capture_output=True, text=True, check=True)\n        return result.stdout\n    except Exception as e:\n        raise\n\n# Define a list of commands that will be executed by run_subprocess_with_retry\ncommands = [\n    [&quot;sleep&quot;, &quot;30&quot;]\n]\n\n# Run the commands using run_subprocess_with_retry\nresult = run_subprocess_with_retry(commands)\n\n# Print the output of the commands\nprint(result)\n</code></pre>\n\n<h3>Example 26: Using <code>check_call_and_capture_output_with_custom_logger</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\nimport logging\nimport test.support.script_helper\n\n# Configure custom logger\nlogging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')\n\ndef custom_logger(message):\n    logging.info(message)\n\ndef check_call_and_capture_output_with_custom_logger(commands):\n    try:\n        output, _ = test.support.script_helper.check_call_and_capture_output(commands, logger=custom_logger)\n        return output.decode('utf-8')\n    except Exception as e:\n        raise\n\n# Define a list of commands that will be executed by check_call_and_capture_output_with_custom_logger\ncommands = [\n    [&quot;echo&quot;, &quot;Hello, World!&quot;]\n]\n\n# Run the commands using check_call_and_capture_output_with_custom_logger\nresult = check_call_and_capture_output_with_custom_logger(commands)\n\n# Print the captured output\nprint(result)\n</code></pre>\n\n<h3>Example 27: Using <code>check_output_and_capture_output_with_custom_logger</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\nimport logging\nimport test.support.script_helper\n\n# Configure custom logger\nlogging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')\n\ndef custom_logger(message):\n    logging.info(message)\n\ndef check_output_and_capture_output_with_custom_logger(commands):\n    try:\n        output, _ = test.support.script_helper.check_output_and_capture_output(commands, logger=custom_logger)\n        return output.decode('utf-8')\n    except Exception as e:\n        raise\n\n# Define a list of commands that will be executed by check_output_and_capture_output_with_custom_logger\ncommands = [\n    [&quot;echo&quot;, &quot;Hello, World!&quot;]\n]\n\n# Run the commands using check_output_and_capture_output_with_custom_logger\nresult = check_output_and_capture_output_with_custom_logger(commands)\n\n# Print the captured output\nprint(result)\n</code></pre>\n\n<h3>Example 28: Using <code>run_python_file_and_capture_output_with_custom_logger</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\nimport logging\nimport test.support.script_helper\n\n# Configure custom logger\nlogging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')\n\ndef custom_logger(message):\n    logging.info(message)\n\ndef run_python_file_and_capture_output_with_custom_logger(script_path, env):\n    try:\n        output = test.support.script_helper.run_python_file_and_capture_output(script_path, env, logger=custom_logger)\n        return output.decode('utf-8')\n    except Exception as e:\n        raise\n\n# Define a script that will be executed by run_python_file_and_capture_output_with_custom_logger\nscript_path = &quot;greet.py&quot;\nwith open(script_path, 'w') as f:\n    f.write(&quot;&quot;&quot;\ndef greet(name):\n    return f&quot;Hello, {name}!&quot;\n\nprint(greet(&quot;World&quot;))\n&quot;&quot;&quot;)\n\n# Set environment variables for the subprocess\nenv = {\n    &quot;MY_VAR&quot;: &quot;test&quot;\n}\n\n# Run the Python file using run_python_file_and_capture_output_with_custom_logger\nresult = run_python_file_and_capture_output_with_custom_logger(script_path, env)\n\n# Print the captured output\nprint(result)\n</code></pre>\n\n<h3>Example 29: Using <code>run_subprocess_with_custom_logger</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\nimport logging\nimport subprocess\nimport test.support.script_helper\n\n# Configure custom logger\nlogging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')\n\ndef custom_logger(message):\n    logging.info(message)\n\ndef run_subprocess_with_custom_logger(commands):\n    try:\n        result = subprocess.run(commands, capture_output=True, text=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, logger=custom_logger)\n        return result.stdout.decode('utf-8')\n    except Exception as e:\n        raise\n\n# Define a list of commands that will be executed by run_subprocess_with_custom_logger\ncommands = [\n    [&quot;echo&quot;, &quot;Hello, World!&quot;]\n]\n\n# Run the commands using run_subprocess_with_custom_logger\nresult = run_subprocess_with_custom_logger(commands)\n\n# Print the output of the commands\nprint(result)\n</code></pre>\n\n<h3>Example 30: Using <code>check_call_and_capture_output_with_timeout</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\nimport signal\nfrom contextlib import TimeoutExpired\n\ndef check_call_and_capture_output_with_timeout(commands, timeout):\n    try:\n        process = subprocess.Popen(commands, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n        stdout, stderr = process.communicate(timeout=timeout)\n        return stdout, stderr\n    except TimeoutExpired as e:\n        print(f&quot;Command timed out: {e}&quot;)\n        raise\n\n# Define a list of commands that will be executed by check_call_and_capture_output_with_timeout\ncommands = [\n    [&quot;sleep&quot;, &quot;30&quot;]\n]\n\n# Set the timeout in seconds\ntimeout = 10\n\n# Run the commands using check_call_and_capture_output_with_timeout\nstdout, stderr = check_call_and_capture_output_with_timeout(commands, timeout)\n\n# Print the captured output and errors\nprint(&quot;Standard Output:&quot;, stdout)\nprint(&quot;Standard Error:&quot;, stderr)\n</code></pre>\n\n<p>These examples demonstrate various ways to handle command execution in Python, including capturing outputs, handling environment variables, setting timeouts, using custom loggers, and more. You can adapt these scripts to fit your specific use case by modifying the commands, environment variables, or other parameters as needed. Additionally, you may need to install additional packages depending on your requirements, such as <code>subprocess</code> for running shell commands.</p>"
        },
        {
            "filename": "typing - Support for type hints.md",
            "content": "<h1>typing - Support for type hints</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-type-annotations\">1. Type Annotations</a></li>\n<li><a href=\"#2-type-aliases\">2. Type Aliases</a></li>\n<li><a href=\"#3-optional-values\">3. Optional Values</a></li>\n<li><a href=\"#4-generic-types\">4. Generic Types</a></li>\n<li><a href=\"#5-callable-types\">5. Callable Types</a></li>\n<li><a href=\"#6-container-types\">6. Container Types</a></li>\n<li><a href=\"#7-union-types\">7. Union Types</a></li>\n<li><a href=\"#8-type-literals\">8. Type Literals</a></li>\n</ol>\n<p>The <code>typing</code> module is a powerful addition to Python that provides a way to add static type checking to your code using type hints, which are annotations that describe the expected types of variables and function arguments. Here are comprehensive and well-documented examples for various functionalities within the <code>typing</code> module:</p>\n<h3>1. Type Annotations</h3>\n<p>Type annotations can be added to functions, classes, methods, and variables to help with static type checking.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from typing import *\nimport datetime\n\n# Function with type hints\ndef add(a: int, b: int) -&gt; int:\n    &quot;&quot;&quot;Returns the sum of two integers.&quot;&quot;&quot;\n    return a + b\n\n# Class with type annotations\nclass Person:\n    def __init__(self, name: str, age: int):\n        self.name = name\n        self.age = age\n\n    def greet(self) -&gt; str:\n        &quot;&quot;&quot;Returns a greeting message.&quot;&quot;&quot;\n        return f&quot;Hello, my name is {self.name} and I am {self.age} years old.&quot;\n\n# Method with type hints\ndef get_current_date() -&gt; datetime.date:\n    &quot;&quot;&quot;Returns the current date.&quot;&quot;&quot;\n    return datetime.date.today()\n</code></pre>\n\n<h3>2. Type Aliases</h3>\n<p>Type aliases allow you to give a new name to an existing type, making your code more readable and maintainable.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from typing import *\nimport collections\n\n# Type alias for a list of strings\nStringList = List[str]\n\n# Using the type alias in a function\ndef filter_strings(strings: StringList) -&gt; StringList:\n    &quot;&quot;&quot;Returns a list of strings that start with 'a'.&quot;&quot;&quot;\n    return [s for s in strings if s.startswith('a')]\n\n# Example usage of the type alias\nnames = [&quot;alice&quot;, &quot;bob&quot;, &quot;carol&quot;]\nfiltered_names = filter_strings(names)\nprint(filtered_names)  # Output: ['alice', 'carol']\n</code></pre>\n\n<h3>3. Optional Values</h3>\n<p>Use <code>Optional</code> to indicate that a variable can be either a specified type or <code>None</code>.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from typing import *\n\n# Function with optional parameters\ndef greet(name: str, age: Optional[int] = None) -&gt; str:\n    &quot;&quot;&quot;Returns a greeting message, optionally including the age.&quot;&quot;&quot;\n    if age is not None:\n        return f&quot;Hello, my name is {name} and I am {age} years old.&quot;\n    else:\n        return f&quot;Hello, my name is {name}.&quot;\n</code></pre>\n\n<h3>4. Generic Types</h3>\n<p>Generics allow you to create reusable functions or classes that work with different types.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from typing import *\nimport collections\n\n# Generic function for list operations\ndef process_list(lst: List[T]) -&gt; List[T]:\n    &quot;&quot;&quot;Applies a processing operation to each element in the list.&quot;&quot;&quot;\n    return [x * 2 for x in lst]\n\n# Example usage of the generic function with integers and strings\nnumbers = [1, 2, 3]\nstrings = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]\n\nprocessed_numbers = process_list(numbers)\nprocessed_strings = process_list(strings)\n\nprint(processed_numbers)   # Output: [2, 4, 6]\nprint(processed_strings)  # Output: ['aa', 'bb', 'cc']\n</code></pre>\n\n<h3>5. Callable Types</h3>\n<p>Use <code>Callable</code> to indicate that a variable is expected to be a callable object.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from typing import *\nimport operator\n\n# Function with type hint for a callable\ndef apply_operation(op: Callable[[int, int], int], a: int, b: int) -&gt; int:\n    &quot;&quot;&quot;Applies the provided operation to two integers.&quot;&quot;&quot;\n    return op(a, b)\n\n# Example usage of the callable function\naddition = lambda x, y: x + y\nmultiplication = lambda x, y: x * y\n\nresult_addition = apply_operation(addition, 3, 4)\nresult_multiplication = apply_operation(multiplication, 3, 4)\n\nprint(result_addition)   # Output: 7\nprint(result_multiplication) # Output: 12\n</code></pre>\n\n<h3>6. Container Types</h3>\n<p>Types like <code>Sequence</code>, <code>Iterable</code>, and <code>Mapping</code> provide type hints for sequences of items.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from typing import *\nimport collections\n\n# Function with type hint for a sequence of numbers\ndef calculate_sum(seq: Sequence[int]) -&gt; int:\n    &quot;&quot;&quot;Calculates the sum of elements in the sequence.&quot;&quot;&quot;\n    return sum(seq)\n\n# Example usage of the sequence function\nnumbers = [1, 2, 3, 4, 5]\nresult = calculate_sum(numbers)\nprint(result)  # Output: 15\n\n# Function with type hint for an iterable of strings\ndef filter_strings_iter(iterable: Iterable[str]) -&gt; Iterator[str]:\n    &quot;&quot;&quot;Filters out empty strings from the iterable.&quot;&quot;&quot;\n    return (s for s in iterable if s)\n\n# Example usage of the iterable function\nstrings = [&quot;apple&quot;, &quot;&quot;, &quot;banana&quot;, &quot;&quot;]\nfiltered_strings = list(filter_strings_iter(strings))\nprint(filtered_strings)  # Output: ['apple', 'banana']\n</code></pre>\n\n<h3>7. Union Types</h3>\n<p>Use <code>Union</code> to indicate that a variable can be one of several types.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from typing import *\n\n# Function with type hint for a union of string and int\ndef process_value(value: Union[str, int]) -&gt; str:\n    &quot;&quot;&quot;Converts the value to a string.&quot;&quot;&quot;\n    if isinstance(value, str):\n        return f&quot;'{value}'&quot;\n    else:\n        return str(value)\n\n# Example usage of the union function\nresult1 = process_value(&quot;hello&quot;)\nresult2 = process_value(42)\nprint(result1)  # Output: 'hello'\nprint(result2)  # Output: '42'\n</code></pre>\n\n<h3>8. Type Literals</h3>\n<p>Use <code>Literal</code> to denote a specific set of values.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from typing import *\n\n# Function with type hint for a literal value\ndef greet(name: Literal[&quot;Alice&quot;, &quot;Bob&quot;]) -&gt; str:\n    &quot;&quot;&quot;Returns a greeting message for the specified name.&quot;&quot;&quot;\n    return f&quot;Hello, {name}!&quot;\n\n# Example usage of the literal function\nmessage = greet(&quot;Alice&quot;)\nprint(message)  # Output: Hello, Alice!\n</code></pre>\n\n<p>These examples cover a wide range of functionalities provided by the <code>typing</code> module, including type annotations, type aliases, optional values, generic types, callable types, container types, union types, and type literals. Each example is accompanied by comments to explain the purpose and usage of each part of the code.</p>"
        },
        {
            "filename": "unittest - Unit testing framework.md",
            "content": "<h1>unittest - Unit testing framework</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-basic-test-case\">Example 1: Basic Test Case</a></li>\n<li><a href=\"#example-2-test-case-with-setup-and-teardown\">Example 2: Test Case with Setup and Teardown</a></li>\n<li><a href=\"#example-3-test-case-with-assertions\">Example 3: Test Case with Assertions</a></li>\n<li><a href=\"#example-4-test-case-with-assertions-for-exceptions\">Example 4: Test Case with Assertions for Exceptions</a></li>\n<li><a href=\"#example-5-test-case-with-parameterized-tests\">Example 5: Test Case with Parameterized Tests</a></li>\n<li><a href=\"#example-6-test-case-with-test-suite\">Example 6: Test Case with Test Suite</a></li>\n<li><a href=\"#example-7-test-case-with-test-loader\">Example 7: Test Case with Test Loader</a></li>\n</ol>\n<p>The <code>unittest</code> module is a powerful tool for writing unit tests in Python. It provides a flexible framework that allows you to create test cases, define assertions, and run tests programmatically. Below are comprehensive examples covering various functionalities of the <code>unittest</code> module.</p>\n<h3>Example 1: Basic Test Case</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import unittest\n\nclass MyTestCase(unittest.TestCase):\n    def setUp(self):\n        # Set up any resources or state that need to be initialized before each test\n        self.value = 10\n\n    def tearDown(self):\n        # Clean up any resources or state after each test\n        pass\n\n    def test_addition(self):\n        # Test the addition of two numbers\n        result = self.value + 5\n        self.assertEqual(result, 15, &quot;The sum should be 15&quot;)\n\n    def test_subtraction(self):\n        # Test the subtraction of a number from another number\n        result = self.value - 3\n        self.assertEqual(result, 7, &quot;The difference should be 7&quot;)\n\nif __name__ == '__main__':\n    unittest.main()\n</code></pre>\n\n<h3>Example 2: Test Case with Setup and Teardown</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import unittest\n\nclass MyTestCase(unittest.TestCase):\n    def setUp(self):\n        # Set up any resources or state that need to be initialized before each test\n        self.value = 10\n\n    def tearDown(self):\n        # Clean up any resources or state after each test\n        pass\n\n    def test_addition(self):\n        # Test the addition of two numbers\n        result = self.value + 5\n        self.assertEqual(result, 15, &quot;The sum should be 15&quot;)\n\n    def test_subtraction(self):\n        # Test the subtraction of a number from another number\n        result = self.value - 3\n        self.assertEqual(result, 7, &quot;The difference should be 7&quot;)\n\n    @classmethod\n    def setUpClass(cls):\n        # Set up any resources or state that need to be initialized before all tests\n        cls.shared_resource = [1, 2, 3]\n\n    @classmethod\n    def tearDownClass(cls):\n        # Clean up any resources or state after all tests\n        del cls.shared_resource\n\nif __name__ == '__main__':\n    unittest.main()\n</code></pre>\n\n<h3>Example 3: Test Case with Assertions</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import unittest\n\nclass MyTestCase(unittest.TestCase):\n    def test_greater_than(self):\n        # Test if a value is greater than another\n        self.assertGreater(15, 10, &quot;15 should be greater than 10&quot;)\n\n    def test_less_than_or_equal_to(self):\n        # Test if a value is less than or equal to another\n        self.assertLessEqual(10, 10, &quot;10 should be less than or equal to 10&quot;)\n\n    def test_is_instance(self):\n        # Test if an object is an instance of a class\n        self.assertIsInstance(&quot;Hello&quot;, str, &quot;The string 'Hello' should be an instance of str&quot;)\n\nif __name__ == '__main__':\n    unittest.main()\n</code></pre>\n\n<h3>Example 4: Test Case with Assertions for Exceptions</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import unittest\n\nclass MyTestCase(unittest.TestCase):\n    def test_division_by_zero(self):\n        # Test if a division by zero raises a ZeroDivisionError\n        self.assertRaises(ZeroDivisionError, lambda: 10 / 0)\n\n    def test_invalid_input(self):\n        # Test if an invalid input raises a ValueError\n        with self.assertRaises(ValueError):\n            int(&quot;a&quot;)\n\nif __name__ == '__main__':\n    unittest.main()\n</code></pre>\n\n<h3>Example 5: Test Case with Parameterized Tests</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import unittest\nfrom parameterized import parameterized\n\nclass MyTestCase(unittest.TestCase):\n    @parameterized.expand([\n        (1, 2, 3),\n        (4, 5, 9),\n        (-1, -1, 0),\n        (0, 0, 0)\n    ])\n    def test_addition_with_parameters(self, a, b, expected):\n        # Test the addition of two numbers with parameterized inputs\n        result = a + b\n        self.assertEqual(result, expected, f&quot;The sum should be {expected}&quot;)\n\nif __name__ == '__main__':\n    unittest.main()\n</code></pre>\n\n<h3>Example 6: Test Case with Test Suite</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import unittest\n\nclass TestCase1(unittest.TestCase):\n    def test_addition(self):\n        # Test the addition of two numbers in TestCase1\n        self.assertEqual(5 + 5, 10)\n\nclass TestCase2(unittest.TestCase):\n    def test_subtraction(self):\n        # Test the subtraction of two numbers in TestCase2\n        self.assertEqual(10 - 5, 5)\n\ndef suite():\n    suite = unittest.TestSuite()\n    suite.addTest(TestCase1('test_addition'))\n    suite.addTest(TestCase2('test_subtraction'))\n    return suite\n\nif __name__ == '__main__':\n    runner = unittest.TextTestRunner()\n    runner.run(suite())\n</code></pre>\n\n<h3>Example 7: Test Case with Test Loader</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import unittest\n\ndef load_tests(loader, tests=None, pattern='test_*.py'):\n    if tests is None:\n        tests = loader.discover('.')\n    return tests\n\nif __name__ == '__main__':\n    suite = unittest.TestLoader().discover()\n    runner = unittest.TextTestRunner()\n    runner.run(suite)\n</code></pre>\n\n<p>These examples cover a range of functionalities within the <code>unittest</code> module, from basic test cases to more advanced features like parameterized testing and test loading. Each example is designed to be clear, concise, and suitable for integration into Python documentation.</p>"
        },
        {
            "filename": "unittest.mock - getting started.md",
            "content": "<h1>unittest.mock - getting started</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-creating-a-simple-mock-object\">Example 1: Creating a Simple Mock Object</a></li>\n<li><a href=\"#example-2-mocking-a-class-method\">Example 2: Mocking a Class Method</a></li>\n<li><a href=\"#example-3-mocking-a-static-method\">Example 3: Mocking a Static Method</a></li>\n<li><a href=\"#example-4-mocking-a-module-function\">Example 4: Mocking a Module Function</a></li>\n<li><a href=\"#example-5-mocking-an-external-library-function\">Example 5: Mocking an External Library Function</a></li>\n<li><a href=\"#example-6-using-patch-decorator\">Example 6: Using <code>patch</code> Decorator</a></li>\n</ol>\n<p>The <code>unittest.mock</code> module is a powerful tool used for creating mock objects in Python, which are essential for testing purposes. These mocks allow you to simulate the behavior of real objects without executing them, making your tests more isolated and predictable.</p>\n<p>Below are comprehensive code examples demonstrating how to use <code>unittest.mock</code> for various common use cases:</p>\n<h3>Example 1: Creating a Simple Mock Object</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import unittest\nfrom unittest.mock import MagicMock\n\nclass TestMyModule(unittest.TestCase):\n    def test_simple_mock(self):\n        # Create a mock object\n        my_mock = MagicMock()\n\n        # Use the mock object as if it were a real object\n        my_mock.some_method.return_value = 'mocked result'\n\n        # Assert that the method was called and return the expected value\n        self.assertEqual(my_mock.some_method(), 'mocked result')\n        self.assertTrue(my_mock.some_method.called)\n\n    def test_arguments(self):\n        # Create a mock object\n        my_mock = MagicMock()\n\n        # Specify that the method should be called with specific arguments\n        my_mock.some_method.return_value = 'mocked result'\n        my_mock.some_method.assert_called_once_with('arg1', 'arg2')\n\n        # Assert that the method was called multiple times with different arguments\n        my_mock.some_method.side_effect = ['result1', 'result2']\n        self.assertEqual(my_mock.some_method('a', 'b'), 'result1')\n        self.assertEqual(my_mock.some_method('c', 'd'), 'result2')\n        self.assertTrue(my_mock.some_method.called)\n\n    def test_calls(self):\n        # Create a mock object\n        my_mock = MagicMock()\n\n        # Record all calls to the method\n        my_mock.some_method('arg1', 'arg2')\n\n        # Assert that the method was called with specific arguments\n        self.assertEqual(len(my_mock.some_method.call_args_list), 1)\n        self.assertEqual(my_mock.some_method.call_args_list[0], (('arg1', 'arg2'), {}))\n\n    def test_call_counter(self):\n        # Create a mock object\n        my_mock = MagicMock()\n\n        # Record all calls to the method\n        my_mock.some_method()\n        my_mock.some_method()\n        my_mock.some_method()\n\n        # Assert that the method was called 3 times\n        self.assertEqual(my_mock.some_method.call_count, 3)\n\nif __name__ == '__main__':\n    unittest.main(argv=[''], exit=False)\n</code></pre>\n\n<h3>Example 2: Mocking a Class Method</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import unittest\nfrom unittest.mock import MagicMock\n\nclass MyClass:\n    def some_method(self):\n        return 'real result'\n\nclass TestMyClass(unittest.TestCase):\n    def test_mock_class_method(self):\n        # Create an instance of MyClass\n        my_instance = MyClass()\n\n        # Create a mock object for the class method\n        my_mock = MagicMock(return_value='mocked result')\n\n        # Replace the original class method with the mock\n        MyClass.some_method = my_mock\n\n        # Call the modified class method\n        self.assertEqual(my_instance.some_method(), 'mocked result')\n        self.assertTrue(MyClass.some_method.called)\n\nif __name__ == '__main__':\n    unittest.main(argv=[''], exit=False)\n</code></pre>\n\n<h3>Example 3: Mocking a Static Method</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import unittest\nfrom unittest.mock import MagicMock\n\nclass MyClass:\n    @staticmethod\n    def some_static_method(x):\n        return x * 2\n\nclass TestMyClass(unittest.TestCase):\n    def test_mock_static_method(self):\n        # Create a mock object for the static method\n        my_mock = MagicMock(return_value='mocked result')\n\n        # Replace the original static method with the mock\n        MyClass.some_static_method = my_mock\n\n        # Call the modified static method\n        self.assertEqual(MyClass.some_static_method(3), 'mocked result')\n        self.assertTrue(my_mock.called)\n\nif __name__ == '__main__':\n    unittest.main(argv=[''], exit=False)\n</code></pre>\n\n<h3>Example 4: Mocking a Module Function</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import unittest\nfrom unittest.mock import patch\n\n# Assuming we have a function `some_module.some_function` defined in `some_module.py`\nwith patch('some_module.some_function') as mock_some_function:\n    # Modify the behavior of the mocked function\n    mock_some_function.return_value = 'mocked result'\n\n    # Import and use the module that contains the function\n    from some_module import some_function\n\n    # Call the mocked function\n    result = some_function()\n\n    # Assert the expected result\n    self.assertEqual(result, 'mocked result')\n</code></pre>\n\n<h3>Example 5: Mocking an External Library Function</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import unittest\nfrom unittest.mock import patch\nimport requests\n\n# Replace the actual `requests.get` call with a mock\nwith patch('requests.get') as mock_get:\n    # Modify the behavior of the mocked function to return a specific response\n    mock_get.return_value.status_code = 200\n    mock_get.return_value.json.return_value = {'data': 'mocked data'}\n\n    # Make an HTTP request using the patched `requests`\n    response = requests.get('https://example.com/api/data')\n\n    # Assert that the mocked function was called with the expected URL\n    self.assertEqual(mock_get.call_args.args[0], 'https://example.com/api/data')\n    self.assertTrue(response.json() == {'data': 'mocked data'})\n\nif __name__ == '__main__':\n    unittest.main(argv=[''], exit=False)\n</code></pre>\n\n<h3>Example 6: Using <code>patch</code> Decorator</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import unittest\nfrom unittest.mock import patch\nimport requests\n\n@patch('requests.get')\ndef test_patch_decorator(mock_get):\n    # Modify the behavior of the mocked function to return a specific response\n    mock_get.return_value.status_code = 200\n    mock_get.return_value.json.return_value = {'data': 'mocked data'}\n\n    # Make an HTTP request using the patched `requests`\n    response = requests.get('https://example.com/api/data')\n\n    # Assert that the mocked function was called with the expected URL\n    self.assertEqual(mock_get.call_args.args[0], 'https://example.com/api/data')\n    self.assertTrue(response.json() == {'data': 'mocked data'})\n\nclass TestRequestsPatching(unittest.TestCase):\n    def test_example(self):\n        test_patch_decorator()\n\nif __name__ == '__main__':\n    unittest.main(argv=[''], exit=False)\n</code></pre>\n\n<p>These examples cover basic mocking techniques using <code>unittest.mock</code>, including:</p>\n<ol>\n<li>Creating simple mock objects.</li>\n<li>Mocking class and static methods.</li>\n<li>Mocking module functions.</li>\n<li>Mocking external library functions.</li>\n<li>Using the <code>patch</code> decorator.</li>\n</ol>\n<p>Each example includes detailed comments to explain the purpose of each step and how it relates to the functionality being tested. These examples are suitable for inclusion in official documentation, providing clear guidance on how to use <code>unittest.mock</code> effectively for testing purposes.</p>"
        },
        {
            "filename": "unittest.mock - mock object library.md",
            "content": "<h1>unittest.mock - mock object library</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-basic-usage\">Example 1: Basic Usage</a></li>\n<li><a href=\"#example-2-mocking-functions\">Example 2: Mocking Functions</a></li>\n<li><a href=\"#example-3-mocking-classes\">Example 3: Mocking Classes</a></li>\n<li><a href=\"#example-4-mocking-with-arguments\">Example 4: Mocking with Arguments</a></li>\n<li><a href=\"#example-5-mocking-with-side-effects\">Example 5: Mocking with Side Effects</a></li>\n<li><a href=\"#example-6-mocking-with-return-values\">Example 6: Mocking with Return Values</a></li>\n<li><a href=\"#example-7-mocking-with-return-value-count\">Example 7: Mocking with Return Value Count</a></li>\n<li><a href=\"#example-8-mocking-with-side-effect-and-return-value-count\">Example 8: Mocking with Side Effect and Return Value Count</a></li>\n</ol>\n<p>The <code>unittest.mock</code> module is a powerful tool for creating test doubles in Python, allowing you to isolate parts of your code that interact with external systems or dependencies. This module provides several useful functions and classes to help you simulate various scenarios in your tests.</p>\n<p>Below are comprehensive examples for each functionality provided by the <code>unittest.mock</code> module:</p>\n<h3>Example 1: Basic Usage</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import unittest\nfrom unittest.mock import Mock, patch\n\nclass TestMockExample(unittest.TestCase):\n    def test_basic_usage(self):\n        # Create a mock object\n        mock_object = Mock()\n\n        # Call the mock object\n        mock_object.method_name()\n\n        # Check if the method was called\n        self.assertTrue(mock_object.method_name.called)\n\n        # Get the arguments passed to the method\n        args, kwargs = mock_object.method_name.call_args\n\n        # Assert that no additional calls were made\n        self.assertFalse(mock_object.method_name.called_more_than_once())\n\nif __name__ == '__main__':\n    unittest.main()\n</code></pre>\n\n<h3>Example 2: Mocking Functions</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import unittest\nfrom unittest.mock import patch, MagicMock\n\nclass TestMockFunction(unittest.TestCase):\n    def test_mock_function(self):\n        # Use a partial to mock a function from another module\n        with patch('module_name.function_name') as mock_func:\n            mock_func.return_value = &quot;Mocked Output&quot;\n            result = module_name.function_name()\n            self.assertEqual(result, &quot;Mocked Output&quot;)\n            mock_func.assert_called_once()\n\n    def test_mocking_builtin_function(self):\n        # Mock the built-in `open` function\n        with patch('builtins.open', return_value=MagicMock()) as mock_open:\n            mock_file_obj = mock_open.return_value\n            mock_file_obj.read.return_value = &quot;Mocked File Content&quot;\n            content = open(&quot;example.txt&quot;).read()\n            self.assertEqual(content, &quot;Mocked File Content&quot;)\n            mock_open.assert_called_once_with('example.txt')\n\nif __name__ == '__main__':\n    unittest.main()\n</code></pre>\n\n<h3>Example 3: Mocking Classes</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import unittest\nfrom unittest.mock import patch, MagicMock\n\nclass TestMockClass(unittest.TestCase):\n    def test_mock_class(self):\n        # Create a mock class instance\n        with patch('module_name.MyClass') as mock_cls:\n            mock_obj = mock_cls.return_value\n            mock_obj.method_name.return_value = &quot;Mocked Method Output&quot;\n            result = MyClass().method_name()\n            self.assertEqual(result, &quot;Mocked Method Output&quot;)\n            mock_obj.method_name.assert_called_once()\n\n    def test_mock_subclass(self):\n        # Mock a subclass of a class\n        with patch('module_name.BaseClass') as mock_base:\n            mock_base.return_value = MagicMock(spec=BaseClass)\n            mock_base.instance_method.return_value = &quot;Mocked Instance Method Output&quot;\n            instance = BaseClass()\n            result = instance.instance_method()\n            self.assertEqual(result, &quot;Mocked Instance Method Output&quot;)\n            mock_base.assert_called_once()\n\nif __name__ == '__main__':\n    unittest.main()\n</code></pre>\n\n<h3>Example 4: Mocking with Arguments</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import unittest\nfrom unittest.mock import patch\n\nclass TestMockWithArguments(unittest.TestCase):\n    def test_mock_with_arguments(self):\n        # Create a mock object and specify the expected arguments\n        mock_object = Mock()\n\n        # Call the mock object with specific arguments\n        mock_object.method_name('arg1', arg2='value2')\n\n        # Check if the method was called with the correct arguments\n        args, kwargs = mock_object.method_name.call_args\n\n        self.assertEqual(args[0], 'arg1')\n        self.assertEqual(kwargs['arg2'], 'value2')\n\n    def test_mock_with_mixed_arguments(self):\n        # Create a mock object and specify expected keyword arguments\n        mock_object = Mock()\n\n        # Call the mock object with both positional and keyword arguments\n        mock_object.method_name('arg1', arg2='value2')\n\n        # Check if the method was called with the correct arguments\n        args, kwargs = mock_object.method_name.call_args\n\n        self.assertEqual(args[0], 'arg1')\n        self.assertEqual(kwargs['arg2'], 'value2')\n\nif __name__ == '__main__':\n    unittest.main()\n</code></pre>\n\n<h3>Example 5: Mocking with Side Effects</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import unittest\nfrom unittest.mock import patch, MagicMock\n\nclass TestMockSideEffects(unittest.TestCase):\n    def test_mock_side_effects(self):\n        # Create a mock object and define a side effect function\n        mock_object = Mock(side_effect=lambda x: x * 2)\n\n        # Call the mock object with different inputs\n        result1 = mock_object(3)\n        result2 = mock_object('a')\n\n        # Check if the results match the expected outputs\n        self.assertEqual(result1, 6)\n        self.assertEqual(result2, 'aa')\n\n    def test_mock_with_raising_side_effects(self):\n        # Create a mock object and define a side effect that raises an exception\n        mock_object = Mock(side_effect=Exception(&quot;Mocked Exception&quot;))\n\n        # Call the mock object to see if it raises an exception\n        with self.assertRaises(Exception) as context:\n            mock_object()\n\n        # Check if the exception matches the expected message\n        self.assertEqual(str(context.exception), &quot;Mocked Exception&quot;)\n\nif __name__ == '__main__':\n    unittest.main()\n</code></pre>\n\n<h3>Example 6: Mocking with Return Values</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import unittest\nfrom unittest.mock import patch, MagicMock\n\nclass TestMockReturnValues(unittest.TestCase):\n    def test_mock_return_values(self):\n        # Create a mock object and define the return value for different calls\n        mock_object = Mock(return_value=&quot;Initial Return&quot;)\n\n        # First call to get the initial return value\n        result1 = mock_object()\n        self.assertEqual(result1, &quot;Initial Return&quot;)\n\n        # Second call to use the default side effect (returns 0)\n        result2 = mock_object()\n        self.assertEqual(result2, 0)\n\n    def test_mock_with_mixed_return_values(self):\n        # Create a mock object and define different return values for specific inputs\n        mock_object = Mock(side_effect=lambda x: {\n            1: &quot;One&quot;,\n            2: &quot;Two&quot;\n        }.get(x, 3))\n\n        # Call the mock object with different inputs\n        result1 = mock_object(1)\n        result2 = mock_object(2)\n        result3 = mock_object(3)\n\n        # Check if the results match the expected outputs\n        self.assertEqual(result1, &quot;One&quot;)\n        self.assertEqual(result2, &quot;Two&quot;)\n        self.assertEqual(result3, 3)\n\nif __name__ == '__main__':\n    unittest.main()\n</code></pre>\n\n<h3>Example 7: Mocking with Return Value Count</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import unittest\nfrom unittest.mock import patch, MagicMock\n\nclass TestMockReturnValueCount(unittest.TestCase):\n    def test_mock_return_value_count(self):\n        # Create a mock object and set the return value count\n        mock_object = Mock(return_value=&quot;Initial Return&quot;, side_effect=1)\n\n        # Call the mock object multiple times to check the return values\n        result1 = mock_object()\n        result2 = mock_object()\n\n        # Check if the first call returns the initial return value, and subsequent calls raise an exception\n        self.assertEqual(result1, &quot;Initial Return&quot;)\n        with self.assertRaises(ValueError):\n            mock_object()\n\n    def test_mock_with_mixed_return_value_count(self):\n        # Create a mock object and set different return values for specific inputs and a side effect count\n        mock_object = Mock(return_value=&quot;Initial Return&quot;, side_effect=[lambda x: x * 2, lambda x: x + 1])\n\n        # Call the mock object with different inputs to check the return values\n        result1 = mock_object(1)\n        result2 = mock_object(2)\n\n        # Check if the results match the expected outputs\n        self.assertEqual(result1, 2)  # Double of input 1\n        self.assertEqual(result2, 3)  # Input 2 plus 1\n\nif __name__ == '__main__':\n    unittest.main()\n</code></pre>\n\n<h3>Example 8: Mocking with Side Effect and Return Value Count</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import unittest\nfrom unittest.mock import patch, MagicMock\n\nclass TestMockSideEffectAndReturnValueCount(unittest.TestCase):\n    def test_mock_side_effect_and_return_value_count(self):\n        # Create a mock object and set the side effect and return value count\n        mock_object = Mock(side_effect=[lambda x: x * 2, lambda x: x + 1], return_value=&quot;Initial Return&quot;, side_effect_count=2)\n\n        # Call the mock object multiple times to check the return values and exceptions\n        result1 = mock_object(1)\n        result2 = mock_object(2)\n        result3 = mock_object(3)\n\n        # Check if the results match the expected outputs and subsequent calls raise an exception\n        self.assertEqual(result1, 2)  # Double of input 1\n        self.assertEqual(result2, 3)  # Input 2 plus 1\n        with self.assertRaises(ValueError):\n            mock_object()\n\nif __name__ == '__main__':\n    unittest.main()\n</code></pre>\n\n<p>These examples demonstrate various ways to use the <code>unittest.mock</code> module to create and configure mock objects for testing in Python. Each example includes comments explaining key points, such as setting return values, mocking function calls, handling side effects, and checking argument counts.</p>"
        }
    ],
    "File and Directory Access": [
        {
            "filename": "filecmp - File and Directory Comparisons.md",
            "content": "<h1>filecmp - File and Directory Comparisons</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-cmp\">1. <code>cmp</code></a></li>\n<li><a href=\"#2-cmpfiles\">2. <code>cmpfiles</code></a></li>\n<li><a href=\"#3-dircmp\">3. <code>dircmp</code></a></li>\n<li><a href=\"#4-filecmpdircmpobj\">4. <code>filecmp.dircmpobj</code></a></li>\n<li><a href=\"#5-subprocessrun\">5. <code>subprocess.run</code></a></li>\n<li><a href=\"#6-filecmpcmpfiles-with-patterns\">6. <code>filecmp.cmpfiles() with patterns</code></a></li>\n<li><a href=\"#7-filecmpcmp-with-custom-comparison-logic\">7. <code>filecmp.cmp() with custom comparison logic</code></a></li>\n<li><a href=\"#8-filecmpcmp-with-binary-comparison\">8. <code>filecmp.cmp() with binary comparison</code></a></li>\n<li><a href=\"#9-filecmpdircmp-with-ignore-patterns\">9. <code>filecmp.dircmp()</code> with ignore patterns</a></li>\n<li><a href=\"#10-filecmpcmp-with-shallow-comparison\">10. <code>filecmp.cmp() with shallow comparison</code></a></li>\n</ol>\n<p>The <code>filecmp</code> module in Python provides utilities to compare files or directories for equality, modification times, and more. Below are comprehensive examples of how to use each function and class in the <code>filecmp</code> module.</p>\n<h3>1. <code>cmp</code></h3>\n<p>The <code>cmp()</code> function compares two files and returns:\n- <code>0</code> if both files are identical.\n- A negative integer if the first file is older than the second file.\n- A positive integer otherwise.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import filecmp\n\n# Example usage\nfilecmp.cmp('source.txt', 'destination.txt')\n</code></pre>\n\n<h3>2. <code>cmpfiles</code></h3>\n<p>The <code>cmpfiles()</code> function compares two sets of files and returns:\n- Three lists: <code>[same_files, different_files, missing_files]</code>.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import filecmp\n\n# Example usage\ncommon, diff, miss = filecmp.cmpfiles('source_dir', 'destination_dir', ['file1.txt', 'file2.txt'])\nprint(&quot;Same Files:&quot;, common)\nprint(&quot;Different Files:&quot;, diff)\nprint(&quot;Missing Files:&quot;, miss)\n</code></pre>\n\n<h3>3. <code>dircmp</code></h3>\n<p>The <code>dircmp()</code> function compares two directories and provides a comprehensive comparison of their contents.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import filecmp\n\n# Example usage\ndir_cmp = filecmp.dircmp('source_dir', 'destination_dir')\nprint(&quot;Common files:&quot;, dir_cmp.common)\nprint(&quot;Different files:&quot;, dir_cmp.diff_files)\nprint(&quot;Common subdirectories:&quot;, dir_cmp.common_dirs)\nprint(&quot;Subdirectory of source but not destination:&quot;, dir_cmp.left_only)\nprint(&quot;Subdirectory of destination but not source:&quot;, dir_cmp.right_only)\n\n# Optionally, walk through directories\nfor root, dirs, files in os.walk(dir_cmp.left):\n    for file in files:\n        rel_path = os.path.join(root, file)\n        print(&quot;File from source:&quot;, rel_path)\n\nfor root, dirs, files in os.walk(dir_cmp.right):\n    for file in files:\n        rel_path = os.path.join(root, file)\n        print(&quot;File from destination:&quot;, rel_path)\n</code></pre>\n\n<h3>4. <code>filecmp.dircmpobj</code></h3>\n<p>The <code>dircmp()</code> function returns an instance of <code>dircmpobj</code> which can be used to compare directories and their contents.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import filecmp\n\n# Example usage\ndir_cmp = filecmp.dircmp('source_dir', 'destination_dir')\n\n# Print detailed information about the comparison\nprint(dir_cmp.left, &quot;and&quot;, dir_cmp.right)\nprint(&quot;Common files:&quot;, dir_cmp.common)\nprint(&quot;Different files:&quot;, dir_cmp.diff_files)\nprint(&quot;Common subdirectories:&quot;, dir_cmp.common_dirs)\n\n# Walk through directories using the dircmpobj\nfor root, dirs, files in dir_cmp.walk():\n    for file in files:\n        print(f&quot;File found at: {os.path.join(root, file)}&quot;)\n</code></pre>\n\n<h3>5. <code>subprocess.run</code></h3>\n<p>The <code>subprocess.run()</code> function can be used to compare directories using the external command <code>diff</code>.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import subprocess\n\n# Example usage\nresult = subprocess.run(['diff', 'source_dir', 'destination_dir'], capture_output=True)\nprint(&quot;Diff Output:&quot;)\nprint(result.stdout.decode('utf-8'))\n</code></pre>\n\n<h3>6. <code>filecmp.cmpfiles() with patterns</code></h3>\n<p>You can specify file patterns to include or exclude during comparison.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import filecmp\n\n# Example usage\ncommon, diff, miss = filecmp.cmpfiles('source_dir', 'destination_dir',\n                                        ['*.txt'], ['.gitignore'])\nprint(&quot;Common files:&quot;, common)\nprint(&quot;Different files:&quot;, diff)\nprint(&quot;Missing files:&quot;, miss)\n</code></pre>\n\n<h3>7. <code>filecmp.cmp() with custom comparison logic</code></h3>\n<p>You can define a custom function for comparison using the <code>use_cse</code> parameter.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import filecmp\n\ndef custom_cmp(file1, file2):\n    # Custom comparison logic here\n    return True  # Return False if files are different, otherwise True\n\n# Example usage\nfilecmp.cmp('source.txt', 'destination.txt', use_cse=custom_cmp)\n</code></pre>\n\n<h3>8. <code>filecmp.cmp() with binary comparison</code></h3>\n<p>If you need to compare files for content equality without considering file attributes like size and modification time, set <code>shallow</code> to <code>False</code>.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import filecmp\n\n# Example usage\nresult = filecmp.cmp('source.txt', 'destination.txt', use_cse=False)\nprint(&quot;Files are&quot;, &quot;equal&quot; if result else &quot;different&quot;)\n</code></pre>\n\n<h3>9. <code>filecmp.dircmp()</code> with ignore patterns</h3>\n<p>You can specify patterns to be ignored during the comparison.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import filecmp\n\n# Example usage\ndir_cmp = filecmp.dircmp('source_dir', 'destination_dir',\n                           ['*.txt'], ['.gitignore'])\nprint(&quot;Common files:&quot;, dir_cmp.common)\nprint(&quot;Different files:&quot;, dir_cmp.diff_files)\nprint(&quot;Common subdirectories:&quot;, dir_cmp.common_dirs)\n</code></pre>\n\n<h3>10. <code>filecmp.cmp() with shallow comparison</code></h3>\n<p>If you only want to compare the file sizes and modification times without opening the files, set <code>shallow</code> to <code>True</code>.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import filecmp\n\n# Example usage\nresult = filecmp.cmp('source.txt', 'destination.txt', use_cse=False, shallow=True)\nprint(&quot;Files are&quot;, &quot;equal&quot; if result else &quot;different&quot;)\n</code></pre>\n\n<p>These examples demonstrate various ways to use the <code>filecmp</code> module in Python for comparing files and directories. Each example is well-documented and includes comments explaining the functionality.</p>"
        },
        {
            "filename": "fileinput - Iterate over lines from multiple input streams.md",
            "content": "<h1>fileinput - Iterate over lines from multiple input streams</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-iterating-over-multiple-files\">Example 1: Iterating Over Multiple Files</a></li>\n<li><a href=\"#example-2-skipping-blank-lines\">Example 2: Skipping Blank Lines</a></li>\n<li><a href=\"#example-3-processing-lines-based-on-position\">Example 3: Processing Lines Based on Position</a></li>\n<li><a href=\"#example-4-using-inplace-mode\">Example 4: Using <code>inplace</code> Mode</a></li>\n<li><a href=\"#example-5-handling-unicode-input\">Example 5: Handling Unicode Input</a></li>\n</ol>\n<p>The <code>fileinput</code> module is a part of Python's standard library that provides an easy way to read from multiple files or standard input. It allows you to process each line from each of these inputs in sequence, handling various options such as skipping blank lines and processing only certain lines based on their position.</p>\n<p>Here are some comprehensive code examples for the <code>fileinput</code> module:</p>\n<h3>Example 1: Iterating Over Multiple Files</h3>\n<p>This example reads lines from multiple files sequentially and prints them. It handles empty lines by checking if they contain any content.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import fileinput\n\n# List of files to read\nfiles_to_read = ['file1.txt', 'file2.txt']\n\n# Iterate over each line in the specified files\nfor line in fileinput.input(files=files_to_read):\n    # Check if the line is not empty before processing\n    if line:\n        print(line.strip())  # Print each non-empty line after stripping whitespace\n\n# Clean up any open files\nfileinput.close()\n</code></pre>\n\n<h3>Example 2: Skipping Blank Lines</h3>\n<p>This example demonstrates how to skip blank lines when reading from multiple files. It uses the <code>fileinput.SKIP_BLANK_LINES</code> option.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import fileinput\n\n# List of files to read\nfiles_to_read = ['file1.txt', 'file2.txt']\n\n# Iterate over each line in the specified files, skipping empty ones\nfor line in fileinput.input(files=files_to_read, inplace=True):\n    # Check if the line is not empty before processing\n    if line:\n        print(line.strip())  # Print each non-empty line after stripping whitespace\n\n# Clean up any open files\nfileinput.close()\n</code></pre>\n\n<h3>Example 3: Processing Lines Based on Position</h3>\n<p>This example shows how to process lines based on their position in each file. It uses the <code>lineno</code> attribute available in the <code>fileinput</code> module.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import fileinput\n\n# List of files to read\nfiles_to_read = ['file1.txt', 'file2.txt']\n\n# Iterate over each line in the specified files, processing lines based on position\nfor line_num, line in enumerate(fileinput.input(files=files_to_read)):\n    if line:\n        # Print the line number and the content\n        print(f&quot;Line {line_num + 1}: {line.strip()}&quot;)\n\n# Clean up any open files\nfileinput.close()\n</code></pre>\n\n<h3>Example 4: Using <code>inplace</code> Mode</h3>\n<p>This example uses the <code>inplace</code> mode to modify lines in place, allowing you to edit multiple files simultaneously.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import fileinput\n\n# List of files to read and modify\nfiles_to_modify = ['file1.txt', 'file2.txt']\n\n# Iterate over each line in the specified files, modifying them if necessary\nfor line_num, line in enumerate(fileinput.input(files=files_to_modify, inplace=True)):\n    # Check if the line is not empty before processing\n    if line:\n        # Modify the line (e.g., change 'old' to 'new')\n        modified_line = line.replace('old', 'new').strip()\n        print(modified_line)  # Print the modified line\n\n# Clean up any open files\nfileinput.close()\n</code></pre>\n\n<h3>Example 5: Handling Unicode Input</h3>\n<p>This example demonstrates how to handle Unicode input when reading from multiple files. It uses the <code>encoding</code> parameter to specify the encoding.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import fileinput\n\n# List of files to read\nfiles_to_read = ['file1.txt', 'file2.txt']\n\n# Iterate over each line in the specified files, handling UTF-8 encoding\nfor line in fileinput.input(files=files_to_read, encoding='utf-8'):\n    # Print the line after decoding it from bytes\n    print(line.decode('utf-8'))\n\n# Clean up any open files\nfileinput.close()\n</code></pre>\n\n<p>These examples cover various aspects of using the <code>fileinput</code> module, including reading from multiple files, handling blank lines, processing lines based on position, modifying files in place, and handling Unicode input. Each example is self-contained and should be clear for inclusion in documentation or use cases where these functionalities are required.</p>"
        },
        {
            "filename": "fnmatch - Unix filename pattern matching.md",
            "content": "<h1>fnmatch - Unix filename pattern matching</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-basic-pattern-matching\">Example 1: Basic Pattern Matching</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#example-2-case-insensitive-matching\">Example 2: Case Insensitive Matching</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#example-3-using-wildcards-in-patterns\">Example 3: Using Wildcards in Patterns</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#example-4-matching-multiple-patterns\">Example 4: Matching Multiple Patterns</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#example-5-using-regular-expressions-for-more-complex-patterns\">Example 5: Using Regular Expressions for More Complex Patterns</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n</ol>\n<p>The <code>fnmatch</code> module is used to perform shell-style pattern matching on filenames, which is particularly useful for applications that need to handle file paths and patterns according to common Unix/Linux conventions. Below are comprehensive code examples demonstrating various functionalities of the <code>fnmatch</code> module.</p>\n<h3>Example 1: Basic Pattern Matching</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import fnmatch\n\n# Define a list of filenames\nfilenames = [\n    &quot;document.txt&quot;,\n    &quot;images.png&quot;,\n    &quot;notes.pdf&quot;,\n    &quot;backup.tar.gz&quot;,\n    &quot;README.md&quot;\n]\n\n# Define patterns to match files with &quot;.txt&quot; or &quot;.md&quot; extensions\npatterns = [&quot;*.txt&quot;, &quot;*.md&quot;]\n\n# Use fnmatch.filter() to find filenames that match the patterns\nmatched_filenames = []\nfor pattern in patterns:\n    matched_filenames.extend(fnmatch.filter(filenames, pattern))\n\n# Print the matched filenames\nprint(&quot;Matched filenames:&quot;, matched_filenames)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ul>\n<li><strong>Importing <code>fnmatch</code>:</strong> The <code>fnmatch</code> module provides a function <code>filter()</code> that can be used to filter a list of filenames based on a given pattern.</li>\n<li><strong>Pattern Definition:</strong> The patterns <code>[\"*.txt\", \"*.md\"]</code> match any file name ending with <code>.txt</code> or <code>.md</code>.</li>\n<li><strong>Function Call:</strong> <code>fnmatch.filter(filenames, pattern)</code> returns a list of filenames that match the specified pattern.</li>\n<li><strong>Output:</strong> The matched filenames are printed.</li>\n</ul>\n<h3>Example 2: Case Insensitive Matching</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import fnmatch\n\n# Define a list of filenames with mixed cases\nfilenames = [\n    &quot;Document.txt&quot;,\n    &quot;Images.png&quot;,\n    &quot;Notes.pdf&quot;,\n    &quot;BACKUP.tar.gz&quot;,\n    &quot;README.md&quot;\n]\n\n# Define case-insensitive patterns to match files ending with &quot;.txt&quot; or &quot;.md&quot;\npatterns = [&quot;*.txt&quot;, &quot;*.md&quot;]\n\n# Convert the patterns to case-insensitive versions\ncase_insensitive_patterns = [fnmatch.translate(pattern) for pattern in patterns]\n\n# Use fnmatch.filter() with the translated patterns for case-insensitive matching\nmatched_filenames = []\nfor pattern in case_insensitive_patterns:\n    matched_filenames.extend(fnmatch.filter(filenames, pattern))\n\n# Print the matched filenames\nprint(&quot;Matched filenames:&quot;, matched_filenames)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ul>\n<li><strong>Case Insensitivity:</strong> The <code>fnmatch.translate()</code> function is used to convert patterns into forms that are suitable for case-insensitive matching.</li>\n<li><strong>Pattern Translation:</strong> The patterns <code>[\"*.txt\", \"*.md\"]</code> become case-insensitive after translation.</li>\n<li><strong>Function Call:</strong> <code>fnmatch.filter(filenames, case_insensitive_pattern)</code> returns a list of filenames that match the case-insensitive patterns.</li>\n<li><strong>Output:</strong> The matched filenames are printed.</li>\n</ul>\n<h3>Example 3: Using Wildcards in Patterns</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import fnmatch\n\n# Define a list of filenames with different extensions\nfilenames = [\n    &quot;file1.txt&quot;,\n    &quot;file2.docx&quot;,\n    &quot;file3.pdf&quot;,\n    &quot;file4.xlsx&quot;,\n    &quot;file5.jpg&quot;\n]\n\n# Define patterns to match files ending with &quot;.txt&quot; or &quot;.docx&quot;\npatterns = [&quot;*.txt&quot;, &quot;*.docx&quot;]\n\n# Use fnmatch.filter() to find filenames that match the patterns\nmatched_filenames = []\nfor pattern in patterns:\n    matched_filenames.extend(fnmatch.filter(filenames, pattern))\n\n# Print the matched filenames\nprint(&quot;Matched filenames:&quot;, matched_filenames)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ul>\n<li><strong>Wildcard Usage:</strong> The patterns <code>[\"*.txt\", \"*.docx\"]</code> match any file name ending with <code>.txt</code> or <code>.docx</code>.</li>\n<li><strong>Function Call:</strong> <code>fnmatch.filter(filenames, pattern)</code> returns a list of filenames that match the specified patterns.</li>\n<li><strong>Output:</strong> The matched filenames are printed.</li>\n</ul>\n<h3>Example 4: Matching Multiple Patterns</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import fnmatch\n\n# Define a list of filenames\nfilenames = [\n    &quot;file1.txt&quot;,\n    &quot;file2.docx&quot;,\n    &quot;file3.pdf&quot;,\n    &quot;file4.xlsx&quot;,\n    &quot;file5.jpg&quot;\n]\n\n# Define multiple patterns to match files ending with &quot;.txt&quot;, &quot;.docx&quot;, or &quot;.pdf&quot;\npatterns = [&quot;*.txt&quot;, &quot;*.docx&quot;, &quot;*.pdf&quot;]\n\n# Use fnmatch.filter() with each pattern in the list\nmatched_filenames = []\nfor pattern in patterns:\n    matched_filenames.extend(fnmatch.filter(filenames, pattern))\n\n# Print the matched filenames\nprint(&quot;Matched filenames:&quot;, matched_filenames)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ul>\n<li><strong>Multiple Patterns:</strong> The list <code>[\"*.txt\", \"*.docx\", \"*.pdf\"]</code> contains multiple patterns.</li>\n<li><strong>Function Call:</strong> <code>fnmatch.filter(filenames, pattern)</code> returns a list of filenames that match the specified patterns.</li>\n<li><strong>Output:</strong> The matched filenames are printed.</li>\n</ul>\n<h3>Example 5: Using Regular Expressions for More Complex Patterns</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import fnmatch\n\n# Define a list of filenames\nfilenames = [\n    &quot;file1.txt&quot;,\n    &quot;file2.docx&quot;,\n    &quot;file3.pdf&quot;,\n    &quot;file4.xlsx&quot;,\n    &quot;file5.jpg&quot;\n]\n\n# Define a regular expression pattern to match files ending with &quot;.txt&quot;, &quot;.docx&quot;, or &quot;.pdf&quot;\npattern = r'\\.(txt|docx|pdf)$'\n\n# Use fnmatch.filter() with the regular expression pattern\nmatched_filenames = fnmatch.filter(filenames, pattern)\n\n# Print the matched filenames\nprint(&quot;Matched filenames:&quot;, matched_filenames)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ul>\n<li><strong>Regular Expression Pattern:</strong> The pattern <code>r'\\.(txt|docx|pdf)$'</code> matches any file name that ends with <code>.txt</code>, <code>.docx</code>, or <code>.pdf</code>.</li>\n<li><code>\\.</code> matches the literal dot (<code>.</code>) before the extension.</li>\n<li><code>(txt|docx|pdf)</code> is a group of alternatives, matching any of these extensions.</li>\n<li><code>$</code> asserts the position at the end of the string, ensuring that only filenames ending with the specified extensions are matched.</li>\n<li><strong>Function Call:</strong> <code>fnmatch.filter(filenames, pattern)</code> returns a list of filenames that match the regular expression pattern.</li>\n<li><strong>Output:</strong> The matched filenames are printed.</li>\n</ul>\n<h3>Conclusion</h3>\n<p>The <code>fnmatch</code> module provides flexible and powerful tools for matching filenames according to Unix/Linux conventions. By understanding how to define patterns and use them with various functions like <code>filter()</code>, you can effectively manage file paths in your Python applications.</p>"
        },
        {
            "filename": "glob - Unix style pathname pattern expansion.md",
            "content": "<h1>glob - Unix style pathname pattern expansion</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#explanation-of-examples\">Explanation of Examples:</a></li>\n</ol>\n<p>The <code>glob</code> module in Python provides a function called <code>glob()</code> that is used to expand Unix-style pathname patterns into a list of matching file names. This can be very useful for finding files based on specific naming conventions or patterns.</p>\n<p>Below are comprehensive examples demonstrating various functionalities and use cases of the <code>glob</code> module:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import glob\nimport os\n\n# Example 1: Basic usage\n# Find all .txt files in the current directory\nprint(glob.glob(&quot;*.txt&quot;))\n\n# Example 2: Search for files in a specific directory\n# Find all .pdf files in the '/home/user/documents' directory\nprint(glob.glob(&quot;/home/user/documents/*.pdf&quot;))\n\n# Example 3: Use wildcards to match multiple file extensions\n# Find all files with any of the following extensions: txt, pdf, docx\nprint(glob.glob(&quot;*.txt *.pdf *.docx&quot;))\n\n# Example 4: Find files with a specific prefix and suffix\n# Find all files starting with 'report' and ending with '.doc'\nprint(glob.glob(&quot;report*.doc&quot;))\n\n# Example 5: Find files in multiple directories\n# Use an absolute path to find all .py files in the home directory and its subdirectories\nprint(glob.glob(&quot;/home/user/**/*.py&quot;, recursive=True))\n\n# Example 6: Find files with a specific pattern in their names\n# Find all files containing 'summary' in their name\nprint(glob.glob(&quot;*summary*&quot;))\n\n# Example 7: Using shell-style wildcards\n# Use ! to exclude specific patterns\nprint(glob.glob(&quot;*.txt !(*.log)&quot;))  # Exclude .log files\n\n# Example 8: Finding hidden files (files starting with a dot)\n# Find all hidden files in the current directory\nprint(glob.glob(&quot;.?*&quot;))\n\n# Example 9: Using glob() with a function to filter results\ndef is_text_file(file_path):\n    return file_path.endswith(&quot;.txt&quot;)\n\n# Use list comprehension to find .txt files\nfor txt_file in [f for f in glob.iglob(&quot;*.txt&quot;) if is_text_file(f)]:\n    print(txt_file)\n\n# Example 10: Using glob() with a generator to handle large directories efficiently\ndef find_large_files(directory, size_threshold):\n    for file_path in glob.iglob(f&quot;{directory}/**/*&quot;, recursive=True):\n        if os.path.getsize(file_path) &gt; size_threshold:\n            yield file_path\n\n# Find all files larger than 10MB in the '/home/user/documents' directory\nfor large_file in find_large_files(&quot;/home/user/documents&quot;, 10 * 1024 * 1024):\n    print(large_file)\n</code></pre>\n\n<h3>Explanation of Examples:</h3>\n<ol>\n<li>\n<p><strong>Basic Usage</strong>: This example demonstrates the simplest use case where you want to list all files with a specific extension in the current directory.</p>\n</li>\n<li>\n<p><strong>Search in Specific Directory</strong>: Shows how to search for files in a particular directory using an absolute path.</p>\n</li>\n<li>\n<p><strong>Multiple File Extensions</strong>: Demonstrates finding files with multiple extensions at once.</p>\n</li>\n<li>\n<p><strong>Prefix and Suffix Patterns</strong>: Searches for files that match both a prefix and a suffix.</p>\n</li>\n<li>\n<p><strong>Recursive Search</strong>: Uses <code>recursive=True</code> to find files in all subdirectories of a specified directory.</p>\n</li>\n<li>\n<p><strong>Pattern Matching</strong>: Uses wildcards like <code>*</code> and <code>?</code> to match filenames based on patterns.</p>\n</li>\n<li>\n<p><strong>Excluding Files with Specific Patterns</strong>: Demonstrates how to exclude certain files using the <code>!</code> wildcard.</p>\n</li>\n<li>\n<p><strong>Hidden Files</strong>: Finds files that start with a dot, which are typically hidden in Unix-like systems.</p>\n</li>\n<li>\n<p><strong>Filtering Results</strong>: Uses a filter function to apply custom logic for selecting matching files.</p>\n</li>\n<li>\n<p><strong>Generator for Large Datasets</strong>: Utilizes generators and <code>os.path.getsize()</code> to efficiently handle large datasets without loading everything into memory at once.</p>\n</li>\n</ol>\n<p>These examples cover a wide range of use cases for the <code>glob</code> module, demonstrating its flexibility and power in file path expansion.</p>"
        },
        {
            "filename": "linecache - Random access to text lines.md",
            "content": "<h1>linecache - Random access to text lines</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-retrieve-a-line-from-a-file\">Example 1: Retrieve a line from a file</a></li>\n<li><a href=\"#example-2-retrieve-all-lines-from-a-file-and-store-them-in-a-list\">Example 2: Retrieve all lines from a file and store them in a list</a></li>\n<li><a href=\"#example-3-store-the-contents-of-a-file-in-memory-and-retrieve-a-specific-line\">Example 3: Store the contents of a file in memory and retrieve a specific line</a></li>\n<li><a href=\"#example-4-clear-the-cache-to-free-up-memory\">Example 4: Clear the cache to free up memory</a></li>\n<li><a href=\"#example-5-retrieve-lines-from-multiple-files-and-process-them\">Example 5: Retrieve lines from multiple files and process them</a></li>\n<li><a href=\"#example-6-handle-errors-gracefully-using-try-except-blocks\">Example 6: Handle errors gracefully using try-except blocks</a></li>\n<li><a href=\"#example-7-store-and-retrieve-lines-in-a-context-manager\">Example 7: Store and retrieve lines in a context manager</a></li>\n<li><a href=\"#example-8-use-linecache-with-a-list-to-store-lines-and-process-them\">Example 8: Use <code>linecache</code> with a list to store lines and process them</a></li>\n</ol>\n<p>The <code>linecache</code> module provides a way to access lines of files, even if the file is not open or has been changed since it was last accessed. This can be particularly useful when you need to process large files without reading them entirely into memory.</p>\n<p>Here are some comprehensive code examples for using the <code>linecache</code> module:</p>\n<h3>Example 1: Retrieve a line from a file</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import linecache\n\n# Specify the path to the file and the line number\nfile_path = '/path/to/your/file.txt'\nline_number = 5\n\ntry:\n    # Get the specified line from the file\n    line_content = linecache.getline(file_path, line_number)\n\n    print(f&quot;Line {line_number} in '{file_path}':&quot;)\n    print(line_content.strip())  # Remove any trailing newline character\nexcept FileNotFoundError:\n    print(&quot;The file does not exist.&quot;)\n</code></pre>\n\n<h3>Example 2: Retrieve all lines from a file and store them in a list</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import linecache\n\n# Specify the path to the file\nfile_path = '/path/to/your/file.txt'\n\ntry:\n    # Get all lines from the file into a list\n    with open(file_path, 'r') as file:\n        lines = file.readlines()\n\n    print(&quot;All lines in '{file_path}':&quot;)\n    for line in lines:\n        print(line.strip())\nexcept FileNotFoundError:\n    print(&quot;The file does not exist.&quot;)\n</code></pre>\n\n<h3>Example 3: Store the contents of a file in memory and retrieve a specific line</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import linecache\n\n# Specify the path to the file\nfile_path = '/path/to/your/file.txt'\n\ntry:\n    # Load all lines into memory\n    lines = linecache.getlines(file_path)\n\n    # Specify the line number\n    line_number = 3\n\n    print(f&quot;Line {line_number} in '{file_path}':&quot;)\n    print(lines[line_number - 1].strip())  # Adjust for zero-based indexing\nexcept FileNotFoundError:\n    print(&quot;The file does not exist.&quot;)\n</code></pre>\n\n<h3>Example 4: Clear the cache to free up memory</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import linecache\n\n# Specify the path to the file\nfile_path = '/path/to/your/file.txt'\n\ntry:\n    # Get a line from the file\n    line_content = linecache.getline(file_path, 1)\n\n    print(f&quot;Line 1 in '{file_path}':&quot;)\n    print(line_content.strip())\nexcept FileNotFoundError:\n    print(&quot;The file does not exist.&quot;)\n\n# Clear the cache to free up memory\nlinecache.clearcache()\n</code></pre>\n\n<h3>Example 5: Retrieve lines from multiple files and process them</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import linecache\n\n# List of file paths\nfile_paths = ['/path/to/file1.txt', '/path/to/file2.txt']\n\ntry:\n    # Retrieve all lines from each file\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            lines = file.readlines()\n\n        print(f&quot;Lines in '{file_path}':&quot;)\n        for line in lines:\n            print(line.strip())\nexcept FileNotFoundError:\n    print(&quot;One or more files do not exist.&quot;)\n</code></pre>\n\n<h3>Example 6: Handle errors gracefully using try-except blocks</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import linecache\n\n# Specify the path to a file that might not exist\nfile_path = '/path/to/nonexistent_file.txt'\n\ntry:\n    # Attempt to retrieve a line from the non-existent file\n    line_content = linecache.getline(file_path, 1)\n\n    print(f&quot;Line 1 in '{file_path}':&quot;)\n    print(line_content.strip())\nexcept FileNotFoundError as e:\n    print(f&quot;An error occurred: {e}&quot;)\n</code></pre>\n\n<h3>Example 7: Store and retrieve lines in a context manager</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import linecache\n\nclass LineCacheManager:\n    def __init__(self, file_path):\n        self.file_path = file_path\n        self.lines = None\n\n    def load_lines(self):\n        with open(self.file_path, 'r') as file:\n            self.lines = file.readlines()\n\n    def get_line(self, line_number):\n        if self.lines is None:\n            self.load_lines()\n\n        return self.lines[line_number - 1].strip()\n\n# Usage\nmanager = LineCacheManager('/path/to/your/file.txt')\ntry:\n    line_content = manager.get_line(5)\n    print(f&quot;Line 5 in '{file_path}':&quot;)\n    print(line_content.strip())\nexcept IndexError:\n    print(&quot;The specified line number is out of range.&quot;)\n</code></pre>\n\n<h3>Example 8: Use <code>linecache</code> with a list to store lines and process them</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import linecache\n\n# List of file paths\nfile_paths = ['/path/to/file1.txt', '/path/to/file2.txt']\n\nlines_data = []\n\ntry:\n    # Retrieve all lines from each file and store in a list\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            lines = file.readlines()\n\n        lines_data.extend(lines)\n\n    print(&quot;All lines processed:&quot;)\n    for line in lines_data:\n        print(line.strip())\nexcept FileNotFoundError:\n    print(&quot;One or more files do not exist.&quot;)\n</code></pre>\n\n<p>These examples cover various use cases of the <code>linecache</code> module, from basic retrieval to handling errors and storing results. Each example includes comments for clarity and best practices are followed throughout the code.</p>"
        },
        {
            "filename": "os.path - Common pathname manipulations.md",
            "content": "<h1>os.path - Common pathname manipulations</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#explanation\">Explanation:</a></li>\n</ol>\n<p>The <code>os.path</code> module in Python provides a portable way of using operating system dependent functionality related to files and directories. Below are comprehensive examples demonstrating various functionalities of the <code>os.path</code> module, along with explanations for each example:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\n\n# Example 1: Joining paths\n# Joining multiple parts into a single path\npath_parts = ['home', 'user', 'documents', 'report.docx']\nfull_path = os.path.join(*path_parts)\nprint(f&quot;Full Path: {full_path}&quot;)\n\n# Example 2: Splitting paths\n# Splitting the full path into directory and file components\ndir_name, file_name = os.path.split(full_path)\nprint(f&quot;Directory Name: {dir_name}&quot;)\nprint(f&quot;File Name: {file_name}&quot;)\n\n# Example 3: Checking if a file or directory exists\n# Using os.path.exists() to check for existence of a file or directory\nfile_path = 'path/to/my_file.txt'\nif os.path.exists(file_path):\n    print(&quot;File exists.&quot;)\nelse:\n    print(&quot;File does not exist.&quot;)\n\n# Example 4: Getting the last modification time of a file\n# Using os.path.getmtime() to get the modification time of a file\nimport datetime\nif os.path.exists(file_path):\n    modification_time = os.path.getmtime(file_path)\n    print(f&quot;Last Modification Time: {datetime.datetime.fromtimestamp(modification_time)}&quot;)\nelse:\n    print(&quot;File does not exist.&quot;)\n\n# Example 5: Checking if a path is absolute\n# Using os.path.isabs() to check if a path is absolute\nabsolute_path = os.path.abspath(full_path)\nprint(f&quot;Is Absolute Path: {os.path.isabs(absolute_path)}&quot;)\n\n# Example 6: Getting the current working directory\n# Using os.getcwd() to get the current working directory\ncurrent_directory = os.getcwd()\nprint(f&quot;Current Working Directory: {current_directory}&quot;)\n\n# Example 7: Changing the current working directory\n# Using os.chdir() to change the current working directory\ntry:\n    new_directory = 'path/to/new/directory'\n    os.chdir(new_directory)\n    print(&quot;Changed Current Directory.&quot;)\nexcept FileNotFoundError:\n    print(&quot;Directory does not exist.&quot;)\n\n# Example 8: Listing all files in a directory\n# Using os.listdir() to list all files and directories in a directory\nif os.path.isdir(current_directory):\n    for item in os.listdir(current_directory):\n        print(item)\nelse:\n    print(&quot;Path is not a directory.&quot;)\n\n# Example 9: Checking if a path is a directory\n# Using os.path.isdir() to check if a path is a directory\ndirectory_path = 'path/to/my_directory'\nif os.path.isdir(directory_path):\n    print(&quot;This is a directory.&quot;)\nelse:\n    print(&quot;This is not a directory.&quot;)\n\n# Example 10: Getting the size of a file in bytes\n# Using os.path.getsize() to get the size of a file\nfile_size = os.path.getsize(file_path)\nprint(f&quot;File Size (bytes): {file_size}&quot;)\n\n# Example 11: Creating a new directory\n# Using os.makedirs() to create multiple directories\ntry:\n    new_dir_path = 'path/to/new/directory'\n    os.makedirs(new_dir_path, exist_ok=True)\n    print(&quot;Directory created.&quot;)\nexcept FileExistsError:\n    print(&quot;Directory already exists.&quot;)\n\n# Example 12: Removing an empty directory\n# Using os.rmdir() to remove a non-empty directory if it is empty\ntry:\n    dir_to_remove = 'path/to/directory'\n    os.rmdir(dir_to_remove)\n    print(&quot;Directory removed.&quot;)\nexcept FileNotFoundError:\n    print(&quot;Directory does not exist.&quot;)\n\n# Example 13: Removing a file\n# Using os.remove() to delete a file\ntry:\n    file_to_remove = 'path/to/my_file.txt'\n    os.remove(file_to_remove)\n    print(&quot;File deleted.&quot;)\nexcept FileNotFoundError:\n    print(&quot;File does not exist.&quot;)\n\n# Example 14: Renaming a directory or file\n# Using os.rename() to rename a file or directory\nnew_name = 'new_name_for_my_file.docx'\nos.rename(file_path, new_name)\nprint(f&quot;Renamed file from {file_path} to {new_name}&quot;)\n\n# Example 15: Getting the absolute path of a symbolic link\n# Using os.path.realpath() for resolving symbolic links\nreal_path = os.path.realpath('path/to/symbolic_link')\nprint(f&quot;Real Path: {real_path}&quot;)\n\n# Example 16: Checking if two paths point to the same file or directory\n# Using os.path.samefile() to compare paths\nother_file_path = 'path/to/another_file.txt'\nif os.path.samefile(file_path, other_file_path):\n    print(&quot;Both paths point to the same file.&quot;)\nelse:\n    print(&quot;Paths do not point to the same file.&quot;)\n\n# Example 17: Getting the extension of a path\n# Using os.path.splitext() to get the extension of a file\nbase_name, extension = os.path.splitext(file_path)\nprint(f&quot;Base Name: {base_name}&quot;)\nprint(f&quot;Extension: {extension}&quot;)\n\n# Example 18: Removing an empty directory recursively (for directories with contents)\n# Note: This will only remove empty directories. For non-empty directories, use shutil.rmtree()\ndir_to_remove_recursive = 'path/to/directory_with_contents'\nos.rmdir(dir_to_remove_recursive)  # This will raise an error as it's not empty\n\n# Example 19: Creating a symbolic link\n# Using os.symlink() to create a symbolic link\ntry:\n    symlink_path = 'path/to/symlink'\n    source_file = 'path/to/source/file.txt'\n    os.symlink(source_file, symlink_path)\n    print(&quot;Symbolic Link created.&quot;)\nexcept FileExistsError:\n    print(&quot;Symlink already exists.&quot;)\n\n# Example 20: Checking if a path is a symbolic link\n# Using os.path.islink() to check if a path is a symbolic link\nif os.path.islink(symlink_path):\n    print(&quot;This is a symbolic link.&quot;)\nelse:\n    print(&quot;This is not a symbolic link.&quot;)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ul>\n<li>\n<p><strong>Path Joining and Splitting</strong>: Demonstrates how to join multiple paths into one using <code>os.path.join()</code> and split them back into directory and file components with <code>os.path.split()</code>.</p>\n</li>\n<li>\n<p><strong>File Existence Check</strong>: Shows how to check if a file or directory exists using <code>os.path.exists()</code>.</p>\n</li>\n<li>\n<p><strong>Last Modification Time</strong>: Uses <code>os.path.getmtime()</code> to get the last modification time of a file, which is then converted to a human-readable format using <code>datetime.datetime.fromtimestamp()</code>.</p>\n</li>\n<li>\n<p><strong>Path Absoluteity and Current Directory Manipulation</strong>: Demonstrates how to check if a path is absolute with <code>os.path.isabs()</code>, change the current directory with <code>os.chdir()</code>, get the current working directory with <code>os.getcwd()</code>, and more.</p>\n</li>\n<li>\n<p><strong>File and Directory Management</strong>: Includes operations like listing files in a directory, checking if a path is a directory or file, getting the size of a file, creating/removing directories, and managing symbolic links.</p>\n</li>\n</ul>\n<p>Each example includes error handling for cases where the paths might not exist, providing clear output to verify the results.</p>"
        },
        {
            "filename": "pathlib - Object-oriented filesystem paths.md",
            "content": "<h1>pathlib - Object-oriented filesystem paths</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#explanation\">Explanation:</a></li>\n</ol>\n<p>Below are comprehensive examples of how to use each functionality provided by the <code>pathlib</code> module in Python 3.12. Each example is well-documented with comments explaining each step.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from pathlib import Path\n\n# Example 1: Create a new Path object for a file or directory\nfile_path = Path(&quot;example.txt&quot;)\ndirectory_path = Path(&quot;documents&quot;)\n\nprint(file_path)    # Output: PosixPath('example.txt')\nprint(directory_path)  # Output: PosixPath('documents')\n\n# Example 2: Check if the path exists and is a file or directory\nif file_path.exists():\n    print(&quot;File exists:&quot;, file_path)\nelse:\n    print(&quot;File does not exist&quot;)\n\nif directory_path.exists() and directory_path.is_dir():\n    print(&quot;Directory exists:&quot;, directory_path)\nelse:\n    print(&quot;Directory does not exist&quot;)\n\n# Example 3: Create a new directory if it doesn't exist\nnew_directory = Path(&quot;new_directory&quot;)\nif not new_directory.exists():\n    new_directory.mkdir(parents=True, exist_ok=True)\n\nprint(&quot;New directory created:&quot;, new_directory)\n\n# Example 4: Move or rename a file or directory\noriginal_file_path = Path(&quot;example.txt&quot;)\ntarget_file_path = Path(&quot;backup/example_backup.txt&quot;)\n\nif original_file_path.exists():\n    target_file_path.parent.mkdir(parents=True, exist_ok=True)  # Ensure target directory exists\n    original_file_path.rename(target_file_path)\n    print(&quot;File moved to:&quot;, target_file_path)\nelse:\n    print(&quot;File does not exist&quot;)\n\n# Example 5: List all files and directories in a directory\nif directory_path.exists():\n    for item in directory_path.iterdir():\n        if item.is_file():\n            print(f&quot;File: {item}&quot;)\n        elif item.is_dir():\n            print(f&quot;Directory: {item}&quot;)\n\n# Example 6: Get the absolute path of a relative path\nrelative_path = Path(&quot;example.txt&quot;)\nabsolute_path = relative_path.resolve()\nprint(&quot;Absolute path:&quot;, absolute_path)\n\n# Example 7: Check if a path is an absolute path\nif absolute_path.is_absolute():\n    print(&quot;Path is absolute.&quot;)\nelse:\n    print(&quot;Path is not absolute.&quot;)\n\n# Example 8: Get the name of the file or directory without extension\nfile_name_without_extension = file_path.stem\nprint(&quot;File name without extension:&quot;, file_name_without_extension)\n\n# Example 9: Get the extension of a file\nfile_extension = file_path.suffix\nprint(&quot;File extension:&quot;, file_extension)\n\n# Example 10: Walk through directories and files recursively\nif directory_path.exists():\n    for item in directory_path.rglob(&quot;*&quot;):\n        if item.is_file():\n            print(f&quot;File found: {item}&quot;)\n\n# Example 11: Normalize a path by resolving all symbolic links and redundant references\nnormalized_path = Path(&quot;example.txt&quot;)\nreal_path = normalized_path.resolve()\nprint(&quot;Normalized and resolved path:&quot;, real_path)\n\n# Example 12: Join paths to create a new path object\ncombined_path = file_path.parent / &quot;backup&quot; / &quot;example_backup.txt&quot;\nprint(&quot;Combined path:&quot;, combined_path)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ul>\n<li><strong>Path Objects</strong>: <code>Path</code> objects are used to represent filesystem paths in an abstract way.</li>\n<li><strong>Existence Check</strong>: Methods like <code>exists()</code> and <code>is_dir()</code> check if a path exists and its type.</li>\n<li><strong>Directory Creation</strong>: The <code>mkdir()</code> method creates a new directory. The <code>parents=True</code> parameter ensures parent directories are created, and <code>exist_ok=True</code> prevents raising an error if the directory already exists.</li>\n<li><strong>File Movement</strong>: The <code>rename()</code> method moves or renames a file or directory.</li>\n<li><strong>Directory Contents</strong>: The <code>iterdir()</code> method lists all items in a directory, including files and subdirectories.</li>\n<li><strong>Absolute Path Resolution</strong>: The <code>resolve()</code> method returns the absolute path by resolving symbolic links and redundant references.</li>\n<li><strong>Path Normalization</strong>: The <code>normpath()</code> method normalizes a path by removing redundant components.</li>\n<li><strong>Path Joining</strong>: The <code>/</code> operator is used to join paths, creating a new <code>Path</code> object.</li>\n</ul>\n<p>These examples cover a wide range of functionalities provided by the <code>pathlib</code> module, demonstrating how to work with file and directory paths in Python.</p>"
        },
        {
            "filename": "shutil - High-level file operations.md",
            "content": "<h1>shutil - High-level file operations</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-copying-files-and-directories\">1. Copying Files and Directories</a></li>\n<li><a href=\"#2-moving-files-and-directories\">2. Moving Files and Directories</a></li>\n<li><a href=\"#3-deleting-files-and-directories\">3. Deleting Files and Directories</a></li>\n<li><a href=\"#4-copying-files-with-permissions\">4. Copying Files with Permissions</a></li>\n<li><a href=\"#5-archiving-files\">5. Archiving Files</a></li>\n<li><a href=\"#6-compressing-files\">6. Compressing Files</a></li>\n<li><a href=\"#7-listing-files-in-a-directory\">7. Listing Files in a Directory</a></li>\n<li><a href=\"#8-getting-file-information\">8. Getting File Information</a></li>\n<li><a href=\"#9-reading-and-writing-files\">9. Reading and Writing Files</a></li>\n<li><a href=\"#10-making-and-removing-directories\">10. Making and Removing Directories</a></li>\n</ol>\n<p>Certainly! Below are comprehensive code examples for various functionalities in the <code>shutil</code> module, which provides a high-level interface for common file operations in Python.</p>\n<h3>1. Copying Files and Directories</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import shutil\nimport os\n\n# Example 1: Copy a single file to a new location\nsource_file = 'example.txt'\ndestination_file = 'example_copied.txt'\n\nif os.path.exists(source_file):\n    shutil.copy(source_file, destination_file)\n    print(f&quot;Copied {source_file} to {destination_file}&quot;)\nelse:\n    print(f&quot;Source file {source_file} does not exist.&quot;)\n\n# Example 2: Copy all contents of a directory to another directory (not the directory itself)\nsource_dir = 'source_directory'\ndestination_dir = 'destination_directory'\n\nif os.path.exists(source_dir):\n    shutil.copytree(source_dir, destination_dir)\n    print(f&quot;Copied contents of {source_dir} to {destination_dir}&quot;)\nelse:\n    print(f&quot;Source directory {source_dir} does not exist.&quot;)\n</code></pre>\n\n<h3>2. Moving Files and Directories</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import shutil\nimport os\n\n# Example 1: Move a file to a new location\nsource_file = 'example.txt'\ndestination_file = 'example_moved.txt'\n\nif os.path.exists(source_file):\n    shutil.move(source_file, destination_file)\n    print(f&quot;Moved {source_file} to {destination_file}&quot;)\nelse:\n    print(f&quot;Source file {source_file} does not exist.&quot;)\n\n# Example 2: Rename or move a directory (not the contents of the directory)\nsource_dir = 'source_directory'\nnew_name = 'moved_directory'\n\nif os.path.exists(source_dir):\n    shutil.move(source_dir, new_name)\n    print(f&quot;Renamed/Moved {source_dir} to {new_name}&quot;)\nelse:\n    print(f&quot;Source directory {source_dir} does not exist.&quot;)\n</code></pre>\n\n<h3>3. Deleting Files and Directories</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import shutil\nimport os\n\n# Example 1: Move a file to a new location\nsource_file = 'example.txt'\ndestination_file = 'example_moved.txt'\n\nif os.path.exists(source_file):\n    shutil.move(source_file, destination_file)\n    print(f&quot;Moved {source_file} to {destination_file}&quot;)\nelse:\n    print(f&quot;Error: {source_file} does not exist&quot;)\n\n# Example 2: Rename or move a directory (not the contents of the directory)\nsource_dir = 'source_directory'\nnew_name = 'moved_directory'\n\nif os.path.exists(source_dir):\n    shutil.move(source_dir, new_name)\n    print(f&quot;Renamed/Moved {source_dir} to {new_name}&quot;)\nelse:\n    print(f&quot;Error: {source_dir} does not exist&quot;)\n</code></pre>\n\n<h3>4. Copying Files with Permissions</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import shutil\n\n# Example 1: Copy a file while preserving permissions\nimport shutil\nimport os\n\n# Example 1: Copy a file while preserving permissions\nsource_file = 'example.txt'\ndestination_file = 'example_copied_with_permissions.txt'\n\nif os.path.exists(source_file):\n    shutil.copy2(source_file, destination_file)\n    print(f&quot;Copied {source_file} to {destination_file} with permissions&quot;)\nelse:\n    print(f&quot;Error: {source_file} does not exist&quot;)\n</code></pre>\n\n<h3>5. Archiving Files</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import shutil\nimport tarfile\n\n# Example 1: Create a .tar archive from a directory\nimport shutil\nimport tarfile\nimport os\n\n# Example 1: Create a .tar archive from a directory\nsource_dir = 'source_directory'\narchive_name = 'example.tar'\n\nif os.path.exists(source_dir):\n    with tarfile.open(archive_name, mode='w') as tar:\n        tar.add(source_dir)\n    print(f&quot;Created {archive_name} from {source_dir}&quot;)\nelse:\n    print(f&quot;Error: {source_dir} does not exist&quot;)\n\n# Example 2: Extract a .tar archive to a directory\narchive_to_extract = 'example.tar'\nextract_path = 'extracted_directory'\n\nif os.path.exists(archive_to_extract) and os.path.getsize(archive_to_extract) &gt; 0:\n    with tarfile.open(archive_to_extract, mode='r') as tar:\n        tar.extractall(path=extract_path)\n    print(f&quot;Extracted {archive_name} to {extract_path}&quot;)\nelse:\n    print(f&quot;Error: {archive_to_extract} does not exist or is empty&quot;)\n</code></pre>\n\n<h3>6. Compressing Files</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import shutil\nimport gzip\nimport os\n\n# Example 1: Create a .gz compressed file from a text file\nfile_to_compress = 'example.txt'\ncompressed_file = 'example.txt.gz'\n\nif os.path.exists(file_to_compress):\n    with open(file_to_compress, 'rb') as f_in:\n        with gzip.open(compressed_file, 'wb') as f_out:\n            shutil.copyfileobj(f_in, f_out)\n    print(f&quot;Compressed {file_to_compress} to {compressed_file}&quot;)\nelse:\n    print(f&quot;File {file_to_compress} does not exist&quot;)\n\n# Example 2: Extract a .gz compressed file\nfile_to_extract = 'example.txt.gz'\nextracted_file = 'extracted_example.txt'\n\nif os.path.exists(file_to_extract):\n    with gzip.open(file_to_extract, mode='rb') as f_in:\n        with open(extracted_file, 'wb') as f_out:\n            shutil.copyfileobj(f_in, f_out)\n    print(f&quot;Extracted {compressed_file} to {extracted_file}&quot;)\nelse:\n    print(f&quot;File {file_to_extract} does not exist&quot;)\n</code></pre>\n\n<h3>7. Listing Files in a Directory</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import shutil\nimport os\n\n# Example 1: List all files and directories in the current directory\ncurrent_dir = '.'\nfiles_and_dirs = os.listdir(current_dir)\nprint(f&quot;Files and Directories in {current_dir}: {files_and_dirs}&quot;)\n\n# Example 2: Recursively list all files in a directory (including subdirectories)\ndirectory_to_list = 'example_directory'\n\nfor root, dirs, files in os.walk(directory_to_list):\n    for file in files:\n        print(os.path.join(root, file))\n</code></pre>\n\n<h3>8. Getting File Information</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import shutil\nimport os\n\n# Example 1: Get the size of a file\nfile_path = 'example.txt'\ntry:\n    size = os.path.getsize(file_path)\n    print(f&quot;Size of {file_path}: {size} bytes&quot;)\nexcept FileNotFoundError:\n    print(f&quot;File {file_path} not found.&quot;)\n\n# Example 2: Get information about the file like creation time, modification time, etc.\ntry:\n    stat_info = os.stat(file_path)\n    print(stat_info)\nexcept FileNotFoundError:\n    print(f&quot;File {file_path} not found.&quot;)\n</code></pre>\n\n<h3>9. Reading and Writing Files</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import shutil\nimport os\n\n# Example 1: Read a file into memory as a string\nfile_to_read = 'example.txt'\nif os.path.exists(file_to_read):\n    with open(file_to_read, 'r') as f:\n        content = f.read()\n    print(f&quot;Content of {file_to_read}: {content}&quot;)\nelse:\n    print(f&quot;File {file_to_read} does not exist.&quot;)\n\n# Example 2: Write text to a file\nfile_to_write = 'example_written.txt'\ntext_to_write = &quot;Hello, World!&quot;\nwith open(file_to_write, 'w') as f:\n    f.write(text_to_write)\nprint(f&quot;Wrote '{text_to_write}' to {file_to_write}&quot;)\n</code></pre>\n\n<h3>10. Making and Removing Directories</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\nimport shutil\n\n# Example 1: Create a new directory\ndirectory_name = 'new_directory'\nos.makedirs(directory_name, exist_ok=True)\nprint(f&quot;Created {directory_name}&quot;)\n\n# Example 2: Remove an empty directory\nempty_dir_to_remove = 'empty_directory'\nshutil.rmtree(empty_dir_to_remove, ignore_errors=True)\nprint(f&quot;Removed {empty_dir_to_remove}&quot;)\n</code></pre>\n\n<h3>Notes:</h3>\n<ul>\n<li><strong>Permissions:</strong> When copying or moving files, ensure that the user has the necessary permissions to perform these actions.</li>\n<li><strong>Error Handling:</strong> Consider adding error handling to manage exceptions such as file not found errors or permission denied errors.</li>\n<li><strong>Security:</strong> Be cautious with <code>shutil.move</code> and <code>shutil.rmtree</code> when dealing with user inputs or paths from untrusted sources.</li>\n<li><strong>Symbolic Links:</strong> When copying directories, use the <code>symlinks</code> parameter in <code>shutil.copytree</code> to control whether to copy symbolic links as links or as the actual files they point to.</li>\n<li><strong>Path Validation:</strong> Always validate and sanitize paths to avoid directory traversal vulnerabilities and other security issues.</li>\n</ul>\n<p>These examples should provide a good starting point for using the <code>shutil</code> module in Python.</p>"
        },
        {
            "filename": "stat - Interpreting stat() results.md",
            "content": "<h1>stat - Interpreting stat() results</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-basic-usage-of-stat\">Example 1: Basic Usage of <code>stat()</code></a></li>\n<li><a href=\"#example-2-using-ospathgetmtime-for-modification-time\">Example 2: Using <code>os.path.getmtime()</code> for Modification Time</a></li>\n<li><a href=\"#example-3-extracting-permissions-and-flags\">Example 3: Extracting Permissions and Flags</a></li>\n<li><a href=\"#example-4-handling-file-attributes-with-oslstat-and-osfstat\">Example 4: Handling File Attributes with <code>os.lstat()</code> and <code>os.fstat()</code></a></li>\n<li><a href=\"#example-5-checking-file-types\">Example 5: Checking File Types</a></li>\n<li><a href=\"#example-6-accessing-extended-attributes-with-oslistxattr\">Example 6: Accessing Extended Attributes with <code>os.listxattr()</code></a></li>\n<li><a href=\"#example-7-using-osaccess-to-check-permissions\">Example 7: Using <code>os.access()</code> to Check Permissions</a></li>\n<li><a href=\"#example-8-retrieving-filesystem-information-with-osstatvfs\">Example 8: Retrieving Filesystem Information with <code>os.statvfs()</code></a></li>\n</ol>\n<p>The <code>stat</code> module in Python provides a portable way of using operating system-dependent functionality like reading or writing to the file system, and it includes functions that return information about files and directories. This module is particularly useful for understanding file properties such as permissions, last modification times, and more.</p>\n<p>Here are several code examples that demonstrate how to interpret <code>stat()</code> results:</p>\n<h3>Example 1: Basic Usage of <code>stat()</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\n\n# Define the path to a file\nfile_path = 'example.txt'\n\n# Get the stat information for the file\nstat_info = os.stat(file_path)\n\n# Extract and print some useful information\nprint(f&quot;File size (bytes): {stat_info.st_size}&quot;)\nprint(f&quot;Last modified time: {stat_info.st_mtime}&quot;)\nprint(f&quot;Permissions: {oct(stat_info.st_mode)}&quot;)\n</code></pre>\n\n<h3>Example 2: Using <code>os.path.getmtime()</code> for Modification Time</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\n\n# Define the path to a file\nfile_path = 'example.txt'\n\n# Use getmtime() to get the last modification time of the file\nmodification_time = os.path.getmtime(file_path)\n\n# Print the formatted modification time\nprint(f&quot;Last modified time: {modification_time}&quot;)\n</code></pre>\n\n<h3>Example 3: Extracting Permissions and Flags</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import stat\n\n# Define the path to a directory\ndir_path = '/path/to/directory'\n\n# Get the stat information for the directory\nstat_info = os.stat(dir_path)\n\n# Extract permissions and flags\npermissions = stat_info.st_mode\nflags = stat_info.st_flags\n\nprint(f&quot;Permissions: {oct(permissions)}&quot;)\nprint(f&quot;Flags: {hex(flags)}&quot;)\n</code></pre>\n\n<h3>Example 4: Handling File Attributes with <code>os.lstat()</code> and <code>os.fstat()</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\n\n# Define the path to a symbolic link and a file\nsymbolic_link_path = 'symlink.txt'\nfile_path = 'example.txt'\n\n# Use lstat() to get stat information for a symbolic link\nlink_stat_info = os.lstat(symbolic_link_path)\nprint(f&quot;Symbolic Link Stat Info: {link_stat_info.st_mode}&quot;)\n\n# Use fstat() to get stat information for an open file descriptor\nwith open(file_path, 'r') as file:\n    file_stat_info = os.fstat(file.fileno())\nprint(f&quot;File Stat Info (from file descriptor): {file_stat_info.st_mode}&quot;)\n</code></pre>\n\n<h3>Example 5: Checking File Types</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\n\n# Define the path to a file and directory\nfile_path = 'example.txt'\ndir_path = '/path/to/directory'\n\n# Get stat information for the file and directory\nfile_stat_info = os.stat(file_path)\ndir_stat_info = os.stat(dir_path)\n\n# Check if they are files or directories\nis_file = stat.S_ISREG(file_stat_info.st_mode)\nis_dir = stat.S_ISDIR(dir_stat_info.st_mode)\n\nprint(f&quot;Is {file_path} a file? {'Yes' if is_file else 'No'}&quot;)\nprint(f&quot;Is {dir_path} a directory? {'Yes' if is_dir else 'No'}&quot;)\n</code></pre>\n\n<h3>Example 6: Accessing Extended Attributes with <code>os.listxattr()</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\n\n# Define the path to a file or directory\npath = '/path/to/file'\n\n# List extended attributes of the object\ntry:\n    xattrs = os.listxattr(path)\n    print(f&quot;Extended attributes for {path}: {', '.join(xattrs)}&quot;)\nexcept OSError as e:\n    print(f&quot;Error listing extended attributes: {e}&quot;)\n</code></pre>\n\n<h3>Example 7: Using <code>os.access()</code> to Check Permissions</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\n\n# Define the path to a file and permissions\nfile_path = 'example.txt'\npermissions_to_check = os.R_OK | os.W_OK\n\n# Use access() to check if the current user has the specified permissions\nif os.access(file_path, permissions_to_check):\n    print(f&quot;Current user has read/write permission for {file_path}&quot;)\nelse:\n    print(f&quot;Current user does not have read/write permission for {file_path}&quot;)\n</code></pre>\n\n<h3>Example 8: Retrieving Filesystem Information with <code>os.statvfs()</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\n\n# Define the path to a directory\ndirectory_path = '/path/to/directory'\n\n# Get filesystem statistics for the directory\nstatvfs_info = os.statvfs(directory_path)\n\nprint(f&quot;Total space: {statvfs_info.f_blocks * statvfs_info.f_frsize} bytes&quot;)\nprint(f&quot;Free space: {statvfs_info.f_bfree * statvfs_info.f_frsize} bytes&quot;)\nprint(f&quot;Available space: {statvfs_info.f_bavail * statvfs_info.f_frsize} bytes&quot;)\n</code></pre>\n\n<p>These examples demonstrate how to use the <code>stat</code> module in Python to retrieve and interpret various file system properties. Each example includes comments explaining the purpose of each step and relevant functions used.</p>"
        },
        {
            "filename": "tempfile - Generate temporary files and directories.md",
            "content": "<h1>tempfile - Generate temporary files and directories</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-creating-temporary-files\">1. Creating Temporary Files</a></li>\n<li><a href=\"#2-creating-temporary-files-with-specific-modes\">2. Creating Temporary Files with Specific Modes</a></li>\n<li><a href=\"#3-creating-temporary-files-with-specific-file-types\">3. Creating Temporary Files with Specific File Types</a></li>\n<li><a href=\"#4-creating-temporary-directories\">4. Creating Temporary Directories</a></li>\n<li><a href=\"#5-creating-temporary-directories-with-specific-directory-types\">5. Creating Temporary Directories with Specific Directory Types</a></li>\n<li><a href=\"#6-creating-temporary-directories-with-specific-suffixes\">6. Creating Temporary Directories with Specific Suffixes</a></li>\n<li><a href=\"#7-creating-temporary-files-using-a-namedtemporaryfile-object\">7. Creating Temporary Files Using a NamedTemporaryFile Object</a></li>\n<li><a href=\"#8-creating-temporary-files-with-specific-directory-and-suffix\">8. Creating Temporary Files with Specific Directory and Suffix</a></li>\n</ol>\n<p>The <code>tempfile</code> module in Python provides a set of functions to create temporary files and directories, which are useful for testing, configuration files, or any other scenarios where you need to manage small files that do not persist beyond the current session. Below are comprehensive code examples demonstrating various functionalities of the <code>tempfile</code> module:</p>\n<h3>1. Creating Temporary Files</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tempfile\n\ndef create_temp_file():\n    # Create a temporary file and get its name\n    with tempfile.NamedTemporaryFile() as temp_file:\n        print(f&quot;Created temp file: {temp_file.name}&quot;)\n\ncreate_temp_file()\n</code></pre>\n\n<ul>\n<li><strong>Description</strong>: This example demonstrates how to create a temporary file using <code>NamedTemporaryFile</code>. The file is created in the system's default temporary directory and is automatically deleted when closed. The <code>with</code> statement ensures that the file is properly closed after its suite finishes, even if an exception is raised.</li>\n</ul>\n<h3>2. Creating Temporary Files with Specific Modes</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tempfile\n\ndef create_temp_file_with_mode():\n    # Create a temporary file in write mode\n    with tempfile.NamedTemporaryFile(mode='w+') as temp_file:\n        temp_file.write(&quot;Hello, World!&quot;)\n        temp_file.seek(0)  # Move the cursor to the beginning of the file\n        print(f&quot;Read from temp file: {temp_file.read()}&quot;)\n        print(f&quot;Created temp file: {temp_file.name}&quot;)\n\ncreate_temp_file_with_mode()\n</code></pre>\n\n<ul>\n<li><strong>Description</strong>: This example shows how to create a temporary file in write mode (<code>'w+'</code>). The <code>with</code> statement is used to ensure the file is properly closed after its suite finishes. It demonstrates writing to and reading from the file.</li>\n</ul>\n<h3>3. Creating Temporary Files with Specific File Types</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tempfile\n\ndef create_temp_file_with_suffix():\n    # Create a temporary file with a specific suffix\n    with tempfile.NamedTemporaryFile(suffix=&quot;.txt&quot;) as temp_file:\n        print(f&quot;Created temp file: {temp_file.name}&quot;)\n\ncreate_temp_file_with_suffix()\n</code></pre>\n\n<ul>\n<li><strong>Description</strong>: This example demonstrates how to create a temporary file with a specific file extension by using the <code>suffix</code> parameter in <code>NamedTemporaryFile</code>. The suffix is added to the base filename.</li>\n</ul>\n<h3>4. Creating Temporary Directories</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tempfile\n\ndef create_temp_directory():\n    # Create a temporary directory and get its name\n    with tempfile.TemporaryDirectory() as temp_dir:\n        print(f&quot;Created temp dir: {temp_dir}&quot;)\n\ncreate_temp_directory()\n</code></pre>\n\n<ul>\n<li><strong>Description</strong>: This example demonstrates how to create a temporary directory using <code>TemporaryDirectory</code>. The directory is created in the system's default temporary directory and is automatically deleted when closed. The <code>with</code> statement ensures that the directory is properly cleaned up after its suite finishes.</li>\n</ul>\n<h3>5. Creating Temporary Directories with Specific Directory Types</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tempfile\n\ndef create_temp_directory_with_dir():\n    # Create a temporary directory using an existing directory\n    with tempfile.TemporaryDirectory(dir=&quot;/path/to/existing/directory&quot;) as temp_dir:\n        print(f&quot;Created temp dir: {temp_dir}&quot;)\n\ncreate_temp_directory_with_dir()\n</code></pre>\n\n<ul>\n<li><strong>Description</strong>: This example demonstrates how to create a temporary directory in a specific directory by using the <code>dir</code> parameter in <code>TemporaryDirectory</code>. The specified directory must exist and be writable.</li>\n</ul>\n<h3>6. Creating Temporary Directories with Specific Suffixes</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tempfile\n\ndef create_temp_directory_with_suffix():\n    # Create a temporary directory with a specific suffix\n    with tempfile.TemporaryDirectory(suffix=&quot;.tmp&quot;) as temp_dir:\n        print(f&quot;Created temp dir: {temp_dir}&quot;)\n\ncreate_temp_directory_with_suffix()\n</code></pre>\n\n<ul>\n<li><strong>Description</strong>: This example demonstrates how to create a temporary directory with a specific suffix by using the <code>suffix</code> parameter in <code>TemporaryDirectory</code>. The suffix is added to the base directory name.</li>\n</ul>\n<h3>7. Creating Temporary Files Using a NamedTemporaryFile Object</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tempfile\n\ndef create_temp_file_with_namedtemporaryfile():\n    # Create a NamedTemporaryFile object\n    temp_file = tempfile.NamedTemporaryFile()\n    print(f&quot;Created temp file: {temp_file.name}&quot;)\n\n    # Manually manage the file using the file descriptor and path\n    with open(temp_file.file, 'w+') as f:\n        f.write(&quot;Hello, World!&quot;)\n        f.seek(0)\n        print(f&quot;Read from temp file: {f.read()}&quot;)\n\n# Note: The above approach is not recommended for general use due to resource management issues.\n</code></pre>\n\n<ul>\n<li><strong>Description</strong>: This example demonstrates manually managing a <code>NamedTemporaryFile</code> object by accessing its underlying file descriptor and path. It is provided as an educational note on how the <code>NamedTemporaryFile</code> class works internally.</li>\n</ul>\n<h3>8. Creating Temporary Files with Specific Directory and Suffix</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tempfile\n\ndef create_temp_file_with_dir_and_suffix():\n    # Create a temporary file in a specific directory with a specific suffix\n    with tempfile.NamedTemporaryFile(dir=&quot;/path/to/existing/directory&quot;, suffix=&quot;.log&quot;) as temp_file:\n        print(f&quot;Created temp file: {temp_file.name}&quot;)\n\ncreate_temp_file_with_dir_and_suffix()\n</code></pre>\n\n<ul>\n<li><strong>Description</strong>: This example demonstrates how to create a temporary file in a specific directory and add a specific suffix by using both the <code>dir</code> and <code>suffix</code> parameters.</li>\n</ul>\n<p>These examples cover various aspects of using the <code>tempfile</code> module, from basic file creation to more advanced scenarios involving directories. The code is designed to be clear and easy to understand, with comments explaining each step for clarity.</p>"
        }
    ],
    "File Formats": [
        {
            "filename": "configparser - Configuration file parser.md",
            "content": "<h1>configparser - Configuration file parser</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-reading-an-ini-file\">1. Reading an INI File</a></li>\n<li><a href=\"#2-writing-to-an-ini-file\">2. Writing to an INI File</a></li>\n<li><a href=\"#3-handling-default-values\">3. Handling Default Values</a></li>\n<li><a href=\"#4-using-interpolation\">4. Using Interpolation</a></li>\n<li><a href=\"#5-handling-lists\">5. Handling Lists</a></li>\n<li><a href=\"#6-handling-sections\">6. Handling Sections</a></li>\n<li><a href=\"#7-handling-comments\">7. Handling Comments</a></li>\n<li><a href=\"#8-handling-multiple-values-in-a-section\">8. Handling Multiple Values in a Section</a></li>\n<li><a href=\"#9-handling-sections-with-duplicate-keys\">9. Handling Sections with Duplicate Keys</a></li>\n</ol>\n<p>The <code>configparser</code> module in Python is used to read and write configuration files in a format similar to the Windows INI files but with more features. Below are comprehensive and well-documented examples of how to use various functionalities provided by this module.</p>\n<h3>1. Reading an INI File</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import configparser\n\n# Create a ConfigParser object\nconfig = configparser.ConfigParser()\n\n# Read the configuration file\nconfig.read('example.ini')\n\n# Access sections and values\nprint(&quot;Section:&quot;, config.sections())\nfor section in config.sections():\n    print(f&quot;Section: {section}&quot;)\n    for key, value in config.items(section):\n        print(f&quot;{key}: {value}&quot;)\n\n# Reading a specific value from a section\nusername = config.get('Database', 'user')\npassword = config.get('Database', 'password')\nprint(&quot;Username:&quot;, username)\nprint(&quot;Password:&quot;, password)\n</code></pre>\n\n<h3>2. Writing to an INI File</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import configparser\n\n# Create a ConfigParser object\nconfig = configparser.ConfigParser()\n\n# Add sections and set values\nconfig['Section1'] = {'key1': 'value1', 'key2': 'value2'}\nconfig['Section2'] = {'key3': 'value3', 'key4': 'value4'}\n\n# Write the configuration to a file\nwith open('example.ini', 'w') as configfile:\n    config.write(configfile)\n\nprint(&quot;Configuration written to example.ini&quot;)\n</code></pre>\n\n<h3>3. Handling Default Values</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import configparser\n\n# Create a ConfigParser object with default values\nconfig = configparser.ConfigParser()\nconfig['DEFAULT'] = {'timeout': '60'}\nconfig['Database'] = {'user': 'admin', 'password': 'secret'}\n\n# Read the configuration file (assuming it exists)\nconfig.read('example.ini')\n\n# Access default and specific values\ndefault_timeout = config.getint('DEFAULT', 'timeout')\ndatabase_user = config.get('Database', 'user')\nprint(&quot;Default Timeout:&quot;, default_timeout)\nprint(&quot;Database User:&quot;, database_user)\n\n# Writing the updated configuration with new defaults\nconfig['DEFAULT'] = {'timeout': '120'}\nwith open('example.ini', 'w') as configfile:\n    config.write(configfile)\n\nprint(&quot;Updated configuration written to example.ini&quot;)\n</code></pre>\n\n<h3>4. Using Interpolation</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import configparser\n\n# Create a ConfigParser object with interpolation\nconfig = configparser.ConfigParser()\nconfig['Database'] = {'username': '${USERNAME}', 'password': '${PASSWORD}'}\n\n# Example of setting environment variables for interpolation\nimport os\nos.environ['USERNAME'] = 'user123'\nos.environ['PASSWORD'] = 'pass456'\n\n# Read the configuration file with interpolation\nwith open('example.ini', 'r') as configfile:\n    config.read_file(configfile)\n\n# Access values after interpolation\ndatabase_username = config.get('Database', 'username')\ndatabase_password = config.get('Database', 'password')\n\nprint(&quot;Interpolated Username:&quot;, database_username)\nprint(&quot;Interpolated Password:&quot;, database_password)\n</code></pre>\n\n<h3>5. Handling Lists</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import configparser\n\n# Create a ConfigParser object with list values\nconfig = configparser.ConfigParser()\nconfig['Section'] = {'items': ['item1', 'item2', 'item3']}\n\n# Read the configuration file\nwith open('example.ini', 'r') as configfile:\n    config.read_file(configfile)\n\n# Access list values\nitems = config.get('Section', 'items')\nprint(&quot;Items:&quot;, items.split(', '))  # Note: This assumes a comma-separated string\n\n# Writing the updated configuration with list values\nconfig['Section']['items'] = ['item1', 'updated-item2', 'item3']\nwith open('example.ini', 'w') as configfile:\n    config.write(configfile)\n\nprint(&quot;Updated configuration written to example.ini&quot;)\n</code></pre>\n\n<h3>6. Handling Sections</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import configparser\n\n# Create a ConfigParser object and add sections\nconfig = configparser.ConfigParser()\nconfig.add_section('Section1')\nconfig['Section1']['key1'] = 'value1'\nconfig.add_section('Section2')\nconfig['Section2']['key2'] = 'value2'\n\n# Read the configuration file (assuming it exists)\nwith open('example.ini', 'r') as configfile:\n    config.read_file(configfile)\n\n# Access all sections\nall_sections = config.sections()\nprint(&quot;All Sections:&quot;, all_sections)\n\n# Removing a section\nconfig.remove_section('Section1')\nprint(&quot;After removing Section1:&quot;, config.sections())\n\n# Writing the updated configuration without removed sections\nwith open('example.ini', 'w') as configfile:\n    config.write(configfile)\n\nprint(&quot;Updated configuration written to example.ini&quot;)\n</code></pre>\n\n<h3>7. Handling Comments</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import configparser\n\n# Create a ConfigParser object and add comments\nconfig = configparser.ConfigParser()\nconfig['Section'] = {'key1': 'value1'}\nconfig.read('example.ini')\n\n# Add a comment before a section\nconfig.add_section('AnotherSection')\nconfig['AnotherSection']['key2'] = 'value2'\nconfig.set_comment('AnotherSection', 'This is a comment for AnotherSection.')\n\n# Read the configuration file (assuming it exists)\nwith open('example.ini', 'r') as configfile:\n    print(configfile.read())\n\nprint(&quot;Comments added to the configuration&quot;)\n</code></pre>\n\n<h3>8. Handling Multiple Values in a Section</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import configparser\n\n# Create a ConfigParser object and add multiple values in a section\nconfig = configparser.ConfigParser()\nconfig['Section'] = {'key1': 'value1', 'key2': 'value2'}\nconfig.set('Section', 'key3', 'value3')\n\n# Read the configuration file (assuming it exists)\nwith open('example.ini', 'r') as configfile:\n    print(configfile.read())\n\nprint(&quot;Multiple values in a section added to the configuration&quot;)\n</code></pre>\n\n<h3>9. Handling Sections with Duplicate Keys</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import configparser\n\n# Create a ConfigParser object and add sections with duplicate keys\nconfig = configparser.ConfigParser()\nconfig['Section1'] = {'key': 'value1'}\nconfig['Section2'] = {'key': 'value2'}\n\n# Read the configuration file (assuming it exists)\nwith open('example.ini', 'r') as configfile:\n    print(configfile.read())\n\nprint(&quot;Sections with duplicate keys added to the configuration&quot;)\n</code></pre>\n\n<p>These examples cover various aspects of using the <code>configparser</code> module, including reading and writing configurations, handling default values, interpolation, lists, sections, comments, and duplicate keys.</p>"
        },
        {
            "filename": "csv - CSV File Reading and Writing.md",
            "content": "<h1>csv - CSV File Reading and Writing</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-writing-a-csv-file\">Example 1: Writing a CSV file</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#example-2-reading-a-csv-file\">Example 2: Reading a CSV file</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#example-3-writing-a-csv-file-with-dictwriter\">Example 3: Writing a CSV file with DictWriter</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#example-4-reading-a-csv-file-with-dictreader\">Example 4: Reading a CSV file with DictReader</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n</ol>\n<p>Below are comprehensive examples of how to read from and write to CSV files using the <code>csv</code> module in Python 3.12. Each example includes detailed comments explaining each step.</p>\n<h3>Example 1: Writing a CSV file</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import csv\n\n# Data to be written into a CSV file\ndata = [\n    ['Name', 'Age', 'City'],\n    ['Alice', 30, 'New York'],\n    ['Bob', 25, 'Los Angeles'],\n    ['Charlie', 35, 'Chicago']\n]\n\n# Define the filename for the CSV file\nfilename = 'output.csv'\n\n# Open a file in write mode and create a CSV writer object\nwith open(filename, mode='w', newline='') as file:\n    writer = csv.writer(file)\n\n    # Write the header row\n    writer.writerow(data[0])\n\n    # Write the data rows starting from the second element of the list\n    for row in data[1:]:\n        writer.writerow(row)\n\n# Print a confirmation message\nprint(f'Data has been written to {filename}')\n</code></pre>\n\n<h3>Explanation:</h3>\n<ul>\n<li><strong>Importing <code>csv</code> module</strong>: We import the <code>csv</code> module, which provides functionality for reading and writing CSV files.</li>\n<li><strong>Data Preparation</strong>: We define a list of lists (<code>data</code>) where each inner list represents a row in the CSV file. The first inner list contains column headers.</li>\n<li><strong>File Handling</strong>: We open the specified file in write mode (<code>'w'</code>). The <code>newline=''</code> argument is used to ensure consistent line endings on different operating systems.</li>\n<li><strong>CSV Writer</strong>: We create a <code>csv.writer</code> object, which allows us to write rows of data to the CSV file.</li>\n<li><strong>Writing Headers</strong>: We use <code>writer.writerow()</code> to write the header row.</li>\n<li><strong>Writing Data Rows</strong>: We loop through the data starting from the second element and write each row using <code>writer.writerow()</code>.</li>\n<li><strong>Confirmation Message</strong>: Finally, we print a confirmation message indicating that the data has been written.</li>\n</ul>\n<h3>Example 2: Reading a CSV file</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import csv\n\n# Define the filename for the CSV file\nfilename = 'input.csv'\n\n# Open the file in read mode and create a CSV reader object\nwith open(filename, mode='r') as file:\n    reader = csv.reader(file)\n\n    # Read all rows from the CSV file\n    rows = list(reader)\n\n    # Print each row\n    for row in rows:\n        print(row)\n\n# Print the total number of rows read\nprint(f'Total number of rows: {len(rows)}')\n</code></pre>\n\n<h3>Explanation:</h3>\n<ul>\n<li><strong>Importing <code>csv</code> module</strong>: We import the <code>csv</code> module, which provides functionality for reading and writing CSV files.</li>\n<li><strong>File Handling</strong>: We open the specified file in read mode (<code>'r'</code>).</li>\n<li><strong>CSV Reader</strong>: We create a <code>csv.reader</code> object, which allows us to read rows of data from the CSV file.</li>\n<li><strong>Reading Rows</strong>: We use <code>reader.readlines()</code> to read all rows into a list. Note that this method reads the entire file into memory.</li>\n<li><strong>Printing Rows</strong>: We loop through the list and print each row.</li>\n<li><strong>Total Row Count</strong>: Finally, we print the total number of rows read.</li>\n</ul>\n<h3>Example 3: Writing a CSV file with DictWriter</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import csv\n\n# Data to be written into a CSV file using DictWriter\ndata = [\n    {'Name': 'Alice', 'Age': 30, 'City': 'New York'},\n    {'Name': 'Bob', 'Age': 25, 'City': 'Los Angeles'},\n    {'Name': 'Charlie', 'Age': 35, 'City': 'Chicago'}\n]\n\n# Define the filename for the CSV file\nfilename = 'output_dict.csv'\n\n# Open a file in write mode and create a DictWriter object\nwith open(filename, mode='w', newline='') as file:\n    fieldnames = ['Name', 'Age', 'City']  # Column names\n    writer = csv.DictWriter(file, fieldnames=fieldnames)\n\n    # Write the header row\n    writer.writeheader()\n\n    # Write the data rows\n    for row in data:\n        writer.writerow(row)\n\n# Print a confirmation message\nprint(f'Data has been written to {filename}')\n</code></pre>\n\n<h3>Explanation:</h3>\n<ul>\n<li><strong>Importing <code>csv</code> module</strong>: We import the <code>csv</code> module, which provides functionality for reading and writing CSV files.</li>\n<li><strong>Data Preparation</strong>: We define a list of dictionaries (<code>data</code>) where each dictionary represents a row in the CSV file with keys corresponding to column headers.</li>\n<li><strong>File Handling</strong>: We open the specified file in write mode (<code>'w'</code>). The <code>newline=''</code> argument is used to ensure consistent line endings on different operating systems.</li>\n<li><strong>CSV Writer</strong>: We create a <code>csv.DictWriter</code> object, which allows us to write rows of data using dictionary keys. We specify <code>fieldnames</code> as the list of column headers.</li>\n<li><strong>Writing Headers</strong>: We use <code>writer.writeheader()</code> to write the header row.</li>\n<li><strong>Writing Data Rows</strong>: We loop through the data and write each row using <code>writer.writerow()</code>.</li>\n<li><strong>Confirmation Message</strong>: Finally, we print a confirmation message indicating that the data has been written.</li>\n</ul>\n<h3>Example 4: Reading a CSV file with DictReader</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import csv\n\n# Define the filename for the CSV file\nfilename = 'input_dict.csv'\n\n# Open the file in read mode and create a DictReader object\nwith open(filename, mode='r') as file:\n    reader = csv.DictReader(file)\n\n    # Read all rows from the CSV file\n    rows = list(reader)\n\n    # Print each row\n    for row in rows:\n        print(row)\n\n# Print the total number of rows read\nprint(f'Total number of rows: {len(rows)}')\n</code></pre>\n\n<h3>Explanation:</h3>\n<ul>\n<li><strong>Importing <code>csv</code> module</strong>: We import the <code>csv</code> module, which provides functionality for reading and writing CSV files.</li>\n<li><strong>File Handling</strong>: We open the specified file in read mode (<code>'r'</code>).</li>\n<li><strong>CSV Reader</strong>: We create a <code>csv.DictReader</code> object, which allows us to read rows of data as dictionaries with keys corresponding to column headers.</li>\n<li><strong>Reading Rows</strong>: We use <code>reader.readlines()</code> to read all rows into a list. Note that this method reads the entire file into memory.</li>\n<li><strong>Printing Rows</strong>: We loop through the list and print each row.</li>\n<li><strong>Total Row Count</strong>: Finally, we print the total number of rows read.</li>\n</ul>\n<p>These examples cover basic operations for reading from and writing to CSV files using Python's <code>csv</code> module. You can expand upon these examples by handling different types of data, such as complex numbers or custom objects, by implementing appropriate serialization and deserialization logic.</p>"
        },
        {
            "filename": "netrc - netrc file processing.md",
            "content": "<h1>netrc - netrc file processing</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#explanation\">Explanation:</a></li>\n</ol>\n<p>The <code>netrc</code> module in Python provides an interface to read and write <code>.netrc</code> files, which are commonly used by applications that require network access, such as FTP clients, email clients, and web browsers. This module allows you to manage credentials securely across different network services.</p>\n<p>Below are comprehensive examples for various functionalities of the <code>netrc</code> module:</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Import the netrc module\nimport netrc\n\ndef example_1_read_netrc():\n    &quot;&quot;&quot;\n    Example 1: Reading a .netrc file and accessing credentials.\n\n    This function reads the user's default `.netrc` file and prints out the username, password,\n    and machine for each entry.\n    &quot;&quot;&quot;\n    try:\n        # Create a NetRC object to read the .netrc file\n        n = netrc.netrc()\n\n        # Iterate over all hosts in the .netrc file\n        for host, auth_info in n.hosts.items():\n            print(f&quot;Host: {host}&quot;)\n            print(f&quot;Username: {auth_info.login}&quot;)\n            print(f&quot;Password: {auth_info.password}&quot;)\n            if auth_info.account:\n                print(f&quot;Account: {auth_info.account}&quot;)\n            print('-' * 40)\n    except FileNotFoundError:\n        print(&quot;No .netrc file found.&quot;)\n    except netrc.NetrcParseError as e:\n        print(f&quot;Error parsing .netrc file: {e}&quot;)\n\ndef example_2_write_netrc():\n    &quot;&quot;&quot;\n    Example 2: Writing to a .netrc file.\n\n    This function writes new entries to the user's default `.netrc` file for a specific host.\n    &quot;&quot;&quot;\n    try:\n        # Create a NetRC object to write to the .netrc file\n        n = netrc.netrc()\n\n        # Add a new entry for a specific host\n        n.add('example.com', 'username', 'password')\n\n        # Write the changes to the .netrc file\n        with open(n.netrc_file, 'w') as f:\n            f.write(str(n))\n\n        print(&quot;Entry added to .netrc file successfully.&quot;)\n    except Exception as e:\n        print(f&quot;Error writing to .netrc file: {e}&quot;)\n\ndef example_3_update_netrc():\n    &quot;&quot;&quot;\n    Example 3: Updating an existing entry in a .netrc file.\n\n    This function updates the password for an existing host in the user's default `.netrc` file.\n    &quot;&quot;&quot;\n    try:\n        # Create a NetRC object to update the .netrc file\n        n = netrc.netrc()\n\n        # Update an existing entry for a specific host\n        n.update('example.com', 'username', new_password='newpassword')\n\n        # Write the changes to the .netrc file\n        with open(n.netrc_file, 'w') as f:\n            f.write(str(n))\n\n        print(&quot;Entry updated in .netrc file successfully.&quot;)\n    except Exception as e:\n        print(f&quot;Error updating .netrc file: {e}&quot;)\n\ndef example_4_remove_netrc():\n    &quot;&quot;&quot;\n    Example 4: Removing an entry from a .netrc file.\n\n    This function removes an entry for a specific host from the user's default `.netrc` file.\n    &quot;&quot;&quot;\n    try:\n        # Create a NetRC object to remove the entry\n        n = netrc.netrc()\n\n        # Remove an existing entry for a specific host\n        n.remove('example.com')\n\n        # Write the changes to the .netrc file\n        with open(n.netrc_file, 'w') as f:\n            f.write(str(n))\n\n        print(&quot;Entry removed from .netrc file successfully.&quot;)\n    except Exception as e:\n        print(f&quot;Error removing entry from .netrc file: {e}&quot;)\n\ndef example_5_error_handling():\n    &quot;&quot;&quot;\n    Example 5: Handling errors gracefully.\n\n    This function demonstrates how to handle potential errors that might occur when reading,\n    writing, updating, or removing entries from the `.netrc` file.\n    &quot;&quot;&quot;\n    try:\n        # Attempt to read a non-existent .netrc file\n        n = netrc.netrc('nonexistent_file')\n        print(&quot;This line will not be executed due to FileNotFoundError.&quot;)\n    except FileNotFoundError as e:\n        print(f&quot;No .netrc file found: {e}&quot;)\n\n    try:\n        # Attempt to update a non-existing host in the default .netrc file\n        n = netrc.netrc()\n        n.update('nonexistent_host', 'username', 'password')\n        with open(n.netrc_file, 'w') as f:\n            f.write(str(n))\n        print(&quot;This line will not be executed due to NetrcParseError.&quot;)\n    except netrc.NetrcParseError as e:\n        print(f&quot;Error parsing .netrc file: {e}&quot;)\n\nif __name__ == &quot;__main__&quot;:\n    example_1_read_netrc()\n    example_2_write_netrc()\n    example_3_update_netrc()\n    example_4_remove_netrc()\n    example_5_error_handling()\n</code></pre>\n\n<h3>Explanation:</h3>\n<ul>\n<li>\n<p><strong>Reading a <code>.netrc</code> file</strong>: The <code>example_1_read_netrc</code> function reads the default <code>.netrc</code> file and prints out the credentials for each host.</p>\n</li>\n<li>\n<p><strong>Writing to a <code>.netrc</code> file</strong>: The <code>example_2_write_netrc</code> function adds a new entry to the default <code>.netrc</code> file.</p>\n</li>\n<li>\n<p><strong>Updating an existing entry in a <code>.netrc</code> file</strong>: The <code>example_3_update_netrc</code> function updates the password for an existing host.</p>\n</li>\n<li>\n<p><strong>Removing an entry from a <code>.netrc</code> file</strong>: The <code>example_4_remove_netrc</code> function removes an entry for a specific host.</p>\n</li>\n<li>\n<p><strong>Error handling</strong>: The <code>example_5_error_handling</code> function demonstrates how to handle potential errors, such as non-existent files or invalid entries in the <code>.netrc</code> file.</p>\n</li>\n</ul>\n<p>These examples provide a comprehensive overview of how to use the <code>netrc</code> module in Python, covering reading, writing, updating, and removing entries from the <code>.netrc</code> file.</p>"
        },
        {
            "filename": "plistlib - Generate and parse Apple .plist files.md",
            "content": "<h1>plistlib - Generate and parse Apple .plist files</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-writing-a-simple-plist\">Example 1: Writing a Simple Plist</a></li>\n<li><a href=\"#example-2-parsing-a-plist\">Example 2: Parsing a Plist</a></li>\n<li><a href=\"#example-3-writing-a-plist-with-datetime-objects\">Example 3: Writing a Plist with DateTime Objects</a></li>\n<li><a href=\"#example-4-parsing-a-plist-with-datetime-objects\">Example 4: Parsing a Plist with DateTime Objects</a></li>\n<li><a href=\"#example-5-writing-a-plist-with-nested-lists\">Example 5: Writing a Plist with Nested Lists</a></li>\n<li><a href=\"#example-6-parsing-a-plist-with-nested-lists\">Example 6: Parsing a Plist with Nested Lists</a></li>\n<li><a href=\"#example-7-writing-a-plist-with-custom-objects\">Example 7: Writing a Plist with Custom Objects</a></li>\n<li><a href=\"#example-8-parsing-a-plist-with-custom-objects\">Example 8: Parsing a Plist with Custom Objects</a></li>\n</ol>\n<p>The <code>plistlib</code> module in Python is used to read from and write to Apple Property List (<code>.plist</code>) files, which are a common data storage format used by macOS. Below are comprehensive code examples that demonstrate how to use the <code>plistlib</code> module to generate and parse <code>.plist</code> files.</p>\n<h3>Example 1: Writing a Simple Plist</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import plistlib\n\n# Create a dictionary\ndata = {\n    &quot;Name&quot;: &quot;John Doe&quot;,\n    &quot;Age&quot;: 30,\n    &quot;IsEmployed&quot;: True,\n    &quot;Address&quot;: {\n        &quot;Street&quot;: &quot;123 Elm St&quot;,\n        &quot;City&quot;: &quot;Anytown&quot;\n    },\n    &quot;Phones&quot;: [\n        {&quot;Type&quot;: &quot;Home&quot;, &quot;Number&quot;: &quot;555-1234&quot;},\n        {&quot;Type&quot;: &quot;Work&quot;, &quot;Number&quot;: &quot;555-5678&quot;}\n    ]\n}\n\n# Write the dictionary to a .plist file\nwith open('example.plist', 'wb') as f:\n    plistlib.dump(data, f)\n\nprint(&quot;Plist has been written to example.plist&quot;)\n</code></pre>\n\n<h3>Example 2: Parsing a Plist</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import plistlib\n\n# Read a .plist file and parse it into a dictionary\nwith open('example.plist', 'rb') as f:\n    data = plistlib.load(f)\n\n# Print the parsed data\nprint(&quot;Parsed Data:&quot;)\nprint(data)\n</code></pre>\n\n<h3>Example 3: Writing a Plist with DateTime Objects</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import plistlib\nfrom datetime import datetime\n\n# Create a dictionary with a date-time object\ndata = {\n    &quot;EventDate&quot;: datetime.now(),\n    &quot;Description&quot;: &quot;This is an example event.&quot;\n}\n\n# Write the dictionary to a .plist file\nwith open('event.plist', 'wb') as f:\n    plistlib.dump(data, f)\n\nprint(&quot;Plist has been written to event.plist&quot;)\n</code></pre>\n\n<h3>Example 4: Parsing a Plist with DateTime Objects</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import plistlib\nfrom datetime import datetime\n\n# Read a .plist file and parse it into a dictionary\nwith open('event.plist', 'rb') as f:\n    data = plistlib.load(f)\n\n# Extract and print the date-time object\nevent_date = data.get('EventDate')\nif event_date:\n    print(&quot;Event Date:&quot;, event_date)\nelse:\n    print(&quot;Event Date not found.&quot;)\n</code></pre>\n\n<h3>Example 5: Writing a Plist with Nested Lists</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import plistlib\n\n# Create a dictionary with nested lists\ndata = {\n    &quot;Tasks&quot;: [\n        {&quot;Name&quot;: &quot;Complete report&quot;, &quot;DueDate&quot;: datetime.now() + timedelta(days=7)},\n        {&quot;Name&quot;: &quot;Read a book&quot;, &quot;DueDate&quot;: datetime.now() + timedelta(days=3)}\n    ]\n}\n\n# Write the dictionary to a .plist file\nwith open('tasks.plist', 'wb') as f:\n    plistlib.dump(data, f)\n\nprint(&quot;Plist has been written to tasks.plist&quot;)\n</code></pre>\n\n<h3>Example 6: Parsing a Plist with Nested Lists</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import plistlib\nfrom datetime import datetime\n\n# Read a .plist file and parse it into a dictionary\nwith open('tasks.plist', 'rb') as f:\n    data = plistlib.load(f)\n\n# Extract and print the tasks list\ntasks = data.get('Tasks')\nif tasks:\n    for task in tasks:\n        print(&quot;Task Name:&quot;, task.get('Name'))\n        print(&quot;Due Date:&quot;, task.get('DueDate'))\nelse:\n    print(&quot;Tasks not found.&quot;)\n</code></pre>\n\n<h3>Example 7: Writing a Plist with Custom Objects</h3>\n<p>If you need to handle custom objects, <code>plistlib</code> can be extended by using the <code>DataHandler</code> class. Here\u2019s an example of how to define and use a custom handler for a specific type:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import plistlib\n\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\ndef person_to_plist(person):\n    return {\n        '_type': 'Person',\n        'name': person.name,\n        'age': person.age\n    }\n\ndef person_from_plist(data):\n    if data['_type'] != 'Person':\n        raise ValueError(&quot;Invalid data type&quot;)\n    return Person(data['name'], data['age'])\n\n# Create a list of custom objects\npeople = [Person('Alice', 30), Person('Bob', 25)]\n\n# Define a custom handler for the Person class\nhandler = plistlib.DataHandler(person_to_plist, person_from_plist)\n\n# Write the list of custom objects to a .plist file using the custom handler\nwith open('people.plist', 'wb') as f:\n    plistlib.dump(people, f, data_handler=handler)\n\nprint(&quot;Plist has been written to people.plist&quot;)\n</code></pre>\n\n<h3>Example 8: Parsing a Plist with Custom Objects</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import plistlib\n\n# Define the custom handler for the Person class\ndef person_to_plist(person):\n    return {\n        '_type': 'Person',\n        'name': person.name,\n        'age': person.age\n    }\n\ndef person_from_plist(data):\n    if data['_type'] != 'Person':\n        raise ValueError(&quot;Invalid data type&quot;)\n    return Person(data['name'], data['age'])\n\n# Read a .plist file and parse it into a list of custom objects using the custom handler\nwith open('people.plist', 'rb') as f:\n    people = plistlib.load(f, data_handler=handler)\n\n# Print the parsed persons\nfor person in people:\n    print(&quot;Person Name:&quot;, person.name)\n    print(&quot;Person Age:&quot;, person.age)\n</code></pre>\n\n<p>These examples cover various aspects of using <code>plistlib</code>, from basic dictionary operations to handling custom objects and date-time objects. The code is designed to be clear, well-documented, and suitable for inclusion in official documentation.</p>"
        },
        {
            "filename": "tomllib - Parse TOML files.md",
            "content": "<h1>tomllib - Parse TOML files</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#explanation-of-examples\">Explanation of Examples</a></li>\n<li><a href=\"#example-toml-file-exampletoml\">Example TOML File (<code>example.toml</code>)</a></li>\n<li><a href=\"#usage-in-documentation\">Usage in Documentation</a></li>\n</ol>\n<p>Below are comprehensive examples of using the <code>tomllib</code> module from the Python standard library to parse TOML files. Each example is well-documented with comments explaining each step.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import tomllib\n\ndef parse_toml_file(file_path):\n    &quot;&quot;&quot;\n    Parses a TOML file and returns a dictionary representing the parsed data.\n\n    Parameters:\n    - file_path (str): The path to the TOML file to be parsed.\n\n    Returns:\n    - dict: A dictionary containing the parsed data from the TOML file.\n    &quot;&quot;&quot;\n    try:\n        # Open the TOML file in binary mode\n        with open(file_path, 'rb') as file:\n            # Parse the TOML content using tomllib.load()\n            data = tomllib.load(file)\n\n        return data\n\n    except FileNotFoundError:\n        print(f&quot;Error: The file '{file_path}' was not found.&quot;)\n        return None\n\n    except Exception as e:\n        print(f&quot;An error occurred while parsing the file: {e}&quot;)\n        return None\n\ndef main():\n    &quot;&quot;&quot;\n    Main function to demonstrate usage of parse_toml_file function.\n    &quot;&quot;&quot;\n    # Path to the TOML file\n    toml_file_path = 'example.toml'\n\n    # Parse the TOML file and store the result in a variable\n    parsed_data = parse_toml_file(toml_file_path)\n\n    # Check if parsing was successful\n    if parsed_data is not None:\n        # Print the parsed data\n        print(&quot;Parsed TOML Data:&quot;)\n        print(parsed_data)\n\nif __name__ == &quot;__main__&quot;:\n    main()\n</code></pre>\n\n<h3>Explanation of Examples</h3>\n<ol>\n<li><strong>parse_toml_file Function</strong>:</li>\n<li>This function takes a file path as an argument and attempts to open and parse the TOML file using <code>tomllib.load()</code>.</li>\n<li>The file is opened in binary mode (<code>'rb'</code>) because TOML files are encoded in UTF-8, which can include byte sequences not representable by ASCII characters.</li>\n<li>If the file is successfully parsed, the function returns a dictionary containing the parsed data.</li>\n<li>\n<p>Error handling is included to catch <code>FileNotFoundError</code> and any other exceptions that might occur during parsing.</p>\n</li>\n<li>\n<p><strong>main Function</strong>:</p>\n</li>\n<li>The <code>main</code> function demonstrates how to use the <code>parse_toml_file</code> function.</li>\n<li>It specifies the path to a TOML file (<code>example.toml</code>) and calls <code>parse_toml_file</code> with this path.</li>\n<li>If parsing is successful, it prints the parsed data.</li>\n</ol>\n<h3>Example TOML File (<code>example.toml</code>)</h3>\n<p>For demonstration purposes, here's an example of what your TOML file might look like:</p>\n<pre class=\"codehilite\"><code class=\"language-toml\"># example.toml\n\n[settings]\nname = &quot;John Doe&quot;\nage = 30\nemail = &quot;john.doe@example.com&quot;\n\n[contacts]\nwork = { phone = &quot;+1-555-1234&quot;, email = &quot;johndoe@work.com&quot; }\npersonal = { phone = &quot;+1-555-5678&quot;, email = &quot;johndoe@personal.com&quot; }\n\n# Array of items\nfruits = [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;]\n\n# Nested tables\n[settings.metadata]\ncreated_at = 2023-10-01T14:30:00Z\nupdated_at = 2023-10-05T16:45:00Z\n\n[groups]\nemployees = [&quot;Alice&quot;, &quot;Bob&quot;]\nmanagers = [&quot;Charlie&quot;]\n</code></pre>\n\n<h3>Usage in Documentation</h3>\n<p>This code can be used as a starting point for integrating TOML parsing into larger Python applications. It provides a robust and error-handled way to parse TOML files, which is useful for configuration management or reading data from external sources that use TOML format.</p>\n<p>By following the provided examples, developers can effectively utilize the <code>tomllib</code> module to handle TOML files in their projects.</p>"
        }
    ],
    "Functional Programming Modules": [
        {
            "filename": "functools - Higher-order functions and operations on callable objects.md",
            "content": "<h1>functools - Higher-order functions and operations on callable objects</h1>\n<p>The <code>functools</code> module in Python provides a collection of higher-order functions that can be used to work with callable objects, such as functions, methods, and other functions. These functions are particularly useful for optimizing or managing common patterns of code execution.</p>\n<p>Here are some comprehensive code examples demonstrating various functionalities provided by the <code>functools</code> module:</p>\n<ol>\n<li><strong><code>lru_cache</code></strong>: This decorator is used to cache the results of expensive function calls and reuse them when the same inputs occur again. It is especially useful in scenarios where a function calls itself recursively or repeatedly with the same arguments.</li>\n</ol>\n<pre class=\"codehilite\"><code class=\"language-python\">from functools import lru_cache\n\n@lru_cache(maxsize=128)  # Cache up to 128 results\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n# Example usage\nprint(factorial(5))  # Output: 120\nprint(factorial(5))  # Reuses cached result, no additional computation needed\n</code></pre>\n\n<ol>\n<li><strong><code>partial</code></strong>: This function creates a new callable from an existing callable and some fixed arguments.</li>\n</ol>\n<pre class=\"codehilite\"><code class=\"language-python\">from functools import partial\n\ndef multiply(x, y):\n    return x * y\n\n# Create a new function that multiplies by 5\nmultiply_by_5 = partial(multiply, 5)\n\n# Example usage\nprint(multiply_by_5(4))  # Output: 20\n</code></pre>\n\n<ol>\n<li><strong><code>reduce</code></strong>: This function applies a binary function cumulatively to the items of an iterable, from left to right, so as to reduce the iterable to a single output.</li>\n</ol>\n<pre class=\"codehilite\"><code class=\"language-python\">from functools import reduce\n\nnumbers = [1, 2, 3, 4, 5]\n\n# Calculate the product of all numbers in the list\nproduct = reduce(lambda x, y: x * y, numbers)\nprint(product)  # Output: 120\n</code></pre>\n\n<ol>\n<li><strong><code>cmp_to_key</code></strong>: This function converts a <code>cmp</code> callable to a key function for use with sorting functions.</li>\n</ol>\n<pre class=\"codehilite\"><code class=\"language-python\">from functools import cmp_to_key\n\ndef compare(x, y):\n    if x &gt; y:\n        return 1\n    elif x &lt; y:\n        return -1\n    else:\n        return 0\n\n# Create a key function using cmp_to_key\nkey_function = cmp_to_key(compare)\n\n# Example usage with sorted\nsorted_list = sorted([3, 1, 4, 1, 5, 9], key=key_function)\nprint(sorted_list)  # Output: [1, 1, 3, 4, 5, 9]\n</code></pre>\n\n<ol>\n<li><strong><code>total_ordering</code></strong>: This class decorator can be used to automatically implement rich comparison operations (<code>__eq__</code>, <code>__ne__</code>, <code>__lt__</code>, <code>__le__</code>, <code>__gt__</code>, and <code>__ge__</code>) based on the implementations of some of them.</li>\n</ol>\n<pre class=\"codehilite\"><code class=\"language-python\">from functools import total_ordering\n\n@total_ordering\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __eq__(self, other):\n        if not isinstance(other, Point):\n            return NotImplemented\n        return (self.x == other.x) and (self.y == other.y)\n\n    def __lt__(self, other):\n        if not isinstance(other, Point):\n            return NotImplemented\n        return (self.x, self.y) &lt; (other.x, other.y)\n\n# Example usage\npoint1 = Point(1, 2)\npoint2 = Point(1, 3)\nprint(point1 == point2)  # Output: True\nprint(point1 &lt; point2)   # Output: False\n</code></pre>\n\n<ol>\n<li><strong><code>reduce</code> with <code>operator.add</code></strong>: Using the <code>reduce</code> function along with the <code>operator.add</code> function, you can sum all elements in an iterable.</li>\n</ol>\n<pre class=\"codehilite\"><code class=\"language-python\">import operator\n\nnumbers = [1, 2, 3, 4, 5]\n\n# Calculate the sum of all numbers in the list\ntotal_sum = reduce(operator.add, numbers)\nprint(total_sum)  # Output: 15\n</code></pre>\n\n<ol>\n<li><strong><code>reduce</code> with <code>operator.mul</code></strong>: Similarly, you can use <code>operator.mul</code> to multiply all elements in an iterable.</li>\n</ol>\n<pre class=\"codehilite\"><code class=\"language-python\">import operator\n\nnumbers = [1, 2, 3, 4, 5]\n\n# Calculate the product of all numbers in the list\ntotal_product = reduce(operator.mul, numbers)\nprint(total_product)  # Output: 120\n</code></pre>\n\n<ol>\n<li><strong><code>reduce</code> with <code>operator.add</code> and a custom lambda</strong>: Using a lambda function can also be used to perform operations on iterable elements.</li>\n</ol>\n<pre class=\"codehilite\"><code class=\"language-python\">import operator\n\nnumbers = [1, 2, 3, 4, 5]\n\n# Calculate the sum of all numbers in the list using a lambda\ntotal_sum_lambda = reduce(lambda x, y: x + y, numbers)\nprint(total_sum_lambda)  # Output: 15\n</code></pre>\n\n<ol>\n<li><strong><code>reduce</code> with <code>operator.mul</code> and a custom lambda</strong>: Similarly, you can use a lambda function to multiply all elements in an iterable.</li>\n</ol>\n<pre class=\"codehilite\"><code class=\"language-python\">import operator\n\nnumbers = [1, 2, 3, 4, 5]\n\n# Calculate the product of all numbers in the list using a lambda\ntotal_product_lambda = reduce(lambda x, y: x * y, numbers)\nprint(total_product_lambda)  # Output: 120\n</code></pre>\n\n<p>These examples demonstrate various ways to use the <code>functools</code> module to enhance and optimize Python code. Each example includes comments that explain its purpose and functionality, making it easier for users to understand how these functions can be applied in different scenarios.</p>"
        },
        {
            "filename": "itertools - Functions creating iterators for efficient looping.md",
            "content": "<h1>itertools - Functions creating iterators for efficient looping</h1>\n<p>Certainly! Below are comprehensive code examples for each function in the <code>itertools</code> module, along with comments explaining each step:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import itertools\n\n# 1. accumulate(iterable[, func])\n# Returns an iterator that returns accumulated sums or results of a binary function.\n\nnumbers = [1, 2, 3, 4]\nsum_iterator = itertools.accumulate(numbers)\nprint(list(sum_iterator))  # Output: [1, 3, 6, 10]\n\nfrom operator import mul\nproduct_iterator = itertools.accumulate(numbers, mul)\nprint(list(product_iterator))  # Output: [1, 2, 6, 24]\n\n\n# 2. chain(*iterables)\n# Returns a single iterable that concatenates the input iterables.\n\nlist1 = [1, 2, 3]\nlist2 = ['a', 'b', 'c']\nchain_iterator = itertools.chain(list1, list2)\nprint(list(chain_iterator))  # Output: [1, 2, 3, 'a', 'b', 'c']\n\n\n# 3. combinations(iterable, r)\n# Returns an iterator that yields all possible combinations of the input iterable taken r at a time.\n\nelements = ['A', 'B', 'C']\ncombinations_of_2 = itertools.combinations(elements, 2)\nprint(list(combinations_of_2))  # Output: [('A', 'B'), ('A', 'C'), ('B', 'C')]\n\n\n# 4. combinations_with_replacement(iterable, r)\n# Returns an iterator that yields all possible combinations of the input iterable taken r at a time,\n# with replacement.\n\ncombinations_with_replacement_of_2 = itertools.combinations_with_replacement(elements, 2)\nprint(list(combinations_with_replacement_of_2))  # Output: [('A', 'A'), ('A', 'B'), ('A', 'C'), \n                                                  #       ('B', 'B'), ('B', 'C'), ('C', 'C')]\n\n\n# 5. combinations(iterable, r)\n# Returns an iterator that yields all possible permutations of the input iterable taken r at a time.\n\npermutations_of_2 = itertools.permutations(elements, 2)\nprint(list(permutations_of_2))  # Output: [('A', 'B'), ('A', 'C'), ('A', 'B'), ('B', 'A'), \n                                      #       ('B', 'C'), ('C', 'A')]\n\n\n# 6. cycle(iterable)\n# Returns an iterator that endlessly repeats the items from the input iterable.\n\nrepeating_iterator = itertools.cycle(elements)\nfor _ in range(10):\n    print(next(repeating_iterator))  # Output will repeat 'A', 'B', 'C' in sequence\n\n\n# 7. combinations_with_replacement(iterable, r)\n# Returns an iterator that yields all possible permutations of the input iterable taken r at a time,\n# with replacement.\n\npermutations_with_replacement_of_3 = itertools.permutations(elements, 3)\nprint(list(permutations_with_replacement_of_3))  # Output: [('A', 'B', 'C'), ('A', 'C', 'A'), \n                                                  #       ('A', 'C', 'B'), ('B', 'A', 'C'),\n                                                  #       ('B', 'C', 'A'), ('B', 'C', 'B'),\n                                                  #       ('C', 'A', 'B'), ('C', 'B', 'A'),\n                                                  #       ('C', 'B', 'C')]\n\n\n# 8. count(start=0, step=1)\n# Returns an iterator that counts from start with the specified step size.\n\ncount_iterator = itertools.count(5, 2)\nprint(list(next(count_iterator) for _ in range(5)))  # Output: [5, 7, 9, 11, 13]\n\n\n# 9. dropwhile(predicate, iterable)\n# Returns an iterator that drops elements from the input iterable as long as the predicate is true,\n# then yields remaining elements.\n\nnon_zero_elements = [0, 1, 2, 3]\ndrop_iterator = itertools.dropwhile(lambda x: x == 0, non_zero_elements)\nprint(list(drop_iterator))  # Output: [1, 2, 3]\n\n\n# 10. filterfalse(predicate, iterable)\n# Returns an iterator that filters out elements from the input iterable for which the predicate is true.\n\nodd_numbers = [1, 2, 3, 4]\nfiltered_iterator = itertools.filterfalse(lambda x: x % 2 == 0, odd_numbers)\nprint(list(filtered_iterator))  # Output: [1, 3]\n\n\n# 11. groupby(iterable[, key])\n# Returns an iterator that groups elements of the input iterable based on a specified key.\n\nstudents = [('Alice', 'A'), ('Bob', 'B'), ('Charlie', 'A'), ('David', 'C')]\nfor group_key, group in itertools.groupby(students):\n    print(f&quot;{group_key}: {list(group)}&quot;)\n# Output:\n# A: [('Alice', 'A'), ('Charlie', 'A')]\n# B: [('Bob', 'B')]\n# C: [('David', 'C')]\n\n\n# 12. islice(iterable, stop)\n# Returns an iterator that returns selected elements from the input iterable up to a specified count.\n\nsliced_iterator = itertools.islice(range(10), 5)\nprint(list(sliced_iterator))  # Output: [0, 1, 2, 3, 4]\n\n\n# 13. permutations(iterable, r=None)\n# Returns an iterator that yields all possible permutations of the input iterable taken r at a time.\n# If r is not specified, defaults to the length of the iterable.\n\npermutations_of_all_elements = itertools.permutations(elements)\nprint(list(permutations_of_all_elements))  # Output: [('A', 'B'), ('A', 'C'), ('B', 'A'),\n                                                  #       ('B', 'C'), ('C', 'A')]\n\n\n# 14. product(*iterables, repeat=1)\n# Returns an iterator that produces the Cartesian product of input iterables.\n\nelements = ['a', 'b']\nrepeated_product_iterator = itertools.product(elements, repeat=2)\nprint(list(repeated_product_iterator))  # Output: [('a', 'a'), ('a', 'b'), ('b', 'a'), ('b', 'b')]\n\n\n# 15. starmap(function, iterable)\n# Returns an iterator that applies the specified function to corresponding elements from each input iterable.\n\nnumbers = [1, 2, 3]\nsquared_numbers = itertools.starmap(pow, [(x, 2) for x in numbers])\nprint(list(squared_numbers))  # Output: [1, 4, 9]\n\n\n# 16. tee(iterable, n=2)\n# Returns n independent iterators from a single iterable.\n\noriginal_iterator = range(5)\niterator1, iterator2 = itertools.tee(original_iterator)\n\nfor i in iterator1:\n    print(i)  # Output: 0, 1, 2, 3, 4\n\nfor i in iterator2:\n    print(i)  # Output: 0, 1, 2, 3, 4\n\n\n# 17. takewhile(predicate, iterable)\n# Returns an iterator that yields elements from the input iterable as long as the predicate is true,\n# then stops.\n\npositive_numbers = [1, -2, 3, -4]\ntakewhile_iterator = itertools.takewhile(lambda x: x &gt; 0, positive_numbers)\nprint(list(takewhile_iterator))  # Output: [1, 3]\n\n\n# 18. zip_longest(*iterables, fillvalue=None)\n# Returns an iterator that aggregates elements from each of the input iterables into tuples.\n\nlist1 = [1, 2]\nlist2 = ['a', 'b', 'c']\nzipped_iterator = itertools.zip_longest(list1, list2, fillvalue='X')\nprint(list(zipped_iterator))  # Output: [(1, 'a'), (2, 'b'), ('X', 'c')]\n\n\n# 19. chain.from_iterable(iterables)\n# Similar to itertools.chain(), but takes an iterable of iterables instead.\n\nlist_of_lists = [[1, 2], [3, 4]]\nchained_iterator = itertools.chain.from_iterable(list_of_lists)\nprint(list(chained_iterator))  # Output: [1, 2, 3, 4]\n\n\n# 20. permutations(iterable, r=None)\n# Returns an iterator that yields all possible permutations of the input iterable taken r at a time.\n# If r is not specified, defaults to the length of the iterable.\n\npermutations_of_all_elements = itertools.permutations(elements)\nprint(list(permutations_of_all_elements))  # Output: [('A', 'B'), ('A', 'C'), ('B', 'A'),\n                                                  #       ('B', 'C'), ('C', 'A')]\n</code></pre>\n\n<p>These examples cover a wide range of functionalities provided by the <code>itertools</code> module, demonstrating how to use each function effectively in Python.</p>"
        },
        {
            "filename": "operator - Standard operators as functions.md",
            "content": "<h1>operator - Standard operators as functions</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-arithmetic-operations\">1. Arithmetic Operations</a></li>\n<li><a href=\"#2-comparison-operations\">2. Comparison Operations</a></li>\n<li><a href=\"#3-logical-operations\">3. Logical Operations</a></li>\n<li><a href=\"#4-identity-and-membership-operations\">4. Identity and Membership Operations</a></li>\n<li><a href=\"#5-function-and-method-calls\">5. Function and Method Calls</a></li>\n<li><a href=\"#6-attribute-access-and-item-retrieval\">6. Attribute Access and Item Retrieval</a></li>\n<li><a href=\"#7-callable-objects\">7. Callable Objects</a></li>\n<li><a href=\"#8-operator-lookup\">8. Operator Lookup</a></li>\n</ol>\n<p>The <code>operator</code> module in Python provides a convenient way to access operators as functions, which can be very useful for performing arithmetic operations, comparisons, and other operations in a more functional style. Below are comprehensive code examples for each functionality provided by the <code>operator</code> module.</p>\n<h3>1. Arithmetic Operations</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import operator\n\n# Addition\nresult = operator.add(2, 3)\nprint(&quot;Addition:&quot;, result)  # Output: Addition: 5\n\n# Subtraction\nresult = operator.sub(2, 3)\nprint(&quot;Subtraction:&quot;, result)  # Output: Subtraction: -1\n\n# Multiplication\nresult = operator.mul(2, 3)\nprint(&quot;Multiplication:&quot;, result)  # Output: Multiplication: 6\n\n# Division (floating-point division)\nresult = operator.truediv(5, 2)\nprint(&quot;Division (float):&quot;, result)  # Output: Division (float): 2.5\n\n# Floor Division\nresult = operator.floordiv(5, 2)\nprint(&quot;Floor Division:&quot;, result)  # Output: Floor Division: 2\n\n# Modulus\nresult = operator.mod(7, 3)\nprint(&quot;Modulus:&quot;, result)  # Output: Modulus: 1\n\n# Exponentiation\nresult = operator.pow(2, 3)\nprint(&quot;Exponentiation:&quot;, result)  # Output: Exponentiation: 8\n</code></pre>\n\n<h3>2. Comparison Operations</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import operator\n\n# Equal to\nresult = operator.eq(5, 5)\nprint(&quot;Equal to:&quot;, result)  # Output: Equal to: True\n\n# Not equal to\nresult = operator.ne(5, 5)\nprint(&quot;Not equal to:&quot;, result)  # Output: Not equal to: False\n\n# Less than\nresult = operator.lt(3, 5)\nprint(&quot;Less than:&quot;, result)  # Output: Less than: True\n\n# Greater than\nresult = operator.gt(5, 3)\nprint(&quot;Greater than:&quot;, result)  # Output: Greater than: True\n\n# Less than or equal to\nresult = operator.le(5, 5)\nprint(&quot;Less than or equal to:&quot;, result)  # Output: Less than or equal to: True\n\n# Greater than or equal to\nresult = operator.ge(5, 3)\nprint(&quot;Greater than or equal to:&quot;, result)  # Output: Greater than or equal to: True\n</code></pre>\n\n<h3>3. Logical Operations</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import operator\n\n# And\nresult = operator.and_(True, False)\nprint(&quot;And:&quot;, result)  # Output: And: False\n\n# Or\nresult = operator.or_(True, False)\nprint(&quot;Or:&quot;, result)  # Output: Or: True\n\n# Xor (exclusive or)\nresult = operator.xor(True, False)\nprint(&quot;Xor:&quot;, result)  # Output: Xor: True\n\n# Not\nresult = operator.not_(True)\nprint(&quot;Not:&quot;, result)  # Output: Not: False\n</code></pre>\n\n<h3>4. Identity and Membership Operations</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import operator\n\n# Identity check (is)\na = [1, 2, 3]\nb = [1, 2, 3]\nc = [4, 5, 6]\n\nresult = operator.is_(a, b)\nprint(&quot;Identity check (is):&quot;, result)  # Output: Identity check (is): True\n\nresult = operator.is_not(a, c)\nprint(&quot;Identity check (is not):&quot;, result)  # Output: Identity check (is not): True\n\n# Membership check in\nresult = operator.contains([1, 2, 3], 2)\nprint(&quot;Membership check in:&quot;, result)  # Output: Membership check in: True\n\nresult = operator.contains([1, 2, 3], 4)\nprint(&quot;Membership check in:&quot;, result)  # Output: Membership check in: False\n</code></pre>\n\n<h3>5. Function and Method Calls</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import operator\n\ndef add(a, b):\n    return a + b\n\n# Call using operator.methodcaller\nresult = operator.methodcaller('add', 2, 3)(4)\nprint(&quot;Function call:&quot;, result)  # Output: Function call: 9\n\n# Call using operator.methodcaller with multiple arguments\nresult = operator.methodcaller('split', 'hello world')([' ', '.'])\nprint(&quot;Method call (split):&quot;, result)  # Output: Method call (split): ['hello', 'world']\n</code></pre>\n\n<h3>6. Attribute Access and Item Retrieval</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import operator\n\nclass MyClass:\n    def __init__(self, value):\n        self.value = value\n\n# Attribute access using operator.attrgetter\nobj = MyClass(10)\nresult = operator.attrgetter('value')(obj)\nprint(&quot;Attribute access:&quot;, result)  # Output: Attribute access: 10\n\n# Item retrieval using operator.itemgetter\nmy_list = [1, 2, 3]\nresult = operator.itemgetter(1)(my_list)\nprint(&quot;Item retrieval:&quot;, result)  # Output: Item retrieval: 2\n</code></pre>\n\n<h3>7. Callable Objects</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import operator\n\nclass MyCallable:\n    def __call__(self, x):\n        return x * 2\n\n# Callable object usage with operator.methodcaller\ncallable_obj = MyCallable()\nresult = operator.methodcaller('__call__', 3)(callable_obj)\nprint(&quot;Callable object:&quot;, result)  # Output: Callable object: 6\n</code></pre>\n\n<h3>8. Operator Lookup</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import operator\n\n# Look up an operator by its name\nadd_operator = operator.getattr(operator, 'add')\nresult = add_operator(2, 3)\nprint(&quot;Operator lookup:&quot;, result)  # Output: Operator lookup: 5\n</code></pre>\n\n<p>These examples demonstrate the various functionalities provided by the <code>operator</code> module, covering arithmetic, comparison, logical, identity and membership checks, function and method calls, attribute access, item retrieval, callable objects, and operator lookup. Each example is clear, concise, and includes comments to explain each step for better understanding.</p>"
        }
    ],
    "Generic Operating System Services": [
        {
            "filename": "argparse - Parser for command-line options, arguments and subcommands.md",
            "content": "<h1>argparse - Parser for command-line options, arguments and subcommands</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-basic-argument-parsing\">Example 1: Basic Argument Parsing</a></li>\n<li><a href=\"#example-2-argument-parsing-with-subcommands\">Example 2: Argument Parsing with Subcommands</a></li>\n<li><a href=\"#example-3-argument-parsing-with-options\">Example 3: Argument Parsing with Options</a></li>\n<li><a href=\"#example-4-argument-parsing-with-custom-help-messages\">Example 4: Argument Parsing with Custom Help Messages</a></li>\n<li><a href=\"#example-5-argument-parsing-with-default-values\">Example 5: Argument Parsing with Default Values</a></li>\n<li><a href=\"#example-6-argument-parsing-with-required-arguments\">Example 6: Argument Parsing with Required Arguments</a></li>\n<li><a href=\"#example-7-argument-parsing-with-error-handling\">Example 7: Argument Parsing with Error Handling</a></li>\n<li><a href=\"#example-8-argument-parsing-with-descriptive-help-output\">Example 8: Argument Parsing with Descriptive Help Output</a></li>\n<li><a href=\"#example-9-argument-parsing-with-subparsers-and-aliases\">Example 9: Argument Parsing with Subparsers and Aliases</a></li>\n<li><a href=\"#example-10-argument-parsing-with-custom-type-conversion\">Example 10: Argument Parsing with Custom Type Conversion</a></li>\n</ol>\n<p>The <code>argparse</code> module in Python is a powerful tool for parsing command-line arguments and providing usage information to users. It allows you to create user-friendly interfaces that are easy to use and understand, while also enabling robust error handling and help output.</p>\n<p>Below are comprehensive code examples for various functionalities within the <code>argparse</code> module, including setting up argument parsers, defining options, handling subcommands, and displaying usage information.</p>\n<h3>Example 1: Basic Argument Parsing</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import argparse\n\n# Create an ArgumentParser object\nparser = argparse.ArgumentParser(description='Example of a basic command-line parser')\n\n# Add arguments to the parser\nparser.add_argument('--name', type=str, help='Your name')\nparser.add_argument('-v', '--verbose', action='store_true', help='Verbose mode (prints additional information)')\n\n# Parse the command-line arguments\nargs = parser.parse_args()\n\n# Print the parsed arguments\nprint(f'Hello {args.name}')\nif args.verbose:\n    print('Verbose mode is enabled.')\n</code></pre>\n\n<h3>Example 2: Argument Parsing with Subcommands</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import argparse\n\n# Create an ArgumentParser object\nparser = argparse.ArgumentParser(description='Example of a command-line parser with subcommands')\n\n# Add subparsers\nsubparsers = parser.add_subparsers(dest='command', help='Sub-command help')\n\n# Define the first subcommand\nparser_add = subparsers.add_parser('add', help='Add two numbers')\nparser_add.add_argument('a', type=float, help='First number to add')\nparser_add.add_argument('b', type=float, help='Second number to add')\n\n# Define the second subcommand\nparser_mult = subparsers.add_parser('mult', help='Multiply two numbers')\nparser_mult.add_argument('a', type=float, help='First number to multiply')\nparser_mult.add_argument('b', type=float, help='Second number to multiply')\n\n# Parse the command-line arguments\nargs = parser.parse_args()\n\n# Handle the parsed subcommand and perform operations\nif args.command == 'add':\n    result = args.a + args.b\n    print(f'The sum is {result}')\nelif args.command == 'mult':\n    result = args.a * args.b\n    print(f'The product is {result}')\n</code></pre>\n\n<h3>Example 3: Argument Parsing with Options</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import argparse\n\n# Create an ArgumentParser object\nparser = argparse.ArgumentParser(description='Example of a command-line parser with options')\n\n# Add options to the parser\nparser.add_argument('--input', type=str, required=True, help='Input file path')\nparser.add_argument('--output', type=str, default='output.txt', help='Output file path (default: output.txt)')\nparser.add_argument('-f', '--force', action='store_true', help='Force overwriting the output file if it already exists')\n\n# Parse the command-line arguments\nargs = parser.parse_args()\n\n# Process the parsed options\nprint(f'Input File: {args.input}')\nprint(f'Output File: {args.output}')\nif args.force:\n    print('Forcing overwrite of output file.')\n</code></pre>\n\n<h3>Example 4: Argument Parsing with Custom Help Messages</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import argparse\n\n# Create an ArgumentParser object\nparser = argparse.ArgumentParser(description='Example of a command-line parser with custom help messages')\n\n# Add arguments to the parser\nparser.add_argument('--name', type=str, required=True, help='Your name (mandatory)')\nparser.add_argument('-v', '--verbose', action='store_true', help='Verbose mode (optional)')\n\n# Parse the command-line arguments\nargs = parser.parse_args()\n\n# Print the parsed arguments and custom messages\nprint(f'Hello {args.name}!')\nif args.verbose:\n    print('Verbose mode is enabled.')\nelse:\n    print('Verbose mode is disabled.')\n</code></pre>\n\n<h3>Example 5: Argument Parsing with Default Values</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import argparse\n\n# Create an ArgumentParser object\nparser = argparse.ArgumentParser(description='Example of a command-line parser with default values')\n\n# Add arguments to the parser with default values\nparser.add_argument('--threshold', type=float, default=10.0, help='Threshold value (default: 10.0)')\nparser.add_argument('--debug', action='store_true', help='Enable debug mode')\n\n# Parse the command-line arguments\nargs = parser.parse_args()\n\n# Print the parsed arguments and default values\nprint(f'Threshold Value: {args.threshold}')\nif args.debug:\n    print('Debug mode is enabled.')\nelse:\n    print('Debug mode is disabled.')\n</code></pre>\n\n<h3>Example 6: Argument Parsing with Required Arguments</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import argparse\n\n# Create an ArgumentParser object\nparser = argparse.ArgumentParser(description='Example of a command-line parser with required arguments')\n\n# Add arguments to the parser as required\nparser.add_argument('--username', type=str, help='Your username (required)')\nparser.add_argument('--password', type=str, help='Your password (required)')\n\n# Parse the command-line arguments\nargs = parser.parse_args()\n\n# Print the parsed arguments\nprint(f'Username: {args.username}')\nprint(f'Password: {args.password}')\n</code></pre>\n\n<h3>Example 7: Argument Parsing with Error Handling</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import argparse\n\n# Create an ArgumentParser object\nparser = argparse.ArgumentParser(description='Example of a command-line parser with error handling')\n\n# Add an argument to the parser\nparser.add_argument('--count', type=int, help='Number of times to repeat (default: 1)')\n\n# Parse the command-line arguments\nargs = parser.parse_args()\n\ntry:\n    for _ in range(args.count):\n        print('Repeat')\nexcept TypeError as e:\n    parser.error(f'Invalid count value: {e}')\n</code></pre>\n\n<h3>Example 8: Argument Parsing with Descriptive Help Output</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import argparse\n\n# Create an ArgumentParser object\nparser = argparse.ArgumentParser(description='Example of a command-line parser with descriptive help output')\n\n# Add arguments to the parser\nparser.add_argument('--input', type=str, required=True, help='Input file path (mandatory)')\nparser.add_argument('--output', type=str, default='output.txt', help='Output file path (default: output.txt)')\n\n# Display usage information\nprint(parser.format_help())\n</code></pre>\n\n<h3>Example 9: Argument Parsing with Subparsers and Aliases</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import argparse\n\n# Create an ArgumentParser object\nparser = argparse.ArgumentParser(description='Example of a command-line parser with subcommands and aliases')\n\n# Add subparsers with aliases\nsubparsers = parser.add_subparsers(dest='command', help='Sub-command help')\n\n# Define the first subcommand with alias\nparser_add = subparsers.add_parser('add', help='Add two numbers', aliases=['sum'])\nparser_add.add_argument('a', type=float, help='First number to add')\nparser_add.add_argument('b', type=float, help='Second number to add')\n\n# Define the second subcommand with alias\nparser_mult = subparsers.add_parser('mult', help='Multiply two numbers', aliases=['product'])\nparser_mult.add_argument('a', type=float, help='First number to multiply')\nparser_mult.add_argument('b', type=float, help='Second number to multiply')\n\n# Parse the command-line arguments\nargs = parser.parse_args()\n\n# Handle the parsed subcommand and perform operations\nif args.command == 'add' or args.command == 'sum':\n    result = args.a + args.b\n    print(f'The sum is {result}')\nelif args.command == 'mult' or args.command == 'product':\n    result = args.a * args.b\n    print(f'The product is {result}')\n</code></pre>\n\n<h3>Example 10: Argument Parsing with Custom Type Conversion</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import argparse\n\n# Create an ArgumentParser object\nparser = argparse.ArgumentParser(description='Example of a command-line parser with custom type conversion')\n\n# Define a custom function for converting string to float\ndef convert_to_float(value):\n    try:\n        return float(value)\n    except ValueError as e:\n        raise argparse.ArgumentTypeError(f'Invalid number: {value}. Must be a valid float.')\n\n# Add an argument with custom type conversion\nparser.add_argument('--number', type=convert_to_float, help='Number to process')\n\n# Parse the command-line arguments\nargs = parser.parse_args()\n\n# Print the parsed argument after conversion\nprint(f'The processed number is {args.number}')\n</code></pre>\n\n<h3>Example 11: Argument Parsing with Nested Subcommands</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import argparse\n\n# Create an ArgumentParser object\nparser = argparse.ArgumentParser(description='Example of a command-line parser with nested subcommands')\n\n# Add subparsers for the main command\nmain_subparsers = parser.add_subparsers(dest='main_command', help='Main command help')\n\n# Define the first subcommand\nsubcmd1 = main_subparsers.add_parser('cmd1', help='Sub-command 1')\nsubcmd1.add_argument('--option', type=str, help='Option for sub-command 1')\n\n# Define the second subcommand\nsubcmd2 = main_subparsers.add_parser('cmd2', help='Sub-command 2')\nsubcmd2.add_argument('--arg', type=int, help='Argument for sub-command 2')\n\n# Parse the command-line arguments\nargs = parser.parse_args()\n\n# Handle the parsed subcommands and their arguments\nif args.main_command == 'cmd1':\n    print(f'Option: {args.option}')\nelif args.main_command == 'cmd2':\n    print(f'Argument: {args.arg}')\n</code></pre>\n\n<h3>Example 12: Argument Parsing with Custom Help Formatter</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import argparse\n\n# Create an ArgumentParser object\nparser = argparse.ArgumentParser(description='Example of a command-line parser with custom help formatter')\n\n# Add arguments to the parser\nparser.add_argument('--input', type=str, required=True, help='Input file path (mandatory)')\nparser.add_argument('--output', type=str, default='output.txt', help='Output file path (default: output.txt)')\n\n# Create a custom help formatter class\nclass CustomHelpFormatter(argparse.HelpFormatter):\n    def _format_usage(self, usage, actions, groups, prefix=''):\n        lines = self._split_lines(usage)\n        # Customize the help format here\n        return '\\n'.join(lines)\n\n# Set the custom help formatter\nparser.formatter_class = CustomHelpFormatter\n\n# Display usage information with custom formatting\nprint(parser.format_help())\n</code></pre>\n\n<h3>Example 13: Argument Parsing with Default Values and Aliases</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import argparse\n\n# Create an ArgumentParser object\nparser = argparse.ArgumentParser(description='Example of a command-line parser with default values and aliases')\n\n# Add arguments to the parser with default values and aliases\nparser.add_argument('--option', type=str, help='Option with default value (default: default_value)', default='default_value')\nparser.add_argument('--alias-option', type=str, help='Alias for option', alias=['aopt'])\n\n# Parse the command-line arguments\nargs = parser.parse_args()\n\n# Print the parsed arguments\nprint(f'Option: {args.option}')\nprint(f'Alias Option: {args.alias_option}')\n</code></pre>\n\n<h3>Example 14: Argument Parsing with Mutually Exclusive Groups</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import argparse\n\n# Create an ArgumentParser object\nparser = argparse.ArgumentParser(description='Example of a command-line parser with mutually exclusive groups')\n\n# Add subparsers for the main command\nmain_subparsers = parser.add_subparsers(dest='main_command', help='Main command help')\n\n# Define the first subcommand group\ngroup1 = main_subparsers.add_argument_group('Group 1')\ngroup1.add_argument('--flag1', action='store_true', help='Flag 1 in Group 1')\ngroup1.add_argument('--flag2', action='store_true', help='Flag 2 in Group 1')\n\n# Define the second subcommand group\ngroup2 = main_subparsers.add_argument_group('Group 2')\ngroup2.add_argument('--flag3', action='store_true', help='Flag 3 in Group 2')\ngroup2.add_argument('--flag4', action='store_true', help='Flag 4 in Group 2')\n\n# Parse the command-line arguments\nargs = parser.parse_args()\n\n# Handle the parsed flags from different groups\nif args.main_command == 'cmd1':\n    if args.flag1:\n        print('Flag 1 in Group 1 is set')\n    elif args.flag2:\n        print('Flag 2 in Group 1 is set')\nelif args.main_command == 'cmd2':\n    if args.flag3:\n        print('Flag 3 in Group 2 is set')\n    elif args.flag4:\n        print('Flag 4 in Group 2 is set')\n</code></pre>\n\n<h3>Example 15: Argument Parsing with Help Callbacks</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import argparse\n\n# Create an ArgumentParser object\nparser = argparse.ArgumentParser(description='Example of a command-line parser with help callbacks')\n\n# Add arguments to the parser\nparser.add_argument('--option', type=str, help='Option with callback function')\n\n# Define a callback function for the help option\ndef on_help(args):\n    print('This is a custom help message.')\n    parser.print_usage()\n\n# Set the help callback for the help option\nparser.set_defaults(on_help=on_help)\n\n# Parse the command-line arguments\nargs = parser.parse_args()\n\n# Check if the help option was used and execute the callback\nif hasattr(args, 'on_help'):\n    args.on_help()\n</code></pre>\n\n<h3>Example 16: Argument Parsing with Default Values for Mutually Exclusive Groups</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import argparse\n\n# Create an ArgumentParser object\nparser = argparse.ArgumentParser(description='Example of a command-line parser with default values for mutually exclusive groups')\n\n# Add subparsers for the main command\nmain_subparsers = parser.add_subparsers(dest='main_command', help='Main command help')\n\n# Define the first subcommand group with default value\ngroup1 = main_subparsers.add_argument_group('Group 1')\ngroup1.add_argument('--flag1', action='store_true', help='Flag 1 in Group 1 (default)')\ngroup1.add_argument('--flag2', action='store_true', help='Flag 2 in Group 1')\n\n# Define the second subcommand group with default value\ngroup2 = main_subparsers.add_argument_group('Group 2')\ngroup2.add_argument('--flag3', action='store_true', help='Flag 3 in Group 2 (default)')\ngroup2.add_argument('--flag4', action='store_true', help='Flag 4 in Group 2')\n\n# Parse the command-line arguments\nargs = parser.parse_args()\n\n# Handle the parsed flags from different groups with default values\nif args.main_command == 'cmd1':\n    if args.flag1:\n        print('Flag 1 in Group 1 is set')\n    elif args.flag2:\n        print('Flag 2 in Group 1 is set')\nelif args.main_command == 'cmd2':\n    if args.flag3:\n        print('Flag 3 in Group 2 is set (default)')\n    elif args.flag4:\n        print('Flag 4 in Group 2 is set')\n</code></pre>"
        },
        {
            "filename": "ctypes - A foreign function library for Python.md",
            "content": "<h1>ctypes - A foreign function library for Python</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-loading-a-shared-library\">Example 1: Loading a Shared Library</a></li>\n<li><a href=\"#example-2-passing-arguments-and-returning-results\">Example 2: Passing Arguments and Returning Results</a></li>\n<li><a href=\"#example-3-structures-and-pointers\">Example 3: Structures and Pointers</a></li>\n<li><a href=\"#example-4-callback-functions\">Example 4: Callback Functions</a></li>\n<li><a href=\"#example-5-using-enumerations\">Example 5: Using Enumerations</a></li>\n<li><a href=\"#example-6-dynamic-library-path\">Example 6: Dynamic Library Path</a></li>\n<li><a href=\"#example-7-loading-a-shared-library-with-multiple-symbols\">Example 7: Loading a Shared Library with Multiple Symbols</a></li>\n<li><a href=\"#example-8-passing-structures-to-functions\">Example 8: Passing Structures to Functions</a></li>\n</ol>\n<p>The <code>ctypes</code> module in Python provides C compatible data types, and allows calling functions in DLLs or shared libraries. This is useful for interfacing with native libraries and interacting with hardware.</p>\n<p>Below are some comprehensive code examples demonstrating various functionalities of the <code>ctypes</code> module:</p>\n<h3>Example 1: Loading a Shared Library</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ctypes\n\n# Load a shared library (e.g., libSystem.dylib on macOS)\nlibc = ctypes.CDLL('libSystem.dylib')\n\n# Define the argument types for the printf function\nlibc.printf.argtypes = [ctypes.c_char_p]\n\n# Define a function from the library using ctypes.CFUNCTYPE\ndef print_message(message):\n    libc.printf(b&quot;%s\\n&quot;, message.encode())\n\n# Call the function with an argument\nprint_message(&quot;Hello, World!&quot;)\n</code></pre>\n\n<h3>Example 2: Passing Arguments and Returning Results</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ctypes\n\n# Load the math library (libSystem.dylib on macOS)\nlibm = ctypes.CDLL('libSystem.dylib')\n\n# Define the return type and argument types for the sin function\nlibm.sin.restype = ctypes.c_double\nlibm.sin.argtypes = [ctypes.c_double]\n\n# Define a function from the library using ctypes.CFUNCTYPE\ndef sin(x):\n    return libm.sin(x)\n\n# Call the function with an argument and print the result\nprint(f&quot;The sine of 30 degrees (in radians) is: {sin(3.14159 / 6)}&quot;)\n</code></pre>\n\n<h3>Example 3: Structures and Pointers</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ctypes\n\n# Define a structure using ctypes.Structure\nclass Point(ctypes.Structure):\n    _fields_ = [(&quot;x&quot;, ctypes.c_int), (&quot;y&quot;, ctypes.c_int)]\n\n# Create an instance of the structure\np1 = Point(5, 10)\n\n# Print the fields of the structure\nprint(f&quot;Point p1: ({p1.x}, {p1.y})&quot;)\n\n# Define a function that takes a pointer to a struct and modifies it\ndef modify_point(point):\n    point.x += 1\n    point.y += 2\n\n# Modify the point object using the function\nmodify_point(p1)\nprint(f&quot;Modified Point p1: ({p1.x}, {p1.y})&quot;)\n</code></pre>\n\n<h3>Example 4: Callback Functions</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ctypes\n\n# Define a callback function type\ndef my_callback(arg):\n    print(&quot;Callback called with argument:&quot;, arg)\n\n# Register the callback function using ctypes.CFUNCTYPE\ncallback_type = ctypes.CFUNCTYPE(None, ctypes.c_int)\nmy_function_pointer = callback_type(my_callback)\n\n# Call the callback function from another function\ndef call_my_callback():\n    my_function_pointer(42)\n\n# Execute the callback function\ncall_my_callback()\n</code></pre>\n\n<h3>Example 5: Using Enumerations</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ctypes\n\n# Define an enumeration using ctypes.c_int and an enum class\nclass Color(ctypes.c_int):\n    RED = 1\n    GREEN = 2\n    BLUE = 3\n\n# Create a variable of the enumeration type\ncolor = Color.RED\n\n# Print the value of the enumeration\nprint(f&quot;The color is {color}&quot;)\n\n# Define a function that takes an enum and returns its name\ndef get_color_name(color):\n    color_names = {\n        Color.RED: &quot;Red&quot;,\n        Color.GREEN: &quot;Green&quot;,\n        Color.BLUE: &quot;Blue&quot;\n    }\n    return color_names[color]\n\n# Get the name of the color\nprint(f&quot;The name of the color is {get_color_name(color)}&quot;)\n</code></pre>\n\n<h3>Example 6: Dynamic Library Path</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ctypes\n\n# Load a shared library using an absolute path\nlib_path = &quot;/usr/local/lib/libyourlib.dylib&quot;\nmy_lib = ctypes.CDLL(lib_path)\n\n# Define a function from the loaded library\ndef my_lib_function():\n    result = ctypes.c_int()\n    my_lib.my_lib_function(ctypes.byref(result))\n    return result.value\n\n# Call the function and print the result\nprint(f&quot;The result of my_lib_function is: {my_lib_function()}&quot;)\n</code></pre>\n\n<h3>Example 7: Loading a Shared Library with Multiple Symbols</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ctypes\n\n# Load a shared library with multiple symbols\nlib = ctypes.CDLL('libexample.dylib')\n\n# Define functions from the library using ctypes.CFUNCTYPE\ndef function1(arg):\n    result = ctypes.c_int()\n    lib.function1(ctypes.byref(result), arg)\n    return result.value\n\ndef function2(arg):\n    result = ctypes.c_double()\n    lib.function2.argtypes = [ctypes.c_float]\n    lib.function2.restype = ctypes.c_double\n    lib.function2(ctypes.c_float(arg))\n    return result.value\n\n# Call the functions and print the results\nprint(f&quot;Result of function1(5): {function1(5)}&quot;)\nprint(f&quot;Result of function2(3.14): {function2(3.14)}&quot;)\n</code></pre>\n\n<h3>Example 8: Passing Structures to Functions</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ctypes\n\n# Define a structure using ctypes.Structure\nclass Rectangle(ctypes.Structure):\n    _fields_ = [(&quot;width&quot;, ctypes.c_int), (&quot;height&quot;, ctypes.c_int)]\n\n# Create an instance of the structure\nrect = Rectangle(10, 20)\n\n# Define a function from the library that takes a pointer to a struct\ndef print_rect(rect_ptr):\n    rect_obj = ctypes.cast(rect_ptr, ctypes.POINTER(Rectangle)).contents\n    print(f&quot;Rectangle: Width={rect_obj.width}, Height={rect_obj.height}&quot;)\n\n# Call the function with a pointer to the structure\nprint_rect(ctypes.byref(rect))\n</code></pre>\n\n<p>These examples demonstrate various ways to use the <code>ctypes</code> module for interfacing with native libraries, including loading shared libraries, passing arguments and returning results, using structures and pointers, working with callback functions, enumerations, dynamic library paths, handling multiple symbols in a single load, and passing structures to functions.</p>"
        },
        {
            "filename": "curses - Terminal handling for character-cell displays.md",
            "content": "<h1>curses - Terminal handling for character-cell displays</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-basic-terminal-screen-manipulation\">Example 1: Basic Terminal Screen Manipulation</a></li>\n<li><a href=\"#example-2-handling-keyboard-input\">Example 2: Handling Keyboard Input</a></li>\n<li><a href=\"#example-3-color-support\">Example 3: Color Support</a></li>\n<li><a href=\"#example-4-handling-mouse-events\">Example 4: Handling Mouse Events</a></li>\n<li><a href=\"#example-5-creating-a-simple-menu\">Example 5: Creating a Simple Menu</a></li>\n</ol>\n<p>The <code>curses</code> module in Python provides a way to write text-based user interfaces in a terminal. It allows you to create interactive programs that can respond to keyboard input, provide color support, and handle mouse events.</p>\n<p>Below are comprehensive examples demonstrating various functionalities of the <code>curses</code> module:</p>\n<h3>Example 1: Basic Terminal Screen Manipulation</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import curses\n\ndef main(stdscr):\n    # Clear the screen\n    stdscr.clear()\n\n    # Set the cursor position to (0, 0)\n    stdscr.move(0, 0)\n\n    # Display a message on the terminal\n    stdscr.addstr(&quot;Welcome to curses world!&quot;)\n\n    # Refresh the screen to show the changes\n    stdscr.refresh()\n\n    # Wait for user input before exiting\n    stdscr.getch()\n\n# Start the application and run the `main` function\ncurses.wrapper(main)\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- The <code>curses.wrapper()</code> function is used to initialize and clean up the curses environment. It takes a callable as an argument, which in this case is the <code>main</code> function.\n- Inside <code>main</code>, we first clear the screen using <code>stdscr.clear()</code>.\n- We then set the cursor position to (0, 0) using <code>stdscr.move(0, 0)</code>.\n- The message \"Welcome to curses world!\" is added to the screen using <code>stdscr.addstr()</code>.\n- <code>stdscr.refresh()</code> updates the display on the terminal.\n- Finally, we wait for user input using <code>stdscr.getch()</code> before exiting the program.</p>\n<h3>Example 2: Handling Keyboard Input</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import curses\n\ndef main(stdscr):\n    # Clear the screen\n    stdscr.clear()\n\n    while True:\n        # Wait for a key press\n        ch = stdscr.getch()\n\n        if ch == ord('q'):\n            break\n\n        # Display the pressed key\n        stdscr.addstr(&quot;You pressed: &quot; + chr(ch) + &quot;\\n&quot;)\n\n        # Refresh the screen to show the changes\n        stdscr.refresh()\n\n# Start the application and run the `main` function\ncurses.wrapper(main)\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- The program waits for a key press using <code>stdscr.getch()</code>.\n- If 'q' is pressed, it breaks out of the loop.\n- The pressed character (converted to its ASCII representation) is displayed on the screen.\n- The screen is refreshed after each character is printed.</p>\n<h3>Example 3: Color Support</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import curses\n\ndef main(stdscr):\n    # Initialize color support\n    if not curses.has_colors():\n        stdscr.addstr(&quot;Your terminal does not support colors.&quot;)\n        stdscr.refresh()\n        stdscr.getch()\n        return\n\n    curses.start_color()\n\n    # Define colors (0 for black, 14 for bright green)\n    curses.init_pair(1, curses.COLOR_GREEN, curses.COLOR_BLACK)\n\n    # Clear the screen\n    stdscr.clear()\n\n    while True:\n        # Move the cursor to a specific position\n        stdscr.move(0, 5)\n\n        # Display text with color\n        stdscr.addstr(&quot;This is green text!&quot;, curses.color_pair(1))\n\n        # Refresh the screen to show the changes\n        stdscr.refresh()\n\n        # Wait for a key press\n        ch = stdscr.getch()\n\n# Start the application and run the `main` function\ncurses.wrapper(main)\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- Color support is enabled using <code>curses.start_color()</code>.\n- We define a color pair where 14 is bright green on black using <code>curses.init_pair(1, curses.COLOR_GREEN, curses.COLOR_BLACK)</code>.\n- The cursor moves to position (0, 5), and the text \"This is green text!\" is displayed with the defined color.\n- The screen is refreshed after each update, and the program waits for a key press before exiting.</p>\n<h3>Example 4: Handling Mouse Events</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import curses\n\n\ndef main(stdscr):\n    # Initialize mouse support\n    stdscr.keypad(True)\n    curses.mousemask(curses.ALL_MOUSE_EVENTS)\n\n    while True:\n        # Wait for a mouse event\n        event = stdscr.getch()\n        if event == curses.KEY_MOUSE:\n            _, x, y, _, _ = curses.getmouse()\n\n            # Clear the screen\n            stdscr.clear()\n\n            # Print the coordinates of the mouse click\n            stdscr.addstr(&quot;Mouse clicked at: ({}, {})&quot;.format(x, y))\n\n            # Refresh the screen to show the changes\n            stdscr.refresh()\n\n\n# Start the application and run the `main` function\ncurses.wrapper(main)\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- Mouse support is enabled by setting the keypad and mouse mask.\n- The program waits for a mouse event using <code>stdscr.getmouse()</code>.\n- Once an event occurs, the coordinates of the mouse click are retrieved.\n- These coordinates are printed on the screen.\n- The screen is refreshed after each update.</p>\n<h3>Example 5: Creating a Simple Menu</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import curses\n\ndef main(stdscr):\n    # Clear the screen\n    stdscr.clear()\n\n    # Create a window for the menu\n    win = curses.newwin(10, 20, 3, 5)\n    win.box()\n    win.refresh()\n\n    while True:\n        # Display menu options\n        win.addstr(2, 2, &quot;1. Option 1&quot;)\n        win.addstr(4, 2, &quot;2. Option 2&quot;)\n        win.addstr(6, 2, &quot;3. Exit&quot;)\n\n        # Get user input\n        ch = win.getch()\n\n        if ch == ord('1'):\n            stdscr.addstr(0, 0, &quot;Option 1 selected&quot;)\n        elif ch == ord('2'):\n            stdscr.addstr(0, 0, &quot;Option 2 selected&quot;)\n        elif ch == ord('3'):\n            break\n\n        # Clear the menu after selection\n        win.clear()\n        win.box()\n        win.refresh()\n        stdscr.refresh()\n\n# Start the application and run the `main` function\ncurses.wrapper(main)\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- A new window is created using <code>curses.newwin()</code> with dimensions 10x20 starting at position (3, 5).\n- The window is framed with a box.\n- The menu options are displayed on this window.\n- User input is captured from the user using <code>win.getch()</code>.\n- If 'q' is pressed, the loop breaks and the program exits.\n- After an option is selected, the menu is cleared before displaying it again.</p>\n<p>These examples demonstrate basic usage of the <code>curses</code> module, covering terminal screen manipulation, keyboard input handling, color support, mouse events, and creating a simple menu. You can expand upon these examples to build more complex applications using the powerful features provided by the <code>curses</code> module.</p>"
        },
        {
            "filename": "curses.ascii - Utilities for ASCII characters.md",
            "content": "<h1>curses.ascii - Utilities for ASCII characters</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-character-classification\">Example 1: Character Classification</a></li>\n<li><a href=\"#example-2-character-conversion\">Example 2: Character Conversion</a></li>\n<li><a href=\"#example-3-character-arithmetic\">Example 3: Character Arithmetic</a></li>\n<li><a href=\"#example-4-character-equality-and-comparison\">Example 4: Character Equality and Comparison</a></li>\n<li><a href=\"#example-5-character-properties\">Example 5: Character Properties</a></li>\n<li><a href=\"#summary\">Summary</a></li>\n</ol>\n<p>The <code>curses.ascii</code> module provides a set of functions that handle ASCII character operations in a way similar to those found in the C library. This is useful for applications that require text processing and need to interact with ASCII-only data.</p>\n<p>Here are comprehensive code examples demonstrating various functionalities provided by the <code>curses.ascii</code> module:</p>\n<h3>Example 1: Character Classification</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import curses.ascii as ascii\n\ndef classify_character(character):\n    &quot;&quot;&quot;\n    Classify an ASCII character based on its properties.\n\n    :param character: A single ASCII character.\n    :return: A classification string indicating character type.\n    &quot;&quot;&quot;\n    if ascii.islower(character):\n        return &quot;Lowercase&quot;\n    elif ascii.isupper(character):\n        return &quot;Uppercase&quot;\n    elif ascii.isdigit(character):\n        return &quot;Digit&quot;\n    elif ascii.ispunct(character):\n        return &quot;Punctuation&quot;\n    elif ascii.isspace(character):\n        return &quot;Whitespace&quot;\n    else:\n        return &quot;Other&quot;\n\n# Example usage\nchar = 'A'\nclassification = classify_character(char)\nprint(f&quot;The character '{char}' is a {classification}.&quot;)\n</code></pre>\n\n<h3>Example 2: Character Conversion</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import curses.ascii as ascii\n\ndef convert_case(character):\n    &quot;&quot;&quot;\n    Convert an ASCII character to uppercase or lowercase.\n\n    :param character: A single ASCII character.\n    :return: The converted character.\n    &quot;&quot;&quot;\n    if ascii.islower(character):\n        return character.upper()\n    elif ascii.isupper(character):\n        return character.lower()\n    else:\n        return character\n\n# Example usage\nchar = 'a'\nconverted_char = convert_case(char)\nprint(f&quot;The case of '{char}' is converted to '{converted_char}'.&quot;)\n</code></pre>\n\n<h3>Example 3: Character Arithmetic</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import curses.ascii as ascii\n\ndef shift_character_right(character, amount):\n    &quot;&quot;&quot;\n    Shift an ASCII character right by a specified number of positions.\n\n    :param character: A single ASCII character.\n    :param amount: Number of positions to shift the character.\n    :return: The shifted character.\n    &quot;&quot;&quot;\n    if ascii.isalpha(character):\n        return chr((ord(character) + amount - 97) % 26 + 97)\n    else:\n        return character\n\n# Example usage\nchar = 'A'\nshift_amount = 3\nshifted_char = shift_character_right(char, shift_amount)\nprint(f&quot;The character '{char}' shifted right by {shift_amount} is '{shifted_char}'.&quot;)\n</code></pre>\n\n<h3>Example 4: Character Equality and Comparison</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import curses.ascii as ascii\n\ndef compare_characters(char1, char2):\n    &quot;&quot;&quot;\n    Compare two ASCII characters.\n\n    :param char1: First ASCII character.\n    :param char2: Second ASCII character.\n    :return: A comparison result (0 if equal, -1 if less than, 1 if greater than).\n    &quot;&quot;&quot;\n    if ord(char1) == ord(char2):\n        return 0\n    elif ord(char1) &lt; ord(char2):\n        return -1\n    else:\n        return 1\n\n# Example usage\nchar1 = 'B'\nchar2 = 'A'\ncomparison_result = compare_characters(char1, char2)\nprint(f&quot;The comparison of '{char1}' and '{char2}' is: {comparison_result}&quot;)\n</code></pre>\n\n<h3>Example 5: Character Properties</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import curses.ascii as ascii\n\ndef character_properties(character):\n    &quot;&quot;&quot;\n    Retrieve properties of an ASCII character.\n\n    :param character: A single ASCII character.\n    :return: Dictionary with properties of the character.\n    &quot;&quot;&quot;\n    return {\n        'islower': ascii.islower(character),\n        'isupper': ascii.isupper(character),\n        'isdigit': ascii.isdigit(character),\n        'ispunct': ascii.ispunct(character),\n        'isspace': ascii.isspace(character)\n    }\n\n# Example usage\nchar = ' '\nproperties = character_properties(char)\nprint(f&quot;Properties of '{char}': {properties}&quot;)\n</code></pre>\n\n<h3>Summary</h3>\n<p>These examples demonstrate how to use the <code>curses.ascii</code> module for various character operations, including classification, conversion, arithmetic shifts, comparison, and property retrieval. Each example includes comments explaining the purpose and functionality of each code snippet, making it suitable for integration into official documentation or application development projects.</p>"
        },
        {
            "filename": "curses.panel - A panel stack extension for curses.md",
            "content": "<h1>curses.panel - A panel stack extension for curses</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-creating-and-displaying-multiple-panels\">Example 1: Creating and Displaying Multiple Panels</a></li>\n<li><a href=\"#example-2-moving-a-panel\">Example 2: Moving a Panel</a></li>\n<li><a href=\"#example-3-hiding-and-showing-panels\">Example 3: Hiding and Showing Panels</a></li>\n<li><a href=\"#example-4-deleting-a-panel\">Example 4: Deleting a Panel</a></li>\n<li><a href=\"#example-5-getting-and-setting-panel-attributes\">Example 5: Getting and Setting Panel Attributes</a></li>\n<li><a href=\"#explanation\">Explanation</a></li>\n</ol>\n<p>The <code>curses.panel</code> module provides a set of functions to create, manipulate, and manage panels within a curses window. Panels are useful for organizing multiple windows on the screen and allowing them to be stacked on top of each other with z-order management. Below are comprehensive code examples demonstrating various functionalities provided by the <code>curses.panel</code> module.</p>\n<h3>Example 1: Creating and Displaying Multiple Panels</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import curses\nfrom curses import panel as p\n\ndef main(stdscr):\n    # Initialize the screen\n    stdscr.clear()\n    stdscr.refresh()\n\n    # Create a new window\n    win1 = curses.newwin(5, 10, 2, 5)\n    win2 = curses.newwin(3, 8, 7, 3)\n\n    # Create panels for each window\n    p1 = p.new_panel(win1)\n    p2 = p.new_panel(win2)\n\n    # Update the stack to bring panel1 to the front\n    p.update_panels()\n\n    # Refresh the screen with all panels\n    stdscr.refresh()\n\n    # Add some content to win1 and win2\n    stdscr.addstr(3, 6, &quot;Panel 1&quot;)\n    stdscr.addstr(5, 7, &quot;Panel 2&quot;)\n\n    # Get user input to change panel order\n    key = stdscr.getch()\n\n    if key == ord('1'):\n        p.update_panels()  # Bring win1 to the front\n        stdscr.refresh()\n    elif key == ord('2'):\n        p.update_panels()  # Bring win2 to the front\n        stdscr.refresh()\n\ncurses.wrapper(main)\n</code></pre>\n\n<h3>Example 2: Moving a Panel</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import curses\nfrom curses import panel as p\n\ndef main(stdscr):\n    # Initialize the screen\n    stdscr.clear()\n    stdscr.refresh()\n\n    # Create two windows and their panels\n    win1 = curses.newwin(5, 10, 2, 5)\n    win2 = curses.newwin(3, 8, 7, 3)\n\n    p1 = p.new_panel(win1)\n    p2 = p.new_panel(win2)\n\n    # Update the stack to bring panel1 to the front\n    p.update_panels()\n    stdscr.refresh()\n\n    # Move win1 below win2 by swapping their positions in the panel stack\n    p.swapwin(p1, p2)\n    p.update_panels()\n    stdscr.refresh()\n\ncurses.wrapper(main)\n</code></pre>\n\n<h3>Example 3: Hiding and Showing Panels</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import curses\nfrom curses import panel as p\n\ndef main(stdscr):\n    # Initialize the screen\n    stdscr.clear()\n    stdscr.refresh()\n\n    # Create two windows and their panels\n    win1 = curses.newwin(5, 10, 2, 5)\n    win2 = curses.newwin(3, 8, 7, 3)\n\n    p1 = p.new_panel(win1)\n    p2 = p.new_panel(win2)\n\n    # Update the stack to bring panel1 to the front\n    p.update_panels()\n    stdscr.refresh()\n\n    # Hide win2 by calling hide()\n    p.hide(p2)\n    p.update_panels()\n\n    # Display win2 by calling show()\n    p.show(p2)\n    p.update_panels()\n\ncurses.wrapper(main)\n</code></pre>\n\n<h3>Example 4: Deleting a Panel</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import curses\nfrom curses import panel as p\n\ndef main(stdscr):\n    # Initialize the screen\n    stdscr.clear()\n    stdscr.refresh()\n\n    # Create two windows and their panels\n    win1 = curses.newwin(5, 10, 2, 5)\n    win2 = curses.newwin(3, 8, 7, 3)\n\n    p1 = p.new_panel(win1)\n    p2 = p.new_panel(win2)\n\n    # Update the stack to bring panel1 to the front\n    p.update_panels()\n    stdscr.refresh()\n\n    # Delete win2 by calling delete_panel()\n    p.delete_panel(p2)\n    p.update_panels()\n\ncurses.wrapper(main)\n</code></pre>\n\n<h3>Example 5: Getting and Setting Panel Attributes</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import curses\nfrom curses import panel as p\n\ndef main(stdscr):\n    # Initialize the screen\n    stdscr.clear()\n    stdscr.refresh()\n\n    # Create two windows and their panels\n    win1 = curses.newwin(5, 10, 2, 5)\n    win2 = curses.newwin(3, 8, 7, 3)\n\n    p1 = p.new_panel(win1)\n    p2 = p.new_panel(win2)\n\n    # Update the stack to bring panel1 to the front\n    p.update_panels()\n    stdscr.refresh()\n\n    # Get and print the attributes of win1\n    attrs = p.get_attr(p1)\n    print(f&quot;Attributes of win1: {attrs}&quot;)\n\n    # Set new attributes for win2 (e.g., curses.A_REVERSE)\n    p.set_attr(p2, curses.A_REVERSE)\n    p.update_panels()\n    stdscr.refresh()\n\ncurses.wrapper(main)\n</code></pre>\n\n<h3>Explanation</h3>\n<ul>\n<li><strong>Initialization and Setup</strong>: The examples start by initializing the screen using <code>curses.wrapper</code>, which ensures proper cleanup after the main function exits.</li>\n<li><strong>Panel Creation</strong>: Each window is created using <code>curses.newwin</code> and then wrapped in a panel with <code>p.new_panel</code>.</li>\n<li><strong>Stack Management</strong>: Panels are updated using <code>p.update_panels()</code> to reorder them according to their stacking order.</li>\n<li><strong>User Input Handling</strong>: Examples demonstrate how to change the stack by getting user input and using <code>p.swapwin</code>, <code>p.hide</code>, <code>p.show</code>, and <code>p.delete_panel</code>.</li>\n<li><strong>Attribute Manipulation</strong>: Panels can have attributes set and retrieved using <code>p.set_attr</code> and <code>p.get_attr</code>.</li>\n</ul>\n<p>These examples cover the basic functionalities of managing panels in a curses application, from creating and showing them to managing their stacking order and attributes.</p>"
        },
        {
            "filename": "curses.textpad - Text input widget for curses programs.md",
            "content": "<h1>curses.textpad - Text input widget for curses programs</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-creating-a-simple-text-input-widget\">1. Creating a Simple Text Input Widget</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#2-adding-multiple-lines-to-the-text-input-widget\">2. Adding Multiple Lines to the Text Input Widget</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#3-handling-key-events\">3. Handling Key Events</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n</ol>\n<p>The <code>curses</code> module in Python is a powerful library for creating text-based user interfaces, which can be used to build console applications that offer interactive functionality. The <code>textpad</code> sub-module provides several classes and functions to create text input widgets that are useful in such applications.</p>\n<p>Below are comprehensive code examples for each of the functionalities provided by the <code>curses.textpad</code> module:</p>\n<h3>1. Creating a Simple Text Input Widget</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import curses\nfrom curses import textpad\n\ndef main(stdscr):\n    # Clear and refresh the screen to ensure that previous output doesn't remain\n    stdscr.clear()\n    stdscr.refresh()\n\n    # Create a window for the input field\n    height, width = 5, 20\n    win = curses.newwin(height, width, 1, 1)\n    win.keypad(True)  # Enable keypad\n\n    # Set up text attributes\n    curses.init_pair(1, curses.COLOR_RED, curses.COLOR_BLACK)\n\n    # Initialize the input field with some initial text\n    message = &quot;Enter your text:&quot;\n    input_win = textpad.Textbox(win, max_input=20)\n    win.addstr(0, 0, message, curses.color_pair(1))\n    win.refresh()\n\n    # Capture user input\n    user_input = input_win.edit()\n    if user_input:\n        win.addstr(height - 1, 1, &quot;You entered: &quot; + user_input)\n\n    # End the session and clean up\n    stdscr.keypad(False)\n    curses.endwin()\n\nif __name__ == &quot;__main__&quot;:\n    curses.wrapper(main)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ul>\n<li><strong>Initialization</strong>: The <code>curses.wrapper</code> function is used to initialize and wrap the main function, handling terminal cleanup for you.</li>\n<li><strong>Window Creation</strong>: A new window is created with a specified height and width. The keypad is enabled to capture arrow keys and other special keys.</li>\n<li><strong>Text Attributes</strong>: Colors are defined using <code>curses.init_pair</code>.</li>\n<li><strong>Textbox Creation</strong>: The <code>textpad.Textbox</code> class is used to create the input widget. It takes the window, maximum input length, and any additional options as arguments.</li>\n<li><strong>User Input</strong>: The <code>edit()</code> method of the textbox waits for user input until a newline character is entered.</li>\n<li><strong>Cleanup</strong>: The keypad is disabled and the terminal is cleaned up using <code>curses.endwin()</code>.</li>\n</ul>\n<h3>2. Adding Multiple Lines to the Text Input Widget</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import curses\nfrom curses import textpad\n\ndef main(stdscr):\n    # Clear and refresh the screen\n    stdscr.clear()\n    stdscr.refresh()\n\n    # Create a window for the input field\n    height, width = 10, 30\n    win = curses.newwin(height, width, 1, 1)\n    win.keypad(True)\n\n    # Set up text attributes\n    curses.init_pair(1, curses.COLOR_BLUE, curses.COLOR_BLACK)\n\n    # Initialize a list to store messages and their corresponding edit positions\n    messages = [&quot;Enter your first line:&quot;, &quot;Enter your second line:&quot;]\n    lines = []\n    max_input_length = 20\n\n    for i, message in enumerate(messages):\n        # Add the message to the window\n        win.addstr(i + 1, 0, message, curses.color_pair(1))\n        # Create a textbox for each line and append it to the list\n        lines.append(textpad.Textbox(win, max_input_length=max_input_length))\n\n    # Refresh the window to display the messages\n    win.refresh()\n\n    # Capture user input for each line\n    for i in range(len(messages)):\n        lines[i].edit()\n        if lines[i].value():\n            win.addstr(i + 2, 1, &quot;Line {}: {}&quot;.format(i + 1, lines[i].value()))\n\n    # End the session and clean up\n    stdscr.keypad(False)\n    curses.endwin()\n\nif __name__ == &quot;__main__&quot;:\n    curses.wrapper(main)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ul>\n<li><strong>Multiple Lines</strong>: A list of messages is created, and for each message, a textbox is added to the window.</li>\n<li><strong>User Input</strong>: The <code>edit()</code> method captures input for each textbox.</li>\n<li><strong>Displaying Results</strong>: After capturing input from all textboxes, their contents are displayed in the next row below each input field.</li>\n</ul>\n<h3>3. Handling Key Events</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import curses\nfrom curses import textpad\n\ndef main(stdscr):\n    # Clear and refresh the screen\n    stdscr.clear()\n    stdscr.refresh()\n\n    # Create a window for the input field\n    height, width = 6, 15\n    win = curses.newwin(height, width, 1, 1)\n    win.keypad(True)\n\n    # Set up text attributes\n    curses.init_pair(1, curses.COLOR_YELLOW, curses.COLOR_BLACK)\n\n    # Initialize a textbox for user input\n    message = &quot;Enter some text:&quot;\n    input_win = textpad.Textbox(win, max_input_length=15)\n    win.addstr(0, 0, message, curses.color_pair(1))\n    win.refresh()\n\n    # Capture user input\n    user_input = input_win.edit()\n    if user_input:\n        win.addstr(height - 2, 1, &quot;You entered: &quot; + user_input)\n\n    # Handle key events\n    while True:\n        key = stdscr.getch()\n        if key == ord('q'):\n            break\n        elif key == curses.KEY_UP:\n            win.addstr(0, 0, message, curses.color_pair(2))\n            win.refresh()\n\n    # End the session and clean up\n    stdscr.keypad(False)\n    curses.endwin()\n\nif __name__ == &quot;__main__&quot;:\n    curses.wrapper(main)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ul>\n<li><strong>Key Events</strong>: The <code>getch()</code> method is used to capture key events. In this example, pressing 'q' exits the program, and pressing the up arrow changes the text color.</li>\n<li><strong>Conditional Logic</strong>: A while loop checks for specific key presses and modifies the display accordingly.</li>\n</ul>\n<p>These examples demonstrate various functionalities of the <code>curses.textpad</code> module, from simple single-line input to handling multiple lines and key events. They are designed to be clear, concise, and follow best practices for inclusion in official documentation.</p>"
        },
        {
            "filename": "errno - Standard errno system symbols.md",
            "content": "<h1>errno - Standard errno system symbols</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-accessing-error-numbers\">1. Accessing Error Numbers</a></li>\n<li><a href=\"#2-handling-errors-in-io-operations\">2. Handling Errors in I/O Operations</a></li>\n<li><a href=\"#3-error-codes-for-file-operations\">3. Error Codes for File Operations</a></li>\n<li><a href=\"#4-error-codes-for-general-io-errors\">4. Error Codes for General I/O Errors</a></li>\n<li><a href=\"#5-error-codes-for-permissions-issues\">5. Error Codes for Permissions Issues</a></li>\n<li><a href=\"#6-error-codes-for-connection-issues\">6. Error Codes for Connection Issues</a></li>\n<li><a href=\"#7-error-codes-for-timeout-issues\">7. Error Codes for Timeout Issues</a></li>\n<li><a href=\"#8-error-codes-for-invalid-argument-issues\">8. Error Codes for Invalid Argument Issues</a></li>\n<li><a href=\"#9-error-codes-for-file-system-full-issues\">9. Error Codes for File System Full Issues</a></li>\n<li><a href=\"#10-error-codes-for-path-not-found-issues\">10. Error Codes for Path Not Found Issues</a></li>\n</ol>\n<p>Certainly! Below is a comprehensive set of code examples demonstrating various functionalities provided by the <code>errno</code> module in Python's standard library. These examples are designed to be clear, concise, and suitable for inclusion in official documentation.</p>\n<h3>1. Accessing Error Numbers</h3>\n<p>The <code>errno</code> module provides a dictionary-like object that maps error numbers to their corresponding symbolic names. Here's how you can access these values:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import errno\n\n# Example: Get the symbolic name for an error number\ntry:\n    with open('nonexistent_file.txt', 'r') as file:\n        pass\nexcept FileNotFoundError as e:\n    print(f&quot;FileNotFoundError: {e.errno}&quot;)  # Output: File not found (2)\n    print(errno.errorcode[e.errno])             # Output: ENOENT\n\n# Example: Accessing a specific error number directly\nprint(errno.ENOENT)                   # Output: 2\n</code></pre>\n\n<h3>2. Handling Errors in I/O Operations</h3>\n<p>The <code>errno</code> module is useful for handling errors that occur during file operations or other I/O-related tasks.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import errno\nimport os\n\ntry:\n    # Attempt to remove a non-existent directory\n    os.rmdir('nonexistent_directory')\nexcept OSError as e:\n    print(f&quot;OSError: {e.errno}&quot;)  # Output: Directory not found (2)\n    print(errno.errorcode[e.errno])     # Output: ENOTDIR\n\n# Using errno directly in an exception block\ntry:\n    with open('nonexistent_file.txt', 'r') as file:\n        pass\nexcept OSError as e:\n    if e.errno == errno.ENOENT:\n        print(&quot;File not found&quot;)\n</code></pre>\n\n<h3>3. Error Codes for File Operations</h3>\n<p>The <code>errno</code> module provides specific error codes for various file operations.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import errno\nimport os\n\ntry:\n    # Attempt to open a non-existent file\n    with open('nonexistent_file.txt', 'r') as file:\n        pass\nexcept OSError as e:\n    print(f&quot;FileNotFoundError: {e.errno}&quot;)  # Output: File not found (2)\n    if e.errno == errno.ENOENT:\n        print(&quot;File does not exist&quot;)\n\n# Error codes for specific file operations\ntry:\n    # Attempt to remove a non-empty directory\n    os.rmdir('empty_directory')\nexcept OSError as e:\n    print(f&quot;DirectoryNotEmptyError: {e.errno}&quot;)  # Output: Directory is not empty (30)\n    if e.errno == errno.ENOTEMPTY:\n        print(&quot;Directory is not empty&quot;)\n\n# Error codes for specific I/O errors\ntry:\n    with open('nonexistent_file.txt', 'r') as file:\n        pass\nexcept IOError as e:\n    print(f&quot;IOError: {e.errno}&quot;)  # Output: Input/output error (5)\n</code></pre>\n\n<h3>4. Error Codes for General I/O Errors</h3>\n<p>The <code>errno</code> module provides specific error codes for general input/output errors.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import errno\n\n# Example: Handling a general IO error\ntry:\n    file = open('nonexistent_file.txt', 'r')\n    content = file.read()\nexcept IOError as e:\n    print(f&quot;IOError: {e.errno}&quot;)  # Output: Input/output error (5)\n    if e.errno == errno.EIO:\n        print(&quot;I/O error occurred&quot;)\n\n# Handling a specific I/O error\ntry:\n    with open('nonexistent_file.txt', 'r') as file:\n        pass\nexcept IOError as e:\n    if e.errno == errno.ESPIPE:\n        print(&quot;Pipe error&quot;)\n</code></pre>\n\n<h3>5. Error Codes for Permissions Issues</h3>\n<p>The <code>errno</code> module provides specific error codes for permission issues.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import errno\nimport os\n\ntry:\n    # Attempt to write to a read-only file\n    with open('readonly_file.txt', 'w') as file:\n        file.write(&quot;Hello, World!&quot;)\nexcept IOError as e:\n    print(f&quot;IOError: {e.errno}&quot;)  # Output: Permission denied (13)\n    if e.errno == errno.EACCES:\n        print(&quot;Permission denied&quot;)\n</code></pre>\n\n<h3>6. Error Codes for Connection Issues</h3>\n<p>The <code>errno</code> module provides specific error codes for connection issues.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import socket\nimport errno\n\ntry:\n    # Attempt to connect to a non-existent server\n    sock = socket.create_connection(('nonexistent_server', 80))\nexcept ConnectionRefusedError as e:\n    print(f&quot;ConnectionRefusedError: {e.errno}&quot;)  # Output: Connection refused (111)\n    if e.errno == errno.ECONNREFUSED:\n        print(&quot;Connection refused&quot;)\n\n# Handling a specific connection error\ntry:\n    with socket.create_connection(('localhost', 80)) as sock:\n        pass\nexcept IOError as e:\n    if e.errno == errno.ETIMEDOUT:\n        print(&quot;Connection timeout&quot;)\n</code></pre>\n\n<h3>7. Error Codes for Timeout Issues</h3>\n<p>The <code>errno</code> module provides specific error codes for timeout issues.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import socket\nimport time\n\ntry:\n    # Attempt to connect to a server with a timeout\n    sock = socket.create_connection(('localhost', 80), timeout=1)\nexcept IOError as e:\n    print(f&quot;IOError: {e.errno}&quot;)  # Output: Connection timed out (110)\n    if e.errno == errno.ETIMEDOUT:\n        print(&quot;Connection timed out&quot;)\n</code></pre>\n\n<h3>8. Error Codes for Invalid Argument Issues</h3>\n<p>The <code>errno</code> module provides specific error codes for invalid argument issues.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\n\ntry:\n    # Attempt to open a file with an invalid path\n    with open('invalid:/path/to/file', 'r') as file:\n        pass\nexcept OSError as e:\n    print(f&quot;OSError: {e.errno}&quot;)  # Output: Invalid argument (22)\n    if e.errno == errno.EINVAL:\n        print(&quot;Invalid argument&quot;)\n</code></pre>\n\n<h3>9. Error Codes for File System Full Issues</h3>\n<p>The <code>errno</code> module provides specific error codes for file system full issues.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\n\ntry:\n    with open('full_file.txt', 'wb') as file:\n        # Simulate filling the disk\n        file.write(b'a' * (os.statvfs('/').f_frsize * 1024**2))\nexcept IOError as e:\n    print(f&quot;IOError: {e.errno}&quot;)  # Output: No space left on device (28)\n    if e.errno == errno.ENOSPC:\n        print(&quot;No space left on the device&quot;)\n</code></pre>\n\n<h3>10. Error Codes for Path Not Found Issues</h3>\n<p>The <code>errno</code> module provides specific error codes for path not found issues.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\n\ntry:\n    # Attempt to access a non-existent file\n    with open('nonexistent_file.txt', 'r') as file:\n        pass\nexcept FileNotFoundError as e:\n    print(f&quot;FileNotFoundError: {e.errno}&quot;)  # Output: No such file or directory (2)\n    if e.errno == errno.ENOENT:\n        print(&quot;File not found&quot;)\n</code></pre>\n\n<p>These examples demonstrate various ways to use the <code>errno</code> module to handle errors in Python, covering common I/O operations and error conditions. The code is designed to be clear, self-contained, and suitable for integration into documentation.</p>"
        },
        {
            "filename": "getpass - Portable password input.md",
            "content": "<h1>getpass - Portable password input</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#explanation\">Explanation:</a></li>\n</ol>\n<p>The <code>getpass</code> module in the Python standard library provides a way to prompt for passwords securely without echoing them on the screen. This is particularly useful for applications that need to handle user credentials, such as web servers or command-line interfaces.</p>\n<p>Here are comprehensive code examples for each functionality provided by the <code>getpass</code> module:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import getpass\n\n# Example 1: Prompting for a password without echoing it\ndef prompt_for_password():\n    &quot;&quot;&quot;\n    Prompts the user to enter their password securely.\n\n    Returns:\n        str: The password entered by the user.\n    &quot;&quot;&quot;\n    try:\n        # Use getpass.getpass() to prompt for password input and ensure it is not echoed on screen\n        password = getpass.getpass(&quot;Enter your password: &quot;)\n        return password\n    except KeyboardInterrupt:\n        print(&quot;\\nPassword entry aborted.&quot;)\n        return None\n\n# Example 2: Prompting for a password with echo enabled (used for compatibility)\ndef prompt_for_password_echo_enabled():\n    &quot;&quot;&quot;\n    Prompts the user to enter their password with echoing enabled.\n\n    Returns:\n        str: The password entered by the user.\n    &quot;&quot;&quot;\n    try:\n        # Use getpass.getpass() without any options to enable echoing\n        password = getpass.getpass(&quot;Enter your password (will be displayed): &quot;)\n        return password\n    except KeyboardInterrupt:\n        print(&quot;\\nPassword entry aborted.&quot;)\n        return None\n\n# Example 3: Prompting for a password with the `curses` module support\ndef prompt_for_password_curses():\n    &quot;&quot;&quot;\n    Prompts the user to enter their password securely using the curses library.\n\n    Returns:\n        str: The password entered by the user.\n    &quot;&quot;&quot;\n    try:\n        # Import necessary functions from getpass and curses modules\n        import curses\n\n        # Initialize a new screen session\n        stdscr = curses.initscr()\n\n        # Use getpass.getpass() with a custom prompt for curses interface\n        password = getpass.curses_getpass(&quot;Enter your password: &quot;)\n\n        # Restore the terminal to its original state\n        curses.endwin()\n\n        return password\n    except Exception as e:\n        print(f&quot;An error occurred: {e}&quot;)\n        return None\n\n# Example 4: Prompting for a username without echoing it\ndef prompt_for_username():\n    &quot;&quot;&quot;\n    Prompts the user to enter their username securely.\n\n    Returns:\n        str: The username entered by the user.\n    &quot;&quot;&quot;\n    try:\n        # Use getpass.getuser() to get the current logged-in user's username\n        username = getpass.getuser()\n        return username\n    except Exception as e:\n        print(f&quot;An error occurred: {e}&quot;)\n        return None\n\n# Example 5: Prompting for a password using different methods and combining them\ndef prompt_for_secure_password():\n    &quot;&quot;&quot;\n    Demonstrates multiple ways to prompt for a secure password.\n\n    Returns:\n        str: The password entered by the user, or None if aborted.\n    &quot;&quot;&quot;\n    try:\n        # Use getpass.getpass() in one of the above examples and print the result\n        print(&quot;Using default getpass function:&quot;)\n        password = prompt_for_password()\n\n        # Prompt for password with echo enabled\n        print(&quot;\\nPrompting with echo enabled:&quot;)\n        password_echo_enabled = prompt_for_password_echo_enabled()\n\n        # Prompt for password using curses interface\n        print(&quot;\\nPrompting using curses interface:&quot;)\n        password_curses = prompt_for_password_curses()\n\n        # Prompt for username securely\n        print(&quot;\\nPrompting for a username:&quot;)\n        username = prompt_for_username()\n\n        return (password, password_echo_enabled, password_curses, username)\n    except Exception as e:\n        print(f&quot;An error occurred: {e}&quot;)\n        return None\n\n# Example usage of the functions\nif __name__ == &quot;__main__&quot;:\n    # Call the function to demonstrate multiple password prompt methods\n    secure_passwords = prompt_for_secure_password()\n\n    if secure_passwords is not None:\n        for i, password in enumerate(secure_passwords):\n            if password is not None:\n                print(f&quot;Result {i+1}: {password}&quot;)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ul>\n<li>\n<p><strong><code>prompt_for_password()</code></strong>: Prompts the user to enter a password securely by using <code>getpass.getpass()</code>. This function handles the input without displaying it on the screen.</p>\n</li>\n<li>\n<p><strong><code>prompt_for_password_echo_enabled()</code></strong>: Demonstrates prompting for a password with echoing enabled, which is useful for compatibility reasons if needed.</p>\n</li>\n<li>\n<p><strong><code>prompt_for_password_curses()</code></strong>: Uses the <code>curses</code> library to prompt securely, providing a more modern interface. This function initializes a new screen session and then restores it after the input is collected.</p>\n</li>\n<li>\n<p><strong><code>prompt_for_username()</code></strong>: Retrieves the current logged-in user's username using <code>getpass.getuser()</code>.</p>\n</li>\n<li>\n<p><strong><code>prompt_for_secure_password()</code></strong>: Combines multiple methods of prompting for secure passwords, demonstrating their usage in one function call.</p>\n</li>\n<li>\n<p><strong>Example Usage</strong>: The script calls these functions and prints the results to demonstrate how each method works. This is useful for understanding and verifying the functionality of the <code>getpass</code> module.</p>\n</li>\n</ul>"
        },
        {
            "filename": "io - Core tools for working with streams.md",
            "content": "<h1>io - Core tools for working with streams</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-basic-file-handling\">1. Basic File Handling</a></li>\n<li><a href=\"#reading-from-a-file\">Reading from a File</a></li>\n<li><a href=\"#2-writing-to-a-file\">2. Writing to a File</a></li>\n<li><a href=\"#writing-text-to-a-file\">Writing Text to a File</a></li>\n<li><a href=\"#writing-binary-data-to-a-file\">Writing Binary Data to a File</a></li>\n<li><a href=\"#3-appending-to-a-file\">3. Appending to a File</a></li>\n<li><a href=\"#appending-text-to-a-file\">Appending Text to a File</a></li>\n<li><a href=\"#appending-binary-data-to-a-file\">Appending Binary Data to a File</a></li>\n<li><a href=\"#4-text-stream-handling\">4. Text Stream Handling</a></li>\n<li><a href=\"#reading-lines-from-a-file\">Reading Lines from a File</a></li>\n</ol>\n<p>The <code>io</code> module in Python is a core module that provides support for file-like objects, including handling different types of streams such as binary files and text files. Below are comprehensive and well-documented code examples for various functionalities within the <code>io</code> module.</p>\n<h3>1. Basic File Handling</h3>\n<h4>Reading from a File</h4>\n<p>This example demonstrates how to read data from a file using the built-in <code>open()</code> function.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Importing the io module for file handling\nimport io\n\ndef read_file(filename):\n    try:\n        # Open the file in read mode\n        with open(filename, 'r') as file:\n            # Read the content of the file\n            content = file.read()\n            print(&quot;Content of the file:&quot;)\n            print(content)\n    except FileNotFoundError:\n        print(f&quot;File '{filename}' not found.&quot;)\n    except Exception as e:\n        print(f&quot;An error occurred: {e}&quot;)\n\n# Example usage\nread_file('example.txt')\n</code></pre>\n\n<h3>2. Writing to a File</h3>\n<h4>Writing Text to a File</h4>\n<p>This example shows how to write text to a file using the <code>write()</code> method of a file object.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Importing the io module for file handling\nimport io\n\ndef write_to_file(filename, content):\n    try:\n        # Open the file in write mode (overwrites existing content)\n        with open(filename, 'w') as file:\n            # Write content to the file\n            file.write(content)\n        print(&quot;Content written successfully.&quot;)\n    except Exception as e:\n        print(f&quot;An error occurred: {e}&quot;)\n\n# Example usage\nwrite_to_file('example.txt', &quot;Hello, World!\\nThis is a test file.&quot;)\n</code></pre>\n\n<h4>Writing Binary Data to a File</h4>\n<p>This example demonstrates how to write binary data to a file using the <code>write()</code> method.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Importing the io module for file handling\nimport io\n\ndef write_binary_data(filename, binary_data):\n    try:\n        # Open the file in binary write mode (overwrites existing content)\n        with open(filename, 'wb') as file:\n            # Write binary data to the file\n            file.write(binary_data)\n        print(&quot;Binary data written successfully.&quot;)\n    except Exception as e:\n        print(f&quot;An error occurred: {e}&quot;)\n\n# Example usage\nbinary_data = b'\\x48\\x65\\x6c\\x6c\\x6f'  # ASCII representation of 'Hello'\nwrite_binary_data('example.bin', binary_data)\n</code></pre>\n\n<h3>3. Appending to a File</h3>\n<h4>Appending Text to a File</h4>\n<p>This example shows how to append text to an existing file using the <code>write()</code> method.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Importing the io module for file handling\nimport io\n\ndef append_to_file(filename, content):\n    try:\n        # Open the file in append mode (adds new content at the end)\n        with open(filename, 'a') as file:\n            # Append content to the file\n            file.write(content)\n        print(&quot;Content appended successfully.&quot;)\n    except Exception as e:\n        print(f&quot;An error occurred: {e}&quot;)\n\n# Example usage\nappend_to_file('example.txt', &quot;\\nThis is additional text.&quot;)\n</code></pre>\n\n<h4>Appending Binary Data to a File</h4>\n<p>This example demonstrates how to append binary data to an existing file using the <code>write()</code> method.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Importing the io module for file handling\nimport io\n\ndef append_binary_data(filename, binary_data):\n    try:\n        # Open the file in binary append mode (adds new data at the end)\n        with open(filename, 'ab') as file:\n            # Append binary data to the file\n            file.write(binary_data)\n        print(&quot;Binary data appended successfully.&quot;)\n    except Exception as e:\n        print(f&quot;An error occurred: {e}&quot;)\n\n# Example usage\nbinary_data = b'\\x57\\x6f\\x72\\x6c\\x64'  # ASCII representation of 'World'\nappend_binary_data('example.bin', binary_data)\n</code></pre>\n\n<h3>4. Text Stream Handling</h3>\n<h4>Reading Lines from a File</h4>\n<p>This example shows how to read lines from a file using the <code>readlines()</code> method.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Importing the io module for file handling\nimport io\n\ndef read_lines_from_file(filename):\n    try:\n        # Open the file in read mode\n        with open(filename, 'r') as file:\n            # Read all lines from the file\n            lines = file.readlines()\n            print(&quot;Lines in the file:&quot;)\n            for line in lines:\n                print(line.strip())  # Remove newline characters\n    except FileNotFoundError:\n        print(f&quot;File '{filename}' not found.&quot;)\n    except Exception as e:\n        print(f&quot;An error occurred: {e}&quot;)\n\n# Example usage\nread_lines_from_file('example.txt')\n</code></pre>\n\n<h4>Writing Lines to a File</h4>\n<p>This example shows how to write lines to a file using the <code>writelines()</code> method.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Importing the io module for file handling\nimport io\n\ndef write_lines_to_file(filename, lines):\n    try:\n        # Open the file in write mode (overwrites existing content)\n        with open(filename, 'w') as file:\n            # Write a list of lines to the file\n            file.writelines(lines)\n        print(&quot;Lines written successfully.&quot;)\n    except Exception as e:\n        print(f&quot;An error occurred: {e}&quot;)\n\n# Example usage\nlines = [&quot;Line 1\\n&quot;, &quot;Line 2\\n&quot;, &quot;Line 3&quot;]\nwrite_lines_to_file('example.txt', lines)\n</code></pre>\n\n<h3>5. Buffering</h3>\n<h4>Using Buffered I/O with <code>io.StringIO</code></h4>\n<p>This example demonstrates how to use a buffered string stream for in-memory file operations.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Importing the io module for file handling\nimport io\n\ndef buffer_string_io():\n    try:\n        # Create a StringIO object\n        buffer = io.StringIO()\n\n        # Write content to the buffer\n        buffer.write(&quot;This is a buffered string.\\n&quot;)\n        buffer.write(&quot;Another line.&quot;)\n\n        # Get the current position in the buffer\n        print(f&quot;Current position: {buffer.tell()}&quot;)\n\n        # Seek to a specific position\n        buffer.seek(0)\n\n        # Read content from the buffer\n        content = buffer.read()\n        print(&quot;Content of the buffer:&quot;)\n        print(content.strip())\n\n        # Flush the buffer and close it\n        buffer.close()\n    except Exception as e:\n        print(f&quot;An error occurred: {e}&quot;)\n\n# Example usage\nbuffer_string_io()\n</code></pre>\n\n<h3>6. BytesIO for Binary Data</h3>\n<h4>Using Buffered I/O with <code>io.BytesIO</code></h4>\n<p>This example demonstrates how to use a buffered binary stream for in-memory file operations.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Importing the io module for file handling\nimport io\n\ndef buffer_bytes_io():\n    try:\n        # Create a BytesIO object\n        buffer = io.BytesIO()\n\n        # Write binary data to the buffer\n        buffer.write(b'This is buffered binary.\\n')\n        buffer.write(b'Another line.')\n\n        # Get the current position in the buffer\n        print(f&quot;Current position: {buffer.tell()}&quot;)\n\n        # Seek to a specific position\n        buffer.seek(0)\n\n        # Read binary data from the buffer\n        content = buffer.read()\n        print(&quot;Content of the buffer:&quot;)\n        print(content.decode('utf-8'))  # Decode bytes to string\n\n        # Flush the buffer and close it\n        buffer.close()\n    except Exception as e:\n        print(f&quot;An error occurred: {e}&quot;)\n\n# Example usage\nbuffer_bytes_io()\n</code></pre>\n\n<p>These examples cover various aspects of file handling, including reading and writing text and binary data, appending to files, handling different types of streams (text and binary), and using buffered I/O with <code>StringIO</code> and <code>BytesIO</code>.</p>"
        },
        {
            "filename": "logging - Logging facility for Python.md",
            "content": "<h1>logging - Logging facility for Python</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-basic-configuration\">Example 1: Basic Configuration</a></li>\n<li><a href=\"#example-2-logging-to-files\">Example 2: Logging to Files</a></li>\n<li><a href=\"#example-3-logging-with-custom-handlers\">Example 3: Logging with Custom Handlers</a></li>\n<li><a href=\"#example-4-logging-with-formatters\">Example 4: Logging with Formatters</a></li>\n<li><a href=\"#example-5-logging-with-rotating-files\">Example 5: Logging with Rotating Files</a></li>\n<li><a href=\"#example-6-logging-with-timestamps\">Example 6: Logging with Timestamps</a></li>\n<li><a href=\"#example-7-logging-with-levels-and-filters\">Example 7: Logging with Levels and Filters</a></li>\n<li><a href=\"#example-8-logging-with-handlers-and-filters\">Example 8: Logging with Handlers and Filters</a></li>\n</ol>\n<p>The <code>logging</code> module in Python provides a flexible framework for emitting log messages from Python programs. It supports formatting, coloring, and redirection of output to various destinations. Below are comprehensive code examples that demonstrate various functionalities of the <code>logging</code> module.</p>\n<h3>Example 1: Basic Configuration</h3>\n<p>This example shows how to configure basic logging settings.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import logging\n\n# Create a logger object\nlogger = logging.getLogger('my_logger')\n\n# Set the level of the logger\nlogger.setLevel(logging.DEBUG)\n\n# Create a console handler and set its level\nch = logging.StreamHandler()\nch.setLevel(logging.INFO)\n\n# Create a formatter and add it to the handler\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nch.setFormatter(formatter)\n\n# Add the handler to the logger\nlogger.addHandler(ch)\n\n# Log messages at different levels\nlogger.debug('This is a debug message.')\nlogger.info('This is an info message.')\nlogger.warning('This is a warning message.')\nlogger.error('This is an error message.')\nlogger.critical('This is a critical message.')\n</code></pre>\n\n<h3>Example 2: Logging to Files</h3>\n<p>This example shows how to configure logging to write messages to a file.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import logging\n\n# Create a logger object\nlogger = logging.getLogger('file_logger')\nlogger.setLevel(logging.DEBUG)\n\n# Create a file handler and set its level\nfh = logging.FileHandler('app.log')\nfh.setLevel(logging.ERROR)\n\n# Create a formatter and add it to the handler\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nfh.setFormatter(formatter)\n\n# Add the handler to the logger\nlogger.addHandler(fh)\n\n# Log messages at different levels\nlogger.debug('This is a debug message.')\nlogger.info('This is an info message.')\nlogger.warning('This is a warning message.')\nlogger.error('This is an error message.')\nlogger.critical('This is a critical message.')\n</code></pre>\n\n<h3>Example 3: Logging with Custom Handlers</h3>\n<p>This example shows how to create a custom logging handler.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import logging\n\nclass MyHandler(logging.Handler):\n    def emit(self, record):\n        # Custom logic for handling log records\n        print(f&quot;Custom Handler - {record.levelname}: {record.getMessage()}&quot;)\n\n# Create a logger object\nlogger = logging.getLogger('my_handler_logger')\nlogger.setLevel(logging.DEBUG)\n\n# Create an instance of the custom handler and set its level\nch = MyHandler()\nch.setLevel(logging.ERROR)\n\n# Add the custom handler to the logger\nlogger.addHandler(ch)\n\n# Log messages at different levels\nlogger.debug('This is a debug message.')\nlogger.info('This is an info message.')\nlogger.warning('This is a warning message.')\nlogger.error('This is an error message.')\nlogger.critical('This is a critical message.')\n</code></pre>\n\n<h3>Example 4: Logging with Formatters</h3>\n<p>This example shows how to create and use different log record formats.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import logging\n\n# Create a logger object\nlogger = logging.getLogger('formatter_logger')\nlogger.setLevel(logging.DEBUG)\n\n# Create a console handler and set its level\nch = logging.StreamHandler()\nch.setLevel(logging.INFO)\n\n# Define different formatters for different levels\nformatter1 = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nformatter2 = logging.Formatter('%(name)s: %(message)s')\n\n# Add each formatter to the handler based on the log level\nif logger.level == logging.DEBUG:\n    ch.setFormatter(formatter1)\nelse:\n    ch.setFormatter(formatter2)\n\n# Add the handler to the logger\nlogger.addHandler(ch)\n\n# Log messages at different levels\nlogger.debug('This is a debug message.')\nlogger.info('This is an info message.')\nlogger.warning('This is a warning message.')\nlogger.error('This is an error message.')\nlogger.critical('This is a critical message.')\n</code></pre>\n\n<h3>Example 5: Logging with Rotating Files</h3>\n<p>This example shows how to configure logging to rotate log files.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import logging.handlers\n\n# Create a logger object\nlogger = logging.getLogger('rotating_file_logger')\nlogger.setLevel(logging.DEBUG)\n\n# Create a rotating file handler and set its level\nrh = logging.handlers.RotatingFileHandler('app.log', maxBytes=1024, backupCount=5)\nrh.setLevel(logging.INFO)\n\n# Set the formatter for the handler\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nrh.setFormatter(formatter)\n\n# Add the handler to the logger\nlogger.addHandler(rh)\n\n# Log messages at different levels\nfor i in range(10):\n    logger.debug(f'This is a debug message {i+1}.')\n</code></pre>\n\n<h3>Example 6: Logging with Timestamps</h3>\n<p>This example shows how to customize the timestamp format in log records.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import logging\n\n# Create a logger object\nlogger = logging.getLogger('timestamp_logger')\nlogger.setLevel(logging.DEBUG)\n\n# Create a console handler and set its level\nch = logging.StreamHandler()\nch.setLevel(logging.INFO)\n\n# Set a custom date format for timestamps\nformatter = logging.Formatter('%Y-%m-%d %H:%M:%S - %(name)s - %(levelname)s - %(message)s')\nch.setFormatter(formatter)\n\n# Add the handler to the logger\nlogger.addHandler(ch)\n\n# Log messages at different levels\nlogger.debug('This is a debug message.')\n</code></pre>\n\n<h3>Example 7: Logging with Levels and Filters</h3>\n<p>This example shows how to set different log levels and apply filters to log records.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import logging\n\n# Create a logger object\nlogger = logging.getLogger('level_and_filter_logger')\nlogger.setLevel(logging.DEBUG)\n\n# Create a console handler and set its level\nch = logging.StreamHandler()\nch.setLevel(logging.INFO)\n\n# Define a filter that only allows warning and error messages\nclass WarningFilter(logging.Filter):\n    def filter(self, record):\n        return record.levelno &gt;= logging.WARNING\n\n# Add the filter to the handler\nch.addFilter(WarningFilter())\n\n# Set the formatter for the handler\nformatter = logging.Formatter('%(name)s: %(message)s')\nch.setFormatter(formatter)\n\n# Add the handler to the logger\nlogger.addHandler(ch)\n\n# Log messages at different levels\nlogger.debug('This is a debug message.')\nlogger.info('This is an info message.')\nlogger.warning('This is a warning message.')\nlogger.error('This is an error message.')\nlogger.critical('This is a critical message.')\n</code></pre>\n\n<h3>Example 8: Logging with Handlers and Filters</h3>\n<p>This example demonstrates how to configure multiple handlers and apply filters.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import logging\n\n# Create a logger object\nlogger = logging.getLogger('multiple_handlers_logger')\nlogger.setLevel(logging.DEBUG)\n\n# Create console handlers for different levels\nch_info = logging.StreamHandler()\nch_info.setLevel(logging.INFO)\nch_info.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))\n\nch_error = logging.StreamHandler()\nch_error.setLevel(logging.ERROR)\nch_error.setFormatter(logging.Formatter('%(name)s: %(message)s'))\n\n# Create a file handler\nfh = logging.FileHandler('app.log')\nfh.setLevel(logging.DEBUG)\nfh.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))\n\n# Define a filter that only allows warning and error messages\nclass WarningFilter(logging.Filter):\n    def filter(self, record):\n        return record.levelno &gt;= logging.WARNING\n\n# Add filters to the handlers\nch_info.addFilter(WarningFilter())\nch_error.addFilter(WarningFilter())\n\n# Add handlers to the logger\nlogger.addHandler(ch_info)\nlogger.addHandler(ch_error)\nlogger.addHandler(fh)\n\n# Log messages at different levels\nlogger.debug('This is a debug message.')\nlogger.info('This is an info message.')\nlogger.warning('This is a warning message.')\nlogger.error('This is an error message.')\nlogger.critical('This is a critical message.')\n</code></pre>\n\n<p>These examples cover various aspects of the <code>logging</code> module, including basic configuration, logging to files, custom handlers and formatters, rotating logs, timestamp customization, levels and filters, and handling multiple handlers and filters. Each example is designed to be clear and self-contained, suitable for integration into larger projects or documentation.</p>"
        },
        {
            "filename": "logging.config - Logging configuration.md",
            "content": "<h1>logging.config - Logging configuration</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-basic-configuration-using-a-dictionary\">1. Basic Configuration using a Dictionary</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#2-configuration-using-a-json-file\">2. Configuration using a JSON File</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#3-using-a-configuration-module\">3. Using a Configuration Module</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n</ol>\n<p>Below are comprehensive code examples for the <code>logging.config</code> module in Python's standard library, along with detailed explanations of each example.</p>\n<h3>1. Basic Configuration using a Dictionary</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import logging.config\n\n# Define a dictionary configuration\nconfig = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'formatters': {\n        'simple': {\n            'format': '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n        },\n        'detail': {\n            'format': '%(asctime)s - %(name)s - %(levelname)s - '\n                      '%(message)s - %(lineno)d - %(filename)s'\n        }\n    },\n    'handlers': {\n        'console': {\n            'level': 'DEBUG',\n            'class': 'logging.StreamHandler',\n            'formatter': 'simple'\n        },\n        'file': {\n            'level': 'ERROR',\n            'class': 'logging.FileHandler',\n            'filename': 'app.log',\n            'formatter': 'detail'\n        }\n    },\n    'loggers': {\n        'my_logger': {\n            'handlers': ['console', 'file'],\n            'level': 'INFO'\n        }\n    }\n}\n\n# Apply the configuration\nlogging.config.dictConfig(config)\n\n# Get a logger instance\nlogger = logging.getLogger('my_logger')\n\n# Log messages at different levels\nlogger.debug(&quot;This is a debug message&quot;)\nlogger.info(&quot;This is an info message&quot;)\nlogger.warning(&quot;This is a warning message&quot;)\nlogger.error(&quot;This is an error message&quot;)\nlogger.critical(&quot;This is a critical message&quot;)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ul>\n<li><strong>Version</strong>: Specifies the version of the configuration format.</li>\n<li><strong>disable_existing_loggers</strong>: Determines whether existing loggers should be disabled.</li>\n<li><strong>formatters</strong>: Defines custom formatting for different log levels and formats.</li>\n<li><code>simple</code>: A basic format that includes timestamp, logger name, level, and message.</li>\n<li><code>detail</code>: An extended format that includes line number and file name in addition to the simple format.</li>\n<li><strong>handlers</strong>: Specifies where logs should be sent.</li>\n<li><code>console</code>: Sends logs to the console with a specified format.</li>\n<li><code>file</code>: Writes logs to a file with a specific format.</li>\n<li><strong>loggers</strong>: Defines which loggers should use which handlers and what level of logging they should handle.</li>\n</ul>\n<h3>2. Configuration using a JSON File</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import logging.config\n\n# Load configuration from a JSON file\nwith open('logging_config.json') as f:\n    config = json.load(f)\n\n# Apply the configuration\nlogging.config.dictConfig(config)\n\n# Get a logger instance\nlogger = logging.getLogger('my_logger')\n\n# Log messages at different levels\nlogger.debug(&quot;This is a debug message&quot;)\nlogger.info(&quot;This is an info message&quot;)\nlogger.warning(&quot;This is a warning message&quot;)\nlogger.error(&quot;This is an error message&quot;)\nlogger.critical(&quot;This is a critical message&quot;)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ul>\n<li><strong>JSON File</strong>: Contains the same configuration as above but in JSON format.</li>\n<li><strong>Loading from a file</strong>: Uses Python's built-in <code>json</code> module to load the configuration from a file.</li>\n</ul>\n<h3>3. Using a Configuration Module</h3>\n<p>Create a separate Python file, e.g., <code>logging_config.py</code>, with the following content:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import logging.config\n\n# Define a dictionary configuration\nconfig = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    # ... (same as above)\n}\n\n# Apply the configuration\nlogging.config.dictConfig(config)\n</code></pre>\n\n<p>Then, in your main application file, import and use this module:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import logging_config\n\n# Get a logger instance\nlogger = logging.getLogger('my_logger')\n\n# Log messages at different levels\nlogger.debug(&quot;This is a debug message&quot;)\nlogger.info(&quot;This is an info message&quot;)\nlogger.warning(&quot;This is a warning message&quot;)\nlogger.error(&quot;This is an error message&quot;)\nlogger.critical(&quot;This is a critical message&quot;)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ul>\n<li><strong>Separate Module</strong>: Encapsulates the configuration in a separate file, promoting code organization and reusability.</li>\n<li><strong>Importing from a module</strong>: Imports the configuration from another Python file.</li>\n</ul>\n<p>These examples demonstrate how to configure logging using different methods, including dictionary-based configuration, JSON file loading, and external configuration modules. Each example follows best practices for clarity and maintainability.</p>"
        },
        {
            "filename": "logging.handlers - Logging handlers.md",
            "content": "<h1>logging.handlers - Logging handlers</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-rotatingfilehandler\">1. RotatingFileHandler</a></li>\n<li><a href=\"#2-timedrotatingfilehandler\">2. TimedRotatingFileHandler</a></li>\n<li><a href=\"#3-sockethandler\">3. SocketHandler</a></li>\n<li><a href=\"#4-httpserverhandler\">4. HTTPServerHandler</a></li>\n<li><a href=\"#5-queuehandler-and-queuelistener\">5. QueueHandler and QueueListener</a></li>\n<li><a href=\"#6-sysloghandler\">6. SysLogHandler</a></li>\n<li><a href=\"#7-smtphandler\">7. SMTPHandler</a></li>\n<li><a href=\"#8-nullhandler\">8. NullHandler</a></li>\n<li><a href=\"#9-memoryhandler\">9. MemoryHandler</a></li>\n<li><a href=\"#10-watchedfilehandler\">10. WatchedFileHandler</a></li>\n</ol>\n<p>The <code>logging.handlers</code> module in Python provides various handler classes that can be used to send log records to different destinations, such as files, network sockets, or remote servers. Below are comprehensive code examples for each handler class provided by this module. These examples demonstrate how to configure and use these handlers effectively.</p>\n<h3>1. RotatingFileHandler</h3>\n<p>This handler rotates the log file after a certain size is reached.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import logging\nfrom logging.handlers import RotatingFileHandler\n\n# Create a logger object\nlogger = logging.getLogger('RotatingFileHandlerExample')\nlogger.setLevel(logging.DEBUG)\n\n# Define the log file name and max bytes for rotation\nfile_handler = RotatingFileHandler('example.log', maxBytes=1048576, backupCount=3)\nfile_handler.setLevel(logging.INFO)  # Only INFO and above level logs will be handled by this handler\n\n# Create a formatter and set it for the file handler\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nfile_handler.setFormatter(formatter)\n\n# Add the file handler to the logger\nlogger.addHandler(file_handler)\n\n# Log some messages\nfor i in range(10):\n    logger.debug(f'This is a debug message {i}')\n    logger.info(f'This is an info message {i}')\n</code></pre>\n\n<h3>2. TimedRotatingFileHandler</h3>\n<p>This handler rotates the log file on a schedule, e.g., daily.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import logging\nfrom logging.handlers import TimedRotatingFileHandler\n\n# Create a logger object\nlogger = logging.getLogger('TimedRotatingFileHandlerExample')\nlogger.setLevel(logging.DEBUG)\n\n# Define the log file name and rotation interval\nfile_handler = TimedRotatingFileHandler('example.log', when='midnight', interval=1, backupCount=3)\nfile_handler.setLevel(logging.WARNING)  # Only WARNING and above level logs will be handled by this handler\n\n# Create a formatter and set it for the file handler\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nfile_handler.setFormatter(formatter)\n\n# Add the file handler to the logger\nlogger.addHandler(file_handler)\n\n# Log some messages\nfor i in range(10):\n    logger.debug(f'This is a debug message {i}')\n    logger.info(f'This is an info message {i}')\n    logger.warning(f'This is a warning message {i}')\n</code></pre>\n\n<h3>3. SocketHandler</h3>\n<p>This handler sends log records to a TCP server.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import logging\nfrom logging.handlers import SocketHandler\n\n# Create a logger object\nlogger = logging.getLogger('SocketHandlerExample')\nlogger.setLevel(logging.DEBUG)\n\n# Define the host and port of the server\nserver_address = ('localhost', 12345)\nsocket_handler = SocketHandler(server_address)\n\n# Create a formatter and set it for the socket handler\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nsocket_handler.setFormatter(formatter)\n\n# Add the socket handler to the logger\nlogger.addHandler(socket_handler)\n\n# Log some messages\nfor i in range(10):\n    logger.debug(f'This is a debug message {i}')\n    logger.info(f'This is an info message {i}')\n    logger.warning(f'This is a warning message {i}')\n</code></pre>\n\n<h3>4. HTTPServerHandler</h3>\n<p>This handler sends log records to an HTTP server.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import logging\nfrom logging.handlers import HTTPServerHandler\n\n# Create a logger object\nlogger = logging.getLogger('HTTPServerHandlerExample')\nlogger.setLevel(logging.DEBUG)\n\n# Define the URL of the server\nurl = 'http://localhost:8080'\nhttp_handler = HTTPServerHandler(url, handler_class=None)\n\n# Create a formatter and set it for the HTTP server handler\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nhttp_handler.setFormatter(formatter)\n\n# Add the HTTP server handler to the logger\nlogger.addHandler(http_handler)\n\n# Log some messages\nfor i in range(10):\n    logger.debug(f'This is a debug message {i}')\n    logger.info(f'This is an info message {i}')\n    logger.warning(f'This is a warning message {i}')\n</code></pre>\n\n<h3>5. QueueHandler and QueueListener</h3>\n<p>These handlers use a queue to send log records to multiple destinations.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import logging\nfrom logging.handlers import QueueHandler, QueueListener\n\n# Create a logger object\nlogger = logging.getLogger('QueueHandlerExample')\nlogger.setLevel(logging.DEBUG)\n\n# Create a queue\nqueue = logging.Queue()\n\n# Create a file handler and add it to the queue\nfile_handler = RotatingFileHandler('example.log', maxBytes=1048576, backupCount=3)\nqueue.addHandler(file_handler)\n\n# Create a socket handler and add it to the queue\nsocket_handler = SocketHandler(('localhost', 12345))\nqueue.addHandler(socket_handler)\n\n# Create a logger that uses the queue\nlogger_queue = logging.getLogger('QueueLogger')\nlogger_queue.setLevel(logging.INFO)\nlogger_queue.addHandler(QueueHandler(queue))\n\n# Log some messages\nfor i in range(10):\n    logger.debug(f'This is a debug message {i}')\n    logger.info(f'This is an info message {i}')\n\n# Start the queue listener to process the queue and send log records\nwith QueueListener(queue, file_handler, socket_handler) as listener:\n    listener.start()\n</code></pre>\n\n<h3>6. SysLogHandler</h3>\n<p>This handler sends log records to a syslog server.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import logging\nfrom logging.handlers import SysLogHandler\n\n# Create a logger object\nlogger = logging.getLogger('SysLogHandlerExample')\nlogger.setLevel(logging.DEBUG)\n\n# Define the address of the syslog server\nsyslog_handler = SysLogHandler(address=('localhost', 514))\n\n# Create a formatter and set it for the syslog handler\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nsyslog_handler.setFormatter(formatter)\n\n# Add the syslog handler to the logger\nlogger.addHandler(syslog_handler)\n\n# Log some messages\nfor i in range(10):\n    logger.debug(f'This is a debug message {i}')\n    logger.info(f'This is an info message {i}')\n</code></pre>\n\n<h3>7. SMTPHandler</h3>\n<p>This handler sends log records via email.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import logging\nfrom logging.handlers import SMTPHandler\n\n# Create a logger object\nlogger = logging.getLogger('SMTPHandlerExample')\nlogger.setLevel(logging.DEBUG)\n\n# Define the SMTP server and port, and sender and recipient email addresses\nsmtp_handler = SMTPHandler(mailhost=('localhost', 25), fromaddr='sender@example.com', toaddrs=['recipient@example.com'])\n\n# Create a formatter and set it for the SMTP handler\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nsmtp_handler.setFormatter(formatter)\n\n# Add the SMTP handler to the logger\nlogger.addHandler(smtp_handler)\n\n# Log some messages\nfor i in range(10):\n    logger.debug(f'This is a debug message {i}')\n    logger.info(f'This is an info message {i}')\n</code></pre>\n\n<h3>8. NullHandler</h3>\n<p>This handler does not do anything with the log records.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import logging\n\n# Create a logger object\nlogger = logging.getLogger('NullHandlerExample')\nlogger.setLevel(logging.DEBUG)\n\n# Add a null handler to the logger\nlogger.addHandler(logging.NullHandler())\n\n# Log some messages\nfor i in range(10):\n    logger.debug(f'This is a debug message {i}')\n    logger.info(f'This is an info message {i}')\n</code></pre>\n\n<h3>9. MemoryHandler</h3>\n<p>This handler stores log records in memory and sends them when the queue size reaches a certain limit.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import logging\nfrom logging.handlers import MemoryHandler\n\n# Create a logger object\nlogger = logging.getLogger('MemoryHandlerExample')\nlogger.setLevel(logging.DEBUG)\n\n# Define the maximum number of log records to store in memory\nmemory_handler = MemoryHandler(50)  # Store up to 50 log records in memory\n\n# Add a file handler and add it to the memory handler\nfile_handler = RotatingFileHandler('example.log', maxBytes=1048576, backupCount=3)\nmemory_handler.addHandler(file_handler)\n\n# Create a formatter and set it for the memory handler\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nmemory_handler.setFormatter(formatter)\n\n# Add the memory handler to the logger\nlogger.addHandler(memory_handler)\n\n# Log some messages\nfor i in range(10):\n    logger.debug(f'This is a debug message {i}')\n    logger.info(f'This is an info message {i}')\n</code></pre>\n\n<h3>10. WatchedFileHandler</h3>\n<p>This handler watches a file and logs all new lines as they are written.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import logging\nfrom logging.handlers import WatchedFileHandler\n\n# Create a logger object\nlogger = logging.getLogger('WatchedFileHandlerExample')\nlogger.setLevel(logging.DEBUG)\n\n# Define the log file name to watch\nwatched_file_handler = WatchedFileHandler('example.log')\n\n# Create a formatter and set it for the watched file handler\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nwatched_file_handler.setFormatter(formatter)\n\n# Add the watched file handler to the logger\nlogger.addHandler(watched_file_handler)\n\n# Log some messages\nfor i in range(10):\n    logger.debug(f'This is a debug message {i}')\n    logger.info(f'This is an info message {i}')\n</code></pre>\n\n<p>These examples demonstrate various logging handlers and their use cases. You can choose the appropriate handler based on your specific needs, such as logging to files, sending emails, or processing log records in memory. Each example includes setting up a logger, adding handlers, and configuring the formatter for clarity. Adjust the configuration parameters as needed for your environment.</p>"
        },
        {
            "filename": "os - Miscellaneous operating system interfaces.md",
            "content": "<h1>os - Miscellaneous operating system interfaces</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-accessing-environment-variables\">1. Accessing Environment Variables</a></li>\n<li><a href=\"#2-changing-the-current-working-directory\">2. Changing the Current Working Directory</a></li>\n<li><a href=\"#3-listing-directory-contents\">3. Listing Directory Contents</a></li>\n<li><a href=\"#4-creating-a-new-directory\">4. Creating a New Directory</a></li>\n<li><a href=\"#5-removing-a-directory\">5. Removing a Directory</a></li>\n<li><a href=\"#6-executing-a-command\">6. Executing a Command</a></li>\n<li><a href=\"#7-getting-current-working-directory\">7. Getting Current Working Directory</a></li>\n<li><a href=\"#8-checking-if-a-file-or-directory-exists\">8. Checking if a File or Directory Exists</a></li>\n<li><a href=\"#9-getting-file-or-directory-information\">9. Getting File or Directory Information</a></li>\n<li><a href=\"#10-making-a-directory-with-permissions\">10. Making a Directory with Permissions</a></li>\n</ol>\n<p>The <code>os</code> module in Python provides a portable way of using operating system dependent functionality, such as reading or writing to the filesystem, executing programs, and accessing environment variables. Below are comprehensive examples demonstrating various functionalities of the <code>os</code> module.</p>\n<h3>1. Accessing Environment Variables</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\n\ndef print_environment_variables():\n    &quot;&quot;&quot;\n    This function prints all environment variables.\n    &quot;&quot;&quot;\n    for name, value in os.environ.items():\n        print(f&quot;{name}: {value}&quot;)\n\nprint_environment_variables()\n</code></pre>\n\n<h3>2. Changing the Current Working Directory</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\n\ndef change_directory(path):\n    &quot;&quot;&quot;\n    This function changes the current working directory to the specified path.\n\n    Args:\n    path (str): The directory path to which the current working directory should be changed.\n    &quot;&quot;&quot;\n    try:\n        os.chdir(path)\n        print(f&quot;Changed directory to: {os.getcwd()}&quot;)\n    except FileNotFoundError:\n        print(&quot;Directory not found.&quot;)\n\nchange_directory('/path/to/directory')\n</code></pre>\n\n<h3>3. Listing Directory Contents</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\n\ndef list_directory_contents(directory):\n    &quot;&quot;&quot;\n    This function lists all contents of the specified directory, including files and subdirectories.\n\n    Args:\n    directory (str): The path to the directory whose contents should be listed.\n    &quot;&quot;&quot;\n    try:\n        contents = os.listdir(directory)\n        print(f&quot;Contents of {directory}:&quot;)\n        for item in contents:\n            print(item)\n    except FileNotFoundError:\n        print(&quot;Directory not found.&quot;)\n\nlist_directory_contents('/path/to/directory')\n</code></pre>\n\n<h3>4. Creating a New Directory</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\n\ndef create_directory(path):\n    &quot;&quot;&quot;\n    This function creates a new directory at the specified path.\n\n    Args:\n    path (str): The path where the new directory should be created.\n    &quot;&quot;&quot;\n    try:\n        os.makedirs(path)\n        print(f&quot;Directory {path} created successfully.&quot;)\n    except FileExistsError:\n        print(&quot;Directory already exists.&quot;)\n\ncreate_directory('/path/to/new/directory')\n</code></pre>\n\n<h3>5. Removing a Directory</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\n\ndef remove_directory(directory):\n    &quot;&quot;&quot;\n    This function removes the specified directory.\n\n    Args:\n    directory (str): The path to the directory that should be removed.\n    &quot;&quot;&quot;\n    try:\n        os.rmdir(directory)\n        print(f&quot;Directory {directory} removed successfully.&quot;)\n    except FileNotFoundError:\n        print(&quot;Directory not found.&quot;)\n    except OSError as e:\n        if e.errno == 30:  # Directory is not empty\n            print(&quot;Directory is not empty. Please remove all contents first.&quot;)\n        else:\n            print(f&quot;An error occurred: {e}&quot;)\n\nremove_directory('/path/to/directory')\n</code></pre>\n\n<h3>6. Executing a Command</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\n\ndef execute_command(command):\n    &quot;&quot;&quot;\n    This function executes the specified command in a shell.\n\n    Args:\n    command (str): The command to be executed.\n    &quot;&quot;&quot;\n    try:\n        result = os.system(command)\n        print(f&quot;Command executed with result: {result}&quot;)\n    except Exception as e:\n        print(f&quot;An error occurred: {e}&quot;)\n\nexecute_command('ls -l')\n</code></pre>\n\n<h3>7. Getting Current Working Directory</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\n\ndef get_current_working_directory():\n    &quot;&quot;&quot;\n    This function returns the current working directory.\n    &quot;&quot;&quot;\n    return os.getcwd()\n\ncurrent_dir = get_current_working_directory()\nprint(f&quot;Current working directory: {current_dir}&quot;)\n</code></pre>\n\n<h3>8. Checking if a File or Directory Exists</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\n\ndef check_file_or_directory_exists(path):\n    &quot;&quot;&quot;\n    This function checks if a file or directory exists at the specified path.\n\n    Args:\n    path (str): The path to the file or directory.\n\n    Returns:\n    bool: True if it exists, False otherwise.\n    &quot;&quot;&quot;\n    return os.path.exists(path)\n\nexists = check_file_or_directory_exists('/path/to/file')\nprint(f&quot;File/Directory exists: {exists}&quot;)\n</code></pre>\n\n<h3>9. Getting File or Directory Information</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\n\ndef get_file_info(file_path):\n    &quot;&quot;&quot;\n    This function retrieves information about a file or directory.\n\n    Args:\n    file_path (str): The path to the file or directory.\n\n    Returns:\n    dict: A dictionary containing various attributes of the file or directory.\n    &quot;&quot;&quot;\n    try:\n        info = os.stat(file_path)\n        return {\n            'mode': oct(info.st_mode)[2:],  # Convert mode to octal\n            'size': info.st_size,          # File size in bytes\n            'last_modified': info.st_mtime   # Last modification time\n        }\n    except FileNotFoundError:\n        print(&quot;File not found.&quot;)\n        return {}\n\nfile_info = get_file_info('/path/to/file')\nprint(file_info)\n</code></pre>\n\n<h3>10. Making a Directory with Permissions</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\n\ndef create_directory_with_permissions(path, mode):\n    &quot;&quot;&quot;\n    This function creates a new directory at the specified path with the given permissions.\n\n    Args:\n    path (str): The path where the new directory should be created.\n    mode (int): The permission bits for the directory (e.g., 0o755).\n    &quot;&quot;&quot;\n    try:\n        os.makedirs(path, mode=mode)\n        print(f&quot;Directory {path} created successfully with permissions {oct(mode)[2:]}&quot;)\n    except FileExistsError:\n        print(&quot;Directory already exists.&quot;)\n    except Exception as e:\n        print(f&quot;An error occurred: {e}&quot;)\n\ncreate_directory_with_permissions('/path/to/new/directory', 0o755)\n</code></pre>\n\n<p>These examples demonstrate various functionalities of the <code>os</code> module, covering common tasks such as environment variable manipulation, directory operations, file system navigation, and command execution. Each function is documented with a docstring that explains its purpose, arguments, and return values.</p>"
        },
        {
            "filename": "platform - Access to underlying platform s identifying data.md",
            "content": "<h1>platform - Access to underlying platform\u2019s identifying data</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#explanation\">Explanation:</a></li>\n</ol>\n<p>Below is a comprehensive set of code examples for the <code>platform</code> module in Python, including comments explaining each step.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import platform\nimport sys\n\n# Example 1: Get the system name\nsystem_name = platform.system()\nprint(f&quot;System Name: {system_name}&quot;)\n\n# Example 2: Get the release version of the operating system\nrelease_version = platform.release()\nprint(f&quot;Release Version: {release_version}&quot;)\n\n# Example 3: Get the architecture of the machine\narchitecture = platform.architecture()[0]\nprint(f&quot;Architecture: {architecture}&quot;)\n\n# Example 4: Get the Python implementation name\npython_implementation = platform.python_implementation()\nprint(f&quot;Python Implementation: {python_implementation}&quot;)\n\n# Example 5: Get the Python version as a tuple (major, minor, micro)\npython_version_tuple = sys.version_info\nprint(f&quot;Python Version Tuple: {python_version_tuple}&quot;)\n\n# Example 6: Get the operating system name and release version as a string\nos_name_release = platform.platform()\nprint(f&quot;OS Name and Release: {os_name_release}&quot;)\n\n# Example 7: Check if Python is running in a virtual environment\nif platform.python_implementation() == &quot;CPython&quot;:\n    is_virtualenv = hasattr(sys, 'real_prefix') or sys.prefix != sys.base_prefix\nelse:\n    is_virtualenv = False\n\nprint(f&quot;Is Virtual Environment: {is_virtualenv}&quot;)\n\n# Example 8: Get the Python executable path\npython_executable = sys.executable\nprint(f&quot;Python Executable Path: {python_executable}&quot;)\n\n# Example 9: Get the current operating system as a string (e.g., 'Windows', 'Linux')\nos_name_short = platform.system()\nprint(f&quot;OS Name Short: {os_name_short}&quot;)\n\n# Example 10: Get the number of processors available\nnumber_of_processors = platform.processor()\nprint(f&quot;Number of Processors: {number_of_processors}&quot;)\n\n# Example 11: Get the operating system's version as a string\nos_version_str = platform.version()\nprint(f&quot;OS Version String: {os_version_str}&quot;)\n\n# Example 12: Get the Python version as a tuple (major, minor)\npython_version_tuple_short = platform.python_version_tuple()[:2]\nprint(f&quot;Python Version Tuple Short: {python_version_tuple_short}&quot;)\n\n# Example 13: Check if the operating system is Windows\nif os_name_short == &quot;Windows&quot;:\n    print(&quot;Running on Windows&quot;)\nelse:\n    print(&quot;Not running on Windows&quot;)\n\n# Example 14: Get the Python implementation as a string (e.g., 'CPython', 'PyPy')\npython_implementation_str = platform.python_implementation()\nprint(f&quot;Python Implementation String: {python_implementation_str}&quot;)\n\n# Example 15: Get the operating system's release version as a tuple\nos_release_tuple = platform.uname().release\nprint(f&quot;OS Release Tuple: {os_release_tuple}&quot;)\n\n# Example 16: Check if Python is running in an environment that supports virtual environments\nis_virtualenv_supporting = hasattr(sys, 'real_prefix') or sys.prefix == sys.base_prefix\nprint(f&quot;Is Virtual Environment Supporting: {is_virtualenv_supporting}&quot;)\n\n# Example 17: Get the current operating system as a string (e.g., 'Windows', 'Linux')\nos_name_full = platform.uname().system\nprint(f&quot;OS Name Full: {os_name_full}&quot;)\n\n# Example 18: Get the Python version as a tuple (major, minor)\npython_version_tuple_long = sys.version_info[:2]\nprint(f&quot;Python Version Tuple Long: {python_version_tuple_long}&quot;)\n\n# Example 19: Check if the operating system is macOS\nif os_name_short == &quot;Darwin&quot;:\n    print(&quot;Running on macOS&quot;)\nelse:\n    print(&quot;Not running on macOS&quot;)\n\n# Example 20: Get the current operating system as a string (e.g., 'Windows', 'Linux')\nos_name_agnostic = platform.platform(aliased=True)\nprint(f&quot;OS Name Agnostic: {os_name_agnostic}&quot;)\n\n# Example 21: Get the Python implementation as a tuple\npython_implementation_tuple = (sys.version_info.major, sys.version_info.minor)\nprint(f&quot;Python Implementation Tuple: {python_implementation_tuple}&quot;)\n\n# Example 22: Check if the operating system is POSIX-based (Linux, macOS)\nis_posix_based = os_name_short in [&quot;Linux&quot;, &quot;Darwin&quot;]\nprint(f&quot;Is POSIX-Based: {is_posix_based}&quot;)\n\n# Example 23: Get the current operating system as a string (e.g., 'Windows', 'Linux')\nos_name_specific = platform.uname().system\nprint(f&quot;OS Name Specific: {os_name_specific}&quot;)\n\n# Example 24: Get the Python version as a tuple (major, minor)\npython_version_tuple_all = sys.version_info[:3]\nprint(f&quot;Python Version Tuple All: {python_version_tuple_all}&quot;)\n\n# Example 25: Check if the operating system is Windows or macOS\nis_windows_or_macos = os_name_short in [&quot;Windows&quot;, &quot;Darwin&quot;]\nprint(f&quot;Is Windows or macOS: {is_windows_or_macos}&quot;)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ul>\n<li><strong>System Information</strong>: Examples include getting the system name, release version, architecture, and Python implementation.</li>\n<li><strong>Environment Check</strong>: The examples check if the environment is a virtual environment using <code>sys.real_prefix</code> or <code>sys.prefix</code>.</li>\n<li><strong>OS Details</strong>: The examples retrieve detailed OS information such as platform, full name, and version.</li>\n<li><strong>Python Version</strong>: Various ways to extract the Python version are shown, including tuple formats.</li>\n<li><strong>Platform Detection</strong>: Examples check if the operating system is Windows, macOS, or POSIX-based (Linux).</li>\n<li><strong>Compatibility Checks</strong>: Examples verify compatibility checks using <code>sys.real_prefix</code> for virtual environments.</li>\n</ul>\n<p>These examples provide a comprehensive overview of how to use the <code>platform</code> module to gather system and Python-related information.</p>"
        },
        {
            "filename": "time - Time access and conversions.md",
            "content": "<h1>time - Time access and conversions</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#key-points\">Key Points:</a></li>\n</ol>\n<p>The <code>time</code> module in Python provides a portable way of using operating system-dependent functionality such as time access, conversion of time to human-readable formats, and delay execution.</p>\n<p>Here are comprehensive code examples for all functionalities available in the <code>time</code> module:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import time\n\n# Example 1: Retrieve the current time in seconds since the epoch (January 1, 1970)\ncurrent_time = time.time()\nprint(f&quot;Current time in seconds since epoch: {current_time}&quot;)\n\n# Example 2: Sleep for a specified number of seconds\nseconds_to_sleep = 5\nprint(&quot;Sleeping for 5 seconds...&quot;)\ntime.sleep(seconds_to_sleep)  # This is an I/O-bound sleep, use threading for CPU-bound tasks\nprint(&quot;Time has elapsed!&quot;)\n\n# Example 3: Get the current time as a tuple representing local time\nlocal_time_tuple = time.localtime()\nprint(f&quot;Current local time tuple: {local_time_tuple}&quot;)\n\n# Example 4: Format the current time as a string\nformatted_time = time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, local_time_tuple)\nprint(f&quot;Formatted current local time: {formatted_time}&quot;)\n\n# Example 5: Convert seconds since epoch to a struct_time object\nepoch_to_local_time = time.localtime(current_time)\nprint(f&quot;Epoch time converted to local time tuple: {epoch_to_local_time}&quot;)\n\n# Example 6: Get the number of seconds until January 1, 2038 (the year 2038 problem)\nyear_2038_seconds = (time.struct_time((31, 12, 31, 23, 59, 59, 4, 365)) - time.localtime()).total_seconds()\nprint(f&quot;Seconds until January 1, 2038: {year_2038_seconds}&quot;)\n\n# Example 7: Sleep for a specific amount of time using datetime.timedelta\nfrom datetime import timedelta\n\nsleep_duration = timedelta(seconds=10)\ntime.sleep(sleep_duration.total_seconds())\nprint(&quot;Time has elapsed with timedelta!&quot;)\n\n# Example 8: Convert a given timestamp to UTC and back\ntimestamp = 1632456000.0  # Example timestamp in seconds\nutc_time = time.gmtime(timestamp)\nprint(f&quot;UTC time tuple from epoch: {utc_time}&quot;)\nlocal_time = time.localtime(timestamp)\nprint(f&quot;Local time tuple from epoch: {local_time}&quot;)\n\n# Example 9: Measure the execution time of a block of code using perf_counter\nimport sys\n\nstart_time = time.perf_counter()\n# Code to measure\nfor i in range(1000000):\n    pass\nend_time = time.perf_counter()\nexecution_time = end_time - start_time\nprint(f&quot;Execution time of the loop: {execution_time:.4f} seconds&quot;)\n\n# Example 10: Format a timestamp into a human-readable string with timezone information\nfrom pytz import timezone\n\ntimestamp = 1632456000.0\nlocal_tz = timezone('US/Eastern')\ndt_local = local_tz.localize(time.localtime(timestamp))\nformatted_time_with_timezone = dt_local.strftime(&quot;%Y-%m-%d %H:%M:%S %Z%z&quot;)\nprint(f&quot;Formatted current local time with timezone: {formatted_time_with_timezone}&quot;)\n\n# Example 11: Get the number of days in a given month\ndays_in_month = time.monthrange(2023, 2)\nprint(f&quot;Days in February 2023: {days_in_month[1]}&quot;)\n\n# Example 12: Get the day of the week for a specific date\nday_of_week = time.strftime(&quot;%A&quot;, time.strptime(&quot;2023-10-01&quot;, &quot;%Y-%m-%d&quot;))\nprint(f&quot;Day of the week for October 1, 2023: {day_of_week}&quot;)\n\n# Example 13: Get the day of the year\nday_of_year = time.strftime(&quot;%j&quot;, time.strptime(&quot;2023-10-01&quot;, &quot;%Y-%m-%d&quot;))\nprint(f&quot;Day of the year for October 1, 2023: {day_of_year}&quot;)\n\n# Example 14: Get the Julian day number\njd = time.gmtime(1632456000.0).tm_yday + 1\nprint(f&quot;Julian Day Number for January 1, 2023: {jd}&quot;)\n</code></pre>\n\n<h3>Key Points:</h3>\n<ul>\n<li><strong>I/O-bound Sleep</strong>: Use <code>time.sleep()</code> for I/O operations or delays that do not involve significant CPU usage.</li>\n<li><strong>CPU-bound Sleep</strong>: For longer delays in CPU-bound tasks, consider using threading or multiprocessing to avoid blocking the main thread.</li>\n<li><strong>Time Zones</strong>: The examples demonstrate how to handle time zones using the <code>pytz</code> library, which is a popular library for timezone-aware datetime objects.</li>\n<li><strong>Performance Measurement</strong>: <code>time.perf_counter()</code> is suitable for measuring short durations in floating-point seconds.</li>\n</ul>\n<p>These examples cover a broad range of functionalities provided by the <code>time</code> module, making them useful for various applications, including system monitoring, performance tuning, and time-sensitive operations.</p>"
        }
    ],
    "Graphical User Interfaces with Tk": [
        {
            "filename": "tkinter - Python interface to Tcl Tk.md",
            "content": "<h1>tkinter - Python interface to Tcl/Tk</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#installation\">Installation</a></li>\n<li><a href=\"#example-1-basic-window-application\">Example 1: Basic Window Application</a></li>\n<li><a href=\"#example-2-button-with-callback-function\">Example 2: Button with Callback Function</a></li>\n<li><a href=\"#example-3-label-and-entry-widgets\">Example 3: Label and Entry Widgets</a></li>\n<li><a href=\"#example-4-listbox-and-scrollbar\">Example 4: Listbox and Scrollbar</a></li>\n<li><a href=\"#example-5-combobox\">Example 5: Combobox</a></li>\n<li><a href=\"#example-6-radiobuttons\">Example 6: Radiobuttons</a></li>\n<li><a href=\"#example-7-menubar\">Example 7: Menubar</a></li>\n<li><a href=\"#example-8-canvas-widget\">Example 8: Canvas Widget</a></li>\n<li><a href=\"#example-9-text-widget\">Example 9: Text Widget</a></li>\n</ol>\n<p>The <code>tkinter</code> module is a standard Python library that provides a high-level, cross-platform GUI toolkit. It allows developers to create graphical user interfaces (GUIs) in Python applications. Below are comprehensive and well-documented code examples for various functionalities of the <code>tkinter</code> module.</p>\n<h3>Installation</h3>\n<p>brew install python-tk@3.12</p>\n<h3>Example 1: Basic Window Application</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Basic Tkinter Window&quot;)\n\n# Set the size of the window\nroot.geometry(&quot;300x200&quot;)\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>tk.Tk()</code>: This creates the main window object.\n- <code>root.title(\"Basic Tkinter Window\")</code>: Sets the title of the window to \"Basic Tkinter Window\".\n- <code>root.geometry(\"300x200\")</code>: Specifies the dimensions of the window as 300 pixels wide and 200 pixels high.\n- <code>root.mainloop()</code>: This starts the main event loop, which keeps the application running until it is closed.</p>\n<h3>Example 2: Button with Callback Function</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Button with Callback&quot;)\n\ndef button_click():\n    print(&quot;Button was clicked!&quot;)\n\n# Create a button and assign the callback function\nbutton = tk.Button(root, text=&quot;Click Me&quot;, command=button_click)\nbutton.pack()\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>tk.Tk()</code>: Creates the main window object.\n- <code>button_click</code> is a function that prints a message when called.\n- <code>tk.Button(root, text=\"Click Me\", command=button_click)</code>: Creates a button with the label \"Click Me\" and assigns the <code>button_click</code> function to its <code>command</code> attribute.\n- <code>button.pack()</code>: Packs the button into the window. This is necessary for the widget to be displayed.\n- <code>root.mainloop()</code>: Starts the event loop.</p>\n<h3>Example 3: Label and Entry Widgets</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Label and Entry&quot;)\n\ndef get_entry_text():\n    print(entry.get())\n\n# Create a label widget\nlabel = tk.Label(root, text=&quot;Enter your name:&quot;)\nlabel.pack()\n\n# Create an entry widget for user input\nentry = tk.Entry(root)\nentry.pack()\n\n# Create a button to retrieve the entry text\nbutton = tk.Button(root, text=&quot;Submit&quot;, command=get_entry_text)\nbutton.pack()\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>tk.Label(root, text=\"Enter your name:\")</code>: Creates a label widget with the specified text.\n- <code>entry = tk.Entry(root)</code>: Creates an entry widget where users can input text.\n- <code>button = tk.Button(root, text=\"Submit\", command=get_entry_text)</code>: Creates a button that calls <code>get_entry_text</code> when clicked.\n- <code>entry.get()</code>: Retrieves the text from the entry widget.</p>\n<h3>Example 4: Listbox and Scrollbar</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Listbox with Scrollbar&quot;)\n\ndef select_item(event):\n    print(f&quot;Selected item: {listbox.get(listbox.curselection())}&quot;)\n\n# Create a list of items\nitems = [&quot;Item 1&quot;, &quot;Item 2&quot;, &quot;Item 3&quot;, &quot;Item 4&quot;, &quot;Item 5&quot;]\n\n# Create a Listbox widget\nlistbox = tk.Listbox(root)\nfor item in items:\n    listbox.insert(tk.END, item)\nlistbox.pack(side=tk.LEFT)\n\n# Create a scrollbar for the Listbox\nscrollbar = tk.Scrollbar(root)\nscrollbar.pack(side=tk.RIGHT, fill=tk.Y)\n\n# Configure the Listbox to use the scrollbar\nlistbox.config(yscrollcommand=scrollbar.set)\nscrollbar.config(command=listbox.yview)\n\n# Bind the &lt;Double-Button-1&gt; event to select an item\nlistbox.bind(&quot;&lt;Double-Button-1&gt;&quot;, select_item)\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>tk.Listbox(root)</code>: Creates a listbox widget.\n- <code>for item in items: listbox.insert(tk.END, item)</code>: Populates the listbox with items.\n- <code>scrollbar = tk.Scrollbar(root)</code>: Creates a scrollbar widget.\n- <code>listbox.config(yscrollcommand=scrollbar.set)</code>: Configures the listbox to use the scrollbar.\n- <code>scrollbar.config(command=listbox.yview)</code>: Sets the scrollbar's command to update the listbox's view.\n- <code>listbox.bind(\"&lt;Double-Button-1&gt;\", select_item)</code>: Binds a double-click event to the listbox that prints the selected item.</p>\n<h3>Example 5: Combobox</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Combobox&quot;)\n\ndef on_select(event):\n    print(f&quot;Selected option: {combobox.get()}&quot;)\n\n# Create a list of options\noptions = [&quot;Option 1&quot;, &quot;Option 2&quot;, &quot;Option 3&quot;]\n\n# Create a Combobox widget\ncombobox = ttk.Combobox(root, values=options)\ncombobox.set(options[0])  # Set the initial value\ncombobox.pack()\n\n# Bind the &lt;Return&gt; event to trigger the selection\ncombobox.bind(&quot;&lt;Return&gt;&quot;, on_select)\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>ttk.Combobox(root, values=options)</code>: Creates a combobox widget with predefined options.\n- <code>combobox.pack()</code>: Packs the combobox into the window.\n- <code>combobox.bind(\"&lt;Return&gt;\", on_select)</code>: Binds the return key to trigger the <code>on_select</code> function.</p>\n<h3>Example 6: Radiobuttons</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Radiobuttons&quot;)\n\ndef on_radio_change(*args):\n    print(f&quot;Selected option: {variable.get()}&quot;)\n\n# Create a variable to store the selected option\nvariable = tk.StringVar()\n\n# Create Radiobutton widgets\nradio1 = tk.Radiobutton(root, text=&quot;Option 1&quot;, variable=variable, value=&quot;option1&quot;)\nradio2 = tk.Radiobutton(root, text=&quot;Option 2&quot;, variable=variable, value=&quot;option2&quot;)\nradio3 = tk.Radiobutton(root, text=&quot;Option 3&quot;, variable=variable, value=&quot;option3&quot;)\n\n# Pack the Radiobuttons into the window\nradio1.pack()\nradio2.pack()\nradio3.pack()\n\n# Bind the change event to the on_radio_change function\nvariable.trace_add(&quot;write&quot;, on_radio_change)\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>tk.StringVar()</code>: Creates a variable to store the selected option.\n- <code>Radiobutton(root, text=\"Option 1\", variable=variable, value=\"option1\")</code>: Creates a radiobutton with the specified text and assigns it to the variable.\n- <code>variable.trace(\"w\", on_radio_change)</code>: Binds the change event of the variable to the <code>on_radio_change</code> function.</p>\n<h3>Example 7: Menubar</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Menubar&quot;)\n\ndef file_menu():\n    print(&quot;File menu clicked!&quot;)\n\ndef edit_menu():\n    print(&quot;Edit menu clicked!&quot;)\n\n# Create a MenuBar widget\nmenubar = tk.Menu(root)\n\n# Create File and Edit menus\nfile_menu = tk.Menu(menubar, tearoff=0)\nedit_menu = tk.Menu(menubar, tearoff=0)\n\n# Add items to the File menu\nfile_menu.add_command(label=&quot;New&quot;, command=file_menu)\nfile_menu.add_separator()\nfile_menu.add_command(label=&quot;Exit&quot;, command=root.quit)\n\n# Add items to the Edit menu\nedit_menu.add_command(label=&quot;Cut&quot;, command=edit_menu)\nedit_menu.add_command(label=&quot;Copy&quot;, command=edit_menu)\nedit_menu.add_command(label=&quot;Paste&quot;, command=edit_menu)\n\n# Add File and Edit menus to the MenuBar\nmenubar.add_cascade(label=&quot;File&quot;, menu=file_menu)\nmenubar.add_cascade(label=&quot;Edit&quot;, menu=edit_menu)\n\n# Set the MenuBar as the main window's menu\nroot.config(menu=menubar)\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>tk.Menu(root)</code>: Creates a menu bar.\n- <code>file_menu = tk.Menu(menubar, tearoff=0)</code>: Creates a file menu and sets <code>tearoff</code> to 0 to allow it to detach from the menubar.\n- <code>edit_menu = tk.Menu(menubar, tearoff=0)</code>: Creates an edit menu similar to the file menu.\n- <code>file_menu.add_command(label=\"New\", command=file_menu)</code>: Adds a \"New\" item to the file menu that prints a message when clicked.\n- <code>menubar.add_cascade(label=\"File\", menu=file_menu)</code>: Attaches the file menu to the menubar with the label \"File\".\n- <code>root.config(menu=menubar)</code>: Sets the menubar as the main window's menu.</p>\n<h3>Example 8: Canvas Widget</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Canvas&quot;)\n\ndef draw_circle():\n    canvas.create_oval(50, 50, 150, 150)\n\n# Create a Canvas widget\ncanvas = tk.Canvas(root, width=200, height=200)\ncanvas.pack()\n\n# Create a button to draw a circle\ndraw_button = tk.Button(root, text=&quot;Draw Circle&quot;, command=draw_circle)\ndraw_button.pack()\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>tk.Canvas(root, width=200, height=200)</code>: Creates a canvas widget with a specified width and height.\n- <code>canvas.create_oval(50, 50, 150, 150)</code>: Draws an oval (circle) on the canvas.\n- <code>draw_button = tk.Button(root, text=\"Draw Circle\", command=draw_circle)</code>: Creates a button that calls the <code>draw_circle</code> function when clicked.</p>\n<h3>Example 9: Text Widget</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Text&quot;)\n\ndef insert_text():\n    text.insert(tk.END, &quot;Hello, World!&quot;)\n\n# Create a Text widget\ntext = tk.Text(root)\ntext.pack()\n\n# Create an Insert Text button\ninsert_button = tk.Button(root, text=&quot;Insert Text&quot;, command=insert_text)\ninsert_button.pack()\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>tk.Text(root)</code>: Creates a text widget.\n- <code>text.insert(tk.END, \"Hello, World!\")</code>: Inserts the string \"Hello, World!\" at the end of the text widget.</p>\n<h3>Example 10: File Dialog</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import filedialog\n\ndef open_file():\n    filename = filedialog.askopenfilename()\n    if filename:\n        print(f&quot;Opened file: {filename}&quot;)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;File Dialog&quot;)\n\n# Create an Open File button\nopen_button = tk.Button(root, text=&quot;Open File&quot;, command=open_file)\nopen_button.pack()\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>filedialog.askopenfilename()</code>: Opens a file dialog and returns the selected filename.\n- <code>open_file()</code>: Calls the <code>askopenfilename</code> function and prints the selected filename.</p>\n<h3>Example 11: Toplevel Dialog</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\n\ndef show_dialog():\n    top = tk.Toplevel(root)\n    top.title(&quot;Toplevel Dialog&quot;)\n    label = tk.Label(top, text=&quot;This is a toplevel dialog.&quot;)\n    label.pack()\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Toplevel Dialog&quot;)\n\n# Create an Show Dialog button\nshow_button = tk.Button(root, text=&quot;Show Dialog&quot;, command=show_dialog)\nshow_button.pack()\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>tk.Toplevel(root)</code>: Creates a toplevel window with the parent widget being the main window.\n- <code>top.title(\"Toplevel Dialog\")</code>: Sets the title of the toplevel window.\n- <code>label = tk.Label(top, text=\"This is a toplevel dialog.\")</code>: Adds a label to the toplevel window.</p>\n<h3>Example 12: Progressbar Widget</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef update_progress():\n    progress.config(value=progress['value'] + 10)\n    if progress['value'] &lt; 100:\n        root.after(100, update_progress)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Progressbar&quot;)\n\n# Create a Progressbar widget\nprogress = ttk.Progressbar(root, orient=&quot;horizontal&quot;, length=200, mode=&quot;determinate&quot;)\nprogress.pack()\n\n# Create an Update Progress button\nupdate_button = tk.Button(root, text=&quot;Update Progress&quot;, command=update_progress)\nupdate_button.pack()\n\n# Start the progress update loop\nroot.after(100, update_progress)\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>ttk.Progressbar(root, orient=\"horizontal\", length=200, mode=\"determinate\")</code>: Creates a horizontal progress bar with a specified length and in determinate mode.\n- <code>progress.config(value=progress['value'] + 10)</code>: Updates the value of the progress bar by adding 10 to its current value.\n- <code>root.after(100, update_progress)</code>: Schedules the <code>update_progress</code> function to be called after 100 milliseconds.</p>\n<h3>Example 13: Scale Widget</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef scale_changed(value):\n    print(f&quot;Scale changed to: {value}&quot;)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Scale&quot;)\n\n# Create a Scale widget\nscale = ttk.Scale(root, from_=0, to=100, orient=&quot;horizontal&quot;, command=scale_changed)\nscale.pack()\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>ttk.Scale(root, from_=0, to=100, orient=\"horizontal\", command=scale_changed)</code>: Creates a horizontal scale with values ranging from 0 to 100 and calls the <code>scale_changed</code> function whenever the value changes.\n- <code>scale_changed(value)</code>: Prints the current value of the scale.</p>\n<h3>Example 14: Checkbutton Widget</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef check_button_clicked():\n    if var.get() == 1:\n        print(&quot;Check button is checked.&quot;)\n    else:\n        print(&quot;Check button is unchecked.&quot;)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Checkbutton&quot;)\n\n# Create a Checkbutton widget\nvar = tk.IntVar()\ncheck_button = ttk.Checkbutton(root, text=&quot;Check Me&quot;, variable=var, command=check_button_clicked)\ncheck_button.pack()\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>tk.IntVar()</code>: Creates a variable to store the state of the checkbutton.\n- <code>ttk.Checkbutton(root, text=\"Check Me\", variable=var)</code>: Creates a checkbutton with the specified text and variable.\n- <code>on_check_button_click()</code>: Sets the value of the checkbutton to 1 when it is clicked.</p>\n<h3>Example 15: Radiobutton Widget</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\n\ndef radio_button_clicked():\n    print(f&quot;Radio button selected: {var.get()}&quot;)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Radiobutton&quot;)\n\n# Create a variable to store the selected value\nvar = tk.StringVar()\n\n# Create Radiobuttons with different values and assign them to the variable\nrad1 = tk.Radiobutton(root, text=&quot;Option 1&quot;, variable=var, value=&quot;option1&quot;, command=radio_button_clicked)\nrad2 = tk.Radiobutton(root, text=&quot;Option 2&quot;, variable=var, value=&quot;option2&quot;, command=radio_button_clicked)\nrad3 = tk.Radiobutton(root, text=&quot;Option 3&quot;, variable=var, value=&quot;option3&quot;, command=radio_button_clicked)\n\n# Pack the Radiobuttons\nrad1.pack()\nrad2.pack()\nrad3.pack()\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>tk.StringVar()</code>: Creates a variable to store the selected value of the radiobutton group.\n- <code>ttk.Radiobutton(root, text=\"Option 1\", variable=var, value=\"option1\")</code>: Creates a radiobutton with the specified text and assigns it to the variable. The value associated with this radiobutton is \"option1\".\n- <code>on_radio_button_click(value)</code>: Sets the selected value of the variable based on which radiobutton is clicked.</p>\n<h3>Example 16: Notebook Widget</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef add_tab():\n    tab = ttk.Frame(notebook)\n    notebook.add(tab, text=f&quot;Tab {notebook.index(tab) + 1}&quot;)\n    notebook.select(tab)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Notebook&quot;)\n\n# Create a Notebook widget\nnotebook = ttk.Notebook(root)\n\n# Create tabs and add them to the notebook\nfor i in range(3):\n    tab = ttk.Frame(notebook)\n    notebook.add(tab, text=f&quot;Tab {i + 1}&quot;)\n\n# Define the command for adding a new tab\ndef on_add_tab():\n    add_tab()\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>ttk.Notebook(root)</code>: Creates a notebook widget that manages multiple tabs.\n- <code>notebook.add(tab, text=f\"Tab {tab.index(tab) + 1}\")</code>: Adds a new tab to the notebook with a generated title based on its index.\n- <code>on_add_tab()</code>: Calls the <code>add_tab</code> function to add a new tab each time it is clicked.</p>\n<h3>Example 17: Spinbox Widget</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef spinbox_changed(value):\n    print(f&quot;Spinbox changed to: {value}&quot;)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Spinbox&quot;)\n\n# Create a Spinbox widget with range and step\nspinbox = ttk.Spinbox(root, from_=0, to=100, increment=5)\nspinbox.pack()\n\n# Define the command for when the spinbox value changes\ndef on_spinbox_change(value):\n    spinbox.set(value)\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>ttk.Spinbox(root, from_=0, to=100, increment=5)</code>: Creates a spinbox with values ranging from 0 to 100 and increments in steps of 5.\n- <code>on_spinbox_change(value)</code>: Sets the value of the spinbox based on its current value.</p>\n<h3>Example 18: Entry Widget</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef entry_changed(event):\n    print(f&quot;Entry changed to: {entry.get()}&quot;)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Entry&quot;)\n\n# Create an Entry widget with a placeholder text\nentry = ttk.Entry(root, width=30)\nentry.pack()\n\n# Define the command for when the entry value changes\ndef on_entry_change(event):\n    entry.delete(0, tk.END)  # Clear the entry field\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>ttk.Entry(root, width=30)</code>: Creates an entry widget with a specified width and placeholder text.\n- <code>on_entry_change(event)</code>: Deletes the current contents of the entry field whenever it is changed.</p>\n<h3>Example 19: Combobox Widget</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef combobox_changed(event):\n    print(f&quot;Combobox selected: {combobox.get()}&quot;)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Combobox&quot;)\n\n# Create a Combobox widget with options and assign them to the variable\noptions = [&quot;Option 1&quot;, &quot;Option 2&quot;, &quot;Option 3&quot;]\ncombobox = ttk.Combobox(root, values=options)\ncombobox.pack()\n\n# Define the command for when an item is selected in the combobox\ndef on_combobox_change(event):\n    print(f&quot;Combobox selected: {combobox.get()}&quot;)\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>ttk.Combobox(root, values=options)</code>: Creates a combobox with pre-defined options.\n- <code>on_combobox_change(event)</code>: Prints the current selection of the combobox.</p>\n<h3>Example 20: Treeview Widget</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef treeview_selected(event):\n    item = treeview.selection()[0]\n    print(f&quot;Selected item: {treeview.item(item, 'text')}&quot;)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Treeview&quot;)\n\n# Create a Treeview widget with columns and define column headings\ntreeview = ttk.Treeview(root)\ntreeview[&quot;columns&quot;] = (&quot;column1&quot;, &quot;column2&quot;)\ntreeview.heading(&quot;#0&quot;, text=&quot;ID&quot;)\ntreeview.heading(&quot;column1&quot;, text=&quot;Name&quot;)\ntreeview.heading(&quot;column2&quot;, text=&quot;Age&quot;)\ntreeview.pack()\n\n# Add some sample data to the Treeview\ndata = [(&quot;1&quot;, &quot;Alice&quot;, &quot;25&quot;), (&quot;2&quot;, &quot;Bob&quot;, &quot;30&quot;), (&quot;3&quot;, &quot;Charlie&quot;, &quot;35&quot;)]\nfor item in data:\n    treeview.insert(&quot;&quot;, tk.END, values=item)\n\n# Define the command for when an item is selected in the Treeview\ndef on_treeview_select(event):\n    treeview_selected(event)\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>ttk.Treeview(root)</code>: Creates a treeview widget with columns and defines column headings.\n- <code>treeview[\"columns\"] = (\"column1\", \"column2\")</code>: Specifies the column names for the Treeview.\n- <code>treeview.heading(\"#0\", text=\"ID\")</code> and <code>treeview.heading(\"column1\", text=\"Name\")</code> and <code>treeview.heading(\"column2\", text=\"Age\")</code>: Sets the titles for each column in the Treeview.\n- <code>data = [(\"1\", \"Alice\", \"25\"), (\"2\", \"Bob\", \"30\"), (\"3\", \"Charlie\", \"35\")]</code>: Defines some sample data to populate the treeview.\n- <code>treeview.insert(\"\", tk.END, values=item)</code>: Inserts each item into the Treeview.\n- <code>on_treeview_select(event)</code> defines a function that prints the selected item in the Treeview.</p>\n<h3>Example 21: Scrollbar Widget</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef on_scrollbar_yevent(event):\n    treeview.yview_moveto(event.delta / 30.0)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Scrollbar&quot;)\n\n# Create a Treeview widget with columns and define column headings\ntreeview = ttk.Treeview(root)\ntreeview[&quot;columns&quot;] = (&quot;column1&quot;, &quot;column2&quot;)\ntreeview.heading(&quot;#0&quot;, text=&quot;ID&quot;)\ntreeview.heading(&quot;column1&quot;, text=&quot;Name&quot;)\ntreeview.heading(&quot;column2&quot;, text=&quot;Age&quot;)\ntreeview.pack(side=tk.LEFT, fill=tk.BOTH)\n\n# Add some sample data to the Treeview\ndata = [(&quot;1&quot;, &quot;Alice&quot;, &quot;25&quot;), (&quot;2&quot;, &quot;Bob&quot;, &quot;30&quot;), (&quot;3&quot;, &quot;Charlie&quot;, &quot;35&quot;)]\nfor item in data:\n    treeview.insert(&quot;&quot;, tk.END, values=item)\n\n# Create a vertical scrollbar for the Treeview\nscrollbar = ttk.Scrollbar(root, orient=tk.VERTICAL)\nscrollbar.pack(side=tk.LEFT, fill=tk.Y)\ntreeview.config(yscrollcommand=scrollbar.set)\nscrollbar.config(command=lambda event: on_scrollbar_yevent(event))\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>ttk.Scrollbar(root, orient=tk.VERTICAL)</code> creates a vertical scrollbar.\n- <code>scrollbar.pack(side=tk.LEFT, fill=tk.Y)</code> positions the scrollbar to the left and fills the space vertically within the window.\n- <code>treeview.config(yscrollcommand=scrollbar.set)</code> associates the Treeview's y-scrollbar with the scrollbar's set function.\n- <code>scrollbar.config(command=lambda event: on_scrollbar_yevent(event))</code> sets the command of the scrollbar to a lambda function that adjusts the Treeview's scroll position based on the scrollwheel delta.</p>\n<h3>Example 22: Progressbar Widget</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef start_progressbar():\n    progressbar.start(10)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;ProgressBar&quot;)\n\n# Create a ProgressBar widget with a maximum value of 100 and initial position at 50%\nprogressbar = ttk.Progressbar(root, mode=&quot;indeterminate&quot;, length=200, maximum=100, value=50)\nprogressbar.pack(pady=20)\n\n# Start the progress bar\nprogressbar.start(10)\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>ttk.Progressbar(root, mode=\"indeterminate\", length=200, maximum=100, value=50)</code> creates a progressbar widget with an indeterminate mode, a length of 200 pixels, a maximum value of 100, and an initial position at 50%.\n- <code>progressbar.pack(pady=20)</code> positions the progressbar with some padding from the top.\n- <code>progressbar.start(10)</code> starts the progress bar in an indeterminate mode, updating its position every 10 milliseconds.</p>\n<h3>Example 23: Menu Widget</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef on_menuitem_click(event):\n    print(f&quot;Clicked: {event.widget['text']}&quot;)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Menu&quot;)\n\n# Create a Menu widget with submenus and menuitems\nmenu = tk.Menu(root)\nroot.config(menu=menu)\n\nfile_menu = tk.Menu(menu, tearoff=0)\nfile_menu.add_command(label=&quot;Open&quot;, command=lambda: print(&quot;Opening file...&quot;))\nfile_menu.add_separator()\nfile_menu.add_command(label=&quot;Exit&quot;, command=root.quit)\nmenu.add_cascade(label=&quot;File&quot;, menu=file_menu)\n\nedit_menu = tk.Menu(menu, tearoff=0)\nedit_menu.add_command(label=&quot;Cut&quot;, command=lambda: print(&quot;Cutting selection...&quot;))\nedit_menu.add_command(label=&quot;Copy&quot;, command=lambda: print(&quot;Copying selection...&quot;))\nedit_menu.add_command(label=&quot;Paste&quot;, command=lambda: print(&quot;Pasting selection...&quot;))\nmenu.add_cascade(label=&quot;Edit&quot;, menu=edit_menu)\n\n# Define the command for when a menu item is clicked\ndef on_menu_click(event):\n    if event.widget.winfo_class() == &quot;Menu&quot;:\n        on_menuitem_click(event)\n\n# Bind the on_menu_click function to all Menu widget events\nroot.bind_all(&quot;&lt;ButtonRelease-1&gt;&quot;, on_menu_click)\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>tk.Menu(root)</code> creates a menu at the root of the application.\n- <code>file_menu = tk.Menu(menu, tearoff=0)</code> and <code>edit_menu = tk.Menu(menu, tearoff=0)</code> create submenus within the main menu.\n- <code>file_menu.add_command(label=\"Open\", command=lambda: print(\"Opening file...\"))</code>, <code>file_menu.add_separator()</code>, <code>file_menu.add_command(label=\"Exit\", command=root.quit)</code>, and <code>menu.add_cascade(label=\"File\", menu=file_menu)</code> add menu items to the \"File\" submenu.\n- <code>edit_menu.add_command(label=\"Cut\", command=lambda: print(\"Cutting selection...\"))</code>, <code>edit_menu.add_command(label=\"Copy\", command=lambda: print(\"Copying selection...\"))</code>, <code>edit_menu.add_command(label=\"Paste\", command=lambda: print(\"Pasting selection...\"))</code>, and <code>menu.add_cascade(label=\"Edit\", menu=edit_menu)</code> add menu items to the \"Edit\" submenu.\n- <code>on_menuitem_click(event)</code> defines a function that prints the clicked menu item's text.\n- <code>root.bind_all(\"&lt;ButtonRelease-1&gt;\", on_menu_click)</code> binds the <code>on_menu_click</code> function to all button release events, allowing it to handle clicks anywhere within the application.</p>\n<h3>Example 24: Label Widget</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef update_label():\n    label.config(text=&quot;New Text&quot;)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Label&quot;)\n\n# Create a Label widget with text and font\nlabel = ttk.Label(root, text=&quot;Initial Text&quot;, font=(&quot;Arial&quot;, 12))\nlabel.pack(pady=20)\n\n# Create a Button widget to update the label's text\nupdate_button = ttk.Button(root, text=&quot;Update Label&quot;, command=update_label)\nupdate_button.pack(pady=10)\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>ttk.Label(root, text=\"Initial Text\", font=(\"Arial\", 12))</code> creates a label with initial text and Arial font size 12.\n- <code>label.config(text=\"New Text\")</code> updates the label's text to \"New Text\".\n- <code>update_button = ttk.Button(root, text=\"Update Label\", command=update_label)</code> creates a button that calls the <code>update_label</code> function when clicked.\n- The label is packed with some padding, and the update button is also packed with some padding.</p>\n<h3>Example 25: Entry Widget</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef on_entry_text_changed(event):\n    print(&quot;Entry text changed:&quot;, entry.get())\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Entry&quot;)\n\n# Create an Entry widget with default text and width\nentry = ttk.Entry(root, text=&quot;Default Text&quot;, width=20)\nentry.pack(pady=10)\n\n# Define the function to handle changes in the entry's text\ndef on_entry_text_changed(event):\n    print(&quot;Entry text changed:&quot;, entry.get())\n\n# Bind the on_entry_text_changed function to the Entry widget's text change event\nentry.bind(&quot;&lt;KeyRelease&gt;&quot;, on_entry_text_changed)\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>ttk.Entry(root, text=\"Default Text\", width=20)</code> creates an entry field with default text \"Default Text\" and a width of 20 characters.\n- The entry widget is packed with some padding.\n- <code>def on_entry_text_changed(event): print(\"Entry text changed:\", entry.get())</code> defines a function that prints the current text in the entry when it changes.\n- <code>entry.bind(\"&lt;KeyRelease&gt;\", on_entry_text_changed)</code> binds the <code>on_entry_text_changed</code> function to the KeyRelease event of the entry widget, allowing it to respond to text changes.</p>\n<h3>Example 26: Listbox Widget</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef add_item_to_listbox():\n    listbox.insert(tk.END, &quot;New Item&quot;)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Listbox&quot;)\n\n# Create a Listbox widget with initial items and selection mode\nlistbox = tk.Listbox(root, height=5)  # Changed ttk.Listbox to tk.Listbox\nlistbox.insert(tk.END, &quot;Item 1&quot;)\nlistbox.insert(tk.END, &quot;Item 2&quot;)\nlistbox.insert(tk.END, &quot;Item 3&quot;)\nlistbox.config(selectmode=tk.SINGLE)\nlistbox.pack(pady=10)\n\n# Define the function to add an item to the listbox\ndef add_item_to_listbox():\n    listbox.insert(tk.END, &quot;New Item&quot;)\n\n# Create a Button widget to add items to the listbox\nadd_button = ttk.Button(root, text=&quot;Add Item&quot;, command=add_item_to_listbox)\nadd_button.pack(pady=10)\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>ttk.Listbox(root, height=5)</code> creates a listbox with 5 rows.\n- <code>listbox.insert(tk.END, \"Item 1\", \"Item 2\", \"Item 3\")</code> adds initial items to the listbox.\n- <code>listbox.config(selectmode=tk.SINGLE)</code> configures the listbox to allow single selection of items.\n- The listbox is packed with some padding.\n- <code>def add_item_to_listbox(): listbox.insert(tk.END, \"New Item\")</code> defines a function that adds a new item to the end of the listbox when called.\n- <code>add_button = ttk.Button(root, text=\"Add Item\", command=add_item_to_listbox)</code> creates a button that calls the <code>add_item_to_listbox</code> function when clicked.\n- The add button is also packed with some padding.</p>\n<h3>Example 27: Radiobutton Widget</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef update_selected_option():\n    selected_value = variable.get()\n    print(f&quot;Selected option: {selected_value}&quot;)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Radiobutton&quot;)\n\n# Create a StringVar to hold the selected value\nvariable = tk.StringVar()\n\n# Create Radiobuttons with different options and associated values\nradiobutton1 = ttk.Radiobutton(root, text=&quot;Option 1&quot;, variable=variable, value=&quot;1&quot;)\nradiobutton2 = ttk.Radiobutton(root, text=&quot;Option 2&quot;, variable=variable, value=&quot;2&quot;)\nradiobutton3 = ttk.Radiobutton(root, text=&quot;Option 3&quot;, variable=variable, value=&quot;3&quot;)\n\n# Pack the Radiobuttons with some padding\nradiobutton1.pack(pady=5)\nradiobutton2.pack(pady=5)\nradiobutton3.pack(pady=5)\n\n# Define the function to update when a Radiobutton is selected\ndef update_selected_option():\n    selected_value = variable.get()\n    print(f&quot;Selected option: {selected_value}&quot;)\n\n# Create a Button widget to trigger the selection change\nupdate_button = ttk.Button(root, text=&quot;Update Selection&quot;, command=update_selected_option)\nupdate_button.pack(pady=10)\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>tk.StringVar()</code> is used to hold the value of the selected option.\n- <code>radiobutton1 = ttk.Radiobutton(root, text=\"Option 1\", variable=variable, value=\"1\")</code> creates a Radiobutton with label \"Option 1\", associated with the StringVar, and value \"1\".\n- The same is done for Option 2 and Option 3.\n- All Radiobuttons are packed with some padding.\n- <code>def update_selected_option(): selected_value = variable.get(); print(f\"Selected option: {selected_value}\")</code> defines a function that retrieves the selected value from the StringVar and prints it when called.\n- <code>update_button = ttk.Button(root, text=\"Update Selection\", command=update_selected_option)</code> creates a button that calls the <code>update_selected_option</code> function when clicked.\n- The update button is also packed with some padding.</p>\n<h3>Example 28: Combobox Widget</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef on_combobox_change(event):\n    selected_item = combobox.get()\n    print(f&quot;Selected item: {selected_item}&quot;)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Combobox&quot;)\n\n# Define items to be displayed in the Combobox\nitems = [&quot;Item 1&quot;, &quot;Item 2&quot;, &quot;Item 3&quot;]\n\n# Create a Combobox widget with initial value and list of items\ncombobox = ttk.Combobox(root, values=items)\ncombobox.set(&quot;Initial Item&quot;)\ncombobox.pack(pady=10)\n\n# Define the function to handle changes in the selected item\ndef on_combobox_change(event):\n    selected_item = combobox.get()\n    print(f&quot;Selected item: {selected_item}&quot;)\n\n# Bind the on_combobox_change function to the Combobox widget's selection change event\ncombobox.bind(&quot;&lt;&lt;ComboboxSelected&gt;&gt;&quot;, on_combobox_change)\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>items = [\"Item 1\", \"Item 2\", \"Item 3\"]</code> defines a list of items to be displayed in the Combobox.\n- <code>combobox = ttk.Combobox(root, values=items)</code> creates a combobox with these items and initial value set to \"Initial Item\".\n- The combobox is packed with some padding.\n- <code>def on_combobox_change(event): selected_item = combobox.get(); print(f\"Selected item: {selected_item}\")</code> defines a function that retrieves the selected item from the Combobox when it changes.\n- <code>combobox.bind(\"&lt;&lt;ComboboxSelected&gt;&gt;\", on_combobox_change)</code> binds the <code>on_combobox_change</code> function to the selection change event of the combobox, allowing it to respond to changes in the selected item.</p>\n<h3>Example 29: Scale Widget</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef update_scale_value(event):\n    scale_value = scale.get()\n    print(f&quot;Scale value: {scale_value}&quot;)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Scale&quot;)\n\n# Create a Scale widget with range from 0 to 100 and initial value\nscale = ttk.Scale(root, from_=0, to=100, orient=tk.HORIZONTAL)\nscale.set(50)\nscale.pack(pady=10)\n\n# Define the function to handle changes in the scale value\ndef update_scale_value(event):\n    scale_value = scale.get()\n    print(f&quot;Scale value: {scale_value}&quot;)\n\n# Bind the on_scale_value_change function to the Scale widget's value change event\nscale.bind(&quot;&lt;ButtonRelease-1&gt;&quot;, update_scale_value)\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>scale = ttk.Scale(root, from_=0, to=100, orient=tk.HORIZONTAL)</code> creates a scale with a range from 0 to 100 and initial value set to 50.\n- The scale is packed with some padding.\n- <code>def update_scale_value(event): scale_value = scale.get(); print(f\"Scale value: {scale_value}\")</code> defines a function that retrieves the current value of the scale when it changes.\n- <code>scale.bind(\"&lt;ButtonRelease-1&gt;\", update_scale_value)</code> binds the <code>update_scale_value</code> function to the release of the mouse button on the scale, allowing it to respond to changes in the scale value.</p>\n<h3>Example 30: Entry Widget</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef update_entry_value(event):\n    entry_value = entry.get()\n    print(f&quot;Entry value: {entry_value}&quot;)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Entry&quot;)\n\n# Create an Entry widget for user input\nentry = ttk.Entry(root)\nentry.pack(pady=10)\n\n# Define the function to handle changes in the entry value\ndef update_entry_value(event):\n    entry_value = entry.get()\n    print(f&quot;Entry value: {entry_value}&quot;)\n\n# Bind the on_entry_value_change function to the Entry widget's content change event\nentry.bind(&quot;&lt;KeyRelease&gt;&quot;, update_entry_value)\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>entry = ttk.Entry(root)</code> creates an entry widget for user input.\n- The entry is packed with some padding.\n- <code>def update_entry_value(event): entry_value = entry.get(); print(f\"Entry value: {entry_value}\")</code> defines a function that retrieves the current text in the entry when it changes.\n- <code>entry.bind(\"&lt;KeyRelease&gt;\", update_entry_value)</code> binds the <code>update_entry_value</code> function to the release of any key while typing in the entry, allowing it to respond to changes in the entry value. This ensures real-time updates.</p>\n<h3>Example 31: Messagebox Widget</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import messagebox\nfrom tkinter import ttk\n\ndef show_message():\n    messagebox.showinfo(&quot;Information&quot;, &quot;This is a simple message box.&quot;)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Messagebox&quot;)\n\n# Define a function to display a message box when button is clicked\ndef show_message():\n    messagebox.showinfo(&quot;Information&quot;, &quot;This is a simple message box.&quot;)\n\n# Create a Button widget that triggers the message box\nbutton = ttk.Button(root, text=&quot;Show Message&quot;, command=show_message)\nbutton.pack(pady=10)\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>messagebox.showinfo(\"Information\", \"This is a simple message box.\")</code> displays an information message box with title \"Information\" and message \"This is a simple message box.\"\n- The same method (<code>showerror</code>, <code>askokcancel</code>) can be used to show different types of message boxes: error, ask for confirmation, or ask for yes/no.\n- A Button widget is created that calls the <code>show_message</code> function when clicked, triggering the display of the messagebox.</p>\n<h3>Example 32: Progressbar Widget</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef update_progress():\n    progress['value'] += 10  # Increase progress by 10%\n    if progress['value'] &gt;= 100:\n        progress['value'] = 0  # Reset progress bar when it reaches 100%\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Progressbar&quot;)\n\n# Define a function to update the progress of the progress bar\ndef update_progress():\n    progress['value'] += 10  # Increase progress by 10%\n    if progress['value'] &gt;= 100:\n        progress['value'] = 0  # Reset progress bar when it reaches 100%\n\n# Create a Progressbar widget with initial value and range\nprogress = ttk.Progressbar(root, orient=tk.HORIZONTAL, length=200, mode='determinate')\nprogress['value'] = 0  # Set progress to 0%\nprogress.pack(pady=10)\n\n# Define a button that triggers the update of the progress bar\nupdate_button = ttk.Button(root, text=&quot;Update Progress&quot;, command=update_progress)\nupdate_button.pack(pady=5)\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>progress = ttk.Progressbar(root, orient=tk.HORIZONTAL, length=200)</code> creates a horizontal progress bar with a length of 200 pixels and initial value set to 0%.\n- The progress bar is packed with some padding.\n- <code>def update_progress(): progress['value'] += 10; if progress['value'] &gt;= 100: progress['value'] = 0</code> defines a function that increments the progress by 10% and resets it to 0% when it reaches 100%, allowing for continuous cycling.\n- A Button widget is created that calls the <code>update_progress</code> function when clicked, triggering updates to the progress bar.</p>\n<h3>Example 33: Checkbutton Widget</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef toggle_checkbutton(event=None):\n    if checkbutton_var.get():\n        print(&quot;Checkbox is checked&quot;)\n    else:\n        print(&quot;Checkbox is unchecked&quot;)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Checkbutton&quot;)\n\n# Define a function to toggle the state of the checkbox\ndef toggle_checkbutton(event=None):\n    if checkbutton_var.get():\n        print(&quot;Checkbox is checked&quot;)\n    else:\n        print(&quot;Checkbox is unchecked&quot;)\n\n# Create a Checkbutton widget with initial state being unchecked\ncheckbutton_var = tk.BooleanVar()\ncheckbutton = ttk.Checkbutton(root, text=&quot;Check me&quot;, variable=checkbutton_var)\ncheckbutton.pack(pady=5)\n\n# Bind the toggle_checkbutton function to the change event of the checkbutton\ncheckbutton.bind(&quot;&lt;ButtonRelease&gt;&quot;, toggle_checkbutton)\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>checkbutton = ttk.Checkbutton(root, text=\"Check me\", variable=checkbutton_var)</code> creates a checkbox with text \"Check me\" and initializes its state as unchecked.\n- The checkbutton is packed with some padding.\n- <code>def toggle_checkbutton(): if checkbutton_var.get(): print(\"Checkbox is checked\"); else: print(\"Checkbox is unchecked\")</code> defines a function that checks the current state of the checkbox using <code>checkbutton_var.get()</code> and prints whether it is checked or unchecked.\n- A button that triggers the toggle_checkbutton function when clicked allows for real-time updates to the checkstate.</p>\n<h3>Example 34: Radiobutton Widget</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef select_radio(event=None):\n    selected_option = radio_var.get()\n    print(f&quot;Selected option: {selected_option}&quot;)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Radiobutton&quot;)\n\n# Define a function to select the active radiobutton\ndef select_radio(event=None):\n    selected_option = radio_var.get()\n    print(f&quot;Selected option: {selected_option}&quot;)\n\n# Create a variable to store the currently selected option\nradio_var = tk.StringVar()\n\n# Create three Radiobutton widgets with different options and associate them with the same variable\noption1 = ttk.Radiobutton(root, text=&quot;Option 1&quot;, value=&quot;1&quot;, variable=radio_var)\noption2 = ttk.Radiobutton(root, text=&quot;Option 2&quot;, value=&quot;2&quot;, variable=radio_var)\noption3 = ttk.Radiobutton(root, text=&quot;Option 3&quot;, value=&quot;3&quot;, variable=radio_var)\n\n# Pack the Radiobutton widgets with some padding\noption1.pack(pady=5)\noption2.pack(pady=5)\noption3.pack(pady=5)\n\n# Bind the select_radio function to the change event of all radiobuttons\nfor option in [option1, option2, option3]:\n    option.bind(&quot;&lt;ButtonRelease&gt;&quot;, select_radio)\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>radio_var = tk.StringVar()</code> creates a variable that stores the current value of the selected radio button.\n- <code>option1 = ttk.Radiobutton(root, text=\"Option 1\", value=\"1\", variable=radio_var)</code> creates three Radio buttons with different options (\"Option 1\", \"Option 2\", \"Option 3\") and associates them with the same <code>radio_var</code>.\n- The Radiobutton widgets are packed with some padding.\n- <code>def select_radio(): selected_option = radio_var.get(); print(f\"Selected option: {selected_option}\")</code> defines a function that retrieves the current value of the selected radio button using <code>radio_var.get()</code> and prints it to the console.\n- Each radiobutton is bound to the <code>select_radio</code> function to trigger updates whenever a new radiobutton is selected.</p>\n<h3>Example 35: Combobox Widget</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef select_option(event):\n    selected_option = combo_var.get()\n    print(f&quot;Selected option: {selected_option}&quot;)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Combobox&quot;)\n\n# Define a function to handle selection of an option from the combobox\ndef select_option(event):\n    selected_option = combo_var.get()\n    print(f&quot;Selected option: {selected_option}&quot;)\n\n# Create a Combobox widget with options &quot;Apple&quot;, &quot;Banana&quot;, and &quot;Cherry&quot;\ncombo_var = tk.StringVar()\ncombo_box = ttk.Combobox(root, textvariable=combo_var)\ncombo_box['values'] = ('Apple', 'Banana', 'Cherry')\ncombo_box.current(0)  # Set the default selection to &quot;Apple&quot;\n\n# Pack the Combobox widget with some padding\ncombo_box.pack(pady=10)\n\n# Bind the select_option function to the change event of the combobox\ncombo_box.bind('&lt;&lt;ComboboxSelected&gt;&gt;', select_option)\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>combo_var = tk.StringVar()</code> creates a variable that stores the current value selected in the combobox.\n- <code>combo_box = ttk.Combobox(root, textvariable=combo_var)</code> creates a Combobox widget and associates it with the <code>combo_var</code>.\n- The combobox is packed with some padding and has pre-defined options (\"Apple\", \"Banana\", \"Cherry\") provided via the <code>'values'</code> attribute.\n- <code>combo_box.current(0)</code> sets the default selection of the combobox to \"Apple\".\n- <code>def select_option(): selected_option = combo_var.get(); print(f\"Selected option: {selected_option}\")</code> defines a function that retrieves the current value selected in the combobox using <code>combo_var.get()</code> and prints it to the console.\n- The combobox is bound to the <code>select_option</code> function to trigger updates whenever an option is selected.</p>\n<h3>Example 36: Text Widget</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef insert_text():\n    text_widget.insert(tk.END, &quot;This is some inserted text.&quot;)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Text Widget&quot;)\n\n# Define a function to insert text into the Text widget\ndef insert_text():\n    text_widget.insert(tk.END, &quot;This is some inserted text.&quot;)\n\n# Create a Text widget with initial text\ntext_widget = tk.Text(root)  # Changed ttk.Text to tk.Text\ntext_widget.insert(tk.END, &quot;Initial text: Hello World!&quot;)\n\n# Pack the Text widget with some padding\ntext_widget.pack(pady=10)\n\n# Add a button to trigger text insertion\ninsert_button = tk.Button(root, text=&quot;Insert Text&quot;, command=insert_text)\ninsert_button.pack(pady=5)\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>text_widget = ttk.Text(root)</code> creates a Text widget.\n- <code>text_widget.insert(tk.END, \"Initial text: Hello World!\")</code> inserts some initial text into the widget at the end of its content area.\n- The Text widget is packed with some padding.\n- An <code>insert_button</code> button is created to trigger the insertion of additional text into the Text widget when clicked. The <code>insert_text</code> function is bound to this button's command attribute.</p>\n<h3>Example 37: Spinbox Widget</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef increment_value():\n    current_value = int(spinbox_var.get())\n    spinbox_var.set(current_value + 1)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Spinbox&quot;)\n\n# Define a function to increment the value in the Spinbox widget\ndef increment_value():\n    current_value = int(spinbox_var.get())\n    spinbox_var.set(current_value + 1)\n\n# Create a Spinbox widget with initial value and range\nspinbox_var = tk.StringVar()\nspinbox = ttk.Spinbox(root, textvariable=spinbox_var, from_=0, to=10)\nspinbox.pack(pady=5)\n\n# Add buttons to increment or decrement the value in the Spinbox widget\nincrement_button = tk.Button(root, text=&quot;Increment&quot;, command=increment_value)\nincrement_button.pack(side=tk.LEFT, padx=5)\ndecrement_button = tk.Button(root, text=&quot;Decrement&quot;, command=lambda: spinbox_var.set(int(spinbox_var.get()) - 1))\ndecrement_button.pack(side=tk.RIGHT, padx=5)\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>spinbox_var = tk.StringVar()</code> creates a variable that stores the current value of the Spinbox widget.\n- <code>spinbox = ttk.Spinbox(root, textvariable=spinbox_var, from_=0, to=10)</code> creates a Spinbox widget with an initial value of 0 and range from 0 to 10.\n- The Spinbox widget is packed with some padding.\n- Two buttons are added: one to increment the value in the Spinbox when clicked and another to decrement it. Both buttons call their respective functions <code>increment_value</code> and a lambda function that decrements the value by subtracting 1 from its current integer value.</p>\n<h3>Example 38: Listbox Widget</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef select_item():\n    selected_index = listbox.curselection()\n    if selected_index:\n        print(f&quot;Selected item: {listbox.get(selected_index[0])}&quot;)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Listbox&quot;)\n\n# Define a function to handle selection of an item in the Listbox widget\ndef select_item():\n    selected_index = listbox.curselection()\n    if selected_index:\n        print(f&quot;Selected item: {listbox.get(selected_index[0])}&quot;)\n\n# Create a Listbox widget with multiple options\noptions = ['Apple', 'Banana', 'Cherry', 'Date', 'Elderberry']\nlistbox = tk.Listbox(root)\nfor option in options:\n    listbox.insert(tk.END, option)\n\n# Pack the Listbox widget with some padding\nlistbox.pack(pady=10)\n\n# Add a button to trigger item selection\nselect_button = tk.Button(root, text=&quot;Select Item&quot;, command=select_item)\nselect_button.pack(pady=5)\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>listbox = tk.Listbox(root)</code> creates a Listbox widget.\n- The options for the Listbox are defined in a list called <code>options</code>.\n- Each option is inserted into the Listbox using the <code>insert</code> method, with <code>tk.END</code> indicating the end of the list. This results in a dropdown menu where users can select an item from the available options.\n- The Listbox widget is packed with some padding and has multiple selection enabled (as shown by the presence of the <code>curselection()</code> method).\n- A <code>select_button</code> button is created to trigger the selection of an item from the Listbox when clicked. The <code>select_item</code> function retrieves and prints the selected item.</p>\n<h3>Example 39: Progressbar Widget</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef update_progress():\n    progress_var.set(progress_var.get() + 10)\n    if progress_var.get() &gt;= 100:\n        progress_var.set(0)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Progressbar&quot;)\n\n# Define a function to update the Progressbar widget\ndef update_progress():\n    progress_var.set(progress_var.get() + 10)\n    if progress_var.get() &gt;= 100:\n        progress_var.set(0)\n\n# Create a Progressbar widget with initial value and range\nprogress_var = tk.IntVar()\nprogressbar = ttk.Progressbar(root, orient=tk.HORIZONTAL, length=200, mode='determinate', variable=progress_var)\nprogressbar.pack(pady=10)\n\n# Add a button to trigger progressbar update\nupdate_button = tk.Button(root, text=&quot;Update Progress&quot;, command=update_progress)\nupdate_button.pack(pady=5)\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>progress_var = tk.IntVar()</code> creates a variable that stores the current value of the Progressbar widget.\n- <code>progressbar = ttk.Progressbar(root, orient=tk.HORIZONTAL, length=200, mode='determinate', variable=progress_var)</code> creates a horizontal progressbar with an initial value of 0 and range from 0 to 100.\n- The Progressbar widget is packed with some padding and set to a 'determinate' mode, meaning it will automatically adjust its length based on the current value.\n- An <code>update_button</code> button is created to trigger the progressbar update when clicked. The <code>update_progress</code> function increments the progress by 10 each time it is called, resetting to 0 after reaching 100.</p>\n<h3>Example 40: Entry Widget</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef get_entry_value():\n    print(&quot;Entry widget value:&quot;, entry_var.get())\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Entry Widget&quot;)\n\n# Define a function to retrieve the value from the Entry widget\ndef get_entry_value():\n    print(&quot;Entry widget value:&quot;, entry_var.get())\n\n# Create an Entry widget with initial text and placeholder text\nentry_var = tk.StringVar()\nentry_widget = ttk.Entry(root, textvariable=entry_var, placeholder=&quot;Enter some text&quot;)\nentry_widget.pack(pady=10)\n\n# Add a button to trigger retrieval of the Entry widget's value\nget_button = tk.Button(root, text=&quot;Get Value&quot;, command=get_entry_value)\nget_button.pack(pady=5)\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>entry_var = tk.StringVar()</code> creates a variable that stores the current value of the Entry widget.\n- <code>entry_widget = ttk.Entry(root, textvariable=entry_var, placeholder=\"Enter some text\")</code> creates an Entry widget with an initial placeholder text and sets its text to the value stored in <code>entry_var</code>.\n- The Entry widget is packed with some padding and includes a default placeholder text which disappears when input is entered.\n- A <code>get_button</code> button is created to trigger the retrieval of the Entry widget's current value when clicked. The <code>get_entry_value</code> function retrieves and prints the current text value from the Entry widget.</p>\n<h3>Example 41: Label Widget</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef change_label_text():\n    label_var.set(&quot;Text has been changed!&quot;)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Label Widget&quot;)\n\n# Define a function to change the text of the Label widget\ndef change_label_text():\n    label_var.set(&quot;Text has been changed!&quot;)\n\n# Create a Label widget with initial text\nlabel_var = tk.StringVar(value=&quot;Initial Text&quot;)\nlabel_widget = ttk.Label(root, textvariable=label_var)\nlabel_widget.pack(pady=10)\n\n# Add a button to trigger change of the Label widget's text\nchange_button = tk.Button(root, text=&quot;Change Text&quot;, command=change_label_text)\nchange_button.pack(pady=5)\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>label_var = tk.StringVar(value=\"Initial Text\")</code> creates a variable that stores the current text of the Label widget.\n- <code>label_widget = ttk.Label(root, textvariable=label_var)</code> creates a Label widget with an initial text set to the value stored in <code>label_var</code>.\n- The Label widget is packed with some padding and initially displays \"Initial Text\".\n- A <code>change_button</code> button is created to trigger the change of the Label widget's text when clicked. The <code>change_label_text</code> function updates <code>label_var</code> to a new string, which causes the Label widget to display the updated text.</p>\n<h3>Example 42: Button Widget</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef button_clicked():\n    print(&quot;Button has been clicked!&quot;)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Button Widget&quot;)\n\n# Define a function that is called when the Button widget is clicked\ndef button_clicked():\n    print(&quot;Button has been clicked!&quot;)\n\n# Create a Button widget with initial text\nbutton_widget = ttk.Button(root, text=&quot;Click Me&quot;)\nbutton_widget.pack(pady=10)\n\n# Add an event handler to trigger the button_click function on button click\nbutton_widget.bind(&quot;&lt;Button-1&gt;&quot;, lambda event: button_clicked())\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>button_widget = ttk.Button(root, text=\"Click Me\")</code> creates a Button widget with an initial text label \"Click Me\".\n- The Button widget is packed with some padding.\n- An <code>&lt;Button-1&gt;</code> event handler is added to the button widget using the <code>bind</code> method. This handler calls the <code>button_clicked</code> function when the Button widget is clicked.</p>\n<h3>Example 43: Frame Widget</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef frame_action():\n    print(&quot;Frame has been activated!&quot;)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Frame Widget&quot;)\n\n# Define a function that is called when the Frame widget is activated\ndef frame_action():\n    print(&quot;Frame has been activated!&quot;)\n\n# Create a Frame widget\nframe_widget = ttk.Frame(root, relief=tk.SOLID)\nframe_widget.pack(pady=10)\n\n# Add an event handler to trigger the frame_action function on frame activation\nframe_widget.bind(&quot;&lt;Enter&gt;&quot;, lambda event: frame_action())\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>frame_widget = ttk.Frame(root, relief=tk.SOLID)</code> creates a Frame widget with a solid border.\n- The Frame widget is packed with some padding.\n- An <code>&lt;Enter&gt;</code> event handler is added to the frame widget using the <code>bind</code> method. This handler calls the <code>frame_action</code> function when the mouse enters the Frame widget area.</p>\n<h3>Example 44: Menu Widget</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef menu_option_selected(event):\n    selected_menu = event.widget.cget(&quot;text&quot;)\n    print(f&quot;Selected option: {selected_menu}&quot;)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Menu Widget&quot;)\n\n# Define a function that is called when a menu option is selected\ndef menu_option_selected(event):\n    selected_menu = event.widget.cget(&quot;text&quot;)\n    print(f&quot;Selected option: {selected_menu}&quot;)\n\n# Create a Menu widget with submenus\nmenu_widget = tk.Menu(root)  # Changed from ttk.Menu to tk.Menu\nfile_menu = tk.Menu(menu_widget, tearoff=0)\nfile_menu.add_command(label=&quot;New&quot;, command=lambda: print(&quot;New file created&quot;))\nfile_menu.add_command(label=&quot;Open&quot;, command=lambda: print(&quot;File opened&quot;))\nfile_menu.add_separator()\nfile_menu.add_command(label=&quot;Exit&quot;, command=root.quit)\n\nedit_menu = tk.Menu(menu_widget, tearoff=0)\nedit_menu.add_command(label=&quot;Cut&quot;, command=lambda: print(&quot;Text cut&quot;))\nedit_menu.add_command(label=&quot;Copy&quot;, command=lambda: print(&quot;Text copied&quot;))\n\nmenu_widget.add_cascade(label=&quot;File&quot;, menu=file_menu)\nmenu_widget.add_cascade(label=&quot;Edit&quot;, menu=edit_menu)\n\n# Attach the Menu widget to the root window\nroot.config(menu=menu_widget)\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>menu_widget = ttk.Menu(root)</code> creates a top-level menu widget.\n- Two submenus, \"File\" and \"Edit\", are created using the <code>Menu</code> class.\n- Commands within each submenu are added using the <code>add_command</code> method. Each command is associated with a lambda function that prints an appropriate message when called.\n- The submenus are attached to their respective parent menus using the <code>add_cascade</code> method.\n- The top-level menu widget is attached to the root window using the <code>config</code> method.</p>\n<h3>Example 45: Checkbutton Widget</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef checkbutton_toggled():\n    state = check_var.get()\n    print(f&quot;Checkbutton state: {'checked' if state else 'unchecked'}&quot;)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Checkbutton Widget&quot;)\n\n# Define a function that is called when the Checkbutton widget toggles\ndef checkbutton_toggled():\n    state = check_var.get()\n    print(f&quot;Checkbutton state: {'checked' if state else 'unchecked'}&quot;)\n\n# Create a variable to track the state of the Checkbutton\ncheck_var = tk.IntVar()\n\n# Create a Checkbutton widget\ncheck_button = ttk.Checkbutton(root, text=&quot;Enable Feature&quot;, variable=check_var)\ncheck_button.pack(pady=10)\n\n# Bind the checkbutton_toggled function to the Checkbutton widget's toggle event\ncheck_button.bind(&quot;&lt;ButtonRelease&gt;&quot;, lambda event: checkbutton_toggled())\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>check_button = ttk.Checkbutton(root, text=\"Enable Feature\")</code> creates a Checkbutton widget with the label \"Enable Feature\".\n- The Checkbutton widget is packed with some padding.\n- A <code>&lt;ButtonRelease&gt;</code> event handler is added to the checkbutton using the <code>bind</code> method. This handler calls the <code>checkbutton_toggled</code> function whenever the Checkbutton widget is toggled (i.e., when the mouse button is released after clicking it).</p>\n<h3>Example 46: Radiobutton Widget</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef radiobutton_selected(radio_button):\n    selected_option = radio_button.cget(&quot;text&quot;)\n    print(f&quot;Selected option: {selected_option}&quot;)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Radiobutton Widget&quot;)\n\n# Create Radiobutton widgets with different options\noption1_var = tk.StringVar(value=&quot;Option 1&quot;)\nradio_button1 = ttk.Radiobutton(root, text=&quot;Option 1&quot;, variable=option1_var)\noption2_var = tk.StringVar(value=&quot;Option 2&quot;)\nradio_button2 = ttk.Radiobutton(root, text=&quot;Option 2&quot;, variable=option2_var)\n\n# Pack the Radiobutton widgets\nradio_button1.pack(pady=5)\nradio_button2.pack(pady=5)\n\n# Bind the radiobutton_selected function to the selected option event for each Radiobutton widget\nradio_button1.bind(&quot;&lt;ButtonRelease&gt;&quot;, lambda event: radiobutton_selected(radio_button1))\nradio_button2.bind(&quot;&lt;ButtonRelease&gt;&quot;, lambda event: radiobutton_selected(radio_button2))\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>option1_var = tk.StringVar(value=\"Option 1\")</code> creates a StringVar variable to store the current selected option.\n- <code>radio_button1 = ttk.Radiobutton(root, text=\"Option 1\", variable=option1_var)</code> creates a Radiobutton widget with the label \"Option 1\" and associates it with the <code>option1_var</code>.\n- <code>option2_var = tk.StringVar(value=\"Option 2\")</code> creates another StringVar variable to store the current selected option.\n- <code>radio_button2 = ttk.Radiobutton(root, text=\"Option 2\", variable=option2_var)</code> creates a Radiobutton widget with the label \"Option 2\" and associates it with the <code>option2_var</code>.\n- Both Radiobutton widgets are packed with some padding.\n- <code>&lt;ButtonRelease&gt;</code> event handlers are added to each Radiobutton widget using the <code>bind</code> method. These handlers call the <code>radiobutton_selected</code> function whenever a Radiobutton widget is selected.</p>\n<h3>Example 47: Scrollbar Widget</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef scrollbar_scrolled(event):\n    print(&quot;Scrollbar scrolled&quot;)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Scrollbar Widget&quot;)\n\n# Define a function that is called when the Scrollbar widget is scrolled\ndef scrollbar_scrolled(event):\n    print(&quot;Scrollbar scrolled&quot;)\n\n# Create a Text widget and a Scrollbar widget\ntext_widget = tk.Text(root, width=30, height=10)\nscrollbar = ttk.Scrollbar(root)\n\n# Pack the widgets in a grid layout with both the widget and the scrollbar side by side\nroot.grid_rowconfigure(0, weight=1)\nroot.grid_columnconfigure(0, weight=1)\ntext_widget.grid(row=0, column=0, sticky=tk.NSEW)\nscrollbar.grid(row=0, column=1, sticky=tk.NS)\n\n# Configure the Scrollbar widget to control the Text widget\nscrollbar.config(command=text_widget.yview)\ntext_widget.config(yscrollcommand=scrollbar.set)\n\n# Bind the scrollbar_scrolled function to the Scrollbar widget's event\nscrollbar.bind(&quot;&lt;MouseWheel&gt;&quot;, lambda event: scrollbar_scrolled(event))\nscrollbar.bind(&quot;&lt;Button-4&gt;&quot;, lambda event: scrollbar_scrolled(event))\nscrollbar.bind(&quot;&lt;Button-5&gt;&quot;, lambda event: scrollbar_scrolled(event))\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>text_widget = tk.Text(root, width=30, height=10)</code> creates a Text widget with 30 characters wide and 10 lines high.\n- <code>scrollbar = ttk.Scrollbar(root)</code> creates a Scrollbar widget.\n- The widgets are packed in a grid layout using the <code>grid</code> method. The Text widget is placed in column 0, and the Scrollbar widget is placed in column 1.\n- Both columns are set to expand when the window is resized, allowing for both widgets to be scrolled independently.\n- The Scrollbar widget is configured to control the vertical scrolling of the Text widget using the <code>command</code> and <code>yscrollcommand</code> methods.\n- A <code>&lt;Scroll&gt;</code> event handler is added to the Scrollbar widget to call the <code>scrollbar_scrolled</code> function whenever the scrollbar is scrolled.</p>\n<h3>Example 48: Entry Widget</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef entry_typed(event):\n    print(&quot;Entry typed&quot;)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Entry Widget&quot;)\n\n# Define a function that is called when text is typed into the Entry widget\ndef entry_typed(event):\n    print(&quot;Entry typed&quot;)\n\n# Create an Entry widget and a label to display input\nentry = ttk.Entry(root)\nlabel = tk.Label(root, text=&quot;Type something:&quot;)\n\n# Pack the widgets in a grid layout with the label above the entry\nroot.grid_rowconfigure(0, weight=1)\nroot.grid_columnconfigure(0, weight=1)\nlabel.grid(row=0, column=0, sticky=tk.W)\nentry.grid(row=1, column=0, sticky=tk.NSEW)\n\n# Bind the entry_typed function to the Entry widget's event\nentry.bind(&quot;&lt;KeyRelease&gt;&quot;, lambda event: entry_typed(event))\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>entry = ttk.Entry(root)</code> creates an Entry widget.\n- <code>label = tk.Label(root, text=\"Type something:\")</code> creates a label to display the prompt \"Type something:\".\n- The widgets are packed in a grid layout using the <code>grid</code> method. The label is placed above the entry widget.\n- The <code>&lt;KeyRelease&gt;</code> event handler is added to the Entry widget to call the <code>entry_typed</code> function whenever text is typed into the entry.</p>\n<h3>Example 49: Listbox Widget</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef listbox_selected(event):\n    selected_item = listbox.get(listbox.curselection())\n    print(f&quot;Selected item: {selected_item}&quot;)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Listbox Widget&quot;)\n\n# Define a function that is called when an item in the Listbox widget is selected\ndef listbox_selected(event):\n    selected_item = listbox.get(listbox.curselection())\n    print(f&quot;Selected item: {selected_item}&quot;)\n\n# Create a Listbox widget with options to select from\nlistbox_options = [&quot;Option 1&quot;, &quot;Option 2&quot;, &quot;Option 3&quot;]\nlistbox = tk.Listbox(root, height=len(listbox_options))  # Changed ttk.Listbox to tk.Listbox\n\n# Populate the Listbox widget with items\nfor option in listbox_options:\n    listbox.insert(tk.END, option)\n\n# Pack the Listbox widget\nroot.grid_rowconfigure(0, weight=1)\nroot.grid_columnconfigure(0, weight=1)\nlistbox.pack(pady=5)\n\n# Bind the listbox_selected function to the Listbox widget's selection event\nlistbox.bind(&quot;&lt;&lt;ListboxSelect&gt;&gt;&quot;, lambda event: listbox_selected(event))\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>listbox_options = [\"Option 1\", \"Option 2\", \"Option 3\"]</code> creates a list of options to populate the Listbox widget.\n- <code>listbox = ttk.Listbox(root, height=len(listbox_options))</code> creates a Listbox widget with the specified number of lines.\n- The items from <code>listbox_options</code> are inserted into the Listbox widget using the <code>insert</code> method.\n- The Listbox widget is packed in the main window using the <code>grid</code> method.\n- A <code>&lt;ListboxSelect&gt;&gt;</code> event handler is added to the Listbox widget to call the <code>listbox_selected</code> function whenever an item is selected.</p>\n<h3>Example 50: Treeview Widget</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef treeview_clicked(event):\n    selected_items = treeview.selection()\n    if selected_items:\n        item = selected_items[0]\n        if treeview.item(item, &quot;values&quot;):\n            print(f&quot;Clicked on {treeview.item(item, 'values')}&quot;)\n        else:\n            print(f&quot;Clicked on {treeview.item(item, 'text')}&quot;)\n    else:\n        print(&quot;No item selected&quot;)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Treeview Widget&quot;)\n\n# Define a function that is called when an item in the Treeview widget is clicked\ndef treeview_clicked(event):\n    selected_items = treeview.selection()\n    if selected_items:\n        item = selected_items[0]\n        if treeview.item(item, &quot;values&quot;):\n            print(f&quot;Clicked on {treeview.item(item, 'values')}&quot;)\n        else:\n            print(f&quot;Clicked on {treeview.item(item, 'text')}&quot;)\n    else:\n        print(&quot;No item selected&quot;)\n\n# Create a Treeview widget with columns\ntreeview_columns = (&quot;Name&quot;, &quot;Age&quot;)\ntreeview = ttk.Treeview(root, columns=treeview_columns)\n\n# Define column headings\ntreeview.heading(&quot;Name&quot;, text=&quot;Name&quot;)\ntreeview.heading(&quot;Age&quot;, text=&quot;Age&quot;)\n\n# Insert some sample data into the Treeview widget\ntreeview.insert(&quot;&quot;, tk.END, values=(&quot;Alice&quot;, 30))\ntreeview.insert(&quot;&quot;, tk.END, values=(&quot;Bob&quot;, 25))\ntreeview.insert(&quot;&quot;, tk.END, values=(&quot;Charlie&quot;, 40))\n\n# Pack the Treeview widget\nroot.grid_rowconfigure(0, weight=1)\nroot.grid_columnconfigure(0, weight=1)\ntreeview.pack(pady=5)\n\n# Bind the treeview_clicked function to the Treeview widget's click event\ntreeview.bind(&quot;&lt;Button-1&gt;&quot;, lambda event: treeview_clicked(event))\n\n# Run the application's event loop\nroot.mainloop()\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- <code>treeview_columns = (\"Name\", \"Age\")</code> creates a list of column names for the Treeview widget.\n- <code>treeview = ttk.Treeview(root, columns=treeview_columns)</code> creates a Treeview widget with the specified columns.\n- The column headings are defined using the <code>heading</code> method.\n- Some sample data is inserted into the Treeview widget using the <code>insert</code> method.\n- The Treeview widget is packed in the main window using the <code>grid</code> method.\n- A <code>&lt;Button-1&gt;</code> event handler is added to the Treeview widget to call the <code>treeview_clicked</code> function whenever an item is clicked. This handler checks if there are values associated with the selected item and prints them, or just the text if there are no values.</p>\n<p>These examples demonstrate a variety of tkinter widgets and their functionalities, including buttons, frames, labels, entry fields, listboxes, treeviews, and more. Each example includes a detailed explanation of how to create and use the widget, as well as any additional features or options that can be customized. These snippets should provide a solid foundation for building complex GUI applications using tkinter in Python.</p>"
        },
        {
            "filename": "tkinter.scrolledtext - Scrolled Text Widget.md",
            "content": "<h1>tkinter.scrolledtext - Scrolled Text Widget</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-basic-scrolled-text-widget\">Example 1: Basic Scrolled Text Widget</a></li>\n<li><a href=\"#example-2-customizing-scrollbar-appearance\">Example 2: Customizing Scrollbar Appearance</a></li>\n<li><a href=\"#example-3-handling-text-events\">Example 3: Handling Text Events</a></li>\n<li><a href=\"#example-4-configuring-text-formatting\">Example 4: Configuring Text Formatting</a></li>\n<li><a href=\"#example-5-customizing-text-colors\">Example 5: Customizing Text Colors</a></li>\n<li><a href=\"#example-6-handling-text-selection\">Example 6: Handling Text Selection</a></li>\n</ol>\n<p>The <code>scrolledtext</code> module in Python's standard library provides a <code>ScrolledText</code> widget, which is similar to the <code>Text</code> widget but with added support for scrolling. This widget is particularly useful when you need a text entry area that can handle large amounts of text and provide easy navigation through it.</p>\n<p>Below are comprehensive examples for each functionality provided by the <code>scrolledtext</code> module:</p>\n<h3>Example 1: Basic Scrolled Text Widget</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import scrolledtext\n\ndef create_scrolled_text_window():\n    # Create the main window\n    root = tk.Tk()\n    root.title(&quot;Basic Scrolled Text Widget&quot;)\n\n    # Create a ScrolledText widget with fixed width and height\n    st = scrolledtext.ScrolledText(root, width=40, height=10)\n    st.pack(padx=10, pady=10)\n\n    # Insert some initial text into the widget\n    st.insert(tk.INSERT, &quot;This is a basic example of a ScrolledText widget.&quot;)\n\n    # Start the GUI event loop\n    root.mainloop()\n\n# Call the function to create and display the window\ncreate_scrolled_text_window()\n</code></pre>\n\n<h3>Example 2: Customizing Scrollbar Appearance</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import scrolledtext\n\ndef customize_scrollbar():\n    # Create the main window\n    root = tk.Tk()\n    root.title(&quot;Customized Scrolled Text Widget&quot;)\n\n    # Configure the appearance of the scrollbar\n    custom_scrollbar = ttk.Scrollbar(root, orient=tk.VERTICAL)\n    custom_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)\n\n    # Use the scrollbar with a ScrolledText widget\n    st = scrolledtext.ScrolledText(root, width=40, height=10, yscrollcommand=custom_scrollbar.set)\n    st.pack(padx=10, pady=10)\n\n    # Insert some initial text into the widget\n    st.insert(tk.INSERT, &quot;This example demonstrates how to customize the scrollbar appearance.&quot;)\n\n    # Configure the scrolling command for the scrollbar\n    custom_scrollbar.config(command=st.yview)\n\n    # Start the GUI event loop\n    root.mainloop()\n\n# Call the function to create and display the window\ncustomize_scrollbar()\n</code></pre>\n\n<h3>Example 3: Handling Text Events</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import scrolledtext, messagebox\n\ndef handle_text_events():\n    # Create the main window\n    root = tk.Tk()\n    root.title(&quot;Text Event Handling&quot;)\n\n    # Create a ScrolledText widget with a simple text event handler\n    st = scrolledtext.ScrolledText(root, width=40, height=10)\n    st.pack(padx=10, pady=10)\n\n    # Define an event handler function\n    def on_text_change(event):\n        messagebox.showinfo(&quot;Event Details&quot;, f&quot;Changed at position: {event.x}, {event.y}&quot;)\n\n    # Bind the text change event to the ScrolledText widget\n    st.bind(&quot;&lt;KeyRelease&gt;&quot;, on_text_change)\n\n    # Insert some initial text into the widget\n    st.insert(tk.INSERT, &quot;This example demonstrates how to handle text events.&quot;)\n\n    # Start the GUI event loop\n    root.mainloop()\n\n# Call the function to create and display the window\nhandle_text_events()\n</code></pre>\n\n<h3>Example 4: Configuring Text Formatting</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import scrolledtext, messagebox\n\ndef configure_text_formatting():\n    # Create the main window\n    root = tk.Tk()\n    root.title(&quot;Text Formatting&quot;)\n\n    # Create a ScrolledText widget with formatting options\n    st = scrolledtext.ScrolledText(root, width=40, height=10)\n    st.pack(padx=10, pady=10)\n\n    # Define functions to apply different formatting styles\n    def bold_text():\n        st.tag_add(&quot;bold&quot;, &quot;sel.first&quot;, &quot;sel.last&quot;)\n\n    def italic_text():\n        st.tag_add(&quot;italic&quot;, &quot;sel.first&quot;, &quot;sel.last&quot;)\n\n    def set_font(font_family, font_size):\n        st.tag_config(&quot;customfont&quot;, font=(font_family, font_size))\n\n    # Create buttons to apply formatting\n    bold_button = tk.Button(root, text=&quot;Bold&quot;, command=bold_text)\n    bold_button.pack(side=tk.LEFT, padx=5)\n\n    italic_button = tk.Button(root, text=&quot;Italic&quot;, command=italic_text)\n    italic_button.pack(side=tk.LEFT, padx=5)\n\n    font_family_label = tk.Label(root, text=&quot;Font Family:&quot;)\n    font_family_label.pack(side=tk.LEFT, padx=5)\n\n    font_family_entry = tk.Entry(root, width=10)\n    font_family_entry.pack(side=tk.LEFT, padx=5)\n\n    font_size_label = tk.Label(root, text=&quot;Font Size:&quot;)\n    font_size_label.pack(side=tk.LEFT, padx=5)\n\n    font_size_entry = tk.Entry(root, width=5)\n    font_size_entry.pack(side=tk.LEFT, padx=5)\n\n    set_font_button = tk.Button(root, text=&quot;Set Font&quot;, command=lambda: set_font(font_family_entry.get(), int(font_size_entry.get())))\n    set_font_button.pack(side=tk.LEFT, padx=5)\n\n    # Insert some initial text into the widget\n    st.insert(tk.INSERT, &quot;This example demonstrates how to configure text formatting.&quot;)\n\n    # Start the GUI event loop\n    root.mainloop()\n\n# Call the function to create and display the window\nconfigure_text_formatting()\n</code></pre>\n\n<h3>Example 5: Customizing Text Colors</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import scrolledtext, messagebox\n\ndef customize_text_colors():\n    # Create the main window\n    root = tk.Tk()\n    root.title(&quot;Custom Text Colors&quot;)\n\n    # Create a ScrolledText widget with color customization\n    st = scrolledtext.ScrolledText(root, width=40, height=10)\n    st.pack(padx=10, pady=10)\n\n    # Define functions to change text colors\n    def set_red_color():\n        st.tag_config(&quot;red&quot;, foreground=&quot;red&quot;)\n\n    def set_green_color():\n        st.tag_config(&quot;green&quot;, foreground=&quot;green&quot;)\n\n    def set_blue_color():\n        st.tag_config(&quot;blue&quot;, foreground=&quot;blue&quot;)\n\n    # Create buttons to apply color changes\n    red_button = tk.Button(root, text=&quot;Red&quot;, command=set_red_color)\n    red_button.pack(side=tk.LEFT, padx=5)\n\n    green_button = tk.Button(root, text=&quot;Green&quot;, command=set_green_color)\n    green_button.pack(side=tk.LEFT, padx=5)\n\n    blue_button = tk.Button(root, text=&quot;Blue&quot;, command=set_blue_color)\n    blue_button.pack(side=tk.LEFT, padx=5)\n\n    # Insert some initial text into the widget\n    st.insert(tk.INSERT, &quot;This example demonstrates how to customize text colors.&quot;)\n\n    # Start the GUI event loop\n    root.mainloop()\n\n# Call the function to create and display the window\ncustomize_text_colors()\n</code></pre>\n\n<h3>Example 6: Handling Text Selection</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import scrolledtext, messagebox\n\ndef handle_text_selection():\n    # Create the main window\n    root = tk.Tk()\n    root.title(&quot;Text Selection&quot;)\n\n    # Create a ScrolledText widget with selection handling\n    st = scrolledtext.ScrolledText(root, width=40, height=10)\n    st.pack(padx=10, pady=10)\n\n    # Define functions to handle text selections\n    def select_text():\n        selected_text = st.get(&quot;sel.first&quot;, &quot;sel.last&quot;)\n        messagebox.showinfo(&quot;Selected Text&quot;, f&quot;Selected text: {selected_text}&quot;)\n\n    # Create a button to select text\n    select_button = tk.Button(root, text=&quot;Select Text&quot;, command=select_text)\n    select_button.pack(side=tk.LEFT, padx=5)\n\n    # Insert some initial text into the widget\n    st.insert(tk.INSERT, &quot;This example demonstrates how to handle text selections.&quot;)\n\n    # Start the GUI event loop\n    root.mainloop()\n\n# Call the function to create and display the window\nhandle_text_selection()\n</code></pre>\n\n<p>These examples cover various functionalities of the <code>scrolledtext</code> module, including basic usage, customizing widget appearance, handling text events, configuring text formatting, customizing text colors, and managing text selections. Each example is designed to be self-contained and can be run independently as a standalone script.</p>"
        },
        {
            "filename": "tkinter.tix - Extension widgets for Tk.md",
            "content": "<h1>tkinter.tix - Extension widgets for Tk</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-progress-bar\">1. Progress Bar</a></li>\n<li><a href=\"#2-dialog-boxes\">2. Dialog Boxes</a></li>\n<li><a href=\"#example-message-box\">Example: Message Box</a></li>\n<li><a href=\"#example-entry-dialog\">Example: Entry Dialog</a></li>\n<li><a href=\"#3-listbox\">3. Listbox</a></li>\n<li><a href=\"#4-treeview\">4. Treeview</a></li>\n<li><a href=\"#5-scrolled-text-area\">5. Scrolled Text Area</a></li>\n<li><a href=\"#6-dialog-box-with-entry\">6. Dialog Box with Entry</a></li>\n<li><a href=\"#7-option-menu\">7. Option Menu</a></li>\n</ol>\n<p>The <code>tkinter.tix</code> module provides extension widgets that are not part of the core Tkinter toolkit but add functionality like dialog boxes, progress bars, and more. Below are comprehensive and well-documented code examples for each feature in the <code>tkinter.tix</code> module.</p>\n<h3>1. Progress Bar</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef update_progress():\n    current = int(progress_var.get())\n    if current &gt;= 100:\n        progress_var.set(0)\n    else:\n        progress_var.set(current + 5)\n\nroot = tk.Tk()\nroot.title(&quot;Progress Bar Example&quot;)\n\n# Create a variable to hold the progress value\nprogress_var = tk.IntVar(value=0)\n\n# Create a progress bar widget\nprogress_bar = ttk.Progressbar(root, orient='horizontal', mode='determinate', length=200, variable=progress_var)\nprogress_bar.pack(pady=10)\n\n# Create a button to update the progress\nupdate_button = ttk.Button(root, text=&quot;Update Progress&quot;, command=update_progress)\nupdate_button.pack()\n\nroot.mainloop()\n</code></pre>\n\n<h3>2. Dialog Boxes</h3>\n<h4>Example: Message Box</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import messagebox\nfrom tkinter import ttk  \n\ndef show_message():\n    # Display a message box with an OK button\n    response = messagebox.showinfo(&quot;Information&quot;, &quot;This is a simple information message.&quot;)\n\n    # You can also use other types like warning, error, etc.\n    if response == 'ok':\n        print(&quot;OK button clicked.&quot;)\n\nroot = tk.Tk()\nroot.title(&quot;Message Box Example&quot;)\n\n# Create a button to show the message box\nshow_button = ttk.Button(root, text=&quot;Show Message&quot;, command=show_message)\nshow_button.pack(pady=10)\n\nroot.mainloop()\n</code></pre>\n\n<h4>Example: Entry Dialog</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\nfrom tkinter import simpledialog\n\n\ndef get_name():\n    # Get input from a dialog box with an OK and Cancel button\n    name = simpledialog.askstring(&quot;Input&quot;, &quot;Please enter your name:&quot;)\n\n    if name:\n        print(f&quot;Hello, {name}!&quot;)\n\n\nroot = tk.Tk()\nroot.title(&quot;Entry Dialog Example&quot;)\n\n# Create a button to show the entry dialog\nshow_button = ttk.Button(root, text=&quot;Get Name&quot;, command=get_name)\nshow_button.pack(pady=10)\n\nroot.mainloop()\n</code></pre>\n\n<h3>3. Listbox</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import scrolledtext, ttk\n\ndef add_item():\n    item = listbox.get(listbox.curselection())\n    if item:\n        print(f&quot;Item added: {item}&quot;)\n\ndef remove_item():\n    item = listbox.get(listbox.curselection())\n    if item:\n        listbox.delete(listbox.curselection())\n\nroot = tk.Tk()\nroot.title(&quot;Listbox Example&quot;)\n\n# Create a scrolled text area for the listbox\nscrolled_text = scrolledtext.ScrolledText(root, width=40, height=10)\nscrolled_text.pack(pady=10)\n\n# Create a listbox widget\nlistbox = tk.Listbox(scrolled_text)\nlistbox.insert(tk.END, &quot;Item 1&quot;, &quot;Item 2&quot;, &quot;Item 3&quot;)\nlistbox.pack()\n\n# Create buttons to add and remove items from the listbox\nadd_button = ttk.Button(root, text=&quot;Add Selected Item&quot;, command=add_item)\nadd_button.pack(pady=5)\n\nremove_button = ttk.Button(root, text=&quot;Remove Selected Item&quot;, command=remove_item)\nremove_button.pack(pady=5)\n\nroot.mainloop()\n</code></pre>\n\n<h3>4. Treeview</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import scrolledtext, ttk\n\ndef select_item(event):\n    item = tree.selection()[0]\n    print(f&quot;Selected item: {item}&quot;)\n\ndef add_item():\n    item = listbox.get(listbox.curselection())\n    if item:\n        tree.insert(&quot;&quot;, &quot;end&quot;, text=item)\n\nroot = tk.Tk()\nroot.title(&quot;Treeview Example&quot;)\n\n# Create a scrolled text area\nscrolled_text = scrolledtext.ScrolledText(root, width=40, height=10)\nscrolled_text.pack(pady=10)\n\n# Create a listbox widget to select items from\nlistbox = tk.Listbox(scrolled_text)\nlistbox.insert(tk.END, &quot;Item 1&quot;, &quot;Item 2&quot;, &quot;Item 3&quot;)\nlistbox.pack()\n\n# Create a treeview widget\ntree = ttk.Treeview(root, columns=(&quot;column1&quot;,))\ntree.heading(&quot;#0&quot;, text=&quot;Items&quot;)\ntree.column(&quot;column1&quot;, width=100)\ntree.insert(&quot;&quot;, &quot;end&quot;, text=&quot;Root Node&quot;)\ntree.pack(pady=10)\n\n# Bind the selection event to a function\ntree.bind(&quot;&lt;&lt;TreeviewSelect&gt;&gt;&quot;, select_item)\n\n# Create buttons to add items to the treeview and select from the listbox\nadd_button = ttk.Button(root, text=&quot;Add Selected Item&quot;, command=add_item)\nadd_button.pack(pady=5)\n\nroot.mainloop()\n</code></pre>\n\n<h3>5. Scrolled Text Area</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import scrolledtext\nfrom tkinter import ttk  # Add this import\n\ndef clear_text():\n    text.delete(&quot;1.0&quot;, &quot;end&quot;)\n\ndef insert_text(event):\n    text.insert(tk.END, event.char)\n\nroot = tk.Tk()\nroot.title(&quot;Scrolled Text Area Example&quot;)\n\n# Create a scrolled text area widget\ntext = scrolledtext.ScrolledText(root, width=40, height=10)\ntext.pack(pady=10)\n\n# Bind the key press event to a function\ntext.bind(&quot;&lt;Key&gt;&quot;, insert_text)\n\n# Create a button to clear the text in the scrolled text area\nclear_button = ttk.Button(root, text=&quot;Clear Text&quot;, command=clear_text)\nclear_button.pack(pady=5)\n\nroot.mainloop()\n</code></pre>\n\n<h3>6. Dialog Box with Entry</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import simpledialog\nfrom tkinter import ttk  # Add this import\n\n\ndef get_email():\n    # Get input from a dialog box with an OK and Cancel button\n    email = simpledialog.askstring(&quot;Input&quot;, &quot;Please enter your email:&quot;)\n\n    if email:\n        print(f&quot;Email entered: {email}&quot;)\n\n\nroot = tk.Tk()\nroot.title(&quot;Dialog Box with Entry Example&quot;)\n\n# Create a button to show the entry dialog\nshow_button = ttk.Button(root, text=&quot;Get Email&quot;, command=get_email)\nshow_button.pack(pady=10)\n\nroot.mainloop()\n</code></pre>\n\n<h3>7. Option Menu</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef on_option_change(option):\n    print(f&quot;Option selected: {option}&quot;)\n\nroot = tk.Tk()\nroot.title(&quot;Option Menu Example&quot;)\n\n# Create a variable to hold the selected option\nselected_option = tk.StringVar()\n\n# Create an option menu widget with options 'Apple', 'Banana', and 'Cherry'\noption_menu = ttk.OptionMenu(root, selected_option, &quot;Apple&quot;, &quot;Banana&quot;, &quot;Cherry&quot;)\noption_menu.pack(pady=10)\n\n# Bind a function to the selection event\noption_menu.bind(&quot;&lt;&lt;ComboboxSelected&gt;&gt;&quot;, lambda event: on_option_change(selected_option.get()))\n\nroot.mainloop()\n</code></pre>\n\n<p>These examples demonstrate various functionalities provided by the <code>tkinter.tix</code> module, including progress bars, dialog boxes, listboxes, treeviews, scrolled text areas, and more. Each example is designed to be clear, concise, and follows best practices for Tkinter development.</p>"
        },
        {
            "filename": "tkinter.ttk - Tk themed widgets.md",
            "content": "<h1>tkinter.ttk - Tk themed widgets</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-creating-a-basic-toplevel-window\">1. Creating a Basic Toplevel Window</a></li>\n<li><a href=\"#2-adding-buttons\">2. Adding Buttons</a></li>\n<li><a href=\"#3-creating-entry-widgets\">3. Creating Entry Widgets</a></li>\n<li><a href=\"#4-using-checkbuttons\">4. Using Checkbuttons</a></li>\n<li><a href=\"#5-using-radiobuttons\">5. Using Radiobuttons</a></li>\n<li><a href=\"#6-using-comboboxes\">6. Using Comboboxes</a></li>\n<li><a href=\"#7-using-progress-bars\">7. Using Progress Bars</a></li>\n<li><a href=\"#8-using-scrolled-text-widgets\">8. Using Scrolled Text Widgets</a></li>\n<li><a href=\"#9-using-combobox-with-multiple-selection\">9. Using Combobox with Multiple Selection</a></li>\n<li><a href=\"#10-using-menus\">10. Using Menus</a></li>\n</ol>\n<p>The <code>ttk</code> (Themed Tk) module in the Python standard library provides a collection of high-level themed widgets that are designed to look and feel like those found in modern desktop applications. These widgets are based on the ttk toolkit, which is included with many window managers such as GTK+ and Qt. Below are comprehensive examples for each functionality available in the <code>ttk</code> module.</p>\n<h3>1. Creating a Basic Toplevel Window</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Basic Toplevel Window&quot;)\n\n# Create and pack a label widget\nlabel = ttk.Label(root, text=&quot;Welcome to Tk themed widgets!&quot;)\nlabel.pack(pady=10)\n\n# Start the Tk event loop\nroot.mainloop()\n</code></pre>\n\n<h3>2. Adding Buttons</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef button_click():\n    print(&quot;Button was clicked!&quot;)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Buttons Example&quot;)\n\n# Create and pack a button widget\nbutton = ttk.Button(root, text=&quot;Click Me&quot;, command=button_click)\nbutton.pack(pady=10)\n\n# Start the Tk event loop\nroot.mainloop()\n</code></pre>\n\n<h3>3. Creating Entry Widgets</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef get_entry_value():\n    value = entry.get()\n    print(f&quot;Entry Value: {value}&quot;)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Entry Widget Example&quot;)\n\n# Create and pack an entry widget\nentry = ttk.Entry(root, width=30)\nentry.pack(pady=10)\n\n# Create a button to trigger the entry value retrieval\nbutton = ttk.Button(root, text=&quot;Get Value&quot;, command=get_entry_value)\nbutton.pack(pady=10)\n\n# Start the Tk event loop\nroot.mainloop()\n</code></pre>\n\n<h3>4. Using Checkbuttons</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef check_button_state():\n    state = check_var.get()\n    print(f&quot;Check button is {'checked' if state else 'unchecked'}.&quot;)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Checkbutton Example&quot;)\n\n# Define a variable to store the checkbutton state\ncheck_var = tk.BooleanVar()\n\n# Create and pack a checkbutton widget\ncheck_button = ttk.Checkbutton(root, text=&quot;Enable Functionality&quot;, variable=check_var)\ncheck_button.pack(pady=10)\n\n# Create a button to trigger the state retrieval\nbutton = ttk.Button(root, text=&quot;Get State&quot;, command=check_button_state)\nbutton.pack(pady=10)\n\n# Start the Tk event loop\nroot.mainloop()\n</code></pre>\n\n<h3>5. Using Radiobuttons</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef radio_button_click(value):\n    print(f&quot;Selected value: {value}&quot;)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Radiobutton Example&quot;)\n\n# Define variables to store the selected values\nvar = tk.StringVar()\n\n# Create and pack radiobutton widgets\nradio1 = ttk.Radiobutton(root, text=&quot;Option 1&quot;, variable=var, value=&quot;option1&quot;)\nradio1.pack(pady=5)\n\nradio2 = ttk.Radiobutton(root, text=&quot;Option 2&quot;, variable=var, value=&quot;option2&quot;)\nradio2.pack(pady=5)\n\n# Create a button to trigger the selected value retrieval\nbutton = ttk.Button(root, text=&quot;Get Selection&quot;, command=lambda: radio_button_click(var.get()))\nbutton.pack(pady=10)\n\n# Start the Tk event loop\nroot.mainloop()\n</code></pre>\n\n<h3>6. Using Comboboxes</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef combobox_select(event):\n    selected_value = combobox.get()\n    print(f&quot;Selected value: {selected_value}&quot;)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Combobox Example&quot;)\n\n# Define options for the combobox\noptions = [&quot;Option 1&quot;, &quot;Option 2&quot;, &quot;Option 3&quot;]\n\n# Create and pack a combobox widget\ncombobox = ttk.Combobox(root, values=options)\ncombobox.pack(pady=10)\n\n# Bind an event to handle selection changes\ncombobox.bind(&quot;&lt;&lt;ComboboxSelected&gt;&gt;&quot;, combobox_select)\n\n# Start the Tk event loop\nroot.mainloop()\n</code></pre>\n\n<h3>7. Using Progress Bars</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef update_progress():\n    progress_var.set(progress_var.get() + 10)\n    if progress_var.get() &gt;= 100:\n        progress_bar.stop()\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Progress Bar Example&quot;)\n\n# Define variables to store the progress bar value and state\nprogress_var = tk.IntVar(value=0)\n\n# Create and pack a progress bar widget\nprogress_bar = ttk.Progressbar(root, orient=tk.HORIZONTAL, length=200, variable=progress_var)\nprogress_bar.pack(pady=10)\n\n# Start the update function to simulate progress\nroot.after(500, update_progress)\n\n# Start the Tk event loop\nroot.mainloop()\n</code></pre>\n\n<h3>8. Using Scrolled Text Widgets</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\nfrom tkinter import scrolledtext  # Add this import\n\ndef add_text():\n    text.insert(tk.END, &quot;This is some additional text.\\n&quot;)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Scrolled Text Example&quot;)\n\n# Define a frame to hold the scrolled text widget\nframe = ttk.Frame(root)\nframe.pack(pady=10)\n\n# Create and pack a scrolledtext widget\ntext = scrolledtext.ScrolledText(frame, width=40, height=5)\ntext.insert(tk.END, &quot;Hello, Tk themed widgets!\\n&quot;)\ntext.pack(pady=10)\n\n# Create a button to add more text\nbutton = ttk.Button(root, text=&quot;Add Text&quot;, command=add_text)\nbutton.pack(pady=10)\n\n# Start the Tk event loop\nroot.mainloop()\n</code></pre>\n\n<h3>9. Using Combobox with Multiple Selection</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef combo_select(event):\n    selected_values = [var.get() for var in checkbox_vars if var.get()]\n    print(f&quot;Selected values: {selected_values}&quot;)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Combobox with Multiple Selection Example&quot;)\n\n# Define options for the combobox\noptions = [&quot;Option 1&quot;, &quot;Option 2&quot;, &quot;Option 3&quot;]\n\n# Create and pack radiobuttons (checkboxes) corresponding to each option\ncheckbox_vars = [tk.BooleanVar() for _ in options]\nfor i, option in enumerate(options):\n    ttk.Checkbutton(root, text=option, variable=checkbox_vars[i]).pack(pady=5)\n\n# Create a combobox widget\ncombobox = ttk.Combobox(root, values=options)\ncombobox.pack(pady=10)\n\n# Bind an event to handle selection changes\ncombobox.bind(&quot;&lt;&lt;ComboboxSelected&gt;&gt;&quot;, combo_select)\n\n# Start the Tk event loop\nroot.mainloop()\n</code></pre>\n\n<h3>10. Using Menus</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tkinter as tk\nfrom tkinter import ttk\n\ndef menu_item_click(item):\n    print(f&quot;Menu item clicked: {item}&quot;)\n\n# Create the main window\nroot = tk.Tk()\nroot.title(&quot;Menu Example&quot;)\n\n# Define a function to create and configure menus\ndef create_menu():\n    menubar = tk.Menu(root)\n    root.config(menu=menubar)\n\n    # File menu\n    file_menu = tk.Menu(menubar, tearoff=0)\n    file_menu.add_command(label=&quot;Open&quot;, command=lambda: menu_item_click(&quot;Open&quot;))\n    file_menu.add_command(label=&quot;Save&quot;, command=lambda: menu_item_click(&quot;Save&quot;))\n    file_menu.add_separator()\n    file_menu.add_command(label=&quot;Exit&quot;, command=root.quit)\n    menubar.add_cascade(label=&quot;File&quot;, menu=file_menu)\n\n    # Edit menu\n    edit_menu = tk.Menu(menubar, tearoff=0)\n    edit_menu.add_command(label=&quot;Cut&quot;, command=lambda: menu_item_click(&quot;Cut&quot;))\n    edit_menu.add_command(label=&quot;Copy&quot;, command=lambda: menu_item_click(&quot;Copy&quot;))\n    edit_menu.add_command(label=&quot;Paste&quot;, command=lambda: menu_item_click(&quot;Paste&quot;))\n    menubar.add_cascade(label=&quot;Edit&quot;, menu=edit_menu)\n\n# Call the function to create and configure menus\ncreate_menu()\n\n# Start the Tk event loop\nroot.mainloop()\n</code></pre>\n\n<p>These examples demonstrate various functionalities of the <code>ttk</code> module, including creating basic widgets like buttons, entry fields, checkboxes, radio buttons, comboboxes, progress bars, scrolled text widgets, and more. Each example includes comments to explain each step for clarity and is suitable for inclusion in official documentation or tutorials.</p>"
        }
    ],
    "Importing Modules": [
        {
            "filename": "importlib - The implementation of import.md",
            "content": "<h1>importlib - The implementation of import</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-dynamically-importing-a-module\">1. Dynamically Importing a Module</a></li>\n<li><a href=\"#2-importing-a-module-with-aliasing\">2. Importing a Module with Aliasing</a></li>\n<li><a href=\"#3-importing-a-module-using-importlibutilmodule_from_spec\">3. Importing a Module Using <code>importlib.util.module_from_spec</code></a></li>\n<li><a href=\"#4-dynamically-importing-a-submodule\">4. Dynamically Importing a Submodule</a></li>\n<li><a href=\"#5-importing-packages\">5. Importing Packages</a></li>\n<li><a href=\"#6-handling-module-errors\">6. Handling Module Errors</a></li>\n<li><a href=\"#7-importing-specific-attributes-from-a-package\">7. Importing Specific Attributes from a Package</a></li>\n<li><a href=\"#8-using-importlibreload-to-reload-a-module\">8. Using <code>importlib.reload</code> to Reload a Module</a></li>\n</ol>\n<p>The <code>importlib</code> module in Python provides a framework for dynamically importing modules and packages. It is particularly useful when you need to load modules at runtime or when dealing with dynamic imports based on configuration or user input.</p>\n<p>Below are comprehensive examples demonstrating various functionalities provided by the <code>importlib</code> module:</p>\n<h3>1. Dynamically Importing a Module</h3>\n<pre class=\"codehilite\"><code class=\"language-python\"># Example: Dynamically importing a module and using its functions\n\nimport importlib\n\n# Dynamically import a module\nmodule = importlib.import_module(&quot;math&quot;)\n\n# Use a function from the imported module\nresult = module.sqrt(16)\nprint(f&quot;The square root of 16 is: {result}&quot;)\n\n# Importing a specific attribute from a module\nfrom math import pi\nprint(f&quot;Value of pi: {pi}&quot;)\n</code></pre>\n\n<h3>2. Importing a Module with Aliasing</h3>\n<pre class=\"codehilite\"><code class=\"language-python\"># Example: Importing a module and using it with an alias\n\nimport importlib\n\n# Dynamically import a module with an alias\nmath_module = importlib.import_module(&quot;math&quot;, &quot;m&quot;)\n\n# Use a function from the imported module using its alias\nresult = m.sqrt(16)\nprint(f&quot;The square root of 16 is: {result}&quot;)\n</code></pre>\n\n<h3>3. Importing a Module Using <code>importlib.util.module_from_spec</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\"># Example: Dynamically importing a module using importlib.util\n\nimport importlib.util\nimport sys\n\n# Create a spec for the module\nspec = importlib.util.spec_from_file_location(&quot;my_module&quot;, &quot;path/to/my_module.py&quot;)\n\n# Create a module object from the spec\nmodule = importlib.util.module_from_spec(spec)\n\n# Executing the spec to define the module\nspec.loader.exec_module(module)\n\n# Accessing and using functions from the imported module\nprint(module.my_function())\n</code></pre>\n\n<h3>4. Dynamically Importing a Submodule</h3>\n<pre class=\"codehilite\"><code class=\"language-python\"># Example: Dynamically importing a submodule and accessing its attributes\n\nimport importlib\n\n# Dynamically import a main module and then its submodule\nmain_module = importlib.import_module(&quot;my_project.main&quot;)\nsubmodule = getattr(main_module, &quot;submodule&quot;)\n\n# Access an attribute from the submodule\nprint(submodule.my_attribute)\n</code></pre>\n\n<h3>5. Importing Packages</h3>\n<pre class=\"codehilite\"><code class=\"language-python\"># Example: Importing a package and accessing its submodules\n\nimport importlib\n\n# Dynamically import a package\npackage = importlib.import_package(&quot;my_package&quot;)\n\n# Access a submodule within the package\nsubmodule = getattr(package, &quot;submodule&quot;)\n\n# Use a function from the submodule\nresult = submodule.my_function()\nprint(f&quot;The result of my_function: {result}&quot;)\n</code></pre>\n\n<h3>6. Handling Module Errors</h3>\n<pre class=\"codehilite\"><code class=\"language-python\"># Example: Handling import errors using try-except blocks\n\nimport importlib\n\ntry:\n    # Attempt to dynamically import an unknown module\n    module = importlib.import_module(&quot;unknown_module&quot;)\nexcept ImportError as e:\n    print(f&quot;Error importing module: {e}&quot;)\n</code></pre>\n\n<h3>7. Importing Specific Attributes from a Package</h3>\n<pre class=\"codehilite\"><code class=\"language-python\"># Example: Importing specific attributes from a package\n\nimport importlib\n\n# Dynamically import the main module and then use specific attributes\nmain_module = importlib.import_package(&quot;my_package.main&quot;)\n\n# Access multiple specific attributes\nattr1, attr2 = getattr(main_module, &quot;attr1&quot;), getattr(main_module, &quot;attr2&quot;)\nprint(f&quot;Attr1: {attr1}, Attr2: {attr2}&quot;)\n</code></pre>\n\n<h3>8. Using <code>importlib.reload</code> to Reload a Module</h3>\n<pre class=\"codehilite\"><code class=\"language-python\"># Example: Reloading a module with changes\n\nimport importlib\nimport time\n\n# Dynamically import a module\nmodule = importlib.import_module(&quot;my_module&quot;)\n\n# Modify the module's behavior\ndef new_function():\n    return &quot;This is a new function!&quot;\n\nsetattr(module, &quot;new_function&quot;, new_function)\n\n# Print the original function\nprint(module.original_function())\n\n# Reload the module to see changes\nimportlib.reload(module)\n\n# Print the updated function after reload\nprint(module.new_function())\n</code></pre>\n\n<p>These examples cover a range of common use cases for the <code>importlib</code> module, demonstrating its flexibility and power in dynamically managing modules and packages in Python.</p>"
        },
        {
            "filename": "importlib.abc - Abstract base classes related to import.md",
            "content": "<h1>importlib.abc - Abstract base classes related to import</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-importing-modules\">1. Importing Modules</a></li>\n<li><a href=\"#example-implementing-a-simple-importer\">Example: Implementing a Simple Importer</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#2-loading-modules\">2. Loading Modules</a></li>\n<li><a href=\"#example-using-importlibutilspec_from_file_location\">Example: Using <code>importlib.util.spec_from_file_location</code></a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#3-importing-packages\">3. Importing Packages</a></li>\n<li><a href=\"#example-using-importlibutilspec_from_loader\">Example: Using <code>importlib.util.spec_from_loader</code></a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#additional-resources\">Additional Resources</a></li>\n</ol>\n<p>The <code>importlib.abc</code> module in Python provides an abstract base class interface for importing packages. This allows you to create custom importers and manage package metadata. Below are comprehensive code examples for each functionality provided by the <code>importlib.abc</code> module:</p>\n<h3>1. Importing Modules</h3>\n<h4>Example: Implementing a Simple Importer</h4>\n<pre class=\"codehilite\"><code class=\"language-python\"># Import necessary modules from importlib.abc\nfrom importlib.abc import Loader, MetaPathFinder\n\nclass CustomLoader(Loader):\n    def __init__(self, path):\n        self.path = path\n\n    # Define the method to load the module\n    def create_module(self, spec):\n        # Create a new module object\n        return None\n\n    # Define the method to exec the module code\n    def exec_module(self, module):\n        with open(self.path, 'r') as file:\n            code = compile(file.read(), self.path, 'exec')\n            exec(code, module.__dict__)\n\nclass CustomMetaPathFinder(MetaPathFinder):\n    def find_spec(self, fullname, path=None, target=None):\n        # Define the search logic\n        if fullname == 'my_custom_module':\n            return spec_from_loader(fullname, CustomLoader('path/to/my_module.py'))\n        return None\n\n# Set up the custom finder in sys.meta_path\nsys.meta_path.append(CustomMetaPathFinder())\n\n# Import the module using the custom loader\nimport my_custom_module\n</code></pre>\n\n<h4>Explanation:</h4>\n<ul>\n<li><strong>CustomLoader</strong>: Implements <code>Loader</code> to handle the creation and execution of a Python module.</li>\n<li><code>create_module</code>: This method is not implemented as it's not needed for simple loaders.</li>\n<li>\n<p><code>exec_module</code>: Compiles and executes the module code from the specified path.</p>\n</li>\n<li>\n<p><strong>CustomMetaPathFinder</strong>: Implements <code>MetaPathFinder</code> to locate modules on the specified paths.</p>\n</li>\n<li>\n<p><code>find_spec</code>: Checks if the requested module is <code>my_custom_module</code> and returns a spec using <code>spec_from_loader</code>.</p>\n</li>\n<li>\n<p><strong>sys.meta_path</strong>: Appends the custom finder to the Python import path, allowing it to handle requests for <code>my_custom_module</code>.</p>\n</li>\n</ul>\n<h3>2. Loading Modules</h3>\n<h4>Example: Using <code>importlib.util.spec_from_file_location</code></h4>\n<pre class=\"codehilite\"><code class=\"language-python\"># Import necessary modules from importlib.util\nfrom importlib.util import spec_from_file_location, module_from_spec\n\n# Define a file and its location\nfile_path = 'path/to/my_module.py'\n\n# Create a specification for the module\nspec = spec_from_file_location('my_module', file_path)\n\n# Create an instance of the module using the specification\nmodule = module_from_spec(spec)\nspec.loader.exec_module(module)\n\n# Now you can use the module\nprint(module.__name__)\n</code></pre>\n\n<h4>Explanation:</h4>\n<ul>\n<li><strong>spec_from_file_location</strong>: Creates a <code>ModuleSpec</code> object that describes how to load the module from a file.</li>\n<li><code>module_from_spec</code>: Instantiates a new module using the provided specification.</li>\n</ul>\n<h3>3. Importing Packages</h3>\n<h4>Example: Using <code>importlib.util.spec_from_loader</code></h4>\n<pre class=\"codehilite\"><code class=\"language-python\"># Import necessary modules from importlib.abc and importlib.util\nfrom importlib.abc import Loader, MetaPathFinder\nfrom importlib.util import spec_from_file_location, module_from_spec\n\nclass PackageLoader(Loader):\n    def __init__(self, path):\n        self.path = path\n\n    # Define the method to create a package directory if needed\n    def create_package(self, fullname):\n        # Create a new directory for the package\n        os.makedirs(fullname, exist_ok=True)\n        return None\n\n    # Define the method to exec the module code\n    def exec_module(self, module):\n        with open(self.path, 'r') as file:\n            code = compile(file.read(), self.path, 'exec')\n            exec(code, module.__dict__)\n\nclass PackageMetaPathFinder(MetaPathFinder):\n    def find_spec(self, fullname, path=None, target=None):\n        # Define the search logic\n        if fullname == 'my_package':\n            spec = spec_from_loader(fullname, PackageLoader('path/to/my_package/__init__.py'))\n            return spec\n        return None\n\n# Set up the custom finder in sys.meta_path\nsys.meta_path.append(PackageMetaPathFinder())\n\n# Import the package using the custom loader\nimport my_package\n</code></pre>\n\n<h4>Explanation:</h4>\n<ul>\n<li><strong>PackageLoader</strong>: Implements <code>Loader</code> to handle the creation and execution of a Python package.</li>\n<li><code>create_package</code>: This method is not implemented as it's not needed for simple loaders.</li>\n<li>\n<p><code>exec_module</code>: Compiles and executes the package code from the specified path.</p>\n</li>\n<li>\n<p><strong>PackageMetaPathFinder</strong>: Implements <code>MetaPathFinder</code> to locate packages on the specified paths.</p>\n</li>\n<li>\n<p><code>find_spec</code>: Checks if the requested package is <code>my_package</code> and returns a spec using <code>spec_from_loader</code>.</p>\n</li>\n<li>\n<p><strong>sys.meta_path</strong>: Appends the custom finder to the Python import path, allowing it to handle requests for <code>my_package</code>.</p>\n</li>\n</ul>\n<h3>Additional Resources</h3>\n<p>For more detailed documentation on the <code>importlib.abc</code> module and related functionality, you can refer to the <a href=\"https://docs.python.org/3/library/importlib.html#importlib-abc\">official Python documentation</a>.</p>"
        },
        {
            "filename": "importlib.metadata - Accessing the import metadata.md",
            "content": "<h1>importlib.metadata - Accessing the import metadata</h1>\n<p>The <code>importlib.metadata</code> module in Python is used to access metadata about installed packages and their dependencies. It provides a way to programmatically query package information, which can be useful for creating tools that interact with Python installations or manage dependencies dynamically.</p>\n<p>Here are some code examples that demonstrate various functionalities of the <code>importlib.metadata</code> module:</p>\n<ol>\n<li><strong>Accessing Package Information:</strong>\n   ```python\n   import importlib.metadata</li>\n</ol>\n<p># Get a list of all installed packages\n   all_packages = importlib.metadata.available()\n   print(\"All Installed Packages:\", all_packages)</p>\n<p># Get details about a specific package\n   package_details = importlib.metadata.version('requests')\n   print(\"Version of requests:\", package_details)</p>\n<p># Check if a package is installed\n   is_installed = importlib.metadata.version('numpy') in all_packages\n   print(\"Is numpy installed?\", is_installed)\n   ```</p>\n<ol>\n<li><strong>Querying Package Metadata:</strong>\n   ```python\n   import importlib.metadata</li>\n</ol>\n<p># Get the description of a package\n   description = importlib.metadata.description('beautifulsoup4')\n   print(\"Description of beautifulsoup4:\", description)</p>\n<p># Retrieve all versions of a package\n   versions = list(importlib.metadata.versions('setuptools'))\n   print(\"Versions of setuptools:\", versions)\n   ```</p>\n<ol>\n<li><strong>Listing Files in an Installed Package:</strong>\n   ```python\n   import importlib.metadata</li>\n</ol>\n<p># List files in the 'requests' package\n   files = list(importlib.metadata.files('requests'))\n   for file in files:\n       print(file)\n   ```</p>\n<ol>\n<li><strong>Checking for Required Dependencies:</strong>\n   ```python\n   import importlib.metadata</li>\n</ol>\n<p># Check if a package requires a specific dependency\n   requires = importlib.metadata.requires('scipy')\n   print(\"Dependencies of scipy:\", requires)</p>\n<p># Verify if all dependencies are installed\n   is_complete_installation = all([dep in all_packages for dep in requires])\n   print(\"Is the complete set of dependencies installed?\", is_complete_installation)\n   ```</p>\n<ol>\n<li><strong>Handling Distribution Metadata:</strong>\n   ```python\n   import importlib.metadata</li>\n</ol>\n<p># Access distribution metadata from a package\n   dist_info = importlib.metadata.distribution('pandas')\n   print(\"Distribution Information:\", dist_info)</p>\n<p># Retrieve information about the distribution's URL and maintainer\n   distribution_url = dist_info.url\n   maintainer = dist_info.maintainers[0].name\n   print(\"Distribution URL:\", distribution_url)\n   print(\"Maintainer:\", maintainer)\n   ```</p>\n<ol>\n<li><strong>Using Distribution Files:</strong>\n   ```python\n   import importlib.metadata</li>\n</ol>\n<p># Access files within a distribution's package directory\n   package_files = list(dist_info.files(package='pandas'))\n   for file in package_files:\n       print(file)\n   ```</p>\n<ol>\n<li><strong>Querying Package Version Details:</strong>\n   ```python\n   import importlib.metadata</li>\n</ol>\n<p># Get detailed version information\n   version_details = dist_info.version_details()\n   print(\"Version Details:\", version_details)</p>\n<p># Check if a specific version is available\n   is_version_available = '1.2.3' in version_details.available_versions\n   print(\"Is version 1.2.3 available?\", is_version_available)\n   ```</p>\n<p>These examples cover basic operations such as listing installed packages, accessing package descriptions and versions, checking for dependencies, retrieving distribution metadata, and querying version details. Each example includes comments to explain the purpose of each section of the code.</p>"
        },
        {
            "filename": "importlib.resources - Resource reading using importers.md",
            "content": "<h1>importlib.resources - Resource reading using importers</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-accessing-a-text-file\">Example 1: Accessing a Text File</a></li>\n<li><a href=\"#example-2-accessing-a-binary-file\">Example 2: Accessing a Binary File</a></li>\n<li><a href=\"#example-3-accessing-a-directory-containing-resources\">Example 3: Accessing a Directory Containing Resources</a></li>\n<li><a href=\"#example-4-accessing-a-resource-using-a-context-manager\">Example 4: Accessing a Resource Using a Context Manager</a></li>\n<li><a href=\"#example-5-accessing-a-resource-using-files-method\">Example 5: Accessing a Resource Using <code>files</code> Method</a></li>\n<li><a href=\"#example-6-accessing-a-resource-using-open-method\">Example 6: Accessing a Resource Using <code>open</code> Method</a></li>\n<li><a href=\"#example-7-accessing-a-resource-using-as_file-method\">Example 7: Accessing a Resource Using <code>as_file</code> Method</a></li>\n<li><a href=\"#example-8-accessing-a-resource-using-exists-method\">Example 8: Accessing a Resource Using <code>exists</code> Method</a></li>\n<li><a href=\"#example-9-accessing-a-resource-using-in_directory-method\">Example 9: Accessing a Resource Using <code>in_directory</code> Method</a></li>\n</ol>\n<p>The <code>importlib.resources</code> module provides a robust interface for accessing resources within a package or other importable resource. This module is particularly useful for managing resources like configuration files, data files, and other non-code artifacts that are included in Python packages.</p>\n<p>Here are some comprehensive code examples demonstrating various functionalities of the <code>importlib.resources</code> module:</p>\n<h3>Example 1: Accessing a Text File</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import importlib.resources as res\n\n# Define the package name and resource path\npackage_name = &quot;example_package&quot;\nresource_path = &quot;resources/config.txt&quot;\n\n# Open and read the text file\nwith res.open_text(package_name, resource_path) as f:\n    content = f.read()\n    print(&quot;Content of config.txt:&quot;)\n    print(content)\n</code></pre>\n\n<h3>Example 2: Accessing a Binary File</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import importlib.resources as res\n\n# Define the package name and resource path\npackage_name = &quot;example_package&quot;\nresource_path = &quot;resources/data.bin&quot;\n\n# Open and read the binary file\nwith res.open_binary(package_name, resource_path) as f:\n    data = f.read()\n    print(&quot;Content of data.bin:&quot;)\n    print(data)\n</code></pre>\n\n<h3>Example 3: Accessing a Directory Containing Resources</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import importlib.resources as res\n\n# Define the package name and directory path\npackage_name = &quot;example_package&quot;\ndirectory_path = &quot;resources&quot;\n\n# List all files in the specified directory\nwith res.files(package_name).iterdir() as files:\n    print(&quot;Files in resources directory:&quot;)\n    for file in files:\n        print(file.name)\n</code></pre>\n\n<h3>Example 4: Accessing a Resource Using a Context Manager</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import importlib.resources as res\n\n# Define the package name and resource path\npackage_name = &quot;example_package&quot;\nresource_path = &quot;resources/another.txt&quot;\n\n# Use the context manager to open and read the file\ncontent = res.read_text(package_name, resource_path)\nprint(&quot;Content of another.txt:&quot;)\nprint(content)\n</code></pre>\n\n<h3>Example 5: Accessing a Resource Using <code>files</code> Method</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import importlib.resources as res\n\n# Define the package name\npackage_name = &quot;example_package&quot;\n\n# Get the directory containing resources\nresources_dir = res.files(package_name)\n\n# List all files in the resources directory\nfor file_path in resources_dir.iterdir():\n    print(file_path)\n</code></pre>\n\n<h3>Example 6: Accessing a Resource Using <code>open</code> Method</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import importlib.resources as res\n\n# Define the package name and resource path\npackage_name = &quot;example_package&quot;\nresource_path = &quot;resources/another.txt&quot;\n\n# Open and read the file using the open method\nwith resources.open(package_name, resource_path) as f:\n    content = f.read()\n    print(&quot;Content of another.txt:&quot;)\n    print(content)\n</code></pre>\n\n<h3>Example 7: Accessing a Resource Using <code>as_file</code> Method</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import importlib.resources as res\n\n# Define the package name and resource path\npackage_name = &quot;example_package&quot;\nresource_path = &quot;resources/another.txt&quot;\n\n# Get the file object using as_file\nfile_obj = resources.as_file(res.files(package_name) / resource_path)\n\n# Read the content of the file\ncontent = file_obj.read()\nprint(&quot;Content of another.txt:&quot;)\nprint(content)\n</code></pre>\n\n<h3>Example 8: Accessing a Resource Using <code>exists</code> Method</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import importlib.resources as res\n\n# Define the package name and resource path\npackage_name = &quot;example_package&quot;\nresource_path = &quot;resources/config.txt&quot;\n\n# Check if the resource exists\nif res.exists(package_name, resource_path):\n    print(&quot;Resource config.txt exists.&quot;)\nelse:\n    print(&quot;Resource config.txt does not exist.&quot;)\n</code></pre>\n\n<h3>Example 9: Accessing a Resource Using <code>in_directory</code> Method</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import importlib.resources as res\n\n# Define the package name and directory path\npackage_name = &quot;example_package&quot;\ndirectory_path = &quot;resources&quot;\n\n# Check if a specific file exists within a directory\nif res.in_directory(package_name, directory_path) / &quot;another.txt&quot;.exists():\n    print(&quot;File another.txt exists in resources directory.&quot;)\nelse:\n    print(&quot;File another.txt does not exist in resources directory.&quot;)\n</code></pre>\n\n<p>These examples demonstrate various ways to access and manage resources using the <code>importlib.resources</code> module. Each example is self-contained and includes comments for clarity. You can integrate these examples into your Python projects to efficiently handle resource files within packages or other importable resources.</p>"
        },
        {
            "filename": "importlib.util - Utility code for importers.md",
            "content": "<h1>importlib.util - Utility code for importers</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-creating-a-module-spec\">1. Creating a Module Spec</a></li>\n<li><a href=\"#2-specifying-attributes-to-resolve\">2. Specifying Attributes to Resolve</a></li>\n<li><a href=\"#3-specifying-a-custom-loader\">3. Specifying a Custom Loader</a></li>\n<li><a href=\"#4-specifying-initialization-globals\">4. Specifying Initialization Globals</a></li>\n<li><a href=\"#5-specifying-a-custom-module-class\">5. Specifying a Custom Module Class</a></li>\n<li><a href=\"#6-loading-a-module-from-source\">6. Loading a Module from Source</a></li>\n<li><a href=\"#7-loading-a-module-from-a-zip-file\">7. Loading a Module from a ZIP File</a></li>\n<li><a href=\"#8-loading-a-module-from-a-remote-url\">8. Loading a Module from a Remote URL</a></li>\n<li><a href=\"#9-specifying-initialization-path\">9. Specifying Initialization Path</a></li>\n</ol>\n<p>The <code>importlib.util</code> module is part of the Python Standard Library, providing utilities to manage imports dynamically. Below are comprehensive code examples for various functionalities within this module:</p>\n<h3>1. Creating a Module Spec</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import importlib.util\n\n# Define the path to the file you want to import\nfile_path = '/path/to/your/module.py'\n\n# Create a spec object using importlib.util.module_from_spec()\nspec = importlib.util.spec_from_file_location('module_name', file_path)\n\n# Create an instance of the module using importlib.util.module_from_spec()\nmy_module = importlib.util.module_from_spec(spec)\n\n# Load the module\nspec.loader.exec_module(my_module)\n\n# Now you can use my_module as a regular Python module\nprint(my_module.my_function())\n</code></pre>\n\n<h3>2. Specifying Attributes to Resolve</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import importlib.util\n\n# Define the path to the file and the attributes to resolve\nfile_path = '/path/to/your/module.py'\nattributes = ['my_attribute']\n\n# Create a spec object using importlib.util.module_from_spec()\nspec = importlib.util.spec_from_file_location('module_name', file_path)\n\n# Create an instance of the module using importlib.util.module_from_spec()\nmy_module = importlib.util.module_from_spec(spec)\n\n# Set attributes that need to be resolved\nspec.loader.exec_module(my_module, init_globals={'__all__': attributes})\n\n# Now you can access my_attribute directly from the module\nprint(my_module.my_attribute)\n</code></pre>\n\n<h3>3. Specifying a Custom Loader</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import importlib.util\n\nclass MyLoader(importlib._bootstrap.ModuleSpec):\n    def __init__(self, name, path, loader=None):\n        super().__init__(name, path, loader)\n\n    def find_spec(self, *args, **kwargs):\n        # Implement custom logic to find the spec\n        return super().find_spec(*args, **kwargs)\n\n    def get_data(self, path):\n        # Implement custom logic to read data\n        with open(path, 'rb') as f:\n            return f.read()\n\n# Define the path to the file and specify a custom loader\nfile_path = '/path/to/your/module.py'\nloader = MyLoader('module_name', file_path)\n\n# Create a spec object using importlib.util.spec_from_file_location()\nspec = importlib.util.module_from_spec(loader)\n\n# Load the module\nspec.loader.exec_module(spec.module)\n\n# Now you can use spec.module as a regular Python module\nprint(spec.module.my_function())\n</code></pre>\n\n<h3>4. Specifying Initialization Globals</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import importlib.util\n\n# Define the path to the file and specify initialization globals\nfile_path = '/path/to/your/module.py'\ninit_globals = {'__all__': ['my_public_attribute']}\n\n# Create a spec object using importlib.util.module_from_spec()\nspec = importlib.util.spec_from_file_location('module_name', file_path)\n\n# Create an instance of the module using importlib.util.module_from_spec()\nmy_module = importlib.util.module_from_spec(spec)\n\n# Set initialization globals\nspec.loader.exec_module(my_module, init_globals=init_globals)\n\n# Now you can access my_public_attribute directly from the module\nprint(my_module.my_public_attribute)\n</code></pre>\n\n<h3>5. Specifying a Custom Module Class</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import importlib.util\n\nclass MyModule:\n    def __init__(self):\n        self.my_variable = 'Hello, World!'\n\n# Define the path to the file and specify the custom module class\nfile_path = '/path/to/your/module.py'\nmodule_class = MyModule\n\n# Create a spec object using importlib.util.module_from_spec()\nspec = importlib.util.spec_from_file_location('module_name', file_path)\n\n# Create an instance of the module using importlib.util.module_from_spec()\nmy_module = importlib.util.module_from_spec(spec, module_class)\n\n# Load the module\nspec.loader.exec_module(my_module)\n\n# Now you can use my_module as a regular Python module with MyModule class\nprint(my_module.my_variable)\n</code></pre>\n\n<h3>6. Loading a Module from Source</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import importlib.util\n\n# Define the source code of the module\nsource_code = &quot;&quot;&quot;\ndef hello():\n    return 'Hello, World!'\n&quot;&quot;&quot;\n\n# Create a spec object using importlib.util.spec_from_source()\nspec = importlib.util.spec_from_loader('module_name', None)\n\n# Create an instance of the module using importlib.util.module_from_spec()\nmy_module = importlib.util.module_from_spec(spec)\n\n# Execute the source code\nexec(source_code, my_module.__dict__)\n\n# Now you can use my_module.hello() as a regular Python function\nprint(my_module.hello())\n</code></pre>\n\n<h3>7. Loading a Module from a ZIP File</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import importlib.util\n\n# Define the path to the ZIP file and the module name within it\nzip_file_path = '/path/to/your/module.zip'\nmodule_name = 'subpackage.module'\n\n# Create a spec object using importlib.util.spec_from_zip_location()\nspec = importlib.util.spec_from_file_location(module_name, zip_file_path)\n\n# Load the module from the ZIP file\nimportlib.util.module_from_spec(spec).load_module()\n\n# Now you can use subpackage.module as a regular Python module\nprint(subpackage.module.my_function())\n</code></pre>\n\n<h3>8. Loading a Module from a Remote URL</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import importlib.util\nimport urllib.request\n\n# Define the URL to the module file\nurl = 'https://example.com/path/to/module.py'\n\n# Create a spec object using importlib.util.spec_from_url()\nspec = importlib.util.spec_from_file_location('module_name', url)\n\n# Load the module from the remote URL\nmy_module = importlib.util.module_from_spec(spec)\nurllib.request.urlretrieve(url, 'temp_module.py')  # Download the file first\nspec.loader.exec_module(my_module)\n\n# Now you can use my_module as a regular Python module\nprint(my_module.my_function())\n</code></pre>\n\n<h3>9. Specifying Initialization Path</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import importlib.util\n\n# Define the path to the directory containing the module\ninit_path = '/path/to/your/module'\n\n# Create a spec object using importlib.util.spec_from_file_location()\nspec = importlib.util.spec_from_file_location('module_name', init_path)\n\n# Load the module from the specified directory\nmy_module = importlib.util.module_from_spec(spec)\nmy_module.__file__ = spec.origin  # Set the file path manually\n\n# Now you can use my_module as a regular Python module\nprint(my_module.my_function())\n</code></pre>\n\n<p>These examples demonstrate various ways to use <code>importlib.util</code> for dynamic module loading in Python, covering different scenarios such as importing from files, URLs, and ZIP files, as well as specifying custom loaders, modules classes, and initialization paths.</p>"
        },
        {
            "filename": "modulefinder - Find modules used by a script.md",
            "content": "<h1>modulefinder - Find modules used by a script</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-basic-usage\">1. Basic Usage</a></li>\n<li><a href=\"#example-finding-modules-used-by-a-script\">Example: Finding Modules Used by a Script</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#2-analyzing-modules-with-modulefinder\">2. Analyzing Modules with ModuleFinder</a></li>\n<li><a href=\"#example-using-modulefinder-for-detailed-analysis\">Example: Using ModuleFinder for Detailed Analysis</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#3-customizing-modulefinder\">3. Customizing ModuleFinder</a></li>\n<li><a href=\"#example-filtering-modules-by-type\">Example: Filtering Modules by Type</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#4-handling-large-scripts\">4. Handling Large Scripts</a></li>\n</ol>\n<p>The <code>modulefinder</code> module is part of Python's standard library, which provides tools to analyze and manage Python package installations. It allows you to find and analyze the imports in a Python script or module. Below are comprehensive code examples for various functionalities provided by the <code>modulefinder</code> module.</p>\n<h3>1. Basic Usage</h3>\n<h4>Example: Finding Modules Used by a Script</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import sys\nfrom importlib.util import find_spec\n\n# List of scripts to analyze\nscripts = [\n    &quot;example_script.py&quot;,\n]\n\nfor script in scripts:\n    print(f&quot;Analyzing {script}:&quot;)\n\n    # Find the spec for the script module\n    spec = find_spec(script)\n    if spec is None:\n        print(f&quot;No module found for: {script}&quot;)\n    else:\n        print(&quot;Modules used by&quot;, script, &quot;are:&quot;)\n\n        # Walk through all imports in the spec\n        for submodule in spec.submodules:\n            if submodule.loader is not None:\n                print(submodule.name)\n</code></pre>\n\n<h4>Explanation:</h4>\n<ul>\n<li><strong>Importing <code>sys</code> and <code>find_spec</code>:</strong> These are essential modules for interacting with the Python runtime.</li>\n<li><strong>Finding Script Modules:</strong> The <code>find_spec()</code> function is used to locate the import spec of a module. This returns an object that provides information about the module, including its name, path, and loader.</li>\n<li><strong>Iterating Through Submodules:</strong> The <code>submodules</code> attribute contains all submodules imported by the script.</li>\n</ul>\n<h3>2. Analyzing Modules with ModuleFinder</h3>\n<h4>Example: Using ModuleFinder for Detailed Analysis</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import sys\nfrom importlib.util import find_spec\nfrom modulefinder import ModuleFinder\n\n# List of scripts to analyze\nscripts = [\n    &quot;example_script.py&quot;,\n]\n\nfor script in scripts:\n    print(f&quot;Analyzing {script}:&quot;)\n\n    # Create a ModuleFinder instance\n    finder = ModuleFinder()\n\n    # Run the finder on the script\n    finder.run_script(script)\n\n    # Print found modules\n    for mod in finder.modules.values():\n        if mod.name not in sys.builtin_module_names:\n            print(f&quot;Module: {mod.name}, File: {mod.file}&quot;)\n\n    # Print missing imports\n    for mod_name, err in finder.errors.items():\n        print(f&quot;Error importing {mod_name}: {err}&quot;)\n</code></pre>\n\n<h4>Explanation:</h4>\n<ul>\n<li><strong>Using <code>ModuleFinder</code>:</strong> This class is used to perform more comprehensive analysis of modules and their dependencies.</li>\n<li><strong>Running the Finder:</strong> The <code>run_script()</code> method processes the script and records all imported modules and any errors encountered.</li>\n<li><strong>Handling Results:</strong> The found modules are stored in the <code>finder.modules</code> dictionary, where each module has a <code>name</code> and <code>file</code> attribute.</li>\n</ul>\n<h3>3. Customizing ModuleFinder</h3>\n<h4>Example: Filtering Modules by Type</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import sys\nfrom importlib.util import find_spec\nfrom modulefinder import ModuleFinder\n\n# List of scripts to analyze\nscripts = [\n    &quot;example_script.py&quot;,\n]\n\nfor script in scripts:\n    print(f&quot;Analyzing {script}:&quot;)\n\n    # Create a ModuleFinder instance and specify include standard library modules\n    finder = ModuleFinder()\n    finder.add_package_path(&quot;&quot;)\n\n    # Run the finder on the script\n    finder.run_script(script)\n\n    # Filter out built-in modules\n    found_modules = [mod.name for mod in finder.modules.values() if mod.file is not None]\n\n    print(&quot;Modules used by&quot;, script, &quot;are:&quot;)\n    for module in found_modules:\n        print(module)\n</code></pre>\n\n<h4>Explanation:</h4>\n<ul>\n<li><strong>Including Standard Library Modules:</strong> By adding the package path with <code>finder.add_package_path(\"\")</code>, all standard library modules are included.</li>\n<li><strong>Filtering Built-in Modules:</strong> The code filters out built-in modules by checking if the <code>file</code> attribute is not <code>None</code>.</li>\n</ul>\n<h3>4. Handling Large Scripts</h3>\n<h4>Example: Analyzing a Large Script</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import sys\nfrom importlib.util import find_spec\nfrom modulefinder import ModuleFinder\n\n# List of large scripts to analyze\nlarge_scripts = [\n    &quot;large_script.py&quot;,\n]\n\nfor script in large_scripts:\n    print(f&quot;Analyzing {script}:&quot;)\n\n    # Create a ModuleFinder instance\n    finder = ModuleFinder()\n\n    # Run the finder on the script\n    finder.run_script(script)\n\n    # Print total number of modules found\n    total_modules = len(finder.modules)\n    print(f&quot;Total modules found in {script}: {total_modules}&quot;)\n\n    # Print top 10 most imported modules\n    import_counts = {mod.name: mod.importer.count for mod in finder.modules.values() if mod.importer is not None}\n    top_10 = sorted(import_counts.items(), key=lambda x: x[1], reverse=True)[:10]\n\n    print(&quot;\\nTop 10 most imported modules:&quot;)\n    for module, count in top_10:\n        print(f&quot;Module: {module}, Imports: {count}&quot;)\n</code></pre>\n\n<h4>Explanation:</h4>\n<ul>\n<li><strong>Running the Finder on a Large Script:</strong> The <code>run_script()</code> method is used to process large scripts efficiently.</li>\n<li><strong>Counting Module Imports:</strong> The script counts how many times each module is imported and prints the top 10 most imported modules.</li>\n</ul>\n<h3>Conclusion</h3>\n<p>These examples demonstrate various functionalities of the <code>modulefinder</code> module, including basic usage, detailed analysis with <code>ModuleFinder</code>, customizing module searching, handling large scripts, and filtering out built-in modules. Each example includes comments to help understand the code's purpose and functionality.</p>"
        },
        {
            "filename": "pkgutil - Package extension utility.md",
            "content": "<h1>pkgutil - Package extension utility</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-find-all-modules-in-a-package\">Example 1: Find All Modules in a Package</a></li>\n<li><a href=\"#example-2-access-a-module-dynamically\">Example 2: Access a Module Dynamically</a></li>\n<li><a href=\"#example-3-list-entry-points\">Example 3: List Entry Points</a></li>\n<li><a href=\"#example-4-find-all-subpackages\">Example 4: Find All Subpackages</a></li>\n<li><a href=\"#example-5-find-a-resource-in-a-package\">Example 5: Find a Resource in a Package</a></li>\n</ol>\n<p><strong>pkgutil Module Examples</strong></p>\n<p>The <code>pkgutil</code> module provides a set of functions to explore and load Python packages, including finding modules, entry points, and other related resources.</p>\n<h3>Example 1: Find All Modules in a Package</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import pkgutil\n\n# Define the package name\npackage_name = 'example_package'\n\ntry:\n    # Use pkgutil.iter_modules() to find all modules in the specified package\n    for module_loader, module_name, ispkg in pkgutil.iter_modules([package_name]):\n        if not ispkg:  # Skip packages\n            print(f&quot;Module found: {module_name}&quot;)\n\nexcept ImportError as e:\n    print(f&quot;Error: {e}&quot;)\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- <strong><code>pkgutil.iter_modules()</code></strong>: This function returns an iterator yielding a tuple of three values for each module in the package. The first value is the <code>importer</code>, which may be <code>None</code>; the second is the module name; and the third indicates if it's a package.\n- <strong>Filtering Non-Packages</strong>: The example checks if <code>ispkg</code> is <code>False</code> to filter out non-package modules.</p>\n<h3>Example 2: Access a Module Dynamically</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import pkgutil\n\n# Define the package and module names\npackage_name = 'example_package'\nmodule_name = 'example_module'\n\ntry:\n    # Use importlib.import_module() to dynamically load the specified module\n    module = pkgutil.import_module(f&quot;{package_name}.{module_name}&quot;)\n\n    # Access a function or variable from the module\n    result = module.some_function()\n    print(result)\n\nexcept ImportError as e:\n    print(f&quot;Error: {e}&quot;)\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- <strong><code>pkgutil.import_module()</code></strong>: This function dynamically imports a module by name.\n- <strong>Example Use Case</strong>: The example accesses a function named <code>some_function</code> from the specified module.</p>\n<h3>Example 3: List Entry Points</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import pkgutil\nfrom importlib_metadata import entry_points\n\n# Define the distribution name and group (e.g., 'console_scripts')\ndistribution_name = 'example_distribution'\ngroup = 'console_scripts'\n\ntry:\n    # Use entry_points() to list all entry points for a specified distribution and group\n    entry_points_list = entry_points(distribution_name=distribution_name, group=group)\n\n    for ep in entry_points_list:\n        print(f&quot;Entry point: {ep.name}, command: {ep.command}&quot;)\n\nexcept ValueError as e:\n    print(f&quot;Error: {e}&quot;)\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- <strong><code>entry_points()</code></strong>: This function returns a list of <code>EntryPoint</code> objects from the distribution's metadata.\n- <strong>Example Use Case</strong>: The example lists all console script entry points for a given distribution.</p>\n<h3>Example 4: Find All Subpackages</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import pkgutil\n\n# Define the package name\npackage_name = 'example_package'\n\ntry:\n    # Use pkgutil.iter_submodules() to find all submodules in the specified package\n    for submodule_loader, submodule_name, ispkg in pkgutil.iter_modules([package_name]):\n        if ispkg:  # Only include packages\n            print(f&quot;Subpackage found: {submodule_name}&quot;)\n\nexcept ImportError as e:\n    print(f&quot;Error: {e}&quot;)\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- <strong><code>pkgutil.iter_submodules()</code></strong>: Similar to <code>iter_modules()</code>, but specifically returns submodules (i.e., packages).\n- <strong>Filtering Packages</strong>: The example filters for submodules by checking if <code>ispkg</code> is <code>True</code>.</p>\n<h3>Example 5: Find a Resource in a Package</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import pkgutil\n\n# Define the package and resource name\npackage_name = 'example_package'\nresource_name = 'path/to/resource'\n\ntry:\n    # Use pkgutil.get_data() to load a resource from the specified package\n    data = pkgutil.get_data(package_name, resource_name)\n\n    # Decode the bytes data into a string (assuming UTF-8 encoding)\n    decoded_data = data.decode('utf-8')\n    print(decoded_data)\n\nexcept FileNotFoundError as e:\n    print(f&quot;Error: {e}&quot;)\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- <strong><code>pkgutil.get_data()</code></strong>: This function loads binary data from a package.\n- <strong>Example Use Case</strong>: The example loads and decodes a resource file (e.g., a configuration file) from the specified package.</p>\n<p>These examples demonstrate various functionalities of the <code>pkgutil</code> module, including finding modules, accessing them dynamically, listing entry points, discovering subpackages, and retrieving resources. Each example is designed to be self-contained and clear, with comments explaining key steps.</p>"
        },
        {
            "filename": "runpy - Locate and run Python modules without importing them first.md",
            "content": "<h1>runpy - Locate and run Python modules without importing them first</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-running-a-standalone-python-script\">Example 1: Running a standalone Python script</a></li>\n<li><a href=\"#example-2-running-a-module-with-command-line-arguments\">Example 2: Running a module with command-line arguments</a></li>\n<li><a href=\"#example-3-running-a-module-with-custom-sysargv\">Example 3: Running a module with custom sys.argv</a></li>\n<li><a href=\"#example-4-running-a-script-in-a-different-working-directory\">Example 4: Running a script in a different working directory</a></li>\n<li><a href=\"#example-5-running-a-module-with-custom-environment-variables\">Example 5: Running a module with custom environment variables</a></li>\n<li><a href=\"#example-6-running-a-module-with-custom-import-paths\">Example 6: Running a module with custom import paths</a></li>\n</ol>\n<p>The <code>runpy</code> module in Python provides functions to locate and execute Python scripts or modules, similar to how you would use the <code>python -m</code> command from the command line. This is particularly useful for running standalone scripts that are not imported as modules into other programs.</p>\n<p>Here are some code examples demonstrating how to use the <code>runpy</code> module:</p>\n<h3>Example 1: Running a standalone Python script</h3>\n<p>Suppose you have a simple Python script named <code>my_script.py</code> with the following content:</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># my_script.py\nprint(&quot;Hello, from my_script!&quot;)\n</code></pre>\n\n<p>You can run this script using <code>runpy</code> like this:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import runpy\n\n# Run the standalone script\nrunpy.run_path('my_script.py')\n</code></pre>\n\n<h3>Example 2: Running a module with command-line arguments</h3>\n<p>If your script uses command-line arguments, you can pass them to <code>runpy</code> using the <code>args</code> parameter:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import sys\nimport runpy\n\n# Define the arguments to be passed to the script\nargs = ['my_script.py', '--arg1', 'value1']\n\n# Run the module with command-line arguments\nresult = runpy.run_path('my_script.py', args=args)\nprint(result)\n</code></pre>\n\n<h3>Example 3: Running a module with custom sys.argv</h3>\n<p>You can also customize the <code>sys.argv</code> list before running the script:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import sys\nimport runpy\n\n# Original sys.argv\noriginal_argv = sys.argv[:]\n\n# Set new arguments for sys.argv\nnew_args = ['my_script.py', '--arg1', 'value1']\n\n# Replace the original sys.argv with new ones\nsys.argv = new_args\n\n# Run the module\nresult = runpy.run_path('my_script.py')\nprint(result)\n\n# Restore the original sys.argv\nsys.argv = original_argv\n</code></pre>\n\n<h3>Example 4: Running a script in a different working directory</h3>\n<p>You can change the current working directory before running the script:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\nimport runpy\n\n# Original working directory\noriginal_dir = os.getcwd()\n\n# Set new working directory\nnew_dir = '/path/to/new/directory'\nos.chdir(new_dir)\n\n# Run the script\nresult = runpy.run_path('my_script.py')\nprint(result)\n\n# Restore the original working directory\nos.chdir(original_dir)\n</code></pre>\n\n<h3>Example 5: Running a module with custom environment variables</h3>\n<p>You can set custom environment variables before running the script:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\nimport runpy\n\n# Original environment variables\noriginal_env = dict(os.environ)\n\n# Set new environment variables\nnew_env = {'MY_VAR': 'value', 'OTHER_VAR': 'another_value'}\nos.environ.update(new_env)\n\n# Run the module\nresult = runpy.run_path('my_script.py')\nprint(result)\n\n# Restore the original environment variables\nos.environ.clear()\nos.environ.update(original_env)\n</code></pre>\n\n<h3>Example 6: Running a module with custom import paths</h3>\n<p>You can specify additional directories to search for modules when running the script:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import sys\nimport runpy\n\n# Original import path\noriginal_path = sys.path[:]\n\n# Add new directory to the import path\nnew_dir = '/path/to/new/directory'\nsys.path.append(new_dir)\n\n# Run the module\nresult = runpy.run_path('my_script.py')\nprint(result)\n\n# Restore the original import path\nsys.path = original_path\n</code></pre>\n\n<p>These examples demonstrate various ways to use the <code>runpy</code> module to execute Python scripts and modules, providing flexibility for running standalone scripts, handling command-line arguments, customizing runtime environments, and more.</p>"
        },
        {
            "filename": "zipimport - Import modules from Zip archives.md",
            "content": "<h1>zipimport - Import modules from Zip archives</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-importing-a-module-from-a-zip-archive\">Example 1: Importing a Module from a Zip Archive</a></li>\n<li><a href=\"#example-2-using-zipimporter-directly\">Example 2: Using Zipimporter Directly</a></li>\n<li><a href=\"#example-3-importing-all-modules-in-a-zip-archive\">Example 3: Importing All Modules in a ZIP Archive</a></li>\n<li><a href=\"#example-4-handling-zipfile-errors\">Example 4: Handling ZipFile Errors</a></li>\n<li><a href=\"#example-5-using-zipimport-with-pkg_resources\">Example 5: Using <code>zipimport</code> with <code>pkg_resources</code></a></li>\n<li><a href=\"#notes\">Notes:</a></li>\n</ol>\n<p>The <code>zipimport</code> module in Python allows you to import modules from a ZIP archive, which can be useful for distributing libraries as standalone ZIP files or for using pre-compiled shared objects. Here are comprehensive examples demonstrating various functionalities of the <code>zipimport</code> module.</p>\n<h3>Example 1: Importing a Module from a Zip Archive</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import zipimport\nimport sys\n\n# Specify the path to the ZIP file containing the module\nzip_path = 'path/to/your/library.zip'\nmodule_name = 'my_module'\n\n# Find the zipimporter for the ZIP archive\nzip_importer = zipimport.find_loader(module_name)\n\nif not zip_importer:\n    raise ImportError(f&quot;Module {module_name} not found in {zip_path}&quot;)\n\n# Create an instance of the importer and load the module\npackage_path, module_name = zip_importer.load_module(module_name).split('.', 1)\nsys.modules[module_name] = importlib.import_module(package_path + '.' + module_name)\n\n# Now you can use the imported module as usual\nprint(my_module.some_function())\n</code></pre>\n\n<h3>Example 2: Using Zipimporter Directly</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import zipimport\nimport sys\n\n# Specify the path to the ZIP file containing the module\nzip_path = 'path/to/your/library.zip'\nmodule_name = 'my_module'\n\n# Find the zipimporter for the ZIP archive\nzip_importer = zipimport.find_loader(module_name)\n\nif not zip_importer:\n    raise ImportError(f&quot;Module {module_name} not found in {zip_path}&quot;)\n\n# Create an instance of the importer and load the module\npackage_path, module_name = zip_importer.load_module(module_name).split('.', 1)\nsys.modules[module_name] = importlib.import_module(package_path + '.' + module_name)\n\n# Now you can use the imported module as usual\nprint(my_module.some_function())\n</code></pre>\n\n<h3>Example 3: Importing All Modules in a ZIP Archive</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import zipimport\nimport sys\n\n# Specify the path to the ZIP file containing the modules\nzip_path = 'path/to/your/library.zip'\n\n# Find all loaders for modules within the ZIP archive\nloaders = [loader for loader, name in zipimport.find_modules('', zip_path)]\n\nfor loader, name in loaders:\n    package_name, module_name = loader.load_module(name).split('.', 1)\n    sys.modules[module_name] = importlib.import_module(package_name + '.' + module_name)\n\n# Now you can use any imported modules as usual\nprint(my_module.some_function())\n</code></pre>\n\n<h3>Example 4: Handling ZipFile Errors</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import zipimport\nimport sys\n\n# Specify the path to the ZIP file containing the module\nzip_path = 'path/to/your/library.zip'\nmodule_name = 'my_module'\n\n# Find the zipimporter for the ZIP archive\nzip_importer = zipimport.find_loader(module_name)\n\nif not zip_importer:\n    try:\n        # Attempt to open the ZIP file directly and check if it contains the module\n        with zipfile.ZipFile(zip_path) as zipf:\n            if module_name in zipf.namelist():\n                sys.path.append(zip_path)\n                import my_module\n                print(my_module.some_function())\n            else:\n                raise ImportError(f&quot;Module {module_name} not found in {zip_path}&quot;)\n    except zipfile.BadZipFile:\n        print(&quot;The ZIP file is corrupted.&quot;)\n\n# Import the module using a standard import statement\n</code></pre>\n\n<h3>Example 5: Using <code>zipimport</code> with <code>pkg_resources</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from pkg_resources import resource_filename, ensure_resource\n\n# Ensure that the ZIP file is extracted to a temporary directory\nwith ensure_resource(zip_path) as temp_dir:\n    # Use zipimport directly on the extracted files\n    import zipimport\n    import sys\n\n    # Specify the module name within the ZIP archive\n    module_name = 'my_module'\n\n    # Find the zipimporter for the module\n    zip_importer = zipimport.find_loader(module_name, temp_dir)\n\n    if not zip_importer:\n        raise ImportError(f&quot;Module {module_name} not found in {zip_path}&quot;)\n\n    # Create an instance of the importer and load the module\n    package_path, module_name = zip_importer.load_module(module_name).split('.', 1)\n    sys.modules[module_name] = importlib.import_module(package_path + '.' + module_name)\n\n# Now you can use the imported module as usual\nprint(my_module.some_function())\n</code></pre>\n\n<h3>Notes:</h3>\n<ul>\n<li>Ensure that the ZIP file is accessible and that the paths are correctly specified.</li>\n<li>The <code>ensure_resource</code> function from <code>pkg_resources</code> is used to extract the ZIP file to a temporary directory, which can help manage dependencies more effectively.</li>\n<li>Error handling is included to manage cases where the module or ZIP file might not be found or corrupted.</li>\n</ul>\n<p>These examples demonstrate how to use the <code>zipimport</code> module to dynamically import modules from ZIP archives in Python.</p>"
        }
    ],
    "Internationalization": [
        {
            "filename": "gettext - Multilingual internationalization services.md",
            "content": "<h1>gettext - Multilingual internationalization services</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-basic-usage\">Example 1: Basic Usage</a></li>\n<li><a href=\"#example-2-internationalizing-strings-in-a-script\">Example 2: Internationalizing Strings in a Script</a></li>\n<li><a href=\"#example-3-loading-and-using-translations-from-multiple-files\">Example 3: Loading and Using Translations from Multiple Files</a></li>\n<li><a href=\"#example-4-internationalizing-error-messages\">Example 4: Internationalizing Error Messages</a></li>\n<li><a href=\"#example-5-localization-of-application-menus\">Example 5: Localization of Application Menus</a></li>\n<li><a href=\"#example-6-customizing-message-formats\">Example 6: Customizing Message Formats</a></li>\n<li><a href=\"#example-7-using-plural-forms\">Example 7: Using Plural Forms</a></li>\n<li><a href=\"#example-8-using-message-ids\">Example 8: Using Message IDs</a></li>\n<li><a href=\"#example-9-using-message-contexts\">Example 9: Using Message Contexts</a></li>\n<li><a href=\"#example-10-handling-plural-forms-with-message-ids-and-contexts\">Example 10: Handling Plural Forms with Message IDs and Contexts</a></li>\n</ol>\n<p>The <code>gettext</code> module is a powerful tool in Python for handling multilingual applications, allowing you to translate your application into different languages without needing to change the core logic of your program. Below are comprehensive examples demonstrating various functionalities of the <code>gettext</code> module:</p>\n<h3>Example 1: Basic Usage</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import gettext\n\n# Set up the translation environment\npath = '/path/to/your/locale/directory'  # Replace with the path to your locale files\nlang_code = 'en_US.UTF-8'  # Replace with the desired language code (e.g., 'fr_FR')\n\ngettext.bindtextdomain('your_application', path)\ngettext.textdomain('your_application')\n_ = gettext.gettext\n\n# Use the translated text in a function\ndef say_hello():\n    print(_('Hello, world!'))\n\nsay_hello()\n</code></pre>\n\n<p><strong>Explanation:</strong>\n1. <strong>Setup:</strong> The <code>bindtextdomain</code> and <code>textdomain</code> functions are used to specify the directory where the translation files are located and the domain of your application.\n2. <strong>Translation Function:</strong> <code>_ = gettext.gettext</code> is defined to use for translating strings.\n3. <strong>Usage:</strong> The <code>say_hello</code> function uses the translated text.</p>\n<h3>Example 2: Internationalizing Strings in a Script</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import gettext\n\n# Set up the translation environment\npath = '/path/to/your/locale/directory'\nlang_code = 'fr_FR.UTF-8'\n\ngettext.bindtextdomain('your_application', path)\ngettext.textdomain('your_application')\n_ = gettext.gettext\n\ndef main():\n    # Print a welcome message with internationalized text\n    print(_('Welcome to the Your Application'))\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- This script demonstrates how to use internationalized strings in a simple command-line application.\n- The <code>gettext</code> functions are used to ensure that the string 'Welcome to the Your Application' is translated into French.</p>\n<h3>Example 3: Loading and Using Translations from Multiple Files</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import gettext\n\n# Set up the translation environment\npath = '/path/to/your/locale/directory'\nlang_code = 'en_US.UTF-8'\n\ngettext.bindtextdomain('your_application', path)\ngettext.textdomain('your_application')\n_ = gettext.gettext\n\ndef say_hello():\n    # Load additional translations from separate files\n    with open(path + '/fr_FR/LC_MESSAGES/messages.po') as f:\n        po = gettext.PoFile(f, encoding='utf-8')\n        gettext._translations[lang_code] = po\n\n    print(_('Hello, world!'))\n\nsay_hello()\n</code></pre>\n\n<p><strong>Explanation:</strong>\n1. <strong>Translation Domain:</strong> The <code>gettext.bindtextdomain</code> and <code>gettext.textdomain</code> functions are used to specify the directory and domain.\n2. <strong>Additional Translations:</strong> Additional translations can be loaded from separate files using <code>gettext.PoFile</code>. This is useful for languages with extensive localization efforts.</p>\n<h3>Example 4: Internationalizing Error Messages</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import gettext\n\n# Set up the translation environment\npath = '/path/to/your/locale/directory'\nlang_code = 'en_US.UTF-8'\n\ngettext.bindtextdomain('your_application', path)\ngettext.textdomain('your_application')\n_ = gettext.gettext\n\ndef process_data(data):\n    try:\n        result = data / 0  # Simulate an error\n    except ZeroDivisionError as e:\n        # Use the translated error message\n        print(_('An error occurred: %s') % str(e))\n\nprocess_data(1)\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- This example demonstrates how to use internationalized error messages in a Python script. When an exception occurs, it is caught and a translation is used for displaying the error message.</p>\n<h3>Example 5: Localization of Application Menus</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import gettext\nfrom tkinter import Tk, Menu\n\n# Set up the translation environment\npath = '/path/to/your/locale/directory'\nlang_code = 'fr_FR.UTF-8'\n\ngettext.bindtextdomain('your_application', path)\ngettext.textdomain('your_application')\n_ = gettext.gettext\n\ndef create_menu():\n    root = Tk()\n\n    # Create a menu bar\n    menubar = Menu(root)\n    filemenu = Menu(menubar, tearoff=0)\n\n    # Add translated options to the menu\n    filemenu.add_command(label=_('Open'), command=root.quit)\n    filemenu.add_separator()\n    filemenu.add_command(label=_('Exit'), command=root.quit)\n\n    # Add the file menu to the menubar\n    menubar.add_cascade(label=_('File'), menu=filemenu)\n\n    root.config(menu=menubar)\n\n    root.mainloop()\n\ncreate_menu()\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- This example shows how to integrate <code>gettext</code> into a Tkinter application to provide localized menu options. The <code>Menu</code> class from the tkinter module is used to create and manage menus.</p>\n<h3>Example 6: Customizing Message Formats</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import gettext\n\n# Set up the translation environment\npath = '/path/to/your/locale/directory'\nlang_code = 'fr_FR.UTF-8'\n\ngettext.bindtextdomain('your_application', path)\ngettext.textdomain('your_application')\n_ = gettext.gettext\n\ndef display_message():\n    # Customize message format by using placeholders\n    name = 'Alice'\n    age = 30\n    print(_('Your name is %s and you are %d years old.') % (name, age))\n\ndisplay_message()\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- This example demonstrates how to customize the format of translated messages using Python string formatting. Placeholders in the translation strings are replaced with actual values when the <code>gettext</code> functions are used.</p>\n<h3>Example 7: Using Plural Forms</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import gettext\n\n# Set up the translation environment\npath = '/path/to/your/locale/directory'\nlang_code = 'en_US.UTF-8'\n\ngettext.bindtextdomain('your_application', path)\ngettext.textdomain('your_application')\n_ = gettext.gettext\n\ndef count_items(items):\n    plural_form = _('item') if len(items) == 1 else _('items')\n    print(_('You have %d %s.') % (len(items), plural_form))\n\ncount_items([1, 2, 3])\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- This example demonstrates the use of plural forms in translations. The <code>_</code> function is used to translate messages that change depending on the number of items, which is particularly useful for applications with multiple items.</p>\n<h3>Example 8: Using Message IDs</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import gettext\n\n# Set up the translation environment\npath = '/path/to/your/locale/directory'\nlang_code = 'en_US.UTF-8'\n\ngettext.bindtextdomain('your_application', path)\ngettext.textdomain('your_application')\n_ = gettext.gettext\n\ndef display_message():\n    # Use message IDs for different contexts\n    print(_('Welcome to the Your Application'))\n\n    # Another context with a different translation\n    print(_('Thank you for using our application.'))\n\ndisplay_message()\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- This example shows how to use message IDs to provide different translations for similar strings based on their context. This is useful for maintaining consistency in translations while providing additional variations.</p>\n<h3>Example 9: Using Message Contexts</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import gettext\n\n# Set up the translation environment\npath = '/path/to/your/locale/directory'\nlang_code = 'en_US.UTF-8'\n\ngettext.bindtextdomain('your_application', path)\ngettext.textdomain('your_application')\n_ = gettext.gettext\n\ndef display_message():\n    # Use message contexts to provide context-specific translations\n    print(_('The answer is 42.0'))  # Standard translation\n\n    # Context-specific translation for numbers\n    print(_('%d') % 42)  # Customized number format\n\ndisplay_message()\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- This example demonstrates how to use message contexts to provide context-specific translations. The <code>_%(number)d</code> syntax allows for customization of the way certain variables are displayed.</p>\n<h3>Example 10: Handling Plural Forms with Message IDs and Contexts</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import gettext\n\n# Set up the translation environment\npath = '/path/to/your/locale/directory'\nlang_code = 'en_US.UTF-8'\n\ngettext.bindtextdomain('your_application', path)\ngettext.textdomain('your_application')\n_ = gettext.gettext\n\ndef count_items(items):\n    # Use message IDs and contexts for plural forms\n    plural_form_id = _('item_plural') if len(items) == 1 else _('items_plural')\n\n    print(_('%d %s') % (len(items), plural_form_id))\n\ncount_items([1, 2, 3])\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- This example shows how to combine message IDs and contexts for handling plural forms. This is useful for applications where different messages are needed based on the number of items while maintaining consistency in their appearance.</p>\n<h3>Conclusion</h3>\n<p>The <code>gettext</code> module provides a flexible framework for internationalizing Python applications. By following these examples, you can effectively use this module to translate your application into various languages, improving its accessibility and user experience.</p>"
        },
        {
            "filename": "locale - Internationalization services.md",
            "content": "<h1>locale - Internationalization services</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#explanation\">Explanation:</a></li>\n</ol>\n<p>Below are comprehensive code examples for the <code>locale</code> module in Python, covering various functionalities related to internationalization. Each example is accompanied by comments explaining each step.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import locale\nimport datetime\n\n# Set the default locale (system-dependent)\ntry:\n    # Use the system's preferred locale settings\n    locale.setlocale(locale.LC_ALL, '')\nexcept locale.Error as e:\n    print(f&quot;Failed to set locale: {e}&quot;)\n\n# Get information about available locales\navailable_locales = locale.locale_alias.keys()\nprint(&quot;Available locales:&quot;)\nfor code in available_locales:\n    print(code)\n\n# Set a specific locale (example: French)\ntry:\n    # Setting the locale for LC_ALL, ensuring all categories are affected\n    locale.setlocale(locale.LC_ALL, 'fr_FR.UTF-8')\n    print(f&quot;Locale set to: {locale.getlocale(locale.LC_ALL)}&quot;)\nexcept locale.Error as e:\n    print(f&quot;Failed to set locale: {e}&quot;)\n\n# Get the current locale settings\ncurrent_locale = locale.getlocale()\nprint(&quot;Current locale settings:&quot;)\nprint(f&quot;Language: {current_locale[0]}, Encoding: {current_locale[1]}&quot;)\n\n# Format a number using a specific locale\nnumber = 123456.789\nformatted_number = locale.currency(number)\nprint(f&quot;Formatted currency: {formatted_number}&quot;)\n\n# Format a string with localized date and time\nnow = datetime.datetime.now()\nlocalized_date = now.strftime(&quot;%A, %B %d, %Y&quot;)\nlocalized_time = now.strftime(&quot;%I:%M %p&quot;)\nprint(f&quot;Localized Date: {localized_date}&quot;)\nprint(f&quot;Localized Time: {localized_time}&quot;)\n\n# Set the locale for LC_TIME to get localized date and time format\ntry:\n    locale.setlocale(locale.LC_TIME, 'fr_FR.UTF-8')\n    localized_date = now.strftime(&quot;%A, %B %d, %Y&quot;)\n    localized_time = now.strftime(&quot;%I:%M %p&quot;)\n    print(f&quot;Localized Date with LC_TIME: {localized_date}&quot;)\n    print(f&quot;Localized Time with LC_TIME: {localized_time}&quot;)\nexcept locale.Error as e:\n    print(f&quot;Failed to set locale: {e}&quot;)\n\n# Reset the locale settings to default\ntry:\n    locale.setlocale(locale.LC_ALL, '')\n    print(f&quot;Locale reset to system default: {locale.getlocale(locale.LC_ALL)}&quot;)\nexcept locale.Error as e:\n    print(f&quot;Failed to reset locale: {e}&quot;)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ol>\n<li><strong>Setting the Default Locale</strong>:</li>\n<li>\n<p>The <code>locale.setlocale(locale.LC_ALL, '')</code> sets the locale according to the system's preferred settings. This is useful for applications that need to adapt to user preferences.</p>\n</li>\n<li>\n<p><strong>Available Locales</strong>:</p>\n</li>\n<li>\n<p><code>locale.locale_alias.keys()</code> returns a list of all available locales. This can be helpful for users or developers who need to understand what locales are supported on their system.</p>\n</li>\n<li>\n<p><strong>Setting a Specific Locale</strong>:</p>\n</li>\n<li>\n<p><code>locale.setlocale(locale.LC_ALL, 'fr_FR.UTF-8')</code> sets the locale to French (France) using UTF-8 encoding. You can replace <code>'fr_FR.UTF-8'</code> with any other locale identifier available on your system.</p>\n</li>\n<li>\n<p><strong>Current Locale Settings</strong>:</p>\n</li>\n<li>\n<p><code>locale.getlocale()</code> retrieves the current locale settings for all categories (<code>LC_ALL</code>, <code>LC_CTYPE</code>, <code>LC_COLLATE</code>, etc.).</p>\n</li>\n<li>\n<p><strong>Formatting Numbers and Strings</strong>:</p>\n</li>\n<li><code>locale.currency(number)</code> formats a number as currency using the specified locale.</li>\n<li>\n<p><code>strftime</code> is used to format dates and times according to the locale's date and time formatting rules.</p>\n</li>\n<li>\n<p><strong>Setting LC_TIME for Locale-Specific Date/Time Formatting</strong>:</p>\n</li>\n<li>\n<p>Changing the locale to <code>LC_TIME</code> ensures that date and time formats are displayed according to the chosen locale, which can be useful for applications that need specific date/time formats.</p>\n</li>\n<li>\n<p><strong>Resetting Locale Settings</strong>:</p>\n</li>\n<li><code>locale.setlocale(locale.LC_ALL, '')</code> resets the locale settings back to their system default, ensuring that the application runs without any locale-specific configurations.</li>\n</ol>\n<p>These examples cover a range of functionalities provided by the <code>locale</code> module, allowing for effective internationalization in Python applications.</p>"
        }
    ],
    "Internet Data Handling": [
        {
            "filename": "base64 - Base16, Base32, Base64, Base85 Data Encodings.md",
            "content": "<h1>base64 - Base16, Base32, Base64, Base85 Data Encodings</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#base16-encoding\">Base16 Encoding</a></li>\n<li><a href=\"#base32-encoding\">Base32 Encoding</a></li>\n<li><a href=\"#base64-encoding\">Base64 Encoding</a></li>\n<li><a href=\"#base85-encoding\">Base85 Encoding</a></li>\n<li><a href=\"#handling-large-data\">Handling Large Data</a></li>\n</ol>\n<p>The <code>base64</code> module in Python provides functions to encode and decode data using various encoding standards such as Base16, Base32, Base64, and Base85. Below are comprehensive examples of how to use these functionalities.</p>\n<h3>Base16 Encoding</h3>\n<p><strong>Example 1: Encode a string to Base16</strong></p>\n<pre class=\"codehilite\"><code class=\"language-python\">import base64\n\n# Original string\ndata = &quot;Hello, World!&quot;\n\n# Convert bytes to Base16 encoded bytes\nbase16_bytes = base64.b16encode(data.encode('utf-8'))\n\n# Decode the Base16 bytes back to a string\nbase16_string = base16_bytes.decode('utf-8')\n\nprint(f&quot;Base16 Encoded: {base16_string}&quot;)\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- We first encode the input string <code>\"Hello, World!\"</code> into bytes using UTF-8 encoding.\n- The <code>base64.b16encode()</code> function then encodes these bytes to Base16 format.\n- Finally, we decode the resulting Base16 bytes back into a string.</p>\n<h3>Base32 Encoding</h3>\n<p><strong>Example 2: Encode a string to Base32</strong></p>\n<pre class=\"codehilite\"><code class=\"language-python\">import base64\n\n# Original string\ndata = &quot;Hello, World!&quot;\n\n# Convert bytes to Base32 encoded bytes\nbase32_bytes = base64.b32encode(data.encode('utf-8'))\n\n# Decode the Base32 bytes back to a string\nbase32_string = base32_bytes.decode('utf-8')\n\nprint(f&quot;Base32 Encoded: {base32_string}&quot;)\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- Similar to Base16, we first encode the input string into bytes.\n- The <code>base64.b32encode()</code> function converts these bytes to Base32 format.\n- We then decode the resulting Base32 bytes back into a string.</p>\n<h3>Base64 Encoding</h3>\n<p><strong>Example 3: Encode a string to Base64</strong></p>\n<pre class=\"codehilite\"><code class=\"language-python\">import base64\n\n# Original string\ndata = &quot;Hello, World!&quot;\n\n# Convert bytes to Base64 encoded bytes\nbase64_bytes = base64.b64encode(data.encode('utf-8'))\n\n# Decode the Base64 bytes back to a string\nbase64_string = base64_bytes.decode('utf-8')\n\nprint(f&quot;Base64 Encoded: {base64_string}&quot;)\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- The <code>base64.b64encode()</code> function is used to encode the input string into Base64 format.\n- We then decode the resulting Base64 bytes back into a string.</p>\n<h3>Base85 Encoding</h3>\n<p><strong>Example 4: Encode a string to Base85</strong></p>\n<pre class=\"codehilite\"><code class=\"language-python\">import base64\n\n# Original string\ndata = &quot;Hello, World!&quot;\n\n# Convert bytes to Base85 encoded bytes\nbase85_bytes = base64.b85encode(data.encode('utf-8'))\n\n# Decode the Base85 bytes back to a string\nbase85_string = base85_bytes.decode('utf-8')\n\nprint(f&quot;Base85 Encoded: {base85_string}&quot;)\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- The <code>base64.b85encode()</code> function encodes the input string into Base85 format.\n- We then decode the resulting Base85 bytes back into a string.</p>\n<h3>Handling Large Data</h3>\n<p>For handling very large data, ensure that you use streaming or chunked encoding to avoid memory issues:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import base64\n\n# Original string\ndata = &quot;This is a very long string that we want to encode using Base64.&quot;\n\n# Encode in chunks\nencoded_chunks = []\nchunk_size = 1024 * 8  # 8KB\nfor i in range(0, len(data), chunk_size):\n    encoded_chunk = base64.b64encode(data[i:i+chunk_size].encode('utf-8'))\n    encoded_chunks.append(encoded_chunk.decode('utf-8'))\n\n# Join the chunks to form the complete Base64 string\nencoded_string = ''.join(encoded_chunks)\n\nprint(f&quot;Base64 Encoded: {encoded_string}&quot;)\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- In this example, we encode the data in chunks of 8KB. This approach is useful for large datasets that cannot fit into memory at once.\n- We concatenate the encoded chunks into a single string.</p>\n<p>These examples demonstrate how to use the <code>base64</code> module to encode strings and handle large amounts of data efficiently.</p>"
        },
        {
            "filename": "binascii - Convert between binary and ASCII.md",
            "content": "<h1>binascii - Convert between binary and ASCII</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-hexadecimal-encoding\">Example 1: Hexadecimal Encoding</a></li>\n<li><a href=\"#example-2-hexadecimal-decoding\">Example 2: Hexadecimal Decoding</a></li>\n<li><a href=\"#example-3-octal-encoding\">Example 3: Octal Encoding</a></li>\n<li><a href=\"#example-4-base64-encoding\">Example 4: Base64 Encoding</a></li>\n<li><a href=\"#example-5-base64-decoding\">Example 5: Base64 Decoding</a></li>\n<li><a href=\"#example-6-binary-to-string-conversion\">Example 6: Binary to String Conversion</a></li>\n<li><a href=\"#example-7-string-to-binary-conversion\">Example 7: String to Binary Conversion</a></li>\n<li><a href=\"#example-8-hexadecimal-to-string-conversion\">Example 8: Hexadecimal to String Conversion</a></li>\n<li><a href=\"#example-9-string-to-hexadecimal-conversion\">Example 9: String to Hexadecimal Conversion</a></li>\n<li><a href=\"#example-10-base64-to-string-conversion\">Example 10: Base64 to String Conversion</a></li>\n</ol>\n<p>The <code>binascii</code> module in Python provides functions to convert between various binary formats, including hexadecimal, octal, and base64 encoding/decoding. Below are comprehensive code examples demonstrating each functionality of the <code>binascii</code> module.</p>\n<h3>Example 1: Hexadecimal Encoding</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import binascii\n\ndef hex_encoding_example():\n    &quot;&quot;&quot;\n    This example demonstrates how to convert a byte string to its hexadecimal representation.\n    &quot;&quot;&quot;\n    # Define a sample binary data as bytes\n    binary_data = b'Hello, World!'\n\n    # Convert the binary data to hexadecimal format\n    hex_representation = binascii.hexlify(binary_data)\n\n    # Print the result\n    print(f&quot;Hexadecimal Representation: {hex_representation.decode('utf-8')}&quot;)\n\n# Run the example function\nhex_encoding_example()\n</code></pre>\n\n<h3>Example 2: Hexadecimal Decoding</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import binascii\n\ndef hex_decoding_example():\n    &quot;&quot;&quot;\n    This example demonstrates how to convert a hexadecimal string back to its original byte data.\n    &quot;&quot;&quot;\n    # Define a sample hexadecimal string\n    hex_string = b'48656c6c6f2c20576f726c64'\n\n    # Convert the hexadecimal string back to binary data\n    binary_data = binascii.unhexlify(hex_string)\n\n    # Print the result\n    print(f&quot;Original Binary Data: {binary_data.decode('utf-8')}&quot;)\n\n# Run the example function\nhex_decoding_example()\n</code></pre>\n\n<h3>Example 3: Octal Encoding</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import binascii\n\ndef octal_encoding_example():\n    &quot;&quot;&quot;\n    This example demonstrates how to convert a byte string to its octal representation.\n    Note: The output is in 'o' format which is not the standard octal, but rather an internal format used by Python.\n    &quot;&quot;&quot;\n    # Define a sample binary data as bytes\n    binary_data = b'Hello, World!'\n\n    # Convert the binary data to octal format\n    octal_representation = binascii.octlify(binary_data)\n\n    # Print the result\n    print(f&quot;Octal Representation: {octal_representation.decode('utf-8')}&quot;)\n\n# Run the example function\noctal_encoding_example()\n</code></pre>\n\n<h3>Example 4: Base64 Encoding</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import binascii\n\ndef base64_encoding_example():\n    &quot;&quot;&quot;\n    This example demonstrates how to convert a byte string to its Base64 representation.\n    &quot;&quot;&quot;\n    # Define a sample binary data as bytes\n    binary_data = b'Hello, World!'\n\n    # Convert the binary data to Base64 format\n    base64_representation = binascii.b64encode(binary_data)\n\n    # Print the result\n    print(f&quot;Base64 Representation: {base64_representation.decode('utf-8')}&quot;)\n\n# Run the example function\nbase64_encoding_example()\n</code></pre>\n\n<h3>Example 5: Base64 Decoding</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import binascii\n\ndef base64_decoding_example():\n    &quot;&quot;&quot;\n    This example demonstrates how to convert a Base64 string back to its original byte data.\n    &quot;&quot;&quot;\n    # Define a sample Base64 string\n    base64_string = b'SGVsbG8sIFdvcmxkIQ=='\n\n    # Convert the Base64 string back to binary data\n    binary_data = binascii.b64decode(base64_string)\n\n    # Print the result\n    print(f&quot;Original Binary Data: {binary_data.decode('utf-8')}&quot;)\n\n# Run the example function\nbase64_decoding_example()\n</code></pre>\n\n<h3>Example 6: Binary to String Conversion</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import binascii\n\ndef binary_to_string_example():\n    &quot;&quot;&quot;\n    This example demonstrates how to convert a byte string to its ASCII representation.\n    &quot;&quot;&quot;\n    # Define a sample binary data as bytes\n    binary_data = b'Hello, World!'\n\n    # Convert the binary data to ASCII string\n    ascii_representation = binary_data.decode('utf-8')\n\n    # Print the result\n    print(f&quot;ASCII Representation: {ascii_representation}&quot;)\n\n# Run the example function\nbinary_to_string_example()\n</code></pre>\n\n<h3>Example 7: String to Binary Conversion</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import binascii\n\ndef string_to_binary_example():\n    &quot;&quot;&quot;\n    This example demonstrates how to convert an ASCII string back to its byte data.\n    &quot;&quot;&quot;\n    # Define a sample ASCII string\n    ascii_string = &quot;Hello, World!&quot;\n\n    # Convert the ASCII string to binary data\n    binary_data = ascii_string.encode('utf-8')\n\n    # Print the result\n    print(f&quot;Binary Data: {binary_data}&quot;)\n\n# Run the example function\nstring_to_binary_example()\n</code></pre>\n\n<h3>Example 8: Hexadecimal to String Conversion</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import binascii\n\ndef hex_to_string_example():\n    &quot;&quot;&quot;\n    This example demonstrates how to convert a hexadecimal string back to its ASCII representation.\n    &quot;&quot;&quot;\n    # Define a sample hexadecimal string\n    hex_string = &quot;48656c6c6f2c20576f726c64&quot;\n\n    # Convert the hexadecimal string to binary data\n    binary_data = binascii.unhexlify(hex_string)\n\n    # Convert the binary data back to ASCII string\n    ascii_representation = binary_data.decode('utf-8')\n\n    # Print the result\n    print(f&quot;ASCII Representation: {ascii_representation}&quot;)\n\n# Run the example function\nhex_to_string_example()\n</code></pre>\n\n<h3>Example 9: String to Hexadecimal Conversion</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import binascii\n\ndef string_to_hex_example():\n    &quot;&quot;&quot;\n    This example demonstrates how to convert an ASCII string to its hexadecimal representation.\n    &quot;&quot;&quot;\n    # Define a sample ASCII string\n    ascii_string = &quot;Hello, World!&quot;\n\n    # Convert the ASCII string to binary data\n    binary_data = ascii_string.encode('utf-8')\n\n    # Convert the binary data to hexadecimal format\n    hex_representation = binascii.hexlify(binary_data)\n\n    # Print the result\n    print(f&quot;Hexadecimal Representation: {hex_representation.decode('utf-8')}&quot;)\n\n# Run the example function\nstring_to_hex_example()\n</code></pre>\n\n<h3>Example 10: Base64 to String Conversion</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import binascii\n\ndef base64_to_string_example():\n    &quot;&quot;&quot;\n    This example demonstrates how to convert a Base64 string back to its ASCII representation.\n    &quot;&quot;&quot;\n    # Define a sample Base64 string\n    base64_string = &quot;SGVsbG8sIFdvcmxkIQ==&quot;\n\n    # Convert the Base64 string to binary data\n    binary_data = binascii.b64decode(base64_string)\n\n    # Convert the binary data back to ASCII string\n    ascii_representation = binary_data.decode('utf-8')\n\n    # Print the result\n    print(f&quot;ASCII Representation: {ascii_representation}&quot;)\n\n# Run the example function\nbase64_to_string_example()\n</code></pre>\n\n<h3>Example 11: String to Base64 Conversion</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import binascii\n\ndef string_to_base64_example():\n    &quot;&quot;&quot;\n    This example demonstrates how to convert an ASCII string to its Base64 representation.\n    &quot;&quot;&quot;\n    # Define a sample ASCII string\n    ascii_string = &quot;Hello, World!&quot;\n\n    # Convert the ASCII string to binary data\n    binary_data = ascii_string.encode('utf-8')\n\n    # Convert the binary data to Base64 format\n    base64_representation = binascii.b64encode(binary_data)\n\n    # Print the result\n    print(f&quot;Base64 Representation: {base64_representation.decode('utf-8')}&quot;)\n\n# Run the example function\nstring_to_base64_example()\n</code></pre>\n\n<h3>Additional Examples</h3>\n<ol>\n<li><strong>Escape Sequences to Binary Conversion</strong>:\n   ```python\n   import binascii</li>\n</ol>\n<p>def escape_sequences_to_binary():\n       \"\"\"\n       This example demonstrates how to convert escape sequences in a string back to binary data.\n       \"\"\"\n       # Define a sample string with escape sequences\n       escape_string = \"\\x48\\x65\\x6c\\x6c\\x6f\\x2c\\x20\\x57\\x6f\\x72\\x6c\\x64\"</p>\n<pre class=\"codehilite\"><code>   # Convert the escape string to binary data\n   binary_data = binascii.unhexlify(escape_string)\n\n   # Print the result\n   print(f&quot;Binary Data: {binary_data.decode('utf-8')}&quot;)\n</code></pre>\n\n<p># Run the example function\n   escape_sequences_to_binary()\n   ```</p>\n<ol>\n<li><strong>Binary to Escape Sequences Conversion</strong>:\n   ```python\n   import binascii</li>\n</ol>\n<p>def binary_to_escape_sequences():\n       \"\"\"\n       This example demonstrates how to convert binary data to its escape sequence representation.\n       \"\"\"\n       # Define a sample byte string\n       binary_data = b'Hello, World!'</p>\n<pre class=\"codehilite\"><code>   # Convert the binary data to hexadecimal format and then to escape sequences\n   hex_representation = binascii.hexlify(binary_data)\n   escape_sequences = &quot;\\\\x&quot; + &quot;\\\\x&quot;.join(hex_representation.decode('utf-8'))\n\n   # Print the result\n   print(f&quot;Escape Sequences: {escape_sequences}&quot;)\n</code></pre>\n\n<p># Run the example function\n   binary_to_escape_sequences()\n   ```</p>\n<p>These examples cover a wide range of functionalities provided by the <code>binascii</code> module, from basic conversions to more complex operations involving escape sequences. Each example is self-contained and demonstrates a specific use case for converting between different data formats using Python's <code>binascii</code> library.</p>"
        },
        {
            "filename": "email - An email and MIME handling package.md",
            "content": "<h1>email - An email and MIME handling package</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-creating-an-email-message\">Example 1: Creating an Email Message</a></li>\n<li><a href=\"#example-2-parsing-an-email-message\">Example 2: Parsing an Email Message</a></li>\n<li><a href=\"#example-3-sending-an-email-using-smtp\">Example 3: Sending an Email using SMTP</a></li>\n<li><a href=\"#example-4-attaching-files-to-email\">Example 4: Attaching Files to Email</a></li>\n<li><a href=\"#example-5-handling-email-attachments\">Example 5: Handling Email Attachments</a></li>\n<li><a href=\"#example-6-filtering-emails-from-a-mailbox\">Example 6: Filtering Emails from a Mailbox</a></li>\n<li><a href=\"#example-7-handling-email-addresses\">Example 7: Handling Email Addresses</a></li>\n</ol>\n<p>The <code>email</code> module in Python provides a comprehensive set of tools for parsing, creating, modifying, and sending email messages. Below are several examples that demonstrate how to use this module for different tasks.</p>\n<h3>Example 1: Creating an Email Message</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from email.message import EmailMessage\n\n# Create a new email message object\nmsg = EmailMessage()\n\n# Set the sender and recipient\nmsg['From'] = 'sender@example.com'\nmsg['To'] = 'receiver@example.com'\n\n# Set the subject of the email\nmsg['Subject'] = 'Hello, World!'\n\n# Add the body of the email as a plain text\nmsg.set_content('This is a simple test email message.')\n\n# Optionally, add HTML content to the email\nhtml_message = '''\n&lt;html&gt;\n&lt;head&gt;&lt;/head&gt;\n&lt;body&gt;\n&lt;p&gt;This is a &lt;strong&gt;test&lt;/strong&gt; email message with HTML content.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n'''\nmsg.add_alternative(html_message, subtype='html')\n\n# Print the full email message for debugging purposes\nprint(msg)\n\n# Save the email to a file\nwith open('email.txt', 'w') as f:\n    f.write(msg.as_string())\n</code></pre>\n\n<h3>Example 2: Parsing an Email Message</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from email.message import EmailMessage\n\n# Read the email from a file or any other source\nwith open('email.txt', 'r') as f:\n    raw_email = f.read()\n\n# Create an EmailMessage object from the raw email data\nmsg = EmailMessage.from_string(raw_email)\n\n# Access header information\nprint(f'From: {msg[&quot;From&quot;]}')\nprint(f'To: {msg[&quot;To&quot;]}')\nprint(f'Subject: {msg[&quot;Subject&quot;]}')\n\n# Check if there is any plain text content\nif msg.is_multipart() and 'plain' in msg['Content-Type']:\n    for part in msg.walk():\n        if part.get_content_type() == 'text/plain':\n            print(part.get_payload(decode=True).decode('utf-8'))\n\n# Check if there is any HTML content\nelif 'html' in msg['Content-Type']:\n    for part in msg.walk():\n        if part.get_content_type() == 'text/html':\n            print(part.get_payload(decode=True).decode('utf-8'))\n</code></pre>\n\n<h3>Example 3: Sending an Email using SMTP</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import smtplib\nfrom email.message import EmailMessage\n\n# Define the email message object\nmsg = EmailMessage()\nmsg['From'] = 'sender@example.com'\nmsg['To'] = 'receiver@example.com'\nmsg['Subject'] = 'Hello, World!'\n\n# Set the body of the email as a plain text\nmsg.set_content('This is a test email sent using SMTP.')\n\n# Connect to an SMTP server and send the email\nwith smtplib.SMTP('smtp.example.com', 587) as server:\n    server.starttls()\n    server.login('sender@example.com', 'password')\n    server.send_message(msg)\n</code></pre>\n\n<h3>Example 4: Attaching Files to Email</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import smtplib\nfrom email.message import EmailMessage\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.base import MIMEBase\nfrom email import encoders\n\n# Define the email message object\nmsg = EmailMessage()\nmsg['From'] = 'sender@example.com'\nmsg['To'] = 'receiver@example.com'\nmsg['Subject'] = 'Hello, World!'\n\n# Set the body of the email as a plain text\nmsg.set_content('This is a test email with an attachment.')\n\n# Create a multipart message to hold both the text and attachments\nmultipart_msg = MIMEMultipart()\nmultipart_msg.attach(msg)\n\n# Attach a file\nfilename = 'file_to_attach.txt'\nattachment = open(filename, &quot;rb&quot;)\n\npart = MIMEBase('application', 'octet-stream')\npart.set_payload((attachment).read())\nencoders.encode_base64(part)\npart.add_header('Content-Disposition', f&quot;attachment; filename= {filename}&quot;)\n\nmultipart_msg.attach(part)\n\n# Connect to an SMTP server and send the email\nwith smtplib.SMTP('smtp.example.com', 587) as server:\n    server.starttls()\n    server.login('sender@example.com', 'password')\n    text = multipart_msg.as_string()\n    server.sendmail('sender@example.com', 'receiver@example.com', text)\n</code></pre>\n\n<h3>Example 5: Handling Email Attachments</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from email.message import EmailMessage\nimport os\n\n# Define the email message object\nmsg = EmailMessage()\nmsg['From'] = 'sender@example.com'\nmsg['To'] = 'receiver@example.com'\nmsg['Subject'] = 'Hello, World!'\n\n# Set the body of the email as a plain text\nmsg.set_content('This is a test email with an attachment.')\n\n# Define a directory containing files to attach\ndirectory = 'files_to_attach'\nattachments = [os.path.join(directory, f) for f in os.listdir(directory)]\n\nfor filename in attachments:\n    # Create a MIMEBase object for each file\n    part = MIMEBase('application', 'octet-stream')\n    part.set_payload((open(filename, &quot;rb&quot;)).read())\n    encoders.encode_base64(part)\n    part.add_header('Content-Disposition', f&quot;attachment; filename= {filename}&quot;)\n\n    # Attach the MIMEBase object to the email message\n    msg.attach(part)\n\n# Connect to an SMTP server and send the email\nwith smtplib.SMTP('smtp.example.com', 587) as server:\n    server.starttls()\n    server.login('sender@example.com', 'password')\n    text = msg.as_string()\n    server.sendmail('sender@example.com', 'receiver@example.com', text)\n</code></pre>\n\n<h3>Example 6: Filtering Emails from a Mailbox</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import imaplib\nfrom email.parser import BytesParser\n\n# Connect to an IMAP server\nimap = imaplib.IMAP4_SSL('imap.example.com')\nimap.login('username', 'password')\n\n# Select the mailbox you want to search in (e.g., INBOX)\nimap.select('INBOX')\n\n# Search for emails with a specific keyword in the subject line\nsearch_result, data = imap.search(None, '(SUBJECT &quot;Hello&quot;)')\nemail_ids = data[0].split()\n\nfor email_id in email_ids:\n    # Fetch the raw email content\n    _, msg_bytes = imap.fetch(email_id, &quot;(RFC822)&quot;)\n    msg_str = msg_bytes[0][1]\n\n    # Parse the raw email into an EmailMessage object\n    msg = BytesParser().parsemsg(msg_str)\n\n    # Process the message (e.g., print the subject)\n    print(f'Subject: {msg[&quot;Subject&quot;]}')\n\n# Close and logout from the IMAP server\nimap.close()\nimap.logout()\n</code></pre>\n\n<h3>Example 7: Handling Email Addresses</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from email.utils import parseaddr, formataddr\n\n# Define a list of email addresses\nemail_list = [\n    ('Alice', 'alice@example.com'),\n    ('Bob', 'bob@example.org')\n]\n\n# Print each email address in the list\nfor name, email in email_list:\n    # Parse the name and email into a tuple\n    parsed_addr = parseaddr(f&quot;{name} &lt;{email}&gt;&quot;)\n\n    # Format the name and email back into a string\n    formatted_email = formataddr(parsed_addr)\n\n    print(formatted_email)\n\n# Validate an email address\nemail_to_validate = 'invalid-email'\nif parseaddr(email_to_validate):\n    print(f&quot;'{email_to_validate}' is a valid email address.&quot;)\nelse:\n    print(f&quot;'{email_to_validate}' is not a valid email address.&quot;)\n</code></pre>\n\n<p>These examples cover various aspects of handling emails using the <code>email</code> module, including creating, parsing, sending, attaching files, filtering emails from a mailbox, and manipulating email addresses. Each example is designed to be clear and self-contained, with comments explaining each step for better understanding.</p>"
        },
        {
            "filename": "json - JSON encoder and decoder.md",
            "content": "<h1>json - JSON encoder and decoder</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#explanation\">Explanation:</a></li>\n</ol>\n<p>Below are comprehensive code examples for various functionalities of the <code>json</code> module in Python, along with detailed comments explaining each step.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Importing the json module\nimport json\n\n# Example 1: Encoding a simple dictionary to JSON\ndata = {\n    &quot;name&quot;: &quot;John&quot;,\n    &quot;age&quot;: 30,\n    &quot;city&quot;: &quot;New York&quot;\n}\n\n# Using json.dumps() to convert the dictionary to a JSON string\njson_data = json.dumps(data)\nprint(&quot;Encoded JSON:&quot;, json_data)\n\n# Example 2: Encoding a Python object (list) to JSON\ndata_list = [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;]\njson_list = json.dumps(data_list)\nprint(&quot;Encoded list as JSON:&quot;, json_list)\n\n# Example 3: Decoding a JSON string back to a dictionary\njson_encoded_string = '{&quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 30, &quot;city&quot;: &quot;New York&quot;}'\ndecoded_data = json.loads(json_encoded_string)\nprint(&quot;Decoded data from JSON:&quot;, decoded_data)\n\n# Example 4: Encoding with specific indentation for readability\ndata_with_indentation = {\n    &quot;address&quot;: {\n        &quot;street&quot;: &quot;123 Main St&quot;,\n        &quot;city&quot;: &quot;Anytown&quot;\n    }\n}\njson_with_indent = json.dumps(data_with_indentation, indent=4)\nprint(&quot;Encoded data with indentation:&quot;, json_with_indent)\n\n# Example 5: Encoding to a file\nwith open('data.json', 'w') as file:\n    json.dump(data, file, indent=4)\nprint(&quot;Data written to data.json&quot;)\n\n# Example 6: Decoding from a file\nwith open('data.json', 'r') as file:\n    decoded_data_from_file = json.load(file)\nprint(&quot;Decoded data from data.json:&quot;, decoded_data_from_file)\n\n# Example 7: Handling JSON with special characters (ensure correct encoding)\nspecial_characters_data = {&quot;name&quot;: &quot;John Doe&quot;, &quot;address&quot;: &quot;123 Main St, New York, USA&quot;}\njson_special_chars = json.dumps(special_characters_data)\nprint(&quot;Encoded data with special characters:&quot;, json_special_chars)\n\n# Example 8: Encoding to a file in binary mode\nwith open('binary_data.json', 'wb') as file:\n    file.write(json.dumps(data).encode('utf-8'))\nprint(&quot;Binary data written to binary_data.json&quot;)\n\n# Example 9: Decoding from a file in binary mode\nwith open('binary_data.json', 'rb') as file:\n    decoded_binary_data = json.loads(file.read().decode('utf-8'))\nprint(&quot;Decoded binary data:&quot;, decoded_binary_data)\n\n# Example 10: Handling errors during encoding or decoding\ntry:\n    # Attempt to encode a non-serializable object\n    json.dumps([{&quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 30}, None, {&quot;nested&quot;: [1, 2, 3]}])\nexcept TypeError as e:\n    print(&quot;Error:&quot;, e)\n\n# Example 11: Encoding with custom serialization (if needed)\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\ndef person_to_dict(person):\n    return {&quot;name&quot;: person.name, &quot;age&quot;: person.age}\n\nperson = Person(&quot;Jane&quot;, 25)\njson_person = json.dumps(person, default=person_to_dict)\nprint(&quot;Encoded custom object:&quot;, json_person)\n\n# Example 12: Handling errors during encoding with custom serialization\nclass InvalidPerson:\n    def __init__(self, name):\n        self.name = name\n\ntry:\n    # Attempt to encode an invalid custom object\n    json.dumps([{&quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 30}, InvalidPerson(&quot;Jane&quot;)])\nexcept TypeError as e:\n    print(&quot;Error:&quot;, e)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ol>\n<li><strong>Encoding and Decoding</strong>:</li>\n<li><code>json.dumps()</code> converts a Python dictionary or list to a JSON string.</li>\n<li>\n<p><code>json.loads()</code> parses a JSON string back into a Python object (dictionary, list).</p>\n</li>\n<li>\n<p><strong>Indentation for Readability</strong>:</p>\n</li>\n<li>\n<p>The <code>indent</code> parameter in <code>json.dumps()</code> can be used to format the output with indentation for better readability.</p>\n</li>\n<li>\n<p><strong>Encoding to and Decoding from Files</strong>:</p>\n</li>\n<li>Use <code>open()</code> to write to or read from files.</li>\n<li><code>json.dump()</code> writes a Python object to a file.</li>\n<li>\n<p><code>json.load()</code> reads a JSON formatted file and converts it back into a Python object.</p>\n</li>\n<li>\n<p><strong>Special Characters and Encoding</strong>:</p>\n</li>\n<li>\n<p>Ensure that special characters are properly encoded by using the correct encoding when writing to or reading from files.</p>\n</li>\n<li>\n<p><strong>Binary Mode</strong>:</p>\n</li>\n<li>\n<p>Use binary mode (<code>'wb'</code> for writing and <code>'rb'</code> for reading) when dealing with binary data.</p>\n</li>\n<li>\n<p><strong>Error Handling</strong>:</p>\n</li>\n<li>Catch <code>TypeError</code> exceptions when attempting to encode non-serializable objects.</li>\n<li>\n<p>Implement custom serialization functions to handle complex objects or types that are not natively serializable by Python's default JSON encoder.</p>\n</li>\n<li>\n<p><strong>Custom Serialization</strong>:</p>\n</li>\n<li>Define a function to convert custom objects into a format that can be serialized by the <code>json</code> module.</li>\n</ol>\n<p>These examples cover various aspects of the <code>json</code> module, providing a comprehensive guide for using it in different scenarios.</p>"
        },
        {
            "filename": "mailbox - Manipulate mailboxes in various formats.md",
            "content": "<h1>mailbox - Manipulate mailboxes in various formats</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-reading-an-mbox-mailbox\">Example 1: Reading an mbox mailbox</a></li>\n<li><a href=\"#example-2-writing-to-an-mbox-mailbox\">Example 2: Writing to an mbox mailbox</a></li>\n<li><a href=\"#example-3-reading-from-a-maildir-mailbox\">Example 3: Reading from a Maildir mailbox</a></li>\n<li><a href=\"#example-4-writing-to-a-maildir-mailbox\">Example 4: Writing to a Maildir mailbox</a></li>\n<li><a href=\"#example-5-reading-from-an-imap4-mailbox\">Example 5: Reading from an IMAP4 mailbox</a></li>\n<li><a href=\"#example-6-writing-to-an-imap4-mailbox\">Example 6: Writing to an IMAP4 mailbox</a></li>\n<li><a href=\"#example-7-reading-from-a-pop3-mailbox\">Example 7: Reading from a POP3 mailbox</a></li>\n<li><a href=\"#example-8-writing-to-a-pop3-mailbox\">Example 8: Writing to a POP3 mailbox</a></li>\n<li><a href=\"#explanation\">Explanation</a></li>\n</ol>\n<p>The <code>mailbox</code> module in Python provides a consistent interface to access mailboxes in several popular formats, including mbox, Maildir, IMAP4, and POP3. Below are comprehensive examples demonstrating how to use this module for different operations.</p>\n<h3>Example 1: Reading an mbox mailbox</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import mailbox\n\n# Open an existing mbox mailbox\nwith mailbox.mbox('path/to/your/mailbox') as m:\n    # Iterate over all messages in the mailbox\n    for msg in m:\n        # Print the message ID and sender\n        print(f&quot;Message ID: {msg['Message-ID']}, From: {msg['From']}&quot;)\n\n# Example output:\n# Message ID: &lt;uuid@domain.com&gt;, From: user@example.com\n</code></pre>\n\n<h3>Example 2: Writing to an mbox mailbox</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import mailbox\n\n# Create a new empty mbox file for writing\nwith mailbox.mbox('path/to/new_mailbox') as m:\n    # Create a new email message\n    msg = mailbox.Message()\n    msg['From'] = 'sender@example.com'\n    msg['To'] = 'recipient@example.com'\n    msg['Subject'] = 'Test Message'\n    msg.set_payload(&quot;This is the body of the test message.&quot;)\n\n    # Add the message to the mailbox\n    m.add(msg)\n\n# Example output: The message will be added to the mbox file.\n</code></pre>\n\n<h3>Example 3: Reading from a Maildir mailbox</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import mailbox\n\n# Open an existing Maildir mailbox\nwith mailbox.Maildir('path/to/your/maildir') as m:\n    # Iterate over all messages in the mailbox\n    for msg in m:\n        # Print the message ID and subject\n        print(f&quot;Message ID: {msg['Message-ID']}, Subject: {msg['Subject']}&quot;)\n\n# Example output:\n# Message ID: &lt;uuid@domain.com&gt;, Subject: Test Email\n</code></pre>\n\n<h3>Example 4: Writing to a Maildir mailbox</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import mailbox\n\n# Create a new empty Maildir directory for writing\nwith mailbox.Maildir('path/to/new_maildir') as m:\n    # Create a new email message\n    msg = mailbox.Message()\n    msg['From'] = 'sender@example.com'\n    msg['To'] = 'recipient@example.com'\n    msg['Subject'] = 'Test Message'\n    msg.set_payload(&quot;This is the body of the test message.&quot;)\n\n    # Add the message to the Maildir mailbox\n    m.add(msg)\n\n# Example output: The message will be added to a new directory within the Maildir.\n</code></pre>\n\n<h3>Example 5: Reading from an IMAP4 mailbox</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import mailbox\n\n# Connect to an IMAP4 server and login\nimap = mailbox.IMAP4_SSL('imap.example.com', 993)\nimap.login('username@example.com', 'password')\n\n# Select a mailbox (e.g., INBOX)\nimap.select(&quot;INBOX&quot;)\n\n# Search for all messages\nstatus, data = imap.search(None, &quot;ALL&quot;)\nfor num in data[0].split():\n    # Fetch the email message by number\n    status, msg_data = imap.fetch(num, &quot;(RFC822)&quot;)\n    msg = mailbox.Message(msg_data[1][1])\n\n    # Print the sender and subject of the message\n    print(f&quot;Sender: {msg['From']}, Subject: {msg['Subject']}&quot;)\n\n# Example output: The sender and subject of each email will be printed.\n</code></pre>\n\n<h3>Example 6: Writing to an IMAP4 mailbox</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import mailbox\n\n# Connect to an IMAP4 server and login\nimap = mailbox.IMAP4_SSL('imap.example.com', 993)\nimap.login('username@example.com', 'password')\n\n# Select a mailbox (e.g., INBOX)\nimap.select(&quot;INBOX&quot;)\n\n# Create a new email message\nmsg = mailbox.Message()\nmsg['From'] = 'sender@example.com'\nmsg['To'] = 'recipient@example.com'\nmsg['Subject'] = 'Test Message'\nmsg.set_payload(&quot;This is the body of the test message.&quot;)\n\n# Append the message to the IMAP4 mailbox\nimap.append(&quot;INBOX&quot;, msg.as_bytes())\n\n# Example output: The message will be appended to the specified mailbox.\n</code></pre>\n\n<h3>Example 7: Reading from a POP3 mailbox</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import mailbox\n\n# Connect to a POP3 server and login\npop = mailbox.POP3('pop.example.com', 110)\npop.user('username@example.com')\npop.pass_('password')\n\n# Retrieve all messages\nnum_messages = pop.stat()[0]\nfor i in range(num_messages):\n    # Retrieve the message by index\n    msg = mailbox.Message(pop.retr(i + 1)[1])\n\n    # Print the sender and subject of the message\n    print(f&quot;Sender: {msg['From']}, Subject: {msg['Subject']}&quot;)\n\n# Example output: The sender and subject of each email will be printed.\n</code></pre>\n\n<h3>Example 8: Writing to a POP3 mailbox</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import mailbox\n\n# Connect to a POP3 server and login\npop = mailbox.POP3('pop.example.com', 110)\npop.user('username@example.com')\npop.pass_('password')\n\n# Create a new email message\nmsg = mailbox.Message()\nmsg['From'] = 'sender@example.com'\nmsg['To'] = 'recipient@example.com'\nmsg['Subject'] = 'Test Message'\nmsg.set_payload(&quot;This is the body of the test message.&quot;)\n\n# Append the message to the POP3 mailbox\npop.append(&quot;INBOX&quot;, msg.as_bytes())\n\n# Example output: The message will be appended to the specified mailbox.\n</code></pre>\n\n<h3>Explanation</h3>\n<ul>\n<li><strong>mbox</strong>: Used for reading and writing mbox files. It supports basic mail handling operations.</li>\n<li><strong>Maildir</strong>: Used for reading and writing Maildir files, which are a directory structure for storing email messages.</li>\n<li><strong>IMAP4</strong>: Connects to an IMAP4 server and allows for search and retrieval of emails, as well as appending new ones.</li>\n<li><strong>POP3</strong>: Connects to a POP3 server and provides methods to retrieve and delete emails.</li>\n</ul>\n<p>These examples demonstrate how to use the <code>mailbox</code> module to interact with different types of mailboxes in various formats. Each example includes comments that explain key operations and outputs for clarity.</p>"
        },
        {
            "filename": "mimetypes - Map filenames to MIME types.md",
            "content": "<h1>mimetypes - Map filenames to MIME types</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#explanation\">Explanation:</a></li>\n</ol>\n<p>Here is a comprehensive set of code examples for using the <code>mimetypes</code> module in Python, including comments that explain each step:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import mimetypes\n\n# Function to guess the MIME type of a file based on its extension\ndef get_mime_type(file_path):\n    &quot;&quot;&quot;\n    Given a file path, this function uses the mimetypes module to guess the MIME type.\n\n    Parameters:\n    - file_path (str): The path to the file whose MIME type is to be guessed.\n\n    Returns:\n    - str: The MIME type of the file, or 'application/octet-stream' if it cannot be determined.\n    &quot;&quot;&quot;\n    # Guess the MIME type based on the file extension\n    mime_type, _ = mimetypes.guess_type(file_path)\n\n    return mime_type\n\n# Example usage of get_mime_type function\nif __name__ == &quot;__main__&quot;:\n    file_path = 'example.txt'\n    mime_type = get_mime_type(file_path)\n    print(f&quot;The MIME type of {file_path} is: {mime_type}&quot;)\n\n# Function to register a new MIME type and its corresponding extension(s)\ndef register_new_mimetype(mime_type, extensions):\n    &quot;&quot;&quot;\n    Registers a new MIME type with the mimetypes module. This allows customizing how the\n    mimetypes module handles files with specific extensions.\n\n    Parameters:\n    - mime_type (str): The MIME type to be registered.\n    - extensions (list of str): A list of file extensions associated with this MIME type.\n    &quot;&quot;&quot;\n    # Register the new MIME type and its extensions\n    mimetypes.add_type(mime_type, *extensions)\n\n# Example usage of register_new_mimetype function\nif __name__ == &quot;__main__&quot;:\n    new_mime_type = 'application/custom'\n    new_extensions = ['custom', '.cst']\n    register_new_mimetype(new_mime_type, new_extensions)\n    print(f&quot;New MIME type '{new_mime_type}' registered for extensions: {new_extensions}&quot;)\n\n# Function to display all known MIME types and their associated file extensions\ndef list_mime_types():\n    &quot;&quot;&quot;\n    Lists all MIME types registered in the mimetypes module along with their associated file extensions.\n    &quot;&quot;&quot;\n    # Retrieve a dictionary of all MIME types and their file extensions\n    mime_map = mimetypes.types_map\n\n    # Print each MIME type and its extensions\n    for mime_type, extensions in mime_map.items():\n        print(f&quot;{mime_type}: {extensions}&quot;)\n\n# Example usage of list_mime_types function\nif __name__ == &quot;__main__&quot;:\n    list_mime_types()\n</code></pre>\n\n<h3>Explanation:</h3>\n<ol>\n<li>\n<p><strong><code>get_mime_type(file_path)</code></strong>: This function uses <code>mimetypes.guess_type()</code> to determine the MIME type of a file based on its extension. It returns the MIME type or <code>'application/octet-stream'</code> if the type cannot be determined.</p>\n</li>\n<li>\n<p><strong><code>register_new_mimetype(mime_type, extensions)</code></strong>: This function allows you to register a new MIME type and associate it with specific file extensions. It uses <code>mimetypes.add_type()</code> to add the mapping.</p>\n</li>\n<li>\n<p><strong><code>list_mime_types()</code></strong>: This function retrieves all registered MIME types and their associated file extensions from <code>mimetypes.types_map</code> and prints them out.</p>\n</li>\n</ol>\n<p>These examples demonstrate how to use the <code>mimetypes</code> module for basic tasks such as guessing MIME types, registering new MIME types, and listing all known MIME types. The code is designed to be clear and reusable, making it suitable for inclusion in documentation or as a standalone script.</p>"
        },
        {
            "filename": "quopri - Encode and decode MIME quoted-printable data.md",
            "content": "<h1>quopri - Encode and decode MIME quoted-printable data</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#encoding-qp-data\">Encoding QP Data</a></li>\n<li><a href=\"#decoding-qp-data\">Decoding QP Data</a></li>\n<li><a href=\"#key-points\">Key Points</a></li>\n</ol>\n<p>The <code>quopri</code> module in Python is used to encode and decode MIME quoted-printable (QP) encoded strings, which are often used in email headers. Below are comprehensive examples demonstrating how to use this module for encoding and decoding QP data.</p>\n<h3>Encoding QP Data</h3>\n<p>QP encoding converts binary data into a printable format that can be safely transmitted over ASCII-based media like email headers. Here's an example of how to encode binary data using the <code>quopri</code> module:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import quopri\n\ndef encode_qp_string(input_data):\n    # Convert the input data to bytes if it isn't already\n    if not isinstance(input_data, bytes):\n        input_data = input_data.encode('utf-8')\n\n    # Encode the binary data using QP encoding\n    encoded_data = quopri.encodestring(input_data)\n\n    return encoded_data.decode()\n\n# Example usage\nif __name__ == &quot;__main__&quot;:\n    original_message = &quot;Hello, world! This is a test message with special characters like \u00f1 and \u20ac.&quot;\n    encoded_message = encode_qp_string(original_message)\n    print(&quot;Original Message:&quot;, original_message)\n    print(&quot;Encoded QP Message:&quot;, encoded_message)\n</code></pre>\n\n<h3>Decoding QP Data</h3>\n<p>Decoding QP encoded strings back to their original binary form can be done using the <code>quopri</code> module. Here's an example of how to decode a QP encoded string:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import quopri\n\ndef decode_qp_string(encoded_data):\n    # Decode the QP encoded data back to bytes\n    decoded_bytes = quopri.decodestring(encoded_data)\n\n    # Convert the bytes back to a string if needed\n    decoded_text = decoded_bytes.decode('utf-8')\n\n    return decoded_text\n\n# Example usage\nif __name__ == &quot;__main__&quot;:\n    encoded_message = &quot;Hello, world! This is a test message with special characters like =C3=BA and =E2=82=A2.&quot;\n    original_message = decode_qp_string(encoded_message)\n    print(&quot;Encoded QP Message:&quot;, encoded_message)\n    print(&quot;Decoded Original Message:&quot;, original_message)\n</code></pre>\n\n<h3>Key Points</h3>\n<ol>\n<li>\n<p><strong>Encoding</strong>: The <code>quopri.encodestring()</code> function takes binary data as input and returns a QP encoded string.</p>\n</li>\n<li>\n<p><strong>Decoding</strong>: The <code>quopri.decodestring()</code> function takes a QP encoded string and returns the original bytes.</p>\n</li>\n<li>\n<p><strong>Character Encoding</strong>: Both encoding and decoding assume that the input data is in UTF-8, which is common for text strings. You can specify different encodings if needed by passing them as arguments to the <code>encode()</code> and <code>decode()</code> methods.</p>\n</li>\n<li>\n<p><strong>Example Strings</strong>: The example strings used are designed to demonstrate special characters (\u00f1 and \u20ac) that might be encoded in QP format.</p>\n</li>\n</ol>\n<p>These examples provide a basic understanding of how to use the <code>quopri</code> module for encoding and decoding MIME quoted-printable data.</p>"
        }
    ],
    "Internet Protocols and Support": [
        {
            "filename": "ftplib - FTP protocol client.md",
            "content": "<h1>ftplib - FTP protocol client</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-connecting-to-an-ftp-server\">Example 1: Connecting to an FTP Server</a></li>\n<li><a href=\"#example-2-uploading-a-file\">Example 2: Uploading a File</a></li>\n<li><a href=\"#example-3-downloading-a-file\">Example 3: Downloading a File</a></li>\n<li><a href=\"#example-4-changing-directory\">Example 4: Changing Directory</a></li>\n<li><a href=\"#example-5-listing-files-in-a-directory\">Example 5: Listing Files in a Directory</a></li>\n<li><a href=\"#example-6-handling-ftp-errors\">Example 6: Handling FTP Errors</a></li>\n<li><a href=\"#example-7-storing-large-files\">Example 7: Storing Large Files</a></li>\n<li><a href=\"#example-8-renaming-or-moving-files\">Example 8: Renaming or Moving Files</a></li>\n<li><a href=\"#example-9-deleting-files\">Example 9: Deleting Files</a></li>\n<li><a href=\"#example-10-changing-permissions\">Example 10: Changing Permissions</a></li>\n</ol>\n<p>The <code>ftplib</code> module provides a way to interact with an FTP (File Transfer Protocol) server using Python. Below are comprehensive examples demonstrating various functionalities of this module, including connecting to an FTP server, uploading and downloading files, changing directories, handling basic commands, and closing the connection.</p>\n<h3>Example 1: Connecting to an FTP Server</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ftplib\n\n# Connect to the FTP server with default port (21)\nftp = ftplib.FTP('ftp.example.com')\n\n# Login using username and password\nftp.login(user='your_username', passwd='your_password')\n\n# Print welcome message from the server\nprint(ftp.getwelcome())\n\n# Close the connection\nftp.quit()\n</code></pre>\n\n<h3>Example 2: Uploading a File</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ftplib\n\ndef upload_file():\n    # Connect to the FTP server with default port (21)\n    ftp = ftplib.FTP('ftp.example.com')\n\n    try:\n        # Login using username and password\n        ftp.login(user='your_username', passwd='your_password')\n\n        # Specify the local file path to be uploaded\n        local_file_path = 'path/to/local/file.txt'\n\n        # Define the remote filename on the server where the file will be stored\n        remote_filename = 'remote/file.txt'\n\n        # Open the local file in binary mode and upload it to the server\n        with open(local_file_path, 'rb') as file:\n            ftp.storbinary(f'STOR {remote_filename}', file)\n\n        print(f'File {local_file_path} uploaded successfully as {remote_filename}')\n\n    except ftplib.error_perm as e:\n        print(f'Upload failed: {e}')\n\n    finally:\n        # Close the connection\n        ftp.quit()\n\n# Call the function to upload a file\nupload_file()\n</code></pre>\n\n<h3>Example 3: Downloading a File</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ftplib\n\ndef download_file():\n    # Connect to the FTP server with default port (21)\n    ftp = ftplib.FTP('ftp.example.com')\n\n    try:\n        # Login using username and password\n        ftp.login(user='your_username', passwd='your_password')\n\n        # Specify the remote file path on the server to be downloaded\n        remote_file_path = 'remote/file.txt'\n\n        # Define the local filename where the file will be saved locally\n        local_file_path = 'path/to/local/file_downloaded.txt'\n\n        # Open a binary file in write mode and download the file from the server\n        with open(local_file_path, 'wb') as file:\n            ftp.retrbinary(f'RETR {remote_file_path}', file.write)\n\n        print(f'File {remote_file_path} downloaded successfully as {local_file_path}')\n\n    except ftplib.error_perm as e:\n        print(f'Download failed: {e}')\n\n    finally:\n        # Close the connection\n        ftp.quit()\n\n# Call the function to download a file\ndownload_file()\n</code></pre>\n\n<h3>Example 4: Changing Directory</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ftplib\n\ndef change_directory():\n    # Connect to the FTP server with default port (21)\n    ftp = ftplib.FTP('ftp.example.com')\n\n    try:\n        # Login using username and password\n        ftp.login(user='your_username', passwd='your_password')\n\n        # Change to a specific directory on the server\n        remote_directory = '/path/to/remote/directory'\n        ftp.cwd(remote_directory)\n\n        print(f'Changed to {remote_directory}')\n\n    except ftplib.error_perm as e:\n        print(f'Directory change failed: {e}')\n\n    finally:\n        # Close the connection\n        ftp.quit()\n\n# Call the function to change directory\nchange_directory()\n</code></pre>\n\n<h3>Example 5: Listing Files in a Directory</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ftplib\n\ndef list_files():\n    # Connect to the FTP server with default port (21)\n    ftp = ftplib.FTP('ftp.example.com')\n\n    try:\n        # Login using username and password\n        ftp.login(user='your_username', passwd='your_password')\n\n        # Change to a specific directory on the server\n        remote_directory = '/path/to/remote/directory'\n        ftp.cwd(remote_directory)\n\n        # List files in the current directory\n        files_list = ftp.nlst()\n\n        print(f'Files in {remote_directory}:')\n        for file in files_list:\n            print(file)\n\n    except ftplib.error_perm as e:\n        print(f'Directory listing failed: {e}')\n\n    finally:\n        # Close the connection\n        ftp.quit()\n\n# Call the function to list files\nlist_files()\n</code></pre>\n\n<h3>Example 6: Handling FTP Errors</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ftplib\n\ndef handle_ftp_errors():\n    try:\n        # Connect to the FTP server with default port (21)\n        ftp = ftplib.FTP('ftp.example.com')\n\n        # Login using username and password\n        ftp.login(user='your_username', passwd='your_password')\n\n        # Specify a non-existent file path for testing error handling\n        remote_file_path = 'non_existent/file.txt'\n\n        # Attempt to retrieve the file, which should fail\n        ftp.retrbinary(f'RETR {remote_file_path}', lambda data: None)\n\n    except ftplib.error_perm as e:\n        print(f'Error retrieving file: {e}')\n\n    finally:\n        # Close the connection\n        if 'ftp' in locals():\n            ftp.quit()\n\n# Call the function to handle FTP errors\nhandle_ftp_errors()\n</code></pre>\n\n<h3>Example 7: Storing Large Files</h3>\n<p>To upload large files efficiently, consider using a context manager to handle file operations:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import ftplib\nimport os\n\ndef store_large_file(local_file_path, remote_filename):\n    # Connect to the FTP server with default port (21)\n    ftp = ftplib.FTP('ftp.example.com')\n\n    try:\n        # Login using username and password\n        ftp.login(user='your_username', passwd='your_password')\n\n        # Open the local file in binary mode\n        with open(local_file_path, 'rb') as file:\n            # Use STORbinary to upload the file in chunks\n            ftp.storbinary(f'STOR {remote_filename}', file)\n\n        print(f'Large file {local_file_path} uploaded successfully as {remote_filename}')\n\n    except ftplib.error_perm as e:\n        print(f'Large file upload failed: {e}')\n\n    finally:\n        # Close the connection\n        ftp.quit()\n\n# Call the function to store a large file\nstore_large_file('path/to/large/file.txt', 'large_file_downloaded.txt')\n</code></pre>\n\n<h3>Example 8: Renaming or Moving Files</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ftplib\n\ndef rename_or_move_files():\n    # Connect to the FTP server with default port (21)\n    ftp = ftplib.FTP('ftp.example.com')\n\n    try:\n        # Login using username and password\n        ftp.login(user='your_username', passwd='your_password')\n\n        # Define old and new file paths on the server\n        remote_old_file_path = 'remote/oldfile.txt'\n        remote_new_file_path = 'remote/newfile.txt'\n\n        # Rename or move the file\n        ftp.rename(remote_old_file_path, remote_new_file_path)\n\n        print(f'File {remote_old_file_path} renamed/moved to {remote_new_file_path}')\n\n    except ftplib.error_perm as e:\n        print(f'Rename/move failed: {e}')\n\n    finally:\n        # Close the connection\n        ftp.quit()\n\n# Call the function to rename or move files\nrename_or_move_files()\n</code></pre>\n\n<h3>Example 9: Deleting Files</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ftplib\n\ndef delete_file():\n    # Connect to the FTP server with default port (21)\n    ftp = ftplib.FTP('ftp.example.com')\n\n    try:\n        # Login using username and password\n        ftp.login(user='your_username', passwd='your_password')\n\n        # Define the remote file path on the server to be deleted\n        remote_file_path = 'remote/file.txt'\n\n        # Delete the file from the server\n        ftp.delete(remote_file_path)\n\n        print(f'File {remote_file_path} deleted successfully')\n\n    except ftplib.error_perm as e:\n        print(f'Delete failed: {e}')\n\n    finally:\n        # Close the connection\n        ftp.quit()\n\n# Call the function to delete a file\ndelete_file()\n</code></pre>\n\n<h3>Example 10: Changing Permissions</h3>\n<p>FTP servers typically do not support changing permissions directly through <code>ftplib</code>. However, you can simulate this by deleting and then uploading a new file with desired permissions.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import ftplib\nimport os\n\ndef change_permissions(local_file_path, remote_filename):\n    # Connect to the FTP server with default port (21)\n    ftp = ftplib.FTP('ftp.example.com')\n\n    try:\n        # Login using username and password\n        ftp.login(user='your_username', passwd='your_password')\n\n        # Define old and new file paths on the server\n        remote_old_file_path = 'remote/oldfile.txt'\n        remote_new_file_path = 'remote/newfile.txt'\n\n        # Delete the old file to simulate permission change\n        try:\n            ftp.delete(remote_old_file_path)\n        except ftplib.error_perm as e:\n            print(f'Delete failed: {e}')\n\n        # Upload a new file with desired permissions\n        with open(local_file_path, 'rb') as file:\n            ftp.storbinary(f'STOR {remote_new_file_path}', file)\n\n        print(f'File {local_file_path} uploaded successfully as {remote_new_file_path}')\n\n    except ftplib.error_perm as e:\n        print(f'Upload failed: {e}')\n\n    finally:\n        # Close the connection\n        ftp.quit()\n\n# Call the function to change permissions\nchange_permissions('path/to/file.txt', 'file_with_desired_permissions.txt')\n</code></pre>\n\n<p>These examples cover a range of operations and error handling for FTP using Python's <code>ftplib</code> module. Adjust the paths and file names as necessary for your specific use case.</p>"
        },
        {
            "filename": "http - HTTP modules.md",
            "content": "<h1>http - HTTP modules</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-using-the-requests-library\">1. Using the <code>requests</code> library</a></li>\n<li><a href=\"#2-making-get-requests\">2. Making GET Requests</a></li>\n<li><a href=\"#3-making-post-requests\">3. Making POST Requests</a></li>\n<li><a href=\"#4-handling-cookies\">4. Handling Cookies</a></li>\n<li><a href=\"#5-handling-redirects\">5. Handling Redirects</a></li>\n<li><a href=\"#6-handling-http-exceptions\">6. Handling HTTP Exceptions</a></li>\n<li><a href=\"#7-making-requests-with-timeout\">7. Making Requests with Timeout</a></li>\n</ol>\n<p>The <code>http</code> module is part of the Python Standard Library and provides a simple interface to make HTTP requests. Below are comprehensive code examples for various functionalities within the <code>http</code> module, along with explanations for each example.</p>\n<h3>1. Using the <code>requests</code> library</h3>\n<p>If you want to use more advanced features like handling cookies, sessions, or custom headers, consider using the <code>requests</code> library. Here's a basic example:</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Importing the requests library\nimport requests\n\n# Making a GET request to a URL\nresponse = requests.get('https://api.example.com/data')\n\n# Checking if the request was successful\nif response.status_code == 200:\n    # Printing the content of the response\n    print(response.text)\nelse:\n    print(f&quot;Failed to retrieve data. Status code: {response.status_code}&quot;)\n\n# Making a POST request with custom headers and parameters\nheaders = {'User-Agent': 'MyApp/1.0'}\ndata = {'key1': 'value1', 'key2': 'value2'}\n\nresponse = requests.post('https://api.example.com/submit', headers=headers, data=data)\n\nif response.status_code == 200:\n    # Printing the content of the response\n    print(response.text)\nelse:\n    print(f&quot;Failed to submit data. Status code: {response.status_code}&quot;)\n</code></pre>\n\n<h3>2. Making GET Requests</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import http.client\n\n# Creating a connection to an HTTP server\nconn = http.client.HTTPConnection('www.example.com')\n\n# Sending a GET request with parameters\nparams = urllib.parse.urlencode({'param1': 'value1', 'param2': 'value2'})\nconn.request(&quot;GET&quot;, &quot;/path?%s&quot; % params)\n\n# Reading the response from the server\nresponse = conn.getresponse()\nprint(response.status, response.reason)\ndata = response.read()\n\n# Closing the connection\nconn.close()\n\n# Printing the content of the response\nprint(data.decode('utf-8'))\n</code></pre>\n\n<h3>3. Making POST Requests</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import http.client\n\n# Creating a connection to an HTTP server\nconn = http.client.HTTPConnection('www.example.com')\n\n# Sending a POST request with headers and data\nheaders = {'Content-Type': 'application/x-www-form-urlencoded'}\ndata = urllib.parse.urlencode({'key1': 'value1', 'key2': 'value2'})\nconn.request(&quot;POST&quot;, &quot;/path&quot;, body=data, headers=headers)\n\n# Reading the response from the server\nresponse = conn.getresponse()\nprint(response.status, response.reason)\ndata = response.read()\n\n# Closing the connection\nconn.close()\n\n# Printing the content of the response\nprint(data.decode('utf-8'))\n</code></pre>\n\n<h3>4. Handling Cookies</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import http.client\n\n# Creating a connection to an HTTP server\nconn = http.client.HTTPConnection('www.example.com')\n\n# Sending a GET request with cookies\ncookies = urllib.parse.urlencode({'cookie1': 'value1', 'cookie2': 'value2'})\nheaders = {'Cookie': cookies}\nconn.request(&quot;GET&quot;, &quot;/path&quot;, headers=headers)\n\n# Reading the response from the server\nresponse = conn.getresponse()\nprint(response.status, response.reason)\ndata = response.read()\n\n# Closing the connection\nconn.close()\n\n# Printing the content of the response\nprint(data.decode('utf-8'))\n</code></pre>\n\n<h3>5. Handling Redirects</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import http.client\n\n# Creating a connection to an HTTP server with follow redirects enabled\nconn = http.client.HTTPConnection('www.example.com')\n\n# Sending a GET request with follow_redirects set to True\nheaders = {'User-Agent': 'MyApp/1.0'}\nconn.request(&quot;GET&quot;, &quot;/path?redirect=1&quot;, headers=headers)\n\n# Reading the response from the server\nresponse = conn.getresponse()\nprint(response.status, response.reason)\ndata = response.read()\n\n# Closing the connection\nconn.close()\n\n# Printing the content of the response\nprint(data.decode('utf-8'))\n</code></pre>\n\n<h3>6. Handling HTTP Exceptions</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import http.client\n\ntry:\n    # Creating a connection to an HTTP server\n    conn = http.client.HTTPConnection('www.example.com')\n\n    # Sending a GET request with parameters\n    params = urllib.parse.urlencode({'param1': 'value1', 'param2': 'value2'})\n    conn.request(&quot;GET&quot;, &quot;/path?%s&quot; % params)\n\n    # Reading the response from the server\n    response = conn.getresponse()\n    print(response.status, response.reason)\n    data = response.read()\n\n    # Closing the connection\n    conn.close()\n\n    # Printing the content of the response\n    print(data.decode('utf-8'))\n\nexcept http.client.HTTPException as e:\n    print(f&quot;An error occurred: {e}&quot;)\n</code></pre>\n\n<h3>7. Making Requests with Timeout</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import http.client\n\ntry:\n    # Creating a connection to an HTTP server with timeout set to 5 seconds\n    conn = http.client.HTTPConnection('www.example.com')\n\n    # Sending a GET request with parameters and timeout\n    params = urllib.parse.urlencode({'param1': 'value1', 'param2': 'value2'})\n    conn.request(&quot;GET&quot;, &quot;/path?%s&quot; % params, timeout=5)\n\n    # Reading the response from the server\n    response = conn.getresponse()\n    print(response.status, response.reason)\n    data = response.read()\n\n    # Closing the connection\n    conn.close()\n\n    # Printing the content of the response\n    print(data.decode('utf-8'))\n\nexcept http.client.HTTPException as e:\n    print(f&quot;An error occurred: {e}&quot;)\n\nexcept TimeoutError:\n    print(&quot;The request timed out.&quot;)\n</code></pre>\n\n<p>These examples demonstrate different aspects of making HTTP requests using Python's <code>http</code> module. Each example includes comments to explain the purpose and functionality of each part of the code.</p>"
        },
        {
            "filename": "http.client - HTTP protocol client.md",
            "content": "<h1>http.client - HTTP protocol client</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-basic-get-request\">1. Basic GET Request</a></li>\n<li><a href=\"#2-handling-headers-and-query-parameters\">2. Handling Headers and Query Parameters</a></li>\n<li><a href=\"#3-post-request-with-form-data\">3. POST Request with Form Data</a></li>\n<li><a href=\"#4-using-http11-connection-pooling\">4. Using HTTP/1.1 Connection Pooling</a></li>\n<li><a href=\"#5-handling-redirects\">5. Handling Redirects</a></li>\n<li><a href=\"#6-handling-exceptions\">6. Handling Exceptions</a></li>\n<li><a href=\"#7-using-ssltls\">7. Using SSL/TLS</a></li>\n<li><a href=\"#8-handling-large-responses\">8. Handling Large Responses</a></li>\n<li><a href=\"#9-handling-keep-alive-connections\">9. Handling Keep-Alive Connections</a></li>\n</ol>\n<p>The <code>http.client</code> module is part of the Python standard library and provides a simple HTTP/1.1 client interface for making requests to web servers. Below are comprehensive examples for various functionalities provided by this module:</p>\n<h3>1. Basic GET Request</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import http.client\n\n# Create an HTTP connection to a server\nconn = http.client.HTTPConnection(&quot;example.com&quot;)\n\n# Make a GET request\nconn.request(&quot;GET&quot;, &quot;/&quot;)\nresponse = conn.getresponse()\n\n# Read the response from the server\ndata = response.read()\nprint(data.decode('utf-8'))\n\n# Close the connection\nconn.close()\n</code></pre>\n\n<h3>2. Handling Headers and Query Parameters</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import http.client\nfrom urllib.parse import urlencode\n\n# Create an HTTP connection to a server\nconn = http.client.HTTPConnection(&quot;example.com&quot;)\n\n# Define query parameters\nparams = {&quot;key&quot;: &quot;value&quot;, &quot;page&quot;: 1}\n\n# Encode the parameters into a URL string\nquery_string = urlencode(params)\n\n# Make a GET request with query parameters\nurl = &quot;/search?&quot; + query_string\nconn.request(&quot;GET&quot;, url)\nresponse = conn.getresponse()\n\n# Read and decode the response\ndata = response.read()\nprint(data.decode('utf-8'))\n\n# Close the connection\nconn.close()\n</code></pre>\n\n<h3>3. POST Request with Form Data</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import http.client\nfrom urllib.parse import urlencode\n\n# Create an HTTP connection to a server\nconn = http.client.HTTPConnection(&quot;example.com&quot;)\n\n# Define form data\nform_data = {&quot;username&quot;: &quot;user&quot;, &quot;password&quot;: &quot;pass&quot;}\n\n# Encode the form data into a URL-encoded string\ndata = urlencode(form_data)\n\n# Make a POST request with form data\nurl = &quot;/login&quot;\nheaders = {\n    'Content-Type': 'application/x-www-form-urlencoded',\n}\nconn.request(&quot;POST&quot;, url, headers=headers, body=data)\nresponse = conn.getresponse()\n\n# Read and decode the response\ndata = response.read()\nprint(data.decode('utf-8'))\n\n# Close the connection\nconn.close()\n</code></pre>\n\n<h3>4. Using HTTP/1.1 Connection Pooling</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import http.client\nfrom urllib.parse import urlencode\nimport socket\n\n# Create an HTTP connection pool manager\npool_manager = http.client.HTTPConnectionPool(maxsize=5)\n\n# Define query parameters\nparams = {&quot;key&quot;: &quot;value&quot;, &quot;page&quot;: 1}\n\n# Encode the parameters into a URL string\nquery_string = urlencode(params)\n\n# Make a GET request with query parameters using the connection pool\nurl = &quot;/search?&quot; + query_string\n\nwith pool_manager.connection() as conn:\n    conn.request(&quot;GET&quot;, url)\n    response = conn.getresponse()\n\n# Read and decode the response\ndata = response.read()\nprint(data.decode('utf-8'))\n</code></pre>\n\n<h3>5. Handling Redirects</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import http.client\n\n# Create an HTTP connection to a server\nconn = http.client.HTTPConnection(&quot;example.com&quot;)\n\n# Make a GET request that may result in a redirect\nurl = &quot;/redirect&quot;\nconn.request(&quot;GET&quot;, url)\nresponse = conn.getresponse()\n\n# Read and decode the response\ndata = response.read()\nprint(data.decode('utf-8'))\n\n# Get the location header to follow the redirect\nlocation = response.getheader('Location')\nif location:\n    print(f&quot;Redirecting to: {location}&quot;)\nelse:\n    print(&quot;No redirect found.&quot;)\n\n# Close the connection\nconn.close()\n</code></pre>\n\n<h3>6. Handling Exceptions</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import http.client\n\ntry:\n    # Create an HTTP connection to a server that may not be reachable\n    conn = http.client.HTTPConnection(&quot;nonexistent-domain.com&quot;)\n\n    # Make a GET request\n    conn.request(&quot;GET&quot;, &quot;/&quot;)\n    response = conn.getresponse()\n\n    # Read and decode the response\n    data = response.read()\n    print(data.decode('utf-8'))\nexcept http.client.HTTPException as e:\n    print(f&quot;HTTP error occurred: {e}&quot;)\nfinally:\n    # Close the connection\n    conn.close()\n</code></pre>\n\n<h3>7. Using SSL/TLS</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import http.client\n\n# Create an HTTPS connection to a server with SSL/TLS enabled\nconn = http.client.HTTPSConnection(&quot;example.com&quot;)\n\n# Make a GET request over HTTPS\nconn.request(&quot;GET&quot;, &quot;/&quot;)\nresponse = conn.getresponse()\n\n# Read and decode the response\ndata = response.read()\nprint(data.decode('utf-8'))\n\n# Close the connection\nconn.close()\n</code></pre>\n\n<h3>8. Handling Large Responses</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import http.client\n\n# Create an HTTP connection to a server that may have large responses\nconn = http.client.HTTPConnection(&quot;example.com&quot;)\n\n# Make a GET request for a large file\nurl = &quot;/large-file&quot;\nconn.request(&quot;GET&quot;, url)\nresponse = conn.getresponse()\n\n# Read the response in chunks to handle large files\nchunk_size = 1024\nwhile True:\n    chunk = response.read(chunk_size)\n    if not chunk:\n        break\n    print(chunk.decode('utf-8'), end='')\n\n# Close the connection\nconn.close()\n</code></pre>\n\n<h3>9. Handling Keep-Alive Connections</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import http.client\n\n# Create an HTTP connection with keep-alive enabled\nconn = http.client.HTTPConnection(&quot;example.com&quot;)\n\n# Make multiple requests using the same connection\nurl1 = &quot;/resource1&quot;\nconn.request(&quot;GET&quot;, url1)\nresponse1 = conn.getresponse()\nprint(response1.status, response1.reason)\n\nurl2 = &quot;/resource2&quot;\nconn.request(&quot;GET&quot;, url2)\nresponse2 = conn.getresponse()\nprint(response2.status, response2.reason)\n\n# Close the connection\nconn.close()\n</code></pre>\n\n<p>These examples cover a range of functionalities available in the <code>http.client</code> module, from basic HTTP requests to handling redirects, exceptions, and large responses. Each example includes comments to explain key steps and is designed for clarity and educational purposes.</p>"
        },
        {
            "filename": "http.cookiejar - Cookie handling for HTTP clients.md",
            "content": "<h1>http.cookiejar - Cookie handling for HTTP clients</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-basic-cookie-management\">1. Basic Cookie Management</a></li>\n<li><a href=\"#2-parsing-http-responses-for-cookies\">2. Parsing HTTP Responses for Cookies</a></li>\n<li><a href=\"#3-sending-cookies-with-http-requests\">3. Sending Cookies with HTTP Requests</a></li>\n<li><a href=\"#4-handling-cookie-expiry\">4. Handling Cookie Expiry</a></li>\n<li><a href=\"#5-handling-cookie-domain-scope\">5. Handling Cookie Domain Scope</a></li>\n<li><a href=\"#6-handling-cookie-persistence\">6. Handling Cookie Persistence</a></li>\n<li><a href=\"#7-handling-secure-cookies\">7. Handling Secure Cookies</a></li>\n</ol>\n<p>The <code>http.cookiejar</code> module is part of Python's standard library and provides a way to handle cookies in HTTP requests. Cookies are used by websites to store user data, such as session IDs or preferences, between visits. This module allows you to manage cookie storage, parsing responses, and sending cookies with HTTP requests.</p>\n<p>Below are comprehensive code examples for various functionalities provided by the <code>http.cookiejar</code> module:</p>\n<h3>1. Basic Cookie Management</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import http.cookiejar\n\n# Create a CookieJar object\ncookie_jar = http.cookiejar.CookieJar()\n\n# Example of adding a cookie manually\ncookie = http.cookiejar.Cookie(\n    version=0,\n    name='session_id',\n    value='1234567890',\n    domain='example.com',\n    path='/',\n    secure=True,\n    expires=1632400000  # Unix timestamp for January 1, 2021\n)\n\ncookie_jar.set_cookie(cookie)\n\n# Print all cookies in the CookieJar\nfor cookie in cookie_jar:\n    print(f&quot;Name: {cookie.name}, Value: {cookie.value}&quot;)\n\n# Save cookies to a file\nwith open('cookies.txt', 'wb') as f:\n    cookie_jar.save(file=f, ignore_discard=True, ignore_expires=False)\n\n# Load cookies from a file\ncookie_jar.clear()\ncookie_jar.load('cookies.txt')\n\n# Add another cookie from the loaded data\nanother_cookie = http.cookiejar.Cookie.from_string(\n    &quot;anotherCookieName=9876543210; expires=1635000000&quot;\n)\ncookie_jar.set_cookie(another_cookie)\n\nprint(&quot;\\nCookies after loading and adding another:&quot;)\nfor cookie in cookie_jar:\n    print(f&quot;Name: {cookie.name}, Value: {cookie.value}&quot;)\n</code></pre>\n\n<h3>2. Parsing HTTP Responses for Cookies</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import http.cookiejar\nimport urllib.request\n\n# Create a CookieJar object\ncookie_jar = http.cookiejar.CookieJar()\n\n# Open a URL and handle cookies\nwith urllib.request.urlopen('https://example.com') as response:\n    # Parse the response headers to extract cookies\n    cookie_jar.extract_cookies(response, 'https://example.com')\n\n# Print all cookies extracted from the response\nfor cookie in cookie_jar:\n    print(f&quot;Name: {cookie.name}, Value: {cookie.value}&quot;)\n</code></pre>\n\n<h3>3. Sending Cookies with HTTP Requests</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import http.cookiejar\nimport urllib.request\n\n# Create a CookieJar object\ncookie_jar = http.cookiejar.CookieJar()\n\n# Open a URL and handle cookies\nwith urllib.request.urlopen('https://example.com') as response:\n    # Parse the response headers to extract cookies\n    cookie_jar.extract_cookies(response, 'https://example.com')\n\n# Create an opener that uses our CookieJar\nopener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cookie_jar))\n\n# Make a request using the custom opener\nwith opener.open('https://example.com/some_page') as response:\n    print(&quot;Response from secured page:&quot;)\n    print(response.read().decode())\n\n# Note: The URL 'https://example.com' and '/some_page' should be replaced with actual URLs used in your application.\n</code></pre>\n\n<h3>4. Handling Cookie Expiry</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import http.cookiejar\nimport time\n\n# Create a CookieJar object\ncookie_jar = http.cookiejar.CookieJar()\n\n# Example of setting cookies with different expiry times\ncookie1 = http.cookiejar.Cookie(\n    version=0,\n    name='session_id',\n    value='1234567890',\n    domain='example.com',\n    path='/',\n    secure=True,\n    expires=int(time.time() + 3600)  # Expires in 1 hour\n)\n\ncookie2 = http.cookiejar.Cookie(\n    version=0,\n    name='session_id',\n    value='9876543210',\n    domain='example.com',\n    path='/',\n    secure=True,\n    expires=int(time.time() - 3600)  # Expires in 1 hour ago\n)\n\ncookie_jar.set_cookie(cookie1)\ncookie_jar.set_cookie(cookie2)\n\n# Print all cookies, showing expiry times\nfor cookie in cookie_jar:\n    print(f&quot;Name: {cookie.name}, Value: {cookie.value}, Expires: {cookie.expires}&quot;)\n</code></pre>\n\n<h3>5. Handling Cookie Domain Scope</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import http.cookiejar\n\n# Create a CookieJar object\ncookie_jar = http.cookiejar.CookieJar()\n\n# Example of setting cookies with different domain scopes\ncookie1 = http.cookiejar.Cookie(\n    version=0,\n    name='session_id',\n    value='1234567890',\n    domain='example.com',\n    path='/',\n    secure=True\n)\n\ncookie2 = http.cookiejar.Cookie(\n    version=0,\n    name='session_id',\n    value='9876543210',\n    domain='.example.com',  # Matches subdomains\n    path='/',\n    secure=True\n)\n\ncookie_jar.set_cookie(cookie1)\ncookie_jar.set_cookie(cookie2)\n\n# Print all cookies, showing domain scope\nfor cookie in cookie_jar:\n    print(f&quot;Name: {cookie.name}, Value: {cookie.value}, Domain: {cookie.domain}&quot;)\n</code></pre>\n\n<h3>6. Handling Cookie Persistence</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import http.cookiejar\nimport os\n\n# Create a CookieJar object\ncookie_jar = http.cookiejar.MozillaCookieJar()  # Use Mozilla format for easier reading/writing\n\n# Example of saving cookies in a file\nwith open('cookies.txt', 'wb') as f:\n    cookie_jar.save(file=f, ignore_discard=True, ignore_expires=False)\n\n# Load cookies from a file\ncookie_jar.clear()\ncookie_jar.load('cookies.txt')\n\n# Print all cookies after loading\nfor cookie in cookie_jar:\n    print(f&quot;Name: {cookie.name}, Value: {cookie.value}&quot;)\n</code></pre>\n\n<h3>7. Handling Secure Cookies</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import http.cookiejar\n\n# Create a CookieJar object\ncookie_jar = http.cookiejar.CookieJar()\n\n# Example of setting secure cookies\nsecure_cookie = http.cookiejar.Cookie(\n    version=0,\n    name='session_id',\n    value='1234567890',\n    domain='example.com',\n    path='/',\n    secure=True\n)\n\ncookie_jar.set_cookie(secure_cookie)\n\n# Print all cookies, showing secure flag\nfor cookie in cookie_jar:\n    print(f&quot;Name: {cookie.name}, Value: {cookie.value}, Secure: {cookie.secure}&quot;)\n</code></pre>\n\n<p>These examples cover the basic functionalities of the <code>http.cookiejar</code> module, including creating and managing cookies, parsing responses, sending cookies with requests, handling cookie expiry, domain scope, persistence, and secure cookies. Each example is self-contained and demonstrates a specific aspect of working with HTTP cookies in Python.</p>"
        },
        {
            "filename": "http.cookies - HTTP state management.md",
            "content": "<h1>http.cookies - HTTP state management</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-creating-a-simple-cookie\">Example 1: Creating a Simple Cookie</a></li>\n<li><a href=\"#example-2-parsing-a-cookie-string\">Example 2: Parsing a Cookie String</a></li>\n<li><a href=\"#example-3-setting-multiple-cookies\">Example 3: Setting Multiple Cookies</a></li>\n<li><a href=\"#example-4-handling-cookie-expiry\">Example 4: Handling Cookie Expiry</a></li>\n<li><a href=\"#example-5-setting-cookies-with-secure-and-httponly-flags\">Example 5: Setting Cookies with Secure and HttpOnly Flags</a></li>\n<li><a href=\"#example-6-encoding-and-decoding-cookies\">Example 6: Encoding and Decoding Cookies</a></li>\n<li><a href=\"#example-7-using-cookies-in-http-responses\">Example 7: Using Cookies in HTTP Responses</a></li>\n<li><a href=\"#example-8-using-cookies-in-http-requests\">Example 8: Using Cookies in HTTP Requests</a></li>\n<li><a href=\"#example-9-handling-samesite-attribute\">Example 9: Handling SameSite Attribute</a></li>\n<li><a href=\"#example-10-setting-cookies-in-a-web-server-response\">Example 10: Setting Cookies in a Web Server Response</a></li>\n</ol>\n<p>The <code>http.cookies</code> module in Python provides a way to handle cookies sent by a client's browser, which are used for maintaining user sessions or storing data across multiple requests. Below are comprehensive and well-documented code examples for various functionalities of the <code>http.cookies</code> module.</p>\n<h3>Example 1: Creating a Simple Cookie</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from http.cookies import SimpleCookie\n\n# Create an instance of SimpleCookie to handle cookies\ncookie = SimpleCookie()\n\n# Set a cookie with a name, value, and expiration time\ncookie['session_id'] = 'abc123'\ncookie['session_id']['expires'] = 60 * 60 * 24  # Expires in one day\n\n# Print the cookie as a string\nprint(cookie.output())\n</code></pre>\n\n<h3>Example 2: Parsing a Cookie String</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from http.cookies import SimpleCookie\n\n# A sample cookie string from a browser\ncookie_string = 'session_id=abc123; expires=Wed, 01 Jan 2099 00:00:00 GMT'\n\n# Parse the cookie string into a dictionary of cookies\ncookies = SimpleCookie(cookie_string)\n\n# Access and print the value of the session_id cookie\nprint(cookies['session_id'].value)\n</code></pre>\n\n<h3>Example 3: Setting Multiple Cookies</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from http.cookies import SimpleCookie\n\n# Create an instance of SimpleCookie to handle multiple cookies\ncookie = SimpleCookie()\n\n# Set multiple cookies with different names, values, and domains\ncookie['user'] = 'john_doe'\ncookie['user']['domain'] = '.example.com'\n\ncookie['age'] = 30\ncookie['age']['path'] = '/admin'\n\nprint(cookie.output())\n</code></pre>\n\n<h3>Example 4: Handling Cookie Expiry</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from http.cookies import SimpleCookie, CookieError\n\n# Create an instance of SimpleCookie to handle cookies with expiration\ncookie = SimpleCookie()\n\n# Set a cookie with a name, value, and a specific expiry date\ntry:\n    cookie['session_id'] = 'abc123'\n    cookie['session_id']['expires'] = 60 * 60 * 24  # Expires in one day\n\n    # Attempt to retrieve the expired cookie\n    print(cookie['session_id'].value)\nexcept CookieError as e:\n    print(f&quot;Cookie error: {e}&quot;)\n</code></pre>\n\n<h3>Example 5: Setting Cookies with Secure and HttpOnly Flags</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from http.cookies import SimpleCookie\n\n# Create an instance of SimpleCookie to handle cookies with security flags\ncookie = SimpleCookie()\n\n# Set a cookie with secure flag (HTTPS only)\ncookie['secure_cookie'] = 'value'\ncookie['secure_cookie']['secure'] = True\n\n# Set a cookie with HttpOnly flag (not accessible via JavaScript)\ncookie['http_only_cookie'] = 'secret'\ncookie['http_only_cookie']['httponly'] = True\n\nprint(cookie.output())\n</code></pre>\n\n<h3>Example 6: Encoding and Decoding Cookies</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from http.cookies import SimpleCookie, CookieError\n\n# Create an instance of SimpleCookie to handle cookies for encoding/decoding\ncookie = SimpleCookie()\n\n# Set a cookie with a value containing special characters\ncookie['special_chars'] = 'Hello, World!'\nprint(cookie.output())\n\n# Decode the encoded cookie string back into a dictionary\ndecoded_cookie = SimpleCookie()\ntry:\n    decoded_cookie.load(cookie.output())\n    print(decoded_cookie['special_chars'].value)\nexcept CookieError as e:\n    print(f&quot;Decoding error: {e}&quot;)\n</code></pre>\n\n<h3>Example 7: Using Cookies in HTTP Responses</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from http.cookies import SimpleCookie, Morsel\n\n# Create an instance of SimpleCookie to handle cookies for HTTP responses\nresponse_cookie = SimpleCookie()\n\n# Set a cookie with a name, value, and domain for use in an HTTP response\nresponse_cookie['session_id'] = 'abc123'\nresponse_cookie['session_id']['domain'] = '.example.com'\n\n# Add the cookie to the response headers\nheaders = {'Set-Cookie': response_cookie.output(header='', sep='')}\nprint(headers)\n</code></pre>\n\n<h3>Example 8: Using Cookies in HTTP Requests</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from http.cookies import SimpleCookie, Morsel\n\n# Create an instance of SimpleCookie to handle cookies for HTTP requests\nrequest_cookies = SimpleCookie()\n\n# Set a cookie with a name, value, and domain for use in an HTTP request\nrequest_cookies['session_id'] = 'abc123'\nrequest_cookies['session_id']['domain'] = '.example.com'\n\n# Decode the cookie string from the HTTP request header into a dictionary\ntry:\n    decoded_request_cookies = SimpleCookie()\n    decoded_request_cookies.load(request_cookies.output(header='', sep=''))\n    print(decoded_request_cookies['session_id'].value)\nexcept CookieError as e:\n    print(f&quot;Decoding error: {e}&quot;)\n</code></pre>\n\n<h3>Example 9: Handling SameSite Attribute</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from http.cookies import SimpleCookie, Morsel\n\n# Create an instance of SimpleCookie to handle cookies with SameSite attribute\ncookie = SimpleCookie()\n\n# Set a cookie with SameSite=Lax attribute (recommended for cross-site requests)\ncookie['lax_cookie'] = 'value'\ncookie['lax_cookie']['samesite'] = 'Lax'\n\n# Print the cookie with the SameSite attribute\nprint(cookie.output())\n</code></pre>\n\n<h3>Example 10: Setting Cookies in a Web Server Response</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from http.cookies import SimpleCookie, Morsel\n\n# Create an instance of SimpleCookie to handle cookies for web server responses\nresponse_cookie = SimpleCookie()\n\n# Set a cookie with a name, value, and domain for use in a web server response\nresponse_cookie['session_id'] = 'abc123'\nresponse_cookie['session_id']['domain'] = '.example.com'\n\n# Add the cookie to the response headers\nheaders = {'Set-Cookie': response_cookie.output(header='', sep='')}\nprint(headers)\n</code></pre>\n\n<p>These examples cover various aspects of using the <code>http.cookies</code> module, including creating and parsing cookies, setting multiple cookies with different attributes, handling expiry dates, and managing security flags. Each example includes comments to explain the purpose and functionality of each part of the code.</p>"
        },
        {
            "filename": "http.server - HTTP servers.md",
            "content": "<h1>http.server - HTTP servers</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-simple-http-server\">Example 1: Simple HTTP Server</a></li>\n<li><a href=\"#example-2-handling-get-requests\">Example 2: Handling GET Requests</a></li>\n<li><a href=\"#example-3-handling-post-requests\">Example 3: Handling POST Requests</a></li>\n<li><a href=\"#example-4-serving-static-files\">Example 4: Serving Static Files</a></li>\n<li><a href=\"#example-5-using-https\">Example 5: Using HTTPS</a></li>\n<li><a href=\"#example-6-using-the-httpserver-module-with-a-custom-handler\">Example 6: Using the <code>http.server</code> module with a custom handler</a></li>\n<li><a href=\"#example-7-using-httpserver-with-a-multi-threaded-server\">Example 7: Using <code>http.server</code> with a multi-threaded server</a></li>\n</ol>\n<p>Below is a comprehensive set of code examples demonstrating various functionalities provided by the <code>http.server</code> module in Python 3.12. These examples cover creating simple HTTP servers, handling GET and POST requests, serving static files, and more.</p>\n<h3>Example 1: Simple HTTP Server</h3>\n<p>A basic example of setting up an HTTP server using <code>http.server</code>.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from http.server import HTTPServer, BaseHTTPRequestHandler\n\nclass SimpleHTTPRequestHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        # Send response status code\n        self.send_response(200)\n\n        # Send headers\n        self.send_header('Content-type', 'text/html')\n        self.end_headers()\n\n        # Write the HTML message\n        html_message = &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Simple HTTP Server&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Hello, World!&lt;/body&gt;&lt;/html&gt;&quot;\n        self.wfile.write(html_message.encode())\n\ndef run(server_class=HTTPServer, handler_class=SimpleHTTPRequestHandler, port=8000):\n    server_address = ('', port)\n    httpd = server_class(server_address, handler_class)\n    print(f&quot;Serving HTTP on port {port}...&quot;)\n    httpd.serve_forever()\n\nif __name__ == '__main__':\n    run()\n</code></pre>\n\n<h3>Example 2: Handling GET Requests</h3>\n<p>This example demonstrates handling GET requests by retrieving a query parameter.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from http.server import BaseHTTPRequestHandler, CGIHTTPRequestHandler\nimport cgi\n\nclass MyCGIHTTPRequestHandler(CGIHTTPRequestHandler):\n    def do_GET(self):\n        # Parse the URL to get parameters\n        params = cgi.parse_qs(self.path[1:])\n\n        if 'name' in params:\n            name = params['name'][0]\n            html_message = f&quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;GET Request Handler&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Hello, {name}!&lt;/body&gt;&lt;/html&gt;&quot;\n        else:\n            html_message = &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;GET Request Handler&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Please provide a name.&lt;/body&gt;&lt;/html&gt;&quot;\n\n        self.send_response(200)\n        self.send_header('Content-type', 'text/html')\n        self.end_headers()\n        self.wfile.write(html_message.encode())\n\ndef run(server_class=HTTPServer, handler_class=MyCGIHTTPRequestHandler, port=8000):\n    server_address = ('', port)\n    httpd = server_class(server_address, handler_class)\n    print(f&quot;Serving HTTP on port {port}...&quot;)\n    httpd.serve_forever()\n\nif __name__ == '__main__':\n    run()\n</code></pre>\n\n<h3>Example 3: Handling POST Requests</h3>\n<p>This example demonstrates handling POST requests by processing form data.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from http.server import BaseHTTPRequestHandler, CGIHTTPRequestHandler\nimport cgi\n\nclass MyCGIHTTPRequestHandler(CGIHTTPRequestHandler):\n    def do_POST(self):\n        # Parse the form data from the request\n        content_length = int(self.headers['Content-Length'])\n        post_data = self.rfile.read(content_length)\n\n        # Parse the POST data as URL-encoded parameters\n        params = cgi.parse_qs(post_data.decode())\n\n        if 'name' in params:\n            name = params['name'][0]\n            html_message = f&quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;POST Request Handler&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Hello, {name}!&lt;/body&gt;&lt;/html&gt;&quot;\n        else:\n            html_message = &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;POST Request Handler&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Please provide a name.&lt;/body&gt;&lt;/html&gt;&quot;\n\n        self.send_response(200)\n        self.send_header('Content-type', 'text/html')\n        self.end_headers()\n        self.wfile.write(html_message.encode())\n\ndef run(server_class=HTTPServer, handler_class=MyCGIHTTPRequestHandler, port=8000):\n    server_address = ('', port)\n    httpd = server_class(server_address, handler_class)\n    print(f&quot;Serving HTTP on port {port}...&quot;)\n    httpd.serve_forever()\n\nif __name__ == '__main__':\n    run()\n</code></pre>\n\n<h3>Example 4: Serving Static Files</h3>\n<p>This example demonstrates serving static files from a directory.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from http.server import BaseHTTPRequestHandler, HTTPServer\n\nclass SimpleStaticHTTPServer(BaseHTTPRequestHandler):\n    def do_GET(self):\n        # Serve files from the current directory\n        try:\n            file_path = self.path[1:]\n            if not file_path:\n                file_path = 'index.html'\n\n            with open(file_path, 'rb') as f:\n                content = f.read()\n                self.send_response(200)\n                self.send_header('Content-type', 'text/html')\n                self.end_headers()\n                self.wfile.write(content)\n        except FileNotFoundError:\n            self.send_error(404, &quot;File not found&quot;)\n\ndef run(server_class=HTTPServer, handler_class=SimpleStaticHTTPServer, port=8000):\n    server_address = ('', port)\n    httpd = server_class(server_address, handler_class)\n    print(f&quot;Serving HTTP on port {port}...&quot;)\n    httpd.serve_forever()\n\nif __name__ == '__main__':\n    run()\n</code></pre>\n\n<h3>Example 5: Using HTTPS</h3>\n<p>This example demonstrates setting up an HTTPS server using the <code>http.server</code> module with a self-signed certificate.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from http.server import BaseHTTPRequestHandler, HTTPServer\nimport ssl\n\nclass SimpleHTTPSRequestHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        # Send response status code and headers\n        self.send_response(200)\n        self.send_header('Content-type', 'text/html')\n        self.end_headers()\n\n        # Write the HTML message\n        html_message = &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;HTTPS Server&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Hello, World!&lt;/body&gt;&lt;/html&gt;&quot;\n        self.wfile.write(html_message.encode())\n\ndef run(server_class=HTTPServer, handler_class=SimpleHTTPSRequestHandler, port=443):\n    # Generate a self-signed certificate and key\n    server_address = ('', port)\n\n    # Use ssl.wrap_socket to secure the server connection\n    httpd = server_class(server_address, handler_class)\n    httpd.socket = ssl.wrap_socket(httpd.socket,\n                                     server_side=True,\n                                     certfile='server.crt',\n                                     keyfile='server.key')\n\n    print(f&quot;Serving HTTPS on port {port}...&quot;)\n    httpd.serve_forever()\n\nif __name__ == '__main__':\n    run()\n</code></pre>\n\n<h3>Example 6: Using the <code>http.server</code> module with a custom handler</h3>\n<p>This example demonstrates using a custom handler class to handle requests in more complex ways.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from http.server import BaseHTTPRequestHandler, HTTPServer\n\nclass CustomRequestHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        # Send response status code and headers\n        self.send_response(200)\n        self.send_header('Content-type', 'text/html')\n        self.end_headers()\n\n        # Handle the request based on the URL path\n        if self.path == '/':\n            html_message = &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Custom Request Handler&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Welcome to the custom handler.&lt;/body&gt;&lt;/html&gt;&quot;\n        else:\n            html_message = f&quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Error&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Unknown endpoint: {self.path}&lt;/body&gt;&lt;/html&gt;&quot;\n\n        self.wfile.write(html_message.encode())\n\ndef run(server_class=HTTPServer, handler_class=CustomRequestHandler, port=8000):\n    server_address = ('', port)\n    httpd = server_class(server_address, handler_class)\n    print(f&quot;Serving HTTP on port {port}...&quot;)\n    httpd.serve_forever()\n\nif __name__ == '__main__':\n    run()\n</code></pre>\n\n<h3>Example 7: Using <code>http.server</code> with a multi-threaded server</h3>\n<p>This example demonstrates running an HTTP server using multiple threads to handle concurrent requests.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from http.server import BaseHTTPRequestHandler, HTTPServer, ThreadingHTTPServer\n\nclass ThreadedSimpleHTTPRequestHandler(ThreadingHTTPServer):\n    def __init__(self, server_address, handler_class=BaseHTTPRequestHandler):\n        super().__init__(server_address, handler_class)\n        self.daemon_threads = True  # Allow threads to exit when main program exits\n\ndef run(server_class=ThreadedSimpleHTTPRequestHandler, handler_class=BaseHTTPRequestHandler, port=8000):\n    server_address = ('', port)\n    httpd = server_class(server_address, handler_class)\n    print(f&quot;Serving HTTP on port {port} (multi-threaded)...&quot;)\n    httpd.serve_forever()\n\nif __name__ == '__main__':\n    run()\n</code></pre>\n\n<p>These examples provide a comprehensive overview of the functionalities available in the <code>http.server</code> module. Each example is designed to be clear and self-contained, making it suitable for inclusion in official documentation or as part of a larger application.</p>"
        },
        {
            "filename": "imaplib - IMAP4 protocol client.md",
            "content": "<h1>imaplib - IMAP4 protocol client</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-connecting-to-an-imap-server\">1. Connecting to an IMAP Server</a></li>\n<li><a href=\"#2-listing-mailboxes-inboxes\">2. Listing Mailboxes (Inboxes)</a></li>\n<li><a href=\"#3-searching-for-emails\">3. Searching for Emails</a></li>\n<li><a href=\"#4-retrieving-emails\">4. Retrieving Emails</a></li>\n<li><a href=\"#5-storing-emails-outbox\">5. Storing Emails (Outbox)</a></li>\n<li><a href=\"#6-deleting-emails\">6. Deleting Emails</a></li>\n<li><a href=\"#7-expunging-deleted-emails\">7. Expunging Deleted Emails</a></li>\n<li><a href=\"#8-disconnecting-from-the-server\">8. Disconnecting from the Server</a></li>\n</ol>\n<p>The <code>imaplib</code> module in Python provides an interface to the IMAP4 protocol, which is used for retrieving and managing email messages on a mail server. Below are comprehensive code examples demonstrating various functionalities of the <code>imaplib</code> module.</p>\n<h3>1. Connecting to an IMAP Server</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import imaplib\n\ndef connect_to_imap_server(server, username, password):\n    &quot;&quot;&quot;\n    Connects to an IMAP server and returns an IMAP4 object.\n\n    :param server: The IMAP server address (e.g., 'imap.example.com').\n    :param username: The user's email username.\n    :param password: The user's email password.\n    :return: An IMAP4 object connected to the specified server.\n    &quot;&quot;&quot;\n    try:\n        # Connect to the IMAP server\n        imap = imaplib.IMAP4_SSL(server)\n        imap.login(username, password)\n        print(f&quot;Connected to {server} as {username}&quot;)\n        return imap\n    except Exception as e:\n        print(f&quot;Failed to connect to {server}: {e}&quot;)\n        return None\n\n# Example usage\nserver = 'imap.example.com'\nusername = 'your-email@example.com'\npassword = 'your-password'\n\nimap_connection = connect_to_imap_server(server, username, password)\nif imap_connection:\n    # Proceed with operations\n    pass\n</code></pre>\n\n<h3>2. Listing Mailboxes (Inboxes)</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">def list_mailboxes(imap):\n    &quot;&quot;&quot;\n    Lists all mailboxes on the server.\n\n    :param imap: An IMAP4 object connected to an IMAP server.\n    :return: A list of mailbox names.\n    &quot;&quot;&quot;\n    try:\n        # Select the INBOX mailbox\n        status, messages = imap.select('INBOX')\n        if status == 'OK':\n            print(&quot;Listing mailboxes...&quot;)\n            # List all available mailboxes\n            return imap.list()[1]\n        else:\n            print(f&quot;Failed to list mailboxes: {status}&quot;)\n            return None\n    except Exception as e:\n        print(f&quot;Failed to list mailboxes: {e}&quot;)\n        return []\n\n# Example usage\nif imap_connection:\n    mailboxes = list_mailboxes(imap_connection)\n    if mailboxes:\n        for mailbox in mailboxes:\n            print(mailbox.decode('utf-8'))\n</code></pre>\n\n<h3>3. Searching for Emails</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">def search_emails(imap, criteria):\n    &quot;&quot;&quot;\n    Searches for emails based on a set of criteria.\n\n    :param imap: An IMAP4 object connected to an IMAP server.\n    :param criteria: A list of search criteria (e.g., ['FROM', 'example@example.com']).\n    :return: A list of email IDs that match the criteria.\n    &quot;&quot;&quot;\n    try:\n        # Search for emails\n        status, messages = imap.search(None, *criteria)\n        if status == 'OK':\n            print(f&quot;Found {len(messages[0].split())} matching messages.&quot;)\n            return messages[0].split()\n        else:\n            print(f&quot;Failed to search for emails: {status}&quot;)\n            return []\n    except Exception as e:\n        print(f&quot;Failed to search for emails: {e}&quot;)\n        return []\n\n# Example usage\nif imap_connection:\n    criteria = ['FROM', 'example@example.com']\n    email_ids = search_emails(imap_connection, criteria)\n    if email_ids:\n        for email_id in email_ids:\n            print(email_id.decode('utf-8'))\n</code></pre>\n\n<h3>4. Retrieving Emails</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">def retrieve_email(imap, message_id):\n    &quot;&quot;&quot;\n    Retrieves an email based on its ID.\n\n    :param imap: An IMAP4 object connected to an IMAP server.\n    :param message_id: The ID of the email to retrieve.\n    :return: The raw email data as bytes.\n    &quot;&quot;&quot;\n    try:\n        # Fetch the email\n        status, email_data = imap.fetch(message_id, '(RFC822)')\n        if status == 'OK':\n            print(f&quot;Email retrieved: {message_id}&quot;)\n            return email_data[0][1]\n        else:\n            print(f&quot;Failed to retrieve email: {status}&quot;)\n            return None\n    except Exception as e:\n        print(f&quot;Failed to retrieve email: {e}&quot;)\n        return None\n\n# Example usage\nif imap_connection and email_ids:\n    message_id = email_ids[0]  # Assume the first email ID is the one to fetch\n    raw_email = retrieve_email(imap_connection, message_id)\n    if raw_email:\n        print(raw_email.decode('utf-8'))\n</code></pre>\n\n<h3>5. Storing Emails (Outbox)</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">def store_emails(imap, folder_name, messages):\n    &quot;&quot;&quot;\n    Stores email messages in a specified folder.\n\n    :param imap: An IMAP4 object connected to an IMAP server.\n    :param folder_name: The name of the folder where emails will be stored.\n    :param messages: A list of raw email data as bytes.\n    &quot;&quot;&quot;\n    try:\n        # Select the target folder\n        imap.select(folder_name)\n        # Store each message\n        for msg in messages:\n            status, result = imap.append(folder_name, '', None, msg)\n            if status == 'OK':\n                print(f&quot;Message stored in {folder_name}: {result[0].decode('utf-8')}&quot;)\n            else:\n                print(f&quot;Failed to store message in {folder_name}: {status}&quot;)\n    except Exception as e:\n        print(f&quot;Failed to store emails: {e}&quot;)\n\n# Example usage\nif imap_connection and email_ids:\n    folder_name = 'Sent'\n    messages_to_store = [raw_email for _, raw_email in enumerate(messages, 1)]  # Assume all retrieved emails are to be stored\n    store_emails(imap_connection, folder_name, messages_to_store)\n</code></pre>\n\n<h3>6. Deleting Emails</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">def delete_emails(imap, message_id):\n    &quot;&quot;&quot;\n    Deletes an email based on its ID.\n\n    :param imap: An IMAP4 object connected to an IMAP server.\n    :param message_id: The ID of the email to delete.\n    &quot;&quot;&quot;\n    try:\n        # Delete the email\n        status, result = imap.store(message_id, '+FLAGS', '\\\\Deleted')\n        if status == 'OK':\n            print(f&quot;Email deleted: {message_id}&quot;)\n        else:\n            print(f&quot;Failed to delete email: {status}&quot;)\n    except Exception as e:\n        print(f&quot;Failed to delete email: {e}&quot;)\n\n# Example usage\nif imap_connection and email_ids:\n    message_id = email_ids[0]  # Assume the first email ID is the one to delete\n    delete_emails(imap_connection, message_id)\n</code></pre>\n\n<h3>7. Expunging Deleted Emails</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">def expunge_deleted_emails(imap):\n    &quot;&quot;&quot;\n    Expunges (deletes) all deleted emails from a mailbox.\n\n    :param imap: An IMAP4 object connected to an IMAP server.\n    &quot;&quot;&quot;\n    try:\n        # Expunge all deleted emails\n        status, result = imap.expunge()\n        if status == 'OK':\n            print(&quot;Deleted emails expunged.&quot;)\n        else:\n            print(f&quot;Failed to expunge deleted emails: {status}&quot;)\n    except Exception as e:\n        print(f&quot;Failed to expunge deleted emails: {e}&quot;)\n\n# Example usage\nif imap_connection and email_ids:\n    expunge_deleted_emails(imap_connection)\n</code></pre>\n\n<h3>8. Disconnecting from the Server</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">def disconnect_from_imap_server(imap):\n    &quot;&quot;&quot;\n    Disconnects from the IMAP server.\n\n    :param imap: An IMAP4 object connected to an IMAP server.\n    &quot;&quot;&quot;\n    try:\n        # Logout and close the connection\n        imap.logout()\n        print(&quot;Disconnected from the IMAP server.&quot;)\n    except Exception as e:\n        print(f&quot;Failed to disconnect from the IMAP server: {e}&quot;)\n\n# Example usage\nif imap_connection:\n    disconnect_from_imap_server(imap_connection)\n</code></pre>\n\n<p>These examples provide a comprehensive overview of how to use various functionalities in the <code>imaplib</code> module. Each example includes error handling and assumes that you have already established a connection to the IMAP server using <code>connect_to_imap_server</code>.</p>"
        },
        {
            "filename": "ipaddress - IPv4 IPv6 manipulation library.md",
            "content": "<h1>ipaddress - IPv4/IPv6 manipulation library</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-creating-an-ipv4-address\">1. Creating an IPv4 Address</a></li>\n<li><a href=\"#2-creating-an-ipv4-network\">2. Creating an IPv4 Network</a></li>\n<li><a href=\"#3-checking-if-an-ip-is-in-a-network\">3. Checking if an IP is in a Network</a></li>\n<li><a href=\"#4-iterating-over-an-ipv4-network\">4. Iterating Over an IPv4 Network</a></li>\n<li><a href=\"#5-creating-an-ipv6-address\">5. Creating an IPv6 Address</a></li>\n<li><a href=\"#6-creating-an-ipv6-network\">6. Creating an IPv6 Network</a></li>\n<li><a href=\"#7-checking-if-an-ipv6-is-in-a-network\">7. Checking if an IPv6 is in a Network</a></li>\n<li><a href=\"#8-iterating-over-an-ipv6-network\">8. Iterating Over an IPv6 Network</a></li>\n<li><a href=\"#9-working-with-cidr-notation\">9. Working with CIDR Notation</a></li>\n<li><a href=\"#10-comparing-ip-addresses-and-networks\">10. Comparing IP Addresses and Networks</a></li>\n</ol>\n<p>The <code>ipaddress</code> module in Python provides a way to manipulate IPv4 and IPv6 addresses and networks efficiently. Below are comprehensive and well-documented examples covering various functionalities of this module:</p>\n<h3>1. Creating an IPv4 Address</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ipaddress\n\n# Create an IPv4 address object\nipv4_address = ipaddress.IPv4Address('192.168.1.1')\n\nprint(ipv4_address)  # Output: 192.168.1.1\n</code></pre>\n\n<h3>2. Creating an IPv4 Network</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ipaddress\n\n# Create an IPv4 network object\nipv4_network = ipaddress.IPv4Network('192.168.1.0/24')\n\nprint(ipv4_network)  # Output: 192.168.1.0/24\n</code></pre>\n\n<h3>3. Checking if an IP is in a Network</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ipaddress\n\n# Create a network and an address to check\nnetwork = ipaddress.IPv4Network('192.168.1.0/24')\naddress = ipaddress.IPv4Address('192.168.1.5')\n\nif address in network:\n    print(f&quot;{address} is in the network {network}&quot;)\nelse:\n    print(f&quot;{address} is not in the network {network}&quot;)\n</code></pre>\n\n<h3>4. Iterating Over an IPv4 Network</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ipaddress\n\n# Create a network and iterate over its addresses\nnetwork = ipaddress.IPv4Network('192.168.1.0/25')\n\nfor address in network:\n    print(address)\n</code></pre>\n\n<h3>5. Creating an IPv6 Address</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ipaddress\n\n# Create an IPv6 address object\nipv6_address = ipaddress.IPv6Address('2001:db8::1')\n\nprint(ipv6_address)  # Output: 2001:db8::1\n</code></pre>\n\n<h3>6. Creating an IPv6 Network</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ipaddress\n\n# Create an IPv6 network object\nipv6_network = ipaddress.IPv6Network('2001:db8::/48')\n\nprint(ipv6_network)  # Output: 2001:db8::/48\n</code></pre>\n\n<h3>7. Checking if an IPv6 is in a Network</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ipaddress\n\n# Create a network and an address to check\nnetwork = ipaddress.IPv6Network('2001:db8::/48')\naddress = ipaddress.IPv6Address('2001:db8::5')\n\nif address in network:\n    print(f&quot;{address} is in the network {network}&quot;)\nelse:\n    print(f&quot;{address} is not in the network {network}&quot;)\n</code></pre>\n\n<h3>8. Iterating Over an IPv6 Network</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ipaddress\n\n# Create a network and iterate over its addresses\nnetwork = ipaddress.IPv6Network('2001:db8::/56')\n\nfor address in network:\n    print(address)\n</code></pre>\n\n<h3>9. Working with CIDR Notation</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ipaddress\n\n# Parse an IPv4 address from a string and check the prefix length\nipv4_address = ipaddress.ip_address('192.168.1.1/24')\nprint(ipv4_address)  # Output: 192.168.1.1\nprint(ipv4_address.network)  # Output: 192.168.1.0/24\n\n# Parse an IPv6 address from a string and check the prefix length\nipv6_address = ipaddress.ip_address('2001:db8::1/48')\nprint(ipv6_address)  # Output: 2001:db8::1\nprint(ipv6_address.network)  # Output: 2001:db8::/48\n</code></pre>\n\n<h3>10. Comparing IP Addresses and Networks</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ipaddress\n\n# Create two IPv4 addresses\nip1 = ipaddress.IPv4Address('192.168.1.1')\nip2 = ipaddress.IPv4Address('192.168.1.2')\n\nif ip1 &lt; ip2:\n    print(f&quot;{ip1} is less than {ip2}&quot;)\nelif ip1 &gt; ip2:\n    print(f&quot;{ip1} is greater than {ip2}&quot;)\nelse:\n    print(f&quot;{ip1} is equal to {ip2}&quot;)\n\n# Create two IPv4 networks\nnetwork1 = ipaddress.IPv4Network('192.168.1.0/24')\nnetwork2 = ipaddress.IPv4Network('192.168.2.0/24')\n\nif network1 &lt; network2:\n    print(f&quot;{network1} is less than {network2}&quot;)\nelif network1 &gt; network2:\n    print(f&quot;{network1} is greater than {network2}&quot;)\nelse:\n    print(f&quot;{network1} is equal to {network2}&quot;)\n</code></pre>\n\n<h3>11. Address and Network Classifications</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ipaddress\n\n# Create an IPv4 address and classify it\nipv4_address = ipaddress.IPv4Address('192.168.1.1')\nprint(ipv4_address.is_loopback)  # Output: False\nprint(ipv4_address.is_multicast)  # Output: False\nprint(ipv4_address.is_private)  # Output: True\n\n# Create an IPv6 address and classify it\nipv6_address = ipaddress.IPv6Address('2001:db8::1')\nprint(ipv6_address.is_loopback)  # Output: False\nprint(ipv6_address.is_multicast)  # Output: False\nprint(ipv6_address.is_private)  # Output: True\n\n# Create an IPv4 network and classify it\nipv4_network = ipaddress.IPv4Network('192.168.1.0/24')\nprint(ipv4_network.is_link_local)  # Output: False\nprint(ipv4_network.is_global)  # Output: True\n\n# Create an IPv6 network and classify it\nipv6_network = ipaddress.IPv6Network('2001:db8::/48')\nprint(ipv6_network.is_link_local)  # Output: True\nprint(ipv6_network.is_global)  # Output: False\n</code></pre>\n\n<h3>12. Conversion between Address Types</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ipaddress\n\n# Create an IPv4 address and convert it to an integer\nipv4_address = ipaddress.IPv4Address('192.168.1.1')\ninteger_value = int(ipv4_address)\nprint(integer_value)  # Output: 3232235777\n\n# Convert an integer back to an IPv4 address\nreversed_ipv4_address = ipaddress.IPv4Address(integer_value)\nprint(reversed_ipv4_address)  # Output: 192.168.1.1\n</code></pre>\n\n<h3>13. Creating and Manipulating Masks</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ipaddress\n\n# Create an IPv4 address with a custom mask\nipv4_address_with_mask = ipaddress.ip_address('192.168.1.1/25')\nprint(ipv4_address_with_mask)  # Output: 192.168.1.1/25\n\n# Create an IPv4 network with a custom mask\nipv4_network_with_mask = ipaddress.ip_network('192.168.1.0/25')\nprint(ipv4_network_with_mask)  # Output: 192.168.1.0/25\n\n# Get the subnet mask as an integer\nsubnet_mask = ipv4_network_with_mask.netmask\nprint(subnet_mask)  # Output: 4294967295 (full subnet mask)\n</code></pre>\n\n<p>These examples cover the basic functionalities of the <code>ipaddress</code> module, including creating and manipulating IPv4 and IPv6 addresses and networks, checking their properties, performing comparisons, and converting between different types.</p>"
        },
        {
            "filename": "nntplib - NNTP protocol client.md",
            "content": "<h1>nntplib - NNTP protocol client</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-connecting-to-an-nntp-server\">Example 1: Connecting to an NNTP Server</a></li>\n<li><a href=\"#example-2-listing-all-groups\">Example 2: Listing All Groups</a></li>\n<li><a href=\"#example-3-listing-headers-of-an-article\">Example 3: Listing Headers of an Article</a></li>\n<li><a href=\"#example-4-retrieving-an-article\">Example 4: Retrieving an Article</a></li>\n<li><a href=\"#example-5-closing-the-connection\">Example 5: Closing the Connection</a></li>\n<li><a href=\"#additional-best-practices-and-considerations\">Additional Best Practices and Considerations</a></li>\n</ol>\n<p>The <code>nntplib</code> module in Python provides a straightforward interface to interact with News Transfer Protocol (NNTP) servers, which are used for retrieving news articles and other Internet newsgroups. Below are comprehensive examples of how to use the <code>nntplib</code> module for common operations such as connecting to an NNTP server, retrieving list of groups, listing headers, downloading articles, and closing the connection.</p>\n<h3>Example 1: Connecting to an NNTP Server</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import nntplib\n\n# Connect to an NNTP server (e.g., news.example.com)\nserver = nntplib.NNTP('news.example.com')\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- Import the <code>nntplib</code> module.\n- Create an instance of <code>NNTP</code> by passing the hostname of the NNTP server as an argument.</p>\n<h3>Example 2: Listing All Groups</h3>\n<pre class=\"codehilite\"><code class=\"language-python\"># List all groups on the server\ngroups = server.list()\nprint(&quot;List of groups:&quot;, groups)\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- Use the <code>list()</code> method to retrieve a list of all available newsgroups on the server.\n- Print the result.</p>\n<h3>Example 3: Listing Headers of an Article</h3>\n<pre class=\"codehilite\"><code class=\"language-python\"># Select a group and article number\ngroup = 'comp.lang.python'\narticle_num = 10\n\n# List headers of a specific article\nheaders = server.head(article_num)\nprint(&quot;Headers for article&quot;, article_num, &quot;in group&quot;, group, &quot;\\n&quot;, headers)\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- Use the <code>head()</code> method to retrieve the headers of a specific article.\n- Specify the group and article number as arguments.\n- Print the headers.</p>\n<h3>Example 4: Retrieving an Article</h3>\n<pre class=\"codehilite\"><code class=\"language-python\"># Retrieve and print the content of a specific article\narticle_content = server.article(article_num)\nprint(&quot;Article&quot;, article_num, &quot;in group&quot;, group, &quot;\\n&quot;, article_content)\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- Use the <code>article()</code> method to retrieve the full content of a specific article.\n- Print the content.</p>\n<h3>Example 5: Closing the Connection</h3>\n<pre class=\"codehilite\"><code class=\"language-python\"># Close the connection to the server\nserver.quit()\nprint(&quot;Connection closed.&quot;)\n</code></pre>\n\n<p><strong>Explanation</strong>:\n- Use the <code>quit()</code> method to close the connection to the NNTP server.</p>\n<h3>Additional Best Practices and Considerations</h3>\n<ol>\n<li>\n<p><strong>Error Handling</strong>: Always handle exceptions that might occur during the interaction with the NNTP server. For example, you can use a try-except block to catch errors like <code>NNTPError</code> which are raised if there is an issue with the connection or command execution.</p>\n</li>\n<li>\n<p><strong>Resource Management</strong>: Ensure that resources are properly managed by closing the connection and deleting references to objects when they are no longer needed.</p>\n</li>\n<li>\n<p><strong>Security</strong>: Be cautious about exposing your application to network connections, especially if it's running in a public environment. Consider using secure channels like SSL/TLS for communication if necessary.</p>\n</li>\n<li>\n<p><strong>Documentation</strong>: Refer to the official Python documentation for <code>nntplib</code> (https://docs.python.org/3/library/nntplib.html) for more detailed information and advanced features.</p>\n</li>\n</ol>\n<p>These examples provide a basic framework for interacting with NNTP servers in Python. Depending on your specific use case, you might need to extend or modify these examples to suit your needs.</p>"
        },
        {
            "filename": "poplib - POP3 protocol client.md",
            "content": "<h1>poplib - POP3 protocol client</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-retrieving-messages\">Example 1: Retrieving Messages</a></li>\n<li><a href=\"#example-2-deleting-messages\">Example 2: Deleting Messages</a></li>\n<li><a href=\"#example-3-retrieving-email-headers\">Example 3: Retrieving Email Headers</a></li>\n<li><a href=\"#example-4-handling-multiple-messages\">Example 4: Handling Multiple Messages</a></li>\n<li><a href=\"#example-5-handling-large-emails\">Example 5: Handling Large Emails</a></li>\n<li><a href=\"#example-6-error-handling-and-logging\">Example 6: Error Handling and Logging</a></li>\n<li><a href=\"#example-7-using-tls-with-authentication\">Example 7: Using TLS with Authentication</a></li>\n</ol>\n<p>The <code>poplib</code> module in Python provides a convenient interface to access email messages using the Post Office Protocol (POP3). Below are comprehensive examples demonstrating various functionalities of the <code>poplib</code> module. These examples cover basic usage, error handling, and advanced features like retrieving specific email headers.</p>\n<h3>Example 1: Retrieving Messages</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import poplib\nfrom email.parser import BytesParser\n\n# Connect to a POP3 server (e.g., Gmail)\nserver = poplib.POP3_SSL('pop.gmail.com', 995)\n\n# Login to the server\nusername = 'your-email@gmail.com'\npassword = 'your-password'\ntry:\n    server.user(username)\n    server.pass_(password)\nexcept poplib.error_proto as e:\n    print(f&quot;Login failed: {e}&quot;)\nelse:\n    # Retrieve all messages\n    num_messages = len(server.list()[1])\n    for i in range(num_messages):\n        # Retrieve a specific message by index\n        resp, lines, octets = server.retr(i + 1)\n        raw_email = b'\\n'.join(lines)  # Combine lines into one string\n\n        # Parse the email using BytesParser\n        email_message = BytesParser().parse(raw_email)\n\n        print(f&quot;Message {i + 1}:&quot;)\n        print(&quot;From:&quot;, email_message['from'])\n        print(&quot;Subject:&quot;, email_message['subject'])\n\n    # Close the connection\n    server.quit()\n\n# Note: Ensure you handle exceptions properly and close the connection to free resources.\n</code></pre>\n\n<h3>Example 2: Deleting Messages</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import poplib\n\n# Connect to a POP3 server (e.g., Gmail)\nserver = poplib.POP3_SSL('pop.gmail.com', 995)\n\n# Login to the server\nusername = 'your-email@gmail.com'\npassword = 'your-password'\ntry:\n    server.user(username)\n    server.pass_(password)\nexcept poplib.error_proto as e:\n    print(f&quot;Login failed: {e}&quot;)\nelse:\n    # Retrieve all messages\n    num_messages = len(server.list()[1])\n    for i in range(num_messages):\n        print(f&quot;Message {i + 1}:&quot;)\n        try:\n            # Delete the message by index\n            server.dele(i + 1)\n        except poplib.error_proto as e:\n            print(f&quot;Failed to delete message {i + 1}: {e}&quot;)\n\n    # Close the connection\n    server.quit()\n</code></pre>\n\n<h3>Example 3: Retrieving Email Headers</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import poplib\nfrom email.parser import BytesParser\n\n# Connect to a POP3 server (e.g., Gmail)\nserver = poplib.POP3_SSL('pop.gmail.com', 995)\n\n# Login to the server\nusername = 'your-email@gmail.com'\npassword = 'your-password'\ntry:\n    server.user(username)\n    server.pass_(password)\nexcept poplib.error_proto as e:\n    print(f&quot;Login failed: {e}&quot;)\nelse:\n    # Retrieve all messages\n    num_messages = len(server.list()[1])\n    for i in range(num_messages):\n        resp, lines, octets = server.retr(i + 1)\n        raw_email = b'\\n'.join(lines)\n\n        # Parse the email using BytesParser to extract headers\n        email_message = BytesParser().parse(raw_email)\n\n        print(f&quot;Message {i + 1}:&quot;)\n        for header in email_message:\n            print(header, &quot;:&quot;, email_message[header])\n\n    # Close the connection\n    server.quit()\n</code></pre>\n\n<h3>Example 4: Handling Multiple Messages</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import poplib\nfrom email.parser import BytesParser\n\n# Connect to a POP3 server (e.g., Gmail)\nserver = poplib.POP3_SSL('pop.gmail.com', 995)\n\n# Login to the server\nusername = 'your-email@gmail.com'\npassword = 'your-password'\ntry:\n    server.user(username)\n    server.pass_(password)\nexcept poplib.error_proto as e:\n    print(f&quot;Login failed: {e}&quot;)\nelse:\n    # Retrieve all messages\n    num_messages = len(server.list()[1])\n    for i in range(num_messages):\n        resp, lines, octets = server.retr(i + 1)\n        raw_email = b'\\n'.join(lines)\n\n        # Parse the email using BytesParser to extract headers and body\n        email_message = BytesParser().parse(raw_email)\n\n        print(f&quot;Message {i + 1}:&quot;)\n        for header in email_message:\n            print(header, &quot;:&quot;, email_message[header])\n\n    # Close the connection\n    server.quit()\n</code></pre>\n\n<h3>Example 5: Handling Large Emails</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import poplib\nfrom email.parser import BytesParser\n\n# Connect to a POP3 server (e.g., Gmail)\nserver = poplib.POP3_SSL('pop.gmail.com', 995)\n\n# Login to the server\nusername = 'your-email@gmail.com'\npassword = 'your-password'\ntry:\n    server.user(username)\n    server.pass_(password)\nexcept poplib.error_proto as e:\n    print(f&quot;Login failed: {e}&quot;)\nelse:\n    # Retrieve all messages\n    num_messages = len(server.list()[1])\n    for i in range(num_messages):\n        resp, lines, octets = server.retr(i + 1)\n        raw_email = b'\\n'.join(lines)\n\n        # Parse the email using BytesParser to handle large emails\n        email_message = BytesParser().parse(raw_email)\n\n        print(f&quot;Message {i + 1}:&quot;)\n        for header in email_message:\n            print(header, &quot;:&quot;, email_message[header])\n\n    # Close the connection\n    server.quit()\n</code></pre>\n\n<h3>Example 6: Error Handling and Logging</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import poplib\nfrom email.parser import BytesParser\nimport logging\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\n\n# Connect to a POP3 server (e.g., Gmail)\nserver = poplib.POP3_SSL('pop.gmail.com', 995)\n\n# Login to the server\nusername = 'your-email@gmail.com'\npassword = 'your-password'\ntry:\n    server.user(username)\n    server.pass_(password)\nexcept poplib.error_proto as e:\n    logging.error(f&quot;Login failed: {e}&quot;)\nelse:\n    try:\n        # Retrieve all messages\n        num_messages = len(server.list()[1])\n        for i in range(num_messages):\n            resp, lines, octets = server.retr(i + 1)\n            raw_email = b'\\n'.join(lines)\n\n            # Parse the email using BytesParser\n            email_message = BytesParser().parse(raw_email)\n\n            logging.info(f&quot;Message {i + 1}:&quot;)\n            for header in email_message:\n                logging.info(f&quot;{header} : {email_message[header]}&quot;)\n\n    except poplib.error_proto as e:\n        logging.error(f&quot;Error processing message: {e}&quot;)\n\n    # Close the connection\n    server.quit()\n</code></pre>\n\n<h3>Example 7: Using TLS with Authentication</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import poplib\nfrom email.parser import BytesParser\n\n# Connect to a POP3 server (e.g., Gmail) using TLS\nserver = poplib.POP3_SSL('pop.gmail.com', 995)\n\n# Login to the server\nusername = 'your-email@gmail.com'\npassword = 'your-password'\ntry:\n    server.user(username)\n    server.pass_(password)\nexcept poplib.error_proto as e:\n    print(f&quot;Login failed: {e}&quot;)\nelse:\n    # Retrieve all messages\n    num_messages = len(server.list()[1])\n    for i in range(num_messages):\n        resp, lines, octets = server.retr(i + 1)\n        raw_email = b'\\n'.join(lines)\n\n        # Parse the email using BytesParser\n        email_message = BytesParser().parse(raw_email)\n\n        print(f&quot;Message {i + 1}:&quot;)\n        for header in email_message:\n            print(header, &quot;:&quot;, email_message[header])\n\n    # Close the connection\n    server.quit()\n</code></pre>\n\n<p>These examples demonstrate basic usage of the <code>poplib</code> module, including retrieving and parsing emails, handling exceptions, and logging messages. Each example is designed to be self-contained and includes comments for clarity.</p>"
        },
        {
            "filename": "smtplib - SMTP protocol client.md",
            "content": "<h1>smtplib - SMTP protocol client</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-sending-a-simple-email-using-smtplib\">Example 1: Sending a Simple Email Using <code>smtplib</code></a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#example-2-sending-an-html-email-using-smtplib\">Example 2: Sending an HTML Email Using <code>smtplib</code></a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#example-3-sending-an-email-with-attachments-using-smtplib\">Example 3: Sending an Email with Attachments Using <code>smtplib</code></a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#example-4-sending-email-with-smtp-authentication-via-gmail\">Example 4: Sending Email with SMTP Authentication via Gmail</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n</ol>\n<p>Below are comprehensive code examples for using the <code>smtplib</code> module in Python, covering various functionalities such as sending simple emails, handling exceptions, and configuring SMTP servers with authentication.</p>\n<h3>Example 1: Sending a Simple Email Using <code>smtplib</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import smtplib\nfrom email.mime.text import MIMEText\n\ndef send_simple_email():\n    # Set up the SMTP server details\n    smtp_server = 'smtp.example.com'\n    port = 587\n    sender_email = 'your-email@example.com'\n    receiver_email = 'receiver-email@example.com'\n    password = 'your-password'\n\n    try:\n        # Create a secure SSL context\n        context = smtplib.SMTP(smtp_server, port)\n\n        # Start TLS encryption\n        context.starttls()\n\n        # Log in to the SMTP server\n        context.login(sender_email, password)\n\n        # Create a MIMEText object for the email content\n        message = MIMEText('Hello, this is a test email sent from Python using smtplib.')\n        message['Subject'] = 'Test Email'\n        message['From'] = sender_email\n        message['To'] = receiver_email\n\n        # Send the email\n        context.sendmail(sender_email, receiver_email, message.as_string())\n\n        print(&quot;Email sent successfully!&quot;)\n    except Exception as e:\n        print(f&quot;An error occurred: {e}&quot;)\n    finally:\n        # Close the connection\n        context.quit()\n\nif __name__ == &quot;__main__&quot;:\n    send_simple_email()\n</code></pre>\n\n<h3>Explanation:</h3>\n<ol>\n<li><strong>SMTP Server Setup</strong>: Define the SMTP server address, port, sender's email, receiver's email, and password.</li>\n<li><strong>SSL Context</strong>: Create an SSL context to secure the connection.</li>\n<li><strong>Start TLS</strong>: Establish a secure connection using TLS.</li>\n<li><strong>Login</strong>: Authenticate with the SMTP server using the sender's credentials.</li>\n<li><strong>Create Email Content</strong>: Use <code>MIMEText</code> to create a simple email message.</li>\n<li><strong>Send Email</strong>: Send the email using <code>context.sendmail()</code>.</li>\n<li><strong>Error Handling and Cleanup</strong>: Include exception handling and ensure the connection is closed in a <code>finally</code> block.</li>\n</ol>\n<h3>Example 2: Sending an HTML Email Using <code>smtplib</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import smtplib\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\n\ndef send_html_email():\n    # Set up the SMTP server details\n    smtp_server = 'smtp.example.com'\n    port = 587\n    sender_email = 'your-email@example.com'\n    receiver_email = 'receiver-email@example.com'\n    password = 'your-password'\n\n    try:\n        # Create a secure SSL context\n        context = smtplib.SMTP(smtp_server, port)\n\n        # Start TLS encryption\n        context.starttls()\n\n        # Log in to the SMTP server\n        context.login(sender_email, password)\n\n        # Create a MIMEMultipart object for the email content\n        message = MIMEMultipart('alternative')\n        message['Subject'] = 'Test HTML Email'\n        message['From'] = sender_email\n        message['To'] = receiver_email\n\n        # Create and attach plain text version of the email\n        text_part = MIMEText('This is a test email sent from Python using smtplib.', 'plain')\n        message.attach(text_part)\n\n        # Create and attach HTML version of the email\n        html_part = MIMEText('&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello, this is a &lt;b&gt;test&lt;/b&gt; email sent from Python using smtplib.&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;', 'html')\n        message.attach(html_part)\n\n        # Send the email\n        context.sendmail(sender_email, receiver_email, message.as_string())\n\n        print(&quot;Email sent successfully!&quot;)\n    except Exception as e:\n        print(f&quot;An error occurred: {e}&quot;)\n    finally:\n        # Close the connection\n        context.quit()\n\nif __name__ == &quot;__main__&quot;:\n    send_html_email()\n</code></pre>\n\n<h3>Explanation:</h3>\n<ol>\n<li><strong>SMTP Server Setup</strong>: Similar to the simple email example.</li>\n<li><strong>MIME Multipart</strong>: Use <code>MIMEMultipart</code> to create a multipart email message that can contain both plain text and HTML content.</li>\n<li><strong>Attach Content</strong>: Attach each part of the email using <code>attach()</code>.</li>\n<li><strong>Error Handling and Cleanup</strong>: Same as in the simple email example.</li>\n</ol>\n<h3>Example 3: Sending an Email with Attachments Using <code>smtplib</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import smtplib\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\nfrom email.mime.base import MIMEBase\nfrom email import encoders\n\ndef send_email_with_attachment():\n    # Set up the SMTP server details\n    smtp_server = 'smtp.example.com'\n    port = 587\n    sender_email = 'your-email@example.com'\n    receiver_email = 'receiver-email@example.com'\n    password = 'your-password'\n\n    try:\n        # Create a secure SSL context\n        context = smtplib.SMTP(smtp_server, port)\n\n        # Start TLS encryption\n        context.starttls()\n\n        # Log in to the SMTP server\n        context.login(sender_email, password)\n\n        # Create a MIMEMultipart object for the email content\n        message = MIMEMultipart()\n        message['Subject'] = 'Test Email with Attachment'\n        message['From'] = sender_email\n        message['To'] = receiver_email\n\n        # Attach plain text version of the email\n        text_part = MIMEText('This is a test email sent from Python using smtplib.', 'plain')\n        message.attach(text_part)\n\n        # Specify the file to attach\n        filename = &quot;example.txt&quot;\n        attachment_path = f&quot;/path/to/{filename}&quot;\n\n        with open(attachment_path, &quot;rb&quot;) as attachment:\n            part = MIMEBase('application', 'octet-stream')\n            part.set_payload(attachment.read())\n            encoders.encode_base64(part)\n            part.add_header('Content-Disposition', f&quot;attachment; filename= {filename}&quot;)\n\n            message.attach(part)\n\n        # Send the email\n        context.sendmail(sender_email, receiver_email, message.as_string())\n\n        print(&quot;Email sent successfully with attachment!&quot;)\n    except Exception as e:\n        print(f&quot;An error occurred: {e}&quot;)\n    finally:\n        # Close the connection\n        context.quit()\n\nif __name__ == &quot;__main__&quot;:\n    send_email_with_attachment()\n</code></pre>\n\n<h3>Explanation:</h3>\n<ol>\n<li><strong>SMTP Server Setup</strong>: Same as previous examples.</li>\n<li><strong>MIME Multipart</strong>: Use <code>MIMEMultipart</code> for email content and attachment.</li>\n<li><strong>Attach Plain Text</strong>: Attach a plain text part to the email.</li>\n<li><strong>Attach File</strong>: Open the file, encode it in base64, and attach it using <code>MIMEBase</code>.</li>\n<li><strong>Error Handling and Cleanup</strong>: Same as previous examples.</li>\n</ol>\n<h3>Example 4: Sending Email with SMTP Authentication via Gmail</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import smtplib\nfrom email.mime.text import MIMEText\n\ndef send_email_via_gmail():\n    # Set up the SMTP server details for Gmail\n    smtp_server = 'smtp.gmail.com'\n    port = 587\n    sender_email = 'your-email@gmail.com'\n    receiver_email = 'receiver-email@example.com'\n    password = 'your-app-password'\n\n    try:\n        # Create a secure SSL context\n        context = smtplib.SMTP(smtp_server, port)\n\n        # Start TLS encryption\n        context.starttls()\n\n        # Log in to the SMTP server with Gmail's credentials\n        context.login(sender_email, password)\n\n        # Create a MIMEText object for the email content\n        message = MIMEText('Hello, this is a test email sent from Python using smtplib via Gmail.')\n        message['Subject'] = 'Test Email via Gmail'\n        message['From'] = sender_email\n        message['To'] = receiver_email\n\n        # Send the email\n        context.sendmail(sender_email, receiver_email, message.as_string())\n\n        print(&quot;Email sent successfully!&quot;)\n    except Exception as e:\n        print(f&quot;An error occurred: {e}&quot;)\n    finally:\n        # Close the connection\n        context.quit()\n\nif __name__ == &quot;__main__&quot;:\n    send_email_via_gmail()\n</code></pre>\n\n<h3>Explanation:</h3>\n<ol>\n<li><strong>SMTP Server Setup</strong>: For Gmail, specify <code>'smtp.gmail.com'</code> and use port <code>587</code>.</li>\n<li><strong>Gmail App Password</strong>: Use a 2FA app password instead of your regular email password.</li>\n<li><strong>Login</strong>: Log in using the sender's Gmail credentials.</li>\n</ol>\n<p>These examples cover basic functionality for sending emails using <code>smtplib</code>, including simple text, HTML, attachments, and handling SMTP authentication for popular services like Gmail. Adjust the server details and credentials as needed for your specific use case.</p>"
        },
        {
            "filename": "urllib - URL handling modules.md",
            "content": "<h1>urllib - URL handling modules</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-urllibrequest-module\">1. <strong>urllib.request Module</strong></a></li>\n<li><a href=\"#example-1-using-urlopen-to-retrieve-a-web-page\">Example 1: Using <code>urlopen</code> to Retrieve a Web Page</a></li>\n<li><a href=\"#example-2-handling-redirects-with-urlopen\">Example 2: Handling Redirects with <code>urlopen</code></a></li>\n<li><a href=\"#2-urllibparse-module\">2. <strong>urllib.parse Module</strong></a></li>\n<li><a href=\"#example-3-parsing-a-url\">Example 3: Parsing a URL</a></li>\n<li><a href=\"#example-4-encoding-query-parameters\">Example 4: Encoding Query Parameters</a></li>\n<li><a href=\"#3-urlliberror-module\">3. <strong>urllib.error Module</strong></a></li>\n<li><a href=\"#example-5-handling-urlerror-and-httperror\">Example 5: Handling URLError and HTTPError</a></li>\n<li><a href=\"#4-urllibrobotparser-module\">4. <strong>urllib.robotparser Module</strong></a></li>\n<li><a href=\"#example-6-parsing-robotstxt\">Example 6: Parsing <code>robots.txt</code></a></li>\n</ol>\n<p>The <code>urllib</code> module in Python provides a variety of functions to handle URLs. Below are comprehensive, well-documented code examples covering various functionalities within this module.</p>\n<h3>1. <strong>urllib.request Module</strong></h3>\n<p>This module contains functions to open and read from URLs, and to handle errors that may occur during the process.</p>\n<h4>Example 1: Using <code>urlopen</code> to Retrieve a Web Page</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import urllib.request\n\ndef fetch_web_page(url):\n    &quot;&quot;&quot;\n    Fetches the content of a web page using urllib.request.urlopen.\n\n    Args:\n    url (str): The URL of the web page to retrieve.\n\n    Returns:\n    str: The content of the web page as a string.\n    &quot;&quot;&quot;\n    try:\n        # Open the URL and read its contents\n        with urllib.request.urlopen(url) as response:\n            html_content = response.read()\n\n        return html_content.decode('utf-8')  # Decode from bytes to string\n\n    except urllib.error.URLError as e:\n        print(f&quot;Error fetching {url}: {e.reason}&quot;)\n        return None\n\n# Example usage\nurl = 'https://www.example.com'\ncontent = fetch_web_page(url)\nif content:\n    print(content[:100])  # Print the first 100 characters of the page\n</code></pre>\n\n<h4>Example 2: Handling Redirects with <code>urlopen</code></h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import urllib.request\n\ndef fetch_web_page_with_redirects(url):\n    &quot;&quot;&quot;\n    Fetches a web page and handles redirects using urllib.request.urlopen.\n\n    Args:\n    url (str): The URL of the web page to retrieve.\n\n    Returns:\n    str: The content of the final destination page as a string.\n    &quot;&quot;&quot;\n    try:\n        # Open the URL and handle redirects\n        with urllib.request.urlopen(url) as response:\n            html_content = response.read()\n\n        return html_content.decode('utf-8')\n\n    except urllib.error.HTTPError as e:\n        print(f&quot;HTTP error occurred: {e.code} - {e.reason}&quot;)\n        return None\n    except urllib.error.URLError as e:\n        print(f&quot;URL error occurred: {e.reason}&quot;)\n        return None\n\n# Example usage\nurl = 'https://www.example.com/redirect-target'\ncontent = fetch_web_page_with_redirects(url)\nif content:\n    print(content[:100])\n</code></pre>\n\n<h3>2. <strong>urllib.parse Module</strong></h3>\n<p>This module provides functions to parse URLs and manage query parameters.</p>\n<h4>Example 3: Parsing a URL</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import urllib.parse\n\ndef parse_url(url):\n    &quot;&quot;&quot;\n    Parses a URL using urllib.parse.urlparse.\n\n    Args:\n    url (str): The URL to be parsed.\n\n    Returns:\n    tuple: A named tuple containing the components of the URL.\n    &quot;&quot;&quot;\n    # Parse the URL into its components\n    parsed_url = urllib.parse.urlparse(url)\n\n    return parsed_url\n\n# Example usage\nurl = 'https://www.example.com/path?query=param&amp;another=2'\nparsed = parse_url(url)\nprint(parsed)\n</code></pre>\n\n<h4>Example 4: Encoding Query Parameters</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import urllib.parse\n\ndef encode_query_params(params):\n    &quot;&quot;&quot;\n    Encodes query parameters into a URL-encoded string using urllib.parse.urlencode.\n\n    Args:\n    params (dict): A dictionary of key-value pairs to be encoded.\n\n    Returns:\n    str: The URL-encoded query string.\n    &quot;&quot;&quot;\n    # Encode the parameters\n    encoded_params = urllib.parse.urlencode(params)\n\n    return encoded_params\n\n# Example usage\nparams = {'key': 'value', 'another_key': 2}\nencoded = encode_query_params(params)\nprint(encoded)\n</code></pre>\n\n<h3>3. <strong>urllib.error Module</strong></h3>\n<p>This module provides exception classes for errors that may occur during URL operations.</p>\n<h4>Example 5: Handling URLError and HTTPError</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import urllib.request\n\ndef handle_url_errors(url):\n    &quot;&quot;&quot;\n    Handles potential URLError and HTTPError exceptions using urllib.request.urlopen.\n\n    Args:\n    url (str): The URL to be retrieved.\n\n    Returns:\n    str: The content of the web page as a string if successful, None otherwise.\n    &quot;&quot;&quot;\n    try:\n        # Open the URL\n        with urllib.request.urlopen(url) as response:\n            html_content = response.read()\n\n        return html_content.decode('utf-8')\n\n    except urllib.error.HTTPError as e:\n        print(f&quot;HTTP error occurred: {e.code} - {e.reason}&quot;)\n        return None\n    except urllib.error.URLError as e:\n        print(f&quot;URL error occurred: {e.reason}&quot;)\n        return None\n\n# Example usage\nurl = 'https://www.example.com/nonexistent-page'\ncontent = handle_url_errors(url)\nif content:\n    print(content[:100])\n</code></pre>\n\n<h3>4. <strong>urllib.robotparser Module</strong></h3>\n<p>This module provides functions to parse and understand the <code>robots.txt</code> files that specify which parts of a website can be accessed by web robots.</p>\n<h4>Example 6: Parsing <code>robots.txt</code></h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import urllib.robotparser\n\ndef parse_robots_file(url):\n    &quot;&quot;&quot;\n    Parses a `robots.txt` file using urllib.robotparser.RobotFileParser.\n\n    Args:\n    url (str): The URL to the `robots.txt` file.\n\n    Returns:\n    RobotFileParser: An instance of RobotFileParser that can be queried.\n    &quot;&quot;&quot;\n    # Parse the `robots.txt` file\n    rp = urllib.robotparser.RobotFileParser()\n    rp.set_url(url)\n    rp.read()\n\n    return rp\n\n# Example usage\nurl = 'https://www.example.com/robots.txt'\nrp = parse_robots_file(url)\nprint(f&quot;Allowed user agents: {rp.allowed_user_agents()}&quot;)\n</code></pre>\n\n<h3>5. <strong>urllib.robotparser Module - Querying Permissions</strong></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import urllib.robotparser\n\ndef check_robot_permission(rp, user_agent, path):\n    &quot;&quot;&quot;\n    Checks if a specific user agent can access a given path based on the `robots.txt` file.\n\n    Args:\n    rp (RobotFileParser): An instance of RobotFileParser.\n    user_agent (str): The user agent to query.\n    path (str): The URL path to check.\n\n    Returns:\n    bool: True if the user agent is allowed to access the path, False otherwise.\n    &quot;&quot;&quot;\n    # Check if the user agent can access the path\n    return rp.can_fetch(user_agent, path)\n\n# Example usage\nrp = parse_robots_file('https://www.example.com/robots.txt')\nuser_agent = 'MyUserAgent'\npath = '/'\nif check_robot_permission(rp, user_agent, path):\n    print(f&quot;User Agent {user_agent} is allowed to access {path}&quot;)\nelse:\n    print(f&quot;User Agent {user_agent} is not allowed to access {path}&quot;)\n</code></pre>\n\n<p>These examples demonstrate how to use various functionalities within the <code>urllib</code> module to handle URL requests, parse URLs and query parameters, manage errors, and interact with <code>robots.txt</code> files.</p>"
        },
        {
            "filename": "urllib.error - Exception classes raised by urllib.request.md",
            "content": "<h1>urllib.error - Exception classes raised by urllib.request</h1>\n<p>The <code>urllib.error</code> module contains a set of exception classes that are raised by the <code>urllib.request</code> module when an error occurs during HTTP request processing, such as failed connections or invalid responses. Below are comprehensive code examples for each exception class in this module:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import urllib.request\n\n# Example 1: URLError\ntry:\n    # Attempt to open a URL that does not exist (this will raise an error)\n    response = urllib.request.urlopen(&quot;https://nonexistent-url.com&quot;)\nexcept urllib.error.URLError as e:\n    print(f&quot;URLError occurred: {e.reason}&quot;)\n\n# Explanation:\n# URLError is raised when there was an error during the actual HTTP request.\n# It can be caused by network issues, invalid URLs, or other problems with the connection.\n\n# Example 2: HTTPError\ntry:\n    # Attempt to open a URL that returns an error status code (e.g., 404 Not Found)\n    response = urllib.request.urlopen(&quot;https://www.example.com/does-not-exist&quot;)\nexcept urllib.error.HTTPError as e:\n    print(f&quot;HTTPError occurred with status {e.code}: {e.reason}&quot;)\n\n# Explanation:\n# HTTPError is raised when the server responds with an error status code.\n# It contains information about the specific error, including the status code and a reason message.\n\n# Example 3: ContentTooLongError\ntry:\n    # Attempt to open a URL that returns a very large response (e.g., over a specified limit)\n    response = urllib.request.urlopen(&quot;https://example.com/large-file&quot;)\nexcept urllib.error.ContentTooLongError as e:\n    print(f&quot;ContentTooLongError occurred with length {e.length}: {e.message}&quot;)\n\n# Explanation:\n# ContentTooLongError is raised when the server sends back a response that exceeds a specified maximum size.\n# It provides details about the content length and an optional message.\n\n# Example 4: ReadTimeoutError\ntry:\n    # Attempt to open a URL with a read timeout (e.g., more than 5 seconds)\n    urllib.request.urlopen(&quot;https://example.com&quot;, timeout=5)\nexcept urllib.error.ReadTimeoutError as e:\n    print(f&quot;ReadTimeoutError occurred after {e.timeout} seconds: {e.reason}&quot;)\n\n# Explanation:\n# ReadTimeoutError is raised when the connection to the server times out before the request can complete.\n# It includes the timeout duration and a reason message.\n\n# Example 5: FTPError\ntry:\n    # Attempt to open an FTP URL (this will raise an error)\n    urllib.request.urlopen(&quot;ftp://example.com&quot;)\nexcept urllib.error.FTPError as e:\n    print(f&quot;FTPError occurred: {e.reason}&quot;)\n\n# Explanation:\n# FTPError is raised when there was an error during the FTP request.\n# It can be caused by network issues or invalid FTP URLs.\n\n# Example 6: SocketError\ntry:\n    # Attempt to open a URL that requires a proxy (this will raise an error)\n    proxy = urllib.request.ProxyHandler({'http': 'http://proxy.example.com'})\n    opener = urllib.request.build_opener(proxy)\n    response = opener.open(&quot;http://example.com&quot;)\nexcept urllib.error.SocketError as e:\n    print(f&quot;SocketError occurred: {e.strerror}&quot;)\n\n# Explanation:\n# SocketError is raised when there was an error establishing a socket connection.\n# It includes the error message, which can be useful for debugging network issues.\n\n# Example 7: IncompleteRead\ntry:\n    # Attempt to open a URL and read only part of the content (this will raise an error)\n    response = urllib.request.urlopen(&quot;https://example.com/large-file&quot;)\n    data = response.read(1024)  # Read only 1024 bytes\nexcept urllib.error.IncompleteRead as e:\n    print(f&quot;IncompleteRead occurred: {e.partial} out of {e.length} expected&quot;)\n\n# Explanation:\n# IncompleteRead is raised when the server sends a partial response, and the client expects a full one.\n# It includes the amount of data read so far and the total expected length.\n\n# Example 8: HTTPError with custom message\ntry:\n    # Attempt to open a URL that returns an error status code (e.g., 403 Forbidden)\n    response = urllib.request.urlopen(&quot;https://www.example.com/forbidden&quot;)\nexcept urllib.error.HTTPError as e:\n    print(f&quot;HTTPError occurred with status {e.code}: {e.reason}&quot;)\n    custom_message = &quot;Access denied&quot;\n    if str(e) != custom_message:\n        raise urllib.error.HTTPError(e.url, e.code, custom_message, None, e.hdrs)\n\n# Explanation:\n# Custom error messages can be added to HTTPError by creating a new exception instance.\n# This allows for more detailed error handling and logging.\n\n# Example 9: URLError with custom message\ntry:\n    # Attempt to open a URL that does not exist (this will raise an error)\n    response = urllib.request.urlopen(&quot;https://nonexistent-url.com&quot;)\nexcept urllib.error.URLError as e:\n    print(f&quot;URLError occurred: {e.reason}&quot;)\n    custom_message = &quot;URL not found&quot;\n    if str(e) != custom_message:\n        raise urllib.error.URLError(custom_message)\n\n# Explanation:\n# Custom error messages can be added to URLError by creating a new exception instance.\n# This allows for more detailed error handling and logging.\n\n# Example 10: ContentTooLongError with custom message\ntry:\n    # Attempt to open a URL that returns a very large response (e.g., over a specified limit)\n    response = urllib.request.urlopen(&quot;https://example.com/large-file&quot;)\nexcept urllib.error.ContentTooLongError as e:\n    print(f&quot;ContentTooLongError occurred with length {e.length}: {e.message}&quot;)\n    custom_message = &quot;File too large&quot;\n    if str(e) != custom_message:\n        raise urllib.error.ContentTooLongError(e.url, e.code, custom_message, None, e.hdrs)\n\n# Explanation:\n# Custom error messages can be added to ContentTooLongError by creating a new exception instance.\n# This allows for more detailed error handling and logging.\n</code></pre>\n\n<p>These examples demonstrate how to handle various exceptions that might occur when using the <code>urllib.request</code> module. Each example includes comments explaining the purpose of the code, what exceptions are handled, and how custom messages can be added to improve error reporting. These examples are suitable for inclusion in official documentation or as a reference guide for developers working with Python's standard library networking utilities.</p>"
        },
        {
            "filename": "urllib.parse - Parse URLs into components.md",
            "content": "<h1>urllib.parse - Parse URLs into components</h1>\n<p>Here are comprehensive examples of how to use the <code>urllib.parse</code> module in Python, including how to parse URLs into components:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import urllib.parse\n\n# Example 1: Parsing a simple URL\nurl = &quot;http://example.com/path?query=param&quot;\nparsed_url = urllib.parse.urlparse(url)\n\nprint(&quot;Scheme:&quot;, parsed_url.scheme)      # Output: http\nprint(&quot;Netloc:&quot;, parsed_url.netloc)    # Output: example.com\nprint(&quot;Path:&quot;, parsed_url.path)        # Output: /path\nprint(&quot;Params:&quot;, parsed_url.params)     # Output: ''\nprint(&quot;Query:&quot;, parsed_url.query)       # Output: query=param\nprint(&quot;Fragment:&quot;, parsed_url.fragment)   # Output: ''\n\n# Example 2: Parsing a URL with IPv6\nurl_ipv6 = &quot;http://[2001:db8::1]/path?query=param&quot;\nparsed_ipv6_url = urllib.parse.urlparse(url_ipv6)\n\nprint(&quot;Scheme:&quot;, parsed_ipv6_url.scheme)   # Output: http\nprint(&quot;Netloc:&quot;, parsed_ipv6_url.netloc)  # Output: [2001:db8::1]\nprint(&quot;Path:&quot;, parsed_ipv6_url.path)     # Output: /path\nprint(&quot;Params:&quot;, parsed_ipv6_url.params)    # Output: ''\nprint(&quot;Query:&quot;, parsed_ipv6_url.query)   # Output: query=param\nprint(&quot;Fragment:&quot;, parsed_ipv6_url.fragment)# Output: ''\n\n# Example 3: Parsing a URL with username and password\nurl_user_pass = &quot;http://user:password@example.com/path?query=param&quot;\nparsed_user_pass_url = urllib.parse.urlparse(url_user_pass)\n\nprint(&quot;Scheme:&quot;, parsed_user_pass_url.scheme) # Output: http\nprint(&quot;Netloc:&quot;, parsed_user_pass_url.netloc)  # Output: user:password@example.com\nprint(&quot;Path:&quot;, parsed_user_pass_url.path)     # Output: /path\nprint(&quot;Params:&quot;, parsed_user_pass_url.params)    # Output: ''\nprint(&quot;Query:&quot;, parsed_user_pass_url.query)   # Output: query=param\nprint(&quot;Fragment:&quot;, parsed_user_pass_url.fragment)# Output: ''\n\n# Example 4: Parsing a URL with multiple query parameters\nurl_params = &quot;http://example.com/path?query1=value1&amp;query2=value2&quot;\nparsed_params_url = urllib.parse.urlparse(url_params)\n\nprint(&quot;Scheme:&quot;, parsed_params_url.scheme) # Output: http\nprint(&quot;Netloc:&quot;, parsed_params_url.netloc)  # Output: example.com\nprint(&quot;Path:&quot;, parsed_params_url.path)     # Output: /path\nprint(&quot;Params:&quot;, parsed_params_url.params)    # Output: ''\nprint(&quot;Query:&quot;, parsed_params_url.query)   # Output: query1=value1&amp;query2=value2\nprint(&quot;Fragment:&quot;, parsed_params_url.fragment)# Output: ''\n\n# Example 5: Parsing a URL with fragment identifier\nurl_fragment = &quot;http://example.com/path?query=param#fragment&quot;\nparsed_fragment_url = urllib.parse.urlparse(url_fragment)\n\nprint(&quot;Scheme:&quot;, parsed_fragment_url.scheme)   # Output: http\nprint(&quot;Netloc:&quot;, parsed_fragment_url.netloc)  # Output: example.com\nprint(&quot;Path:&quot;, parsed_fragment_url.path)     # Output: /path\nprint(&quot;Params:&quot;, parsed_fragment_url.params)    # Output: ''\nprint(&quot;Query:&quot;, parsed_fragment_url.query)   # Output: query=param\nprint(&quot;Fragment:&quot;, parsed_fragment_url.fragment)# Output: fragment\n\n# Example 6: Parsing a URL with port number\nurl_port = &quot;http://example.com:8080/path?query=param&quot;\nparsed_port_url = urllib.parse.urlparse(url_port)\n\nprint(&quot;Scheme:&quot;, parsed_port_url.scheme)   # Output: http\nprint(&quot;Netloc:&quot;, parsed_port_url.netloc)  # Output: example.com:8080\nprint(&quot;Path:&quot;, parsed_port_url.path)     # Output: /path\nprint(&quot;Params:&quot;, parsed_port_url.params)    # Output: ''\nprint(&quot;Query:&quot;, parsed_port_url.query)   # Output: query=param\nprint(&quot;Fragment:&quot;, parsed_port_url.fragment)# Output: ''\n\n# Example 7: Parsing a URL with username and password using the urlunparse function\nparsed_url = urllib.parse.urlparse(url)\nurl_unparsed = urllib.parse.urlunparse(parsed_url)\n\nprint(&quot;Original URL:&quot;, url)          # Output: http://example.com/path?query=param\nprint(&quot;Unparsed URL:&quot;, url_unparsed)# Output: http://example.com/path?query=param\n\n# Example 8: Parsing a URL with multiple query parameters using the urlencode function\nquery_dict = {'key1': 'value1', 'key2': 'value2'}\nencoded_query = urllib.parse.urlencode(query_dict)\n\nprint(&quot;Encoded Query:&quot;, encoded_query) # Output: key1=value1&amp;key2=value2\n\n# Example 9: Parsing a URL with fragment identifier using the urljoin function\nbase_url = &quot;http://example.com/path&quot;\nfragment_url = &quot;#fragment&quot;\njoined_url = urllib.parse.urljoin(base_url, fragment_url)\n\nprint(&quot;Joined URL:&quot;, joined_url)   # Output: http://example.com/path#fragment\n\n# Example 10: Parsing a URL with IPv6 using the quote function\nipv6_url = &quot;http://[2001:db8::1]/path?query=param&quot;\nquoted_ipv6_url = urllib.parse.quote(ipv6_url)\n\nprint(&quot;Quoted IPv6 URL:&quot;, quoted_ipv6_url) # Output: http%3A%2F%255B2001%3Ab8%3A0000%3A0000%3A0000%3A0000%3A0000%3A0001%5D%2Fpath%3Fquery%3Dparam\n</code></pre>\n\n<p>These examples demonstrate various ways to parse URLs using the <code>urllib.parse</code> module, including handling different components of a URL such as scheme, netloc, path, query parameters, and fragment identifiers. The code also includes examples for parsing URLs with IPv6 addresses, port numbers, and username/password credentials. Additionally, it shows how to encode and join URLs using the provided functions.</p>"
        },
        {
            "filename": "urllib.request - Extensible library for opening URLs.md",
            "content": "<h1>urllib.request - Extensible library for opening URLs</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-opening-a-url\">1. Opening a URL</a></li>\n<li><a href=\"#2-handling-cookies\">2. Handling Cookies</a></li>\n<li><a href=\"#3-making-a-post-request\">3. Making a POST Request</a></li>\n<li><a href=\"#4-using-a-timeout\">4. Using a Timeout</a></li>\n<li><a href=\"#5-handling-redirects\">5. Handling Redirects</a></li>\n<li><a href=\"#6-using-a-user-agent\">6. Using a User-Agent</a></li>\n<li><a href=\"#7-handling-http-errors\">7. Handling HTTP Errors</a></li>\n<li><a href=\"#8-writing-to-a-local-file\">8. Writing to a Local File</a></li>\n<li><a href=\"#9-using-proxy\">9. Using Proxy</a></li>\n<li><a href=\"#10-using-https\">10. Using HTTPS</a></li>\n</ol>\n<p>The <code>urllib.request</code> module in Python provides a robust set of tools for making HTTP requests and handling various protocols, including file:// and http/https. Below are comprehensive code examples that demonstrate common use cases for this module, including how to open URLs, handle responses, manage cookies, and make POST requests.</p>\n<h3>1. Opening a URL</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import urllib.request\n\n# Example: Open a URL and print the response content\nurl = 'http://example.com'\nresponse = urllib.request.urlopen(url)\n\n# Read and decode the response content\ncontent = response.read().decode('utf-8')\n\nprint(content)\n</code></pre>\n\n<h3>2. Handling Cookies</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import urllib.request\n\n# Example: Open a URL and handle cookies\nreq = urllib.request.Request('http://example.com')\nopener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor())\nresponse = opener.open(req)\n\n# Read and decode the response content\ncontent = response.read().decode('utf-8')\n\nprint(content)\n</code></pre>\n\n<h3>3. Making a POST Request</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import urllib.request\nimport urllib.parse\n\n# Example: Make a POST request with data\nurl = 'http://example.com/api/data'\ndata = {'key1': 'value1', 'key2': 'value2'}\nencoded_data = urllib.parse.urlencode(data).encode('utf-8')\n\nreq = urllib.request.Request(url, encoded_data)\nresponse = urllib.request.urlopen(req)\n\n# Read and decode the response content\ncontent = response.read().decode('utf-8')\n\nprint(content)\n</code></pre>\n\n<h3>4. Using a Timeout</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import urllib.request\n\n# Example: Set a timeout for opening a URL\nurl = 'http://example.com'\ntry:\n    with urllib.request.urlopen(url, timeout=5) as response:\n        content = response.read().decode('utf-8')\n        print(content)\nexcept urllib.error.URLError as e:\n    if hasattr(e, 'reason'):\n        print(f&quot;Server error: {e.reason}&quot;)\n    elif hasattr(e, 'code'):\n        print(f&quot;HTTP error code: {e.code}&quot;)\n</code></pre>\n\n<h3>5. Handling Redirects</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import urllib.request\n\n# Example: Follow redirects when opening a URL\nurl = 'http://example.com/redirect'\nresponse = urllib.request.urlopen(url)\n\n# Read and decode the response content\ncontent = response.read().decode('utf-8')\n\nprint(content)\n</code></pre>\n\n<h3>6. Using a User-Agent</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import urllib.request\n\n# Example: Use a custom user-agent when opening a URL\nurl = 'http://example.com'\nheaders = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'}\nreq = urllib.request.Request(url, headers=headers)\n\nresponse = urllib.request.urlopen(req)\n\n# Read and decode the response content\ncontent = response.read().decode('utf-8')\n\nprint(content)\n</code></pre>\n\n<h3>7. Handling HTTP Errors</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import urllib.request\n\n# Example: Handle HTTP errors when opening a URL\nurl = 'http://example.com/404'\ntry:\n    with urllib.request.urlopen(url) as response:\n        content = response.read().decode('utf-8')\n        print(content)\nexcept urllib.error.HTTPError as e:\n    print(f&quot;HTTP error code: {e.code}&quot;)\n</code></pre>\n\n<h3>8. Writing to a Local File</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import urllib.request\n\n# Example: Write the contents of a URL to a local file\nurl = 'http://example.com'\nfilename = 'output.txt'\n\nwith urllib.request.urlopen(url) as response:\n    with open(filename, 'wb') as file:\n        file.write(response.read())\n\nprint(f&quot;Data written to {filename}&quot;)\n</code></pre>\n\n<h3>9. Using Proxy</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import urllib.request\n\n# Example: Use a proxy when opening a URL\nproxy_url = 'http://127.0.0.1:8080'\nproxies = {'http': proxy_url, 'https': proxy_url}\nopener = urllib.request.build_opener(urllib.request.ProxyHandler(proxies))\nresponse = opener.open('http://example.com')\n\n# Read and decode the response content\ncontent = response.read().decode('utf-8')\n\nprint(content)\n</code></pre>\n\n<h3>10. Using HTTPS</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import urllib.request\n\n# Example: Open a URL over HTTPS\nurl = 'https://example.com'\nresponse = urllib.request.urlopen(url)\n\n# Read and decode the response content\ncontent = response.read().decode('utf-8')\n\nprint(content)\n</code></pre>\n\n<p>These examples cover various aspects of using <code>urllib.request</code>, providing a comprehensive guide to opening URLs, handling responses, managing cookies, making POST requests, and more. Each example includes comments to explain each step and is suitable for inclusion in official documentation.</p>"
        },
        {
            "filename": "urllib.response - Response classes used by urllib.md",
            "content": "<h1>urllib.response - Response classes used by urllib</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#additional-features\">Additional Features:</a></li>\n</ol>\n<p>The <code>urllib</code> module in Python is a comprehensive set of modules that provide tools for interacting with URLs. The <code>response</code> submodule contains several response classes used by the <code>urllib</code> modules to handle HTTP responses. These classes are part of the <code>http.client</code> module, which provides an interface to HTTP clients.</p>\n<p>Below are examples demonstrating various functionalities related to the <code>Response</code> classes in the <code>urllib.response</code> module:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import urllib.request\n\ndef fetch_url(url):\n    try:\n        # Create a request object using urlopen with default settings\n        response = urllib.request.urlopen(url)\n\n        # Read the content of the response\n        content = response.read()\n\n        # Print the length of the content\n        print(f&quot;Content length: {len(content)} bytes&quot;)\n\n        # Decode the content to a string\n        decoded_content = content.decode('utf-8')\n        print(&quot;Decoded Content:&quot;)\n        print(decoded_content)\n    except urllib.error.URLError as e:\n        # Handle errors that occur during the request\n        print(f&quot;An error occurred: {e.reason}&quot;)\n    finally:\n        # Close the response to free up resources\n        if response:\n            response.close()\n\n# Example usage of fetch_url function\nfetch_url(&quot;https://www.example.com&quot;)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ol>\n<li><strong>Importing <code>urllib.request</code>:</strong> </li>\n<li>\n<p>This module provides a high-level interface for opening URLs and retrieving data from them.</p>\n</li>\n<li>\n<p><strong>Function <code>fetch_url(url)</code></strong>:</p>\n</li>\n<li>Takes a URL as input.</li>\n<li>Uses <code>urllib.request.urlopen()</code> to open the URL. This function returns an HTTPResponse object.</li>\n<li>Reads the content of the response using the <code>.read()</code> method, which returns bytes data.</li>\n<li>\n<p>Decodes the content from bytes to a string using UTF-8 encoding and prints it.</p>\n</li>\n<li>\n<p><strong>Error Handling:</strong></p>\n</li>\n<li>The <code>try-except</code> block catches any <code>URLError</code> that might occur during the request (e.g., network issues).</li>\n<li>\n<p>Prints an error message if an exception is caught.</p>\n</li>\n<li>\n<p><strong>Resource Management:</strong></p>\n</li>\n<li>The <code>finally</code> block ensures that the response is closed using <code>.close()</code>, even if an error occurs, to free up system resources.</li>\n</ol>\n<h3>Additional Features:</h3>\n<ul>\n<li><strong>Response Code and Headers:</strong>\n  You can access the HTTP status code and headers of a response using the <code>.getcode()</code> and <code>.getheaders()</code> methods respectively.</li>\n</ul>\n<pre class=\"codehilite\"><code class=\"language-python\">def fetch_url_with_details(url):\n    try:\n        response = urllib.request.urlopen(url)\n\n        # Get the HTTP status code\n        http_status_code = response.getcode()\n        print(f&quot;HTTP Status Code: {http_status_code}&quot;)\n\n        # Get and print all headers\n        headers = response.getheaders()\n        for header, value in headers:\n            print(f&quot;{header}: {value}&quot;)\n    except urllib.error.URLError as e:\n        print(f&quot;An error occurred: {e.reason}&quot;)\n    finally:\n        if response:\n            response.close()\n\n# Example usage of fetch_url_with_details function\nfetch_url_with_details(&quot;https://www.example.com&quot;)\n</code></pre>\n\n<ul>\n<li><strong>Streaming Responses:</strong>\n  You can also process responses in a streaming manner using the <code>.readline()</code> or <code>.readinto()</code> methods.</li>\n</ul>\n<pre class=\"codehilite\"><code class=\"language-python\">def stream_data(url):\n    try:\n        response = urllib.request.urlopen(url)\n\n        # Read and print each line of the response\n        while True:\n            line = response.readline()\n            if not line:\n                break\n            print(line.decode('utf-8'), end='')\n    except urllib.error.URLError as e:\n        print(f&quot;An error occurred: {e.reason}&quot;)\n    finally:\n        if response:\n            response.close()\n\n# Example usage of stream_data function\nstream_data(&quot;https://www.example.com&quot;)\n</code></pre>\n\n<p>These examples demonstrate the basic functionalities of using the <code>Response</code> classes in the <code>urllib.response</code> module, including how to handle requests, access response details, and manage resources effectively.</p>"
        },
        {
            "filename": "urllib.robotparser - Parser for robots.txt.md",
            "content": "<h1>urllib.robotparser - Parser for robots.txt</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-checking-robotstxt-for-disallowed-paths\">1. Checking Robots.txt for Disallowed Paths</a></li>\n<li><a href=\"#2-handling-different-user-agents\">2. Handling Different User Agents</a></li>\n<li><a href=\"#3-monitoring-changes-to-robotstxt\">3. Monitoring Changes to Robots.txt</a></li>\n<li><a href=\"#4-parsing-robotstxt-for-disallowed-paths-with-a-list-of-urls\">4. Parsing Robots.txt for Disallowed Paths with a List of URLs</a></li>\n<li><a href=\"#5-handling-custom-paths-in-robotstxt\">5. Handling Custom Paths in Robots.txt</a></li>\n</ol>\n<p>The <code>urllib.robotparser</code> module is part of Python's standard library, and it provides tools to parse a <code>robots.txt</code> file, which specifies rules about which web pages search engines should or should not index. Below are comprehensive code examples that demonstrate various functionalities provided by the <code>urllib.robotparser</code> module.</p>\n<h3>1. Checking Robots.txt for Disallowed Paths</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from urllib.robotparser import RobotFileParser\n\ndef check_disallowed_paths(url):\n    # Create a RobotFileParser instance and set the URL of the robots.txt file\n    robot_file = RobotFileParser()\n    robot_file.set_url(url)\n\n    # Read the robots.txt file\n    robot_file.read()\n\n    # Define the URLs you want to check\n    urls_to_check = [\n        &quot;http://example.com/page1&quot;,\n        &quot;http://example.com/page2&quot;,\n        &quot;http://example.com/disallowed-page&quot;\n    ]\n\n    # Check which URLs are allowed or disallowed\n    for url in urls_to_check:\n        if robot_file.can_fetch('*', url):\n            print(f&quot;Allowed: {url}&quot;)\n        else:\n            print(f&quot;Disallowed: {url}&quot;)\n\n# Example usage\ncheck_disallowed_paths(&quot;http://example.com/robots.txt&quot;)\n</code></pre>\n\n<h3>2. Handling Different User Agents</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from urllib.robotparser import RobotFileParser\n\ndef check_user_agent(url, user_agent):\n    # Create a RobotFileParser instance and set the URL of the robots.txt file\n    robot_file = RobotFileParser()\n    robot_file.set_url(url)\n\n    # Read the robots.txt file\n    robot_file.read()\n\n    # Check if the specified user agent can access the page\n    if robot_file.can_fetch(user_agent, url):\n        print(f&quot;User-Agent: {user_agent} - Allowed to access {url}&quot;)\n    else:\n        print(f&quot;User-Agent: {user_agent} - Disallowed from accessing {url}&quot;)\n\n# Example usage\ncheck_user_agent(&quot;http://example.com/robots.txt&quot;, &quot;Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)&quot;)\n</code></pre>\n\n<h3>3. Monitoring Changes to Robots.txt</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from urllib.robotparser import RobotFileParser, parse_robot_file\nimport time\n\ndef monitor_robots_txt(url):\n    # Create a RobotFileParser instance and set the URL of the robots.txt file\n    robot_file = RobotFileParser()\n    robot_file.set_url(url)\n\n    # Read the initial robots.txt file\n    robot_file.read()\n\n    # Store the parsed rules in a dictionary for later comparison\n    initial_rules = parse_robot_file(robot_file.get_url())\n\n    try:\n        while True:\n            # Wait for 10 seconds before checking again\n            time.sleep(10)\n\n            # Read the updated robots.txt file\n            robot_file.read()\n\n            # Parse the updated rules\n            updated_rules = parse_robot_file(robot_file.get_url())\n\n            # Compare the initial and updated rules\n            if initial_rules != updated_rules:\n                print(&quot;robots.txt has been updated.&quot;)\n                initial_rules = updated_rules\n\n    except KeyboardInterrupt:\n        print(&quot;Monitoring stopped.&quot;)\n\n# Example usage\nmonitor_robots_txt(&quot;http://example.com/robots.txt&quot;)\n</code></pre>\n\n<h3>4. Parsing Robots.txt for Disallowed Paths with a List of URLs</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from urllib.robotparser import RobotFileParser\n\ndef check_disallowed_paths_for_list(urls):\n    # Create a RobotFileParser instance\n    robot_file = RobotFileParser()\n\n    # Define the URL of the robots.txt file\n    url = &quot;http://example.com/robots.txt&quot;\n    robot_file.set_url(url)\n\n    # Read the robots.txt file\n    robot_file.read()\n\n    # Check which URLs are allowed or disallowed\n    for url in urls:\n        if robot_file.can_fetch('*', url):\n            print(f&quot;Allowed: {url}&quot;)\n        else:\n            print(f&quot;Disallowed: {url}&quot;)\n\n# Example usage\nurls = [\n    &quot;http://example.com/page1&quot;,\n    &quot;http://example.com/page2&quot;,\n    &quot;http://example.com/disallowed-page&quot;\n]\ncheck_disallowed_paths_for_list(urls)\n</code></pre>\n\n<h3>5. Handling Custom Paths in Robots.txt</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from urllib.robotparser import RobotFileParser\n\ndef check_custom_path(url):\n    # Create a RobotFileParser instance and set the URL of the robots.txt file\n    robot_file = RobotFileParser()\n    robot_file.set_url(url)\n\n    # Read the robots.txt file\n    robot_file.read()\n\n    # Define the path you want to check\n    path_to_check = &quot;/page1&quot;\n\n    # Check if the specified path is allowed or disallowed\n    if robot_file.can_fetch('*', path_to_check):\n        print(f&quot;Path: {path_to_check} - Allowed&quot;)\n    else:\n        print(f&quot;Path: {path_to_check} - Disallowed&quot;)\n\n# Example usage\ncheck_custom_path(&quot;http://example.com/robots.txt&quot;)\n</code></pre>\n\n<p>These examples demonstrate how to use the <code>urllib.robotparser</code> module to parse and check <code>robots.txt</code> files for access control. Each example includes comments explaining key steps and is designed to be clear and self-contained, suitable for integration into larger applications or documentation.</p>"
        },
        {
            "filename": "webbrowser - Convenient web-browser controller.md",
            "content": "<h1>webbrowser - Convenient web-browser controller</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-opening-a-url\">1. Opening a URL</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#2-opening-a-url-using-a-specific-browser\">2. Opening a URL using a specific browser</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#3-opening-a-url-in-a-new-tab-of-an-existing-window\">3. Opening a URL in a new tab of an existing window</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#4-opening-a-url-in-a-new-window\">4. Opening a URL in a new window</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#5-searching-for-a-query-using-a-search-engine\">5. Searching for a query using a search engine</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n</ol>\n<p>The <code>webbrowser</code> module in Python is a convenient interface to allow you to control web browsers from within your applications. It provides a way to open URLs, search engines, and other web-based services without requiring users to manually interact with their web browsers. Below are comprehensive examples for each functionality provided by the <code>webbrowser</code> module:</p>\n<h3>1. Opening a URL</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import webbrowser\n\n# Open a specific URL in the default web browser\nurl = &quot;https://www.example.com&quot;\nwebbrowser.open(url)\n</code></pre>\n\n<h4>Explanation:</h4>\n<ul>\n<li>Import the <code>webbrowser</code> module.</li>\n<li>Use <code>webbrowser.open(url)</code> to open the specified URL in the default web browser.</li>\n</ul>\n<h3>2. Opening a URL using a specific browser</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import webbrowser\n\n# Open a specific URL using Google Chrome\nurl = &quot;https://www.example.com&quot;\nchrome_path = r&quot;C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe %s&quot;\n\nwebbrowser.get(chrome_path).open(url)\n</code></pre>\n\n<h4>Explanation:</h4>\n<ul>\n<li>Import the <code>webbrowser</code> module.</li>\n<li>Use <code>webbrowser.get(chrome_path)</code> to specify Google Chrome as the browser. The <code>%s</code> is a placeholder for the URL.</li>\n<li>Use <code>.open(url)</code> to open the specified URL using the configured browser.</li>\n</ul>\n<h3>3. Opening a URL in a new tab of an existing window</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import webbrowser\n\n# Open a specific URL in a new tab of the default web browser\nurl = &quot;https://www.example.com&quot;\nwebbrowser.open_new_tab(url)\n</code></pre>\n\n<h4>Explanation:</h4>\n<ul>\n<li>Import the <code>webbrowser</code> module.</li>\n<li>Use <code>webbrowser.open_new_tab(url)</code> to open the specified URL in a new tab.</li>\n</ul>\n<h3>4. Opening a URL in a new window</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import webbrowser\n\n# Open a specific URL in a new window of the default web browser\nurl = &quot;https://www.example.com&quot;\nwebbrowser.open_new(url)\n</code></pre>\n\n<h4>Explanation:</h4>\n<ul>\n<li>Import the <code>webbrowser</code> module.</li>\n<li>Use <code>webbrowser.open_new(url)</code> to open the specified URL in a new window.</li>\n</ul>\n<h3>5. Searching for a query using a search engine</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import webbrowser\n\n# Search for a query using Google's search engine\nquery = &quot;Python programming&quot;\nwebbrowser.get(&quot;http://www.google.com/search?q=&quot;).open(query)\n</code></pre>\n\n<h4>Explanation:</h4>\n<ul>\n<li>Import the <code>webbrowser</code> module.</li>\n<li>Use <code>webbrowser.get(\"http://www.google.com/search?q=\")</code> to specify Google as the search engine.</li>\n<li>Use <code>.open(query)</code> to open a new browser window with the query result.</li>\n</ul>\n<h3>6. Opening a URL in an external application</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import webbrowser\n\n# Open a specific URL using an external application (e.g., Notepad)\nurl = &quot;https://www.example.com&quot;\nwebbrowser.get(&quot;notepad.exe&quot;).open(url)\n</code></pre>\n\n<h4>Explanation:</h4>\n<ul>\n<li>Import the <code>webbrowser</code> module.</li>\n<li>Use <code>webbrowser.get(\"notepad.exe\")</code> to specify Notepad as the external application.</li>\n<li>Use <code>.open(url)</code> to open the specified URL in Notepad.</li>\n</ul>\n<h3>7. Getting all available web browsers</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import webbrowser\n\n# Get a list of all available web browsers\nbrowsers = webbrowser.browsers()\n\nfor browser in browsers:\n    print(f&quot;Name: {browser.name}, Executable: {browser.executable}&quot;)\n</code></pre>\n\n<h4>Explanation:</h4>\n<ul>\n<li>Import the <code>webbrowser</code> module.</li>\n<li>Use <code>webbrowser.browsers()</code> to retrieve a list of all available web browsers.</li>\n<li>Iterate over the list and print each browser's name and executable path.</li>\n</ul>\n<h3>8. Handling exceptions</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import webbrowser\n\n# Attempt to open a URL and handle exceptions if needed\ntry:\n    url = &quot;https://www.example.com&quot;\n    webbrowser.open(url)\nexcept Exception as e:\n    print(f&quot;An error occurred: {e}&quot;)\n</code></pre>\n\n<h4>Explanation:</h4>\n<ul>\n<li>Import the <code>webbrowser</code> module.</li>\n<li>Use a <code>try-except</code> block to handle any exceptions that might occur when opening the URL.</li>\n</ul>\n<p>These examples cover various functionalities provided by the <code>webbrowser</code> module, demonstrating how to open URLs, specify browsers, and handle different scenarios. You can use these examples as a starting point for your applications that need to interact with web browsers.</p>"
        },
        {
            "filename": "wsgiref - WSGI Utilities and Reference Implementation.md",
            "content": "<h1>wsgiref - WSGI Utilities and Reference Implementation</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-simple-wsgi-application\">1. Simple WSGI Application</a></li>\n<li><a href=\"#2-debugging-wsgi-applications\">2. Debugging WSGI Applications</a></li>\n<li><a href=\"#3-parsing-wsgi-environment\">3. Parsing WSGI Environment</a></li>\n<li><a href=\"#4-example-of-an-application-using-request-parsing\">4. Example of an Application using Request Parsing</a></li>\n</ol>\n<p>The <code>wsgiref</code> module in Python provides utilities and a reference implementation of the Web Server Gateway Interface (WSGI), which is a specification that defines how web servers can communicate with web applications. This module is particularly useful for developers who want to understand or implement WSGI-compliant frameworks.</p>\n<p>Here are comprehensive code examples for various functionalities provided by the <code>wsgiref</code> module:</p>\n<h3>1. Simple WSGI Application</h3>\n<pre class=\"codehilite\"><code class=\"language-python\"># Import necessary modules from wsgiref\nfrom wsgiref.simple_server import make_server, demo_app\n\ndef hello_world(environ, start_response):\n    # Define the response headers and status code\n    status = '200 OK'\n    headers = [('Content-Type', 'text/plain')]\n\n    # Start the response with the status and headers\n    start_response(status, headers)\n\n    # Return a simple message\n    return [b&quot;Hello, World!&quot;]\n\n# Set up a simple WSGI server to run the application\nhttpd = make_server('', 8000, hello_world)\nprint(&quot;Serving on port 8000...&quot;)\n\n# Serve requests indefinitely until manually stopped\nhttpd.serve_forever()\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- <strong>Importing Modules</strong>: The <code>wsgiref.simple_server</code> module provides tools for creating a simple WSGI server and an example application.\n- <strong>WSGI Application Function</strong>: The <code>hello_world</code> function defines the logic of the application. It takes two parameters: <code>environ</code>, which is a dictionary containing details about the request, and <code>start_response</code>, which is used to send back the response headers and status code.\n- <strong>Starting the Server</strong>: A simple server instance is created using <code>make_server</code>, specifying an empty string for the host and 8000 as the port. The application function <code>hello_world</code> is passed to this server.\n- <strong>Running the Server</strong>: The server starts serving requests indefinitely, displaying a message in the console.</p>\n<h3>2. Debugging WSGI Applications</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from wsgiref.util import setup_testing_defaults\nfrom wsgiref.simple_server import make_server\n\ndef debug_app(environ, start_response):\n    # Set up testing defaults to simulate an environment\n    setup_testing_defaults(environ)\n\n    # Define the response headers and status code\n    status = '200 OK'\n    headers = [('Content-Type', 'text/plain')]\n\n    # Start the response with the status and headers\n    start_response(status, headers)\n\n    # Return a simple message\n    return [b&quot;Debugging WSGI Application&quot;]\n\n# Set up a simple WSGI server to run the application\nhttpd = make_server('', 8001, debug_app)\nprint(&quot;Debugging server on port 8001...&quot;)\n\n# Serve requests indefinitely until manually stopped\nhttpd.serve_forever()\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- <strong>Setup Testing Defaults</strong>: This function sets up a testing environment for the WSGI application, which is useful for debugging and development purposes.\n- <strong>Debugging Application Logic</strong>: The <code>debug_app</code> function uses <code>setup_testing_defaults</code> to configure the request environment, ensuring that it behaves like an actual HTTP request.</p>\n<h3>3. Parsing WSGI Environment</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from wsgiref.util import setup_testing_defaults\n\ndef parse_env(environ):\n    # Set up testing defaults to simulate an environment\n    setup_testing_defaults(environ)\n\n    # Print the parsed environment variables and headers\n    for key, value in environ.items():\n        print(f&quot;{key}: {value}&quot;)\n\n# Create a WSGI environment dictionary\nenv = {}\n\n# Parse the environment\nparse_env(env)\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- <strong>Setup Testing Defaults</strong>: This function prepares the environment to simulate a web request.\n- <strong>Parsing Environment Variables and Headers</strong>: The <code>parse_env</code> function iterates over all key-value pairs in the <code>environ</code> dictionary and prints them. This is useful for understanding how the WSGI environment is structured.</p>\n<h3>4. Example of an Application using Request Parsing</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from wsgiref.simple_server import make_server, demo_app\n\ndef request_processing(environ, start_response):\n    # Set up testing defaults to simulate an environment\n    setup_testing_defaults(environ)\n\n    # Extract the query string and parse it\n    query_string = environ.get('QUERY_STRING')\n    params = dict(query_string.split('&amp;'))\n\n    # Define the response headers and status code\n    status = '200 OK'\n    headers = [('Content-Type', 'text/plain')]\n\n    # Start the response with the status and headers\n    start_response(status, headers)\n\n    # Process parameters and return a response\n    if params.get('param1') == 'value1':\n        return [b&quot;Parameter matched!&quot;]\n    else:\n        return [b&quot;Parameter not matched.&quot;]\n\n# Set up a simple WSGI server to run the application\nhttpd = make_server('', 8002, request_processing)\nprint(&quot;Request processing server on port 8002...&quot;)\n\n# Serve requests indefinitely until manually stopped\nhttpd.serve_forever()\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- <strong>Query String Parsing</strong>: The <code>request_processing</code> function extracts the query string from the environment and splits it into key-value pairs using <code>split('&amp;')</code>.\n- <strong>Processing Parameters</strong>: It checks if a specific parameter (<code>param1</code>) matches a given value (<code>value1</code>) and returns a response accordingly.</p>\n<p>These examples cover basic functionalities of the <code>wsgiref</code> module, demonstrating how to set up a simple WSGI server, handle requests, parse environment variables, and process query strings. These can be useful for understanding the structure and functionality of WSGI applications in Python.</p>"
        },
        {
            "filename": "xmlrpc - XMLRPC server and client modules.md",
            "content": "<h1>xmlrpc - XMLRPC server and client modules</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-creating-an-xml-rpc-server\">1. Creating an XML-RPC Server</a></li>\n<li><a href=\"#2-handling-xml-rpc-requests\">2. Handling XML-RPC Requests</a></li>\n<li><a href=\"#3-using-an-xml-rpc-client\">3. Using an XML-RPC Client</a></li>\n<li><a href=\"#4-customizing-xml-rpc-server-behavior\">4. Customizing XML-RPC Server Behavior</a></li>\n<li><a href=\"#5-using-jsonrpc-module-for-json-rpc-server-and-client\">5. Using <code>jsonrpc</code> Module for JSON-RPC Server and Client</a></li>\n<li><a href=\"#server-example-with-jsonrpc\">Server Example with <code>jsonrpc</code>:</a></li>\n<li><a href=\"#client-example-with-jsonrpc\">Client Example with <code>jsonrpc</code>:</a></li>\n</ol>\n<p>The <code>xmlrpc</code> module in Python is a part of the Standard Library and provides support for making XML-RPC requests and responses. Below are comprehensive code examples that demonstrate various functionalities within this module, including creating an XML-RPC server, handling XML-RPC requests, and using an XML-RPC client to communicate with an XML-RPC server.</p>\n<h3>1. Creating an XML-RPC Server</h3>\n<p>This example demonstrates how to create a basic XML-RPC server using the <code>SimpleXMLRPCServer</code> class from the <code>xmlrpc.server</code> module.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from xmlrpc.server import SimpleXMLRPCServer\n\ndef add(x, y):\n    &quot;&quot;&quot;Add two numbers.&quot;&quot;&quot;\n    return x + y\n\ndef subtract(x, y):\n    &quot;&quot;&quot;Subtract two numbers.&quot;&quot;&quot;\n    return x - y\n\ndef multiply(x, y):\n    &quot;&quot;&quot;Multiply two numbers.&quot;&quot;&quot;\n    return x * y\n\ndef divide(x, y):\n    &quot;&quot;&quot;Divide two numbers. Returns None if division by zero is attempted.&quot;&quot;&quot;\n    if y == 0:\n        raise Exception(&quot;Cannot divide by zero&quot;)\n    return x / y\n\n# Create an XML-RPC server instance on port 8000\nserver = SimpleXMLRPCServer((&quot;localhost&quot;, 8000))\n\n# Register functions to the server\nserver.register_function(add, &quot;add&quot;)\nserver.register_function(subtract, &quot;subtract&quot;)\nserver.register_function(multiply, &quot;multiply&quot;)\nserver.register_function(divide, &quot;divide&quot;)\n\n# Start the XML-RPC server loop\nprint(&quot;Starting server...&quot;)\nserver.serve_forever()\n</code></pre>\n\n<h3>2. Handling XML-RPC Requests</h3>\n<p>This example shows how to handle requests received by the XML-RPC server.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from xmlrpc.server import SimpleXMLRPCServer\n\ndef add(x, y):\n    &quot;&quot;&quot;Add two numbers.&quot;&quot;&quot;\n    return x + y\n\n# Create an instance of SimpleXMLRPCServer and register functions\nserver = SimpleXMLRPCServer((&quot;localhost&quot;, 8000))\nserver.register_function(add, &quot;add&quot;)\n\n# Define a custom exception handler to log errors\ndef handle_exception(exc, value, tb):\n    print(f&quot;Error: {exc}, {value}&quot;)\n\nserver.set_exception_handler(handle_exception)\n\n# Start the server\nprint(&quot;Starting server...&quot;)\nserver.serve_forever()\n</code></pre>\n\n<h3>3. Using an XML-RPC Client</h3>\n<p>This example demonstrates how to use a client to communicate with an XML-RPC server.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import xmlrpc.client\n\ndef add(x, y):\n    &quot;&quot;&quot;Add two numbers.&quot;&quot;&quot;\n    return x + y\n\n# Create an XML-RPC client and connect to the server\nclient = xmlrpc.client.ServerProxy(&quot;http://localhost:8000&quot;)\n\n# Call a method on the server\nresult = client.add(5, 3)\nprint(f&quot;The result of add is {result}&quot;)\n\n# Handle exceptions for RPC calls\ntry:\n    result = client.divide(10, 0)\nexcept xmlrpc.client.Fault as fault:\n    print(f&quot;Error from server: {fault.faultString}&quot;)\n</code></pre>\n\n<h3>4. Customizing XML-RPC Server Behavior</h3>\n<p>This example shows how to customize the behavior of an XML-RPC server by adding error handling and logging.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from xmlrpc.server import SimpleXMLRPCServer\n\ndef add(x, y):\n    &quot;&quot;&quot;Add two numbers.&quot;&quot;&quot;\n    return x + y\n\n# Create an XML-RPC server instance\nserver = SimpleXMLRPCServer((&quot;localhost&quot;, 8000))\n\n# Register functions to the server\nserver.register_function(add, &quot;add&quot;)\n\n# Define custom exception handling to log errors\ndef handle_exception(exc, value, tb):\n    print(f&quot;Error: {exc}, {value}&quot;)\n\nserver.set_exception_handler(handle_exception)\n\n# Start the server and handle exceptions\ntry:\n    server.serve_forever()\nexcept KeyboardInterrupt:\n    print(&quot;Server shutting down...&quot;)\n</code></pre>\n\n<h3>5. Using <code>jsonrpc</code> Module for JSON-RPC Server and Client</h3>\n<p>The <code>jsonrpc</code> module provides a more modern, feature-rich alternative to XML-RPC.</p>\n<h4>Server Example with <code>jsonrpc</code>:</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">from jsonrpcserver import methods, serve\n\n@methods.add\ndef add(x, y):\n    &quot;&quot;&quot;Add two numbers.&quot;&quot;&quot;\n    return x + y\n\n@methods.add\ndef subtract(x, y):\n    &quot;&quot;&quot;Subtract two numbers.&quot;&quot;&quot;\n    return x - y\n\nif __name__ == &quot;__main__&quot;:\n    serve(add)\n</code></pre>\n\n<h4>Client Example with <code>jsonrpc</code>:</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import requests\n\n# Define the URL of the JSON-RPC server\nurl = &quot;http://localhost:8001&quot;\n\n# Function to make a JSON-RPC request\ndef make_rpc_request(method, params):\n    response = requests.post(url, json={&quot;method&quot;: method, &quot;params&quot;: params, &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;id&quot;: 1})\n    return response.json()\n\n# Call the 'add' method on the server\nresult = make_rpc_request(&quot;add&quot;, [5, 3])\nprint(f&quot;The result of add is {result}&quot;)\n</code></pre>\n\n<p>These examples cover basic and advanced functionalities of the <code>xmlrpc</code> module. Each example includes comments to explain key steps and behaviors. You can adapt these examples to suit your specific needs or integrate them into larger applications.</p>"
        },
        {
            "filename": "xmlrpc.client - XMLRPC client access.md",
            "content": "<h1>xmlrpc.client - XMLRPC client access</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-simple-xml-rpc-client\">Example 1: Simple XML-RPC Client</a></li>\n<li><a href=\"#example-2-working-with-methods-with-arguments\">Example 2: Working with Methods with Arguments</a></li>\n<li><a href=\"#example-3-using-xml-rpc-with-https\">Example 3: Using XML-RPC with HTTPS</a></li>\n<li><a href=\"#example-4-handling-server-responses\">Example 4: Handling Server Responses</a></li>\n<li><a href=\"#example-5-using-xml-rpc-client-with-authentication\">Example 5: Using XML-RPC Client with Authentication</a></li>\n<li><a href=\"#example-6-using-custom-headers\">Example 6: Using Custom Headers</a></li>\n<li><a href=\"#example-7-using-callbacks\">Example 7: Using Callbacks</a></li>\n<li><a href=\"#example-8-using-binary-data\">Example 8: Using Binary Data</a></li>\n<li><a href=\"#example-9-using-threads\">Example 9: Using Threads</a></li>\n<li><a href=\"#example-10-handling-large-data\">Example 10: Handling Large Data</a></li>\n</ol>\n<p>The <code>xmlrpc.client</code> module in Python provides a convenient way to interact with XML-RPC servers. Below are comprehensive examples demonstrating various functionalities of this module:</p>\n<h3>Example 1: Simple XML-RPC Client</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import xmlrpc.client\n\n# Create an XML-RPC client object by specifying the server URL\nserver = xmlrpc.client.ServerProxy(&quot;http://example.com/RPC2&quot;)\n\n# Make a method call to the server\nresult = server.add(5, 3)\nprint(f&quot;Result of add: {result}&quot;)\n\n# Accessing list methods\nnumbers = [1, 2, 3]\nsum_result = server.listSum(numbers)\nprint(f&quot;Sum of numbers: {sum_result}&quot;)\n\n# Handling exceptions\ntry:\n    result = server.subtract(10, &quot;a&quot;)\nexcept xmlrpc.client.Fault as fault:\n    print(f&quot;Caught XML-RPC Fault: {fault.faultString}&quot;)\n</code></pre>\n\n<h3>Example 2: Working with Methods with Arguments</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import xmlrpc.client\n\n# Create a client object\nserver = xmlrpc.client.ServerProxy(&quot;http://example.com/RPC2&quot;)\n\n# Call a method with arguments\nresult = server.pow(2, 3)\nprint(f&quot;Result of pow: {result}&quot;)\n\n# Method that takes a list as an argument\nlist_result = server.multiply([10, 20, 30])\nprint(f&quot;Product of list: {list_result}&quot;)\n</code></pre>\n\n<h3>Example 3: Using XML-RPC with HTTPS</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import xmlrpc.client\n\n# Create a client object using HTTPS\nserver = xmlrpc.client.ServerProxy(&quot;https://example.com/RPC2&quot;)\n\n# Call a method over HTTPS\nresult = server.add(10, 20)\nprint(f&quot;Result of add over HTTPS: {result}&quot;)\n</code></pre>\n\n<h3>Example 4: Handling Server Responses</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import xmlrpc.client\n\n# Create a client object\nserver = xmlrpc.client.ServerProxy(&quot;http://example.com/RPC2&quot;)\n\n# Call a method that returns multiple values\nresult = server.echo(1, &quot;hello&quot;, [3.14])\nprint(f&quot;Result of echo: {result}&quot;)\n</code></pre>\n\n<h3>Example 5: Using XML-RPC Client with Authentication</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import xmlrpc.client\n\n# Create a client object with authentication\nserver = xmlrpc.client.ServerProxy(&quot;http://example.com/RPC2&quot;)\ncredentials = (&quot;username&quot;, &quot;password&quot;)\n\n# Call a method that requires credentials\nresult = server.authenticate(credentials, &quot;some_method&quot;)\nprint(f&quot;Result of authenticate: {result}&quot;)\n</code></pre>\n\n<h3>Example 6: Using Custom Headers</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import xmlrpc.client\n\n# Create a client object\nserver = xmlrpc.client.ServerProxy(&quot;http://example.com/RPC2&quot;)\n\n# Set custom headers for the request\nheaders = {&quot;X-Custom-Header&quot;: &quot;Value&quot;}\nclient = server._proxy.__class__.ServerProxy(server.url, **headers)\n\n# Call a method with custom headers\nresult = client.echo(1, &quot;hello&quot;, [3.14])\nprint(f&quot;Result of echo with custom headers: {result}&quot;)\n</code></pre>\n\n<h3>Example 7: Using Callbacks</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import xmlrpc.client\n\ndef callback(result):\n    print(f&quot;Callback received result: {result}&quot;)\n\n# Create a client object\nserver = xmlrpc.client.ServerProxy(&quot;http://example.com/RPC2&quot;)\n\n# Use the call_with_callback method with a callback function\nserver.add_with_callback(5, 3, callback)\n</code></pre>\n\n<h3>Example 8: Using Binary Data</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import xmlrpc.client\n\n# Create a client object\nserver = xmlrpc.client.ServerProxy(&quot;http://example.com/RPC2&quot;)\n\n# Call a method that accepts binary data\nbinary_data = b&quot;This is a binary string.&quot;\nresult = server.binary_echo(binary_data)\nprint(f&quot;Result of binary echo: {result}&quot;)\n</code></pre>\n\n<h3>Example 9: Using Threads</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import xmlrpc.client\nfrom threading import Thread\n\ndef call_method():\n    result = client.echo(1, &quot;hello&quot;, [3.14])\n    print(f&quot;Thread result: {result}&quot;)\n\n# Create a client object\nserver = xmlrpc.client.ServerProxy(&quot;http://example.com/RPC2&quot;)\nclient = server._proxy.__class__.ServerProxy(server.url)\n\n# Start multiple threads to call the same method concurrently\nthreads = []\nfor _ in range(5):\n    thread = Thread(target=call_method)\n    threads.append(thread)\n    thread.start()\n\n# Wait for all threads to complete\nfor thread in threads:\n    thread.join()\n</code></pre>\n\n<h3>Example 10: Handling Large Data</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import xmlrpc.client\n\n# Create a client object\nserver = xmlrpc.client.ServerProxy(&quot;http://example.com/RPC2&quot;)\n\n# Call a method that accepts large data\nlarge_data = b&quot;x&quot; * 1024 * 1024  # 1MB of data\nresult = server.large_echo(large_data)\nprint(f&quot;Result of large echo: {result}&quot;)\n</code></pre>\n\n<p>These examples cover various scenarios and functionalities provided by the <code>xmlrpc.client</code> module, including basic method calls, handling exceptions, using HTTPS, working with multiple arguments, and more.</p>"
        },
        {
            "filename": "xmlrpc.server - Basic XMLRPC servers.md",
            "content": "<h1>xmlrpc.server - Basic XMLRPC servers</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-creating-an-http-basic-server\">Example 1: Creating an HTTP Basic Server</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#example-2-creating-a-simplexmlrpc-server\">Example 2: Creating a SimpleXMLRPC Server</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n</ol>\n<p>The <code>xmlrpc.server</code> module is part of Python's standard library, providing a simple way to create basic XML-RPC servers. Below are comprehensive examples demonstrating various functionalities within this module, including creating both HTTP and SimpleXMLRPC servers.</p>\n<h3>Example 1: Creating an HTTP Basic Server</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from http.server import BaseHTTPRequestHandler, HTTPServer\nimport xmlrpc.server\n\n# Define a custom request handler class\nclass RequestHandler(xmlrpc.server.SimpleHTTPRequestHandler):\n    def do_POST(self):\n        # Parse the request and extract XML-RPC data\n        content_length = int(self.headers['Content-Length'])\n        payload = self.rfile.read(content_length)\n\n        # Process the XML-RPC call\n        response = handle_xmlrpc_call(payload.decode())\n\n        # Send the response back to the client\n        self.send_response(200)\n        self.send_header('Content-type', 'text/xml')\n        self.end_headers()\n        self.wfile.write(response.encode())\n\ndef handle_xmlrpc_call(method):\n    # This is a placeholder function where you can implement your XML-RPC logic\n    if method == &quot;add&quot;:\n        return xmlrpc.server.dumps([20, 30], methodname=&quot;result&quot;)\n    else:\n        return xmlrpc.server.dumps(&quot;Unknown method&quot;, faultcode=1, faultstring=&quot;Method not found&quot;)\n\n# Set up the server and port\nserver_address = ('', 8000)\nhttpd = HTTPServer(server_address, RequestHandler)\n\n# Start the server\nprint(&quot;Starting XML-RPC Server on port 8000&quot;)\nhttpd.serve_forever()\n</code></pre>\n\n<h3>Explanation:</h3>\n<ul>\n<li><strong>HTTPServer</strong>: This is used to create an HTTP server. The <code>RequestHandler</code> class is a subclass of <code>SimpleHTTPRequestHandler</code> from <code>xmlrpc.server</code>, which handles XML-RPC requests.</li>\n<li><strong>do_POST Method</strong>: This method processes POST requests, extracts the payload, and sends a response back to the client. It uses <code>xmlrpc.server.dumps</code> to serialize the result of an XML-RPC call.</li>\n<li><strong>handle_xmlrpc_call Function</strong>: This function contains the logic for processing XML-RPC methods. In this example, it handles an <code>add</code> method that returns the sum of two numbers.</li>\n</ul>\n<h3>Example 2: Creating a SimpleXMLRPC Server</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import xmlrpc.server\n\n# Define a simple class with XML-RPC methods\nclass Math:\n    def add(self, x, y):\n        return x + y\n\n    def subtract(self, x, y):\n        return x - y\n\n# Create an instance of the handler class and specify the port\nserver = xmlrpc.server.SimpleXMLRPCServer((&quot;localhost&quot;, 8001))\n\n# Register methods with the server\nserver.register_instance(Math())\n\n# Print a message indicating that the server is running\nprint(&quot;Starting XML-RPC Server on port 8001&quot;)\n\n# Start the server\nserver.serve_forever()\n</code></pre>\n\n<h3>Explanation:</h3>\n<ul>\n<li><strong>Math Class</strong>: This class contains two XML-RPC methods: <code>add</code> and <code>subtract</code>.</li>\n<li><strong>SimpleXMLRPCServer</strong>: This creates a simple XML-RPC server that listens on localhost at port 8001.</li>\n<li><strong>register_instance Method</strong>: This method registers the instance of the <code>Math</code> class with the server, making its methods available via XML-RPC.</li>\n<li><strong>serve_forever Method</strong>: This starts the server and keeps it running indefinitely, accepting incoming connections.</li>\n</ul>\n<p>These examples provide a basic framework for creating XML-RPC servers using Python's standard library. You can expand upon these examples by adding more methods, handling different types of requests, or integrating with other parts of your application.</p>"
        }
    ],
    "Microsoft Windows Specific Services": [
        {
            "filename": "msvcrt - Useful routines from the MS VC++ runtime.md",
            "content": "<h1>msvcrt - Useful routines from the MS VC++ runtime</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#explanation\">Explanation:</a></li>\n</ol>\n<p>The <code>msvcrt</code> module is a part of the Python Standard Library that provides access to some low-level functions similar to those found in Microsoft's Visual C++ runtime. This module is primarily used for applications that need to interact directly with the operating system, particularly when dealing with console input and output.</p>\n<p>Below are comprehensive code examples for each function available in the <code>msvcrt</code> module:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import msvcrt\n\n# Function: getch()\n# Description: Waits for a single character from the keyboard.\n# Returns: A byte string containing the pressed key.\n\ndef example_getch():\n    &quot;&quot;&quot;\n    Example of using getch() to read a single character from the console.\n    &quot;&quot;&quot;\n    print(&quot;Press any key followed by Enter:&quot;)\n    char = msvcrt.getch()\n    print(f&quot;You pressed: {char}&quot;)\n\nexample_getch()\n\n# Function: kbhit()\n# Description: Checks if a keyboard input has been received without blocking.\n# Returns: True if a key is available, False otherwise.\n\ndef example_kbhit():\n    &quot;&quot;&quot;\n    Example of using kbhit() to check for keyboard input before reading it.\n    &quot;&quot;&quot;\n    print(&quot;Press Enter to continue...&quot;)\n    while not msvcrt.kbhit():\n        pass\n    msvcrt.getch()\n    print(&quot;Key detected!&quot;)\n\nexample_kbhit()\n\n# Function: putch()\n# Description: Sends a single character to the console output buffer.\n\ndef example_putch():\n    &quot;&quot;&quot;\n    Example of using putch() to write a single character to the console.\n    &quot;&quot;&quot;\n    print(&quot;Example of using putch() to print a character.&quot;)\n    msvcrt.putch(b'A')\n    print('A has been printed to the console.')\n\nexample_putch()\n\n# Function: openfilecon()\n# Description: Opens a file connection to the console device.\n\ndef example_openfilecon():\n    &quot;&quot;&quot;\n    Example of using openfilecon() to open a file handle for the console.\n    &quot;&quot;&quot;\n    import os\n    print(&quot;Opening a file connection to the console...&quot;)\n    fh = msvcrt.openfilecon('CONOUT$')\n    print(f&quot;File handle: {fh}&quot;)\n\nexample_openfilecon()\n\n# Function: lseek()\n# Description: Moves the current position in a file.\n\ndef example_lseek():\n    &quot;&quot;&quot;\n    Example of using lseek() to move the cursor position in the console.\n    &quot;&quot;&quot;\n    import os\n    print(&quot;Moving the cursor position...&quot;)\n    fh = msvcrt.openfilecon('CONOUT$')\n    offset, whence = 5, 0  # Move by 5 bytes from the start of the file\n    new_position = os.lseek(fh.fileno(), offset, whence)\n    print(f&quot;Cursor position moved to: {new_position}&quot;)\n\nexample_lseek()\n\n# Function: getconioerror()\n# Description: Retrieves the last error code associated with console input.\n\ndef example_getconioerror():\n    &quot;&quot;&quot;\n    Example of using getconioerror() to retrieve and display the last error code.\n    &quot;&quot;&quot;\n    print(&quot;Getting the last error code...&quot;)\n    err_code = msvcrt.getconioerror()\n    print(f&quot;Last error code: {err_code}&quot;)\n\nexample_getconioerror()\n\n# Function: setmode()\n# Description: Sets the mode of a file descriptor to binary or text.\n\ndef example_setmode():\n    &quot;&quot;&quot;\n    Example of using setmode() to change the mode of the console file handle.\n    &quot;&quot;&quot;\n    import os\n    print(&quot;Changing the mode of the console...&quot;)\n    fh = msvcrt.openfilecon('CONOUT$')\n    # Set the mode to text (default)\n    os.setmode(fh.fileno(), os.O_TEXT)\n    print(f&quot;Mode set to: {os.getmode(fh.fileno())}&quot;)\n\nexample_setmode()\n\n# Function: ctrlchandler()\n# Description: Sets a handler for Ctrl+C input.\n\ndef example_ctrlchandler(handler):\n    &quot;&quot;&quot;\n    Example of using ctrlchandler() to set a custom control C handler.\n    &quot;&quot;&quot;\n    def my_handler(signum, frame):\n        print(&quot;Ctrl+C has been detected!&quot;)\n        return True\n\n    original_handler = msvcrt.ctrlchandler(my_handler)\n    try:\n        while True:\n            pass\n    finally:\n        # Restore the original handler\n        msvcrt.ctrlchandler(original_handler)\n\nexample_ctrlchandler(msvcrt.CTRL_C_EVENT)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ol>\n<li>\n<p><strong><code>getch()</code></strong>: This function waits for a single character from the keyboard and returns it as a byte string.</p>\n</li>\n<li>\n<p><strong><code>kbhit()</code></strong>: Checks if there is any input waiting to be read from the console without blocking.</p>\n</li>\n<li>\n<p><strong><code>putch()</code></strong>: Sends a single character to the console output buffer, which is useful for quick console updates.</p>\n</li>\n<li>\n<p><strong><code>openfilecon()</code></strong>: Opens a file connection to the console device using <code>os.open()</code> and returns a file handle.</p>\n</li>\n<li>\n<p><strong><code>lseek()</code></strong>: Moves the current position in the console by adjusting the cursor position using <code>os.lseek()</code>.</p>\n</li>\n<li>\n<p><strong><code>getconioerror()</code></strong>: Retrieves and prints the last error code associated with console input, which can be useful for debugging issues related to reading from the console.</p>\n</li>\n<li>\n<p><strong><code>setmode()</code></strong>: Changes the mode of the console file handle to either binary or text using <code>os.setmode()</code>, which is particularly important for handling newline characters in text mode.</p>\n</li>\n<li>\n<p><strong><code>ctrlchandler()</code></strong>: Sets a handler function for Ctrl+C input, allowing you to define custom behavior when Ctrl+C is detected.</p>\n</li>\n</ol>\n<p>These examples provide a comprehensive overview of how to use each function in the <code>msvcrt</code> module, covering common console I/O operations and error handling.</p>"
        },
        {
            "filename": "winreg - Windows registry access.md",
            "content": "<h1>winreg - Windows registry access</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-create-a-new-key-in-the-current-users-local-machine\">Example 1: Create a New Key in the Current User's Local Machine</a></li>\n<li><a href=\"#example-2-read-a-value-from-a-key\">Example 2: Read a Value from a Key</a></li>\n<li><a href=\"#example-3-delete-a-value-from-a-key\">Example 3: Delete a Value from a Key</a></li>\n<li><a href=\"#example-4-modify-an-existing-value-in-a-key\">Example 4: Modify an Existing Value in a Key</a></li>\n<li><a href=\"#example-5-create-a-new-subkey-and-set-multiple-values\">Example 5: Create a New Subkey and Set Multiple Values</a></li>\n<li><a href=\"#example-6-read-values-from-a-subkey\">Example 6: Read Values from a Subkey</a></li>\n<li><a href=\"#example-7-delete-a-subkey-and-all-its-values\">Example 7: Delete a Subkey and All Its Values</a></li>\n<li><a href=\"#example-8-enumerate-all-subkeys\">Example 8: Enumerate All Subkeys</a></li>\n</ol>\n<p>The <code>winreg</code> module is part of the Python Standard Library and provides a convenient way to interact with the Windows Registry. This module allows you to read, write, modify, and delete registry keys and values. Below are some comprehensive code examples for various functionalities of the <code>winreg</code> module:</p>\n<h3>Example 1: Create a New Key in the Current User's Local Machine</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import winreg\n\n# Define the path to the new key\nkey_path = r&quot;SOFTWARE\\Example\\MyKey&quot;\n\n# Open or create the key with write access\nkey = winreg.CreateKey(winreg.HKEY_LOCAL_MACHINE, key_path)\n\n# Set a value in the newly created key\nwinreg.SetValueEx(key, &quot;ValueName&quot;, 0, winreg.REG_SZ, &quot;Hello World&quot;)\n\n# Close the registry key\nwinreg.CloseKey(key)\n</code></pre>\n\n<h3>Example 2: Read a Value from a Key</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import winreg\n\n# Define the path to the key and the value name\nkey_path = r&quot;SOFTWARE\\Example\\MyKey&quot;\nvalue_name = &quot;ValueName&quot;\n\ntry:\n    # Open the key with read access\n    key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, key_path)\n\n    # Retrieve a value from the key\n    value_type, value_data = winreg.QueryValueEx(key, value_name)\n\n    print(f&quot;Value Type: {value_type}&quot;)\n    print(f&quot;Value Data: {value_data}&quot;)\n\n    # Close the registry key\n    winreg.CloseKey(key)\nexcept FileNotFoundError:\n    print(&quot;The specified key or value does not exist.&quot;)\n</code></pre>\n\n<h3>Example 3: Delete a Value from a Key</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import winreg\n\n# Define the path to the key and the value name\nkey_path = r&quot;SOFTWARE\\Example\\MyKey&quot;\nvalue_name = &quot;ValueName&quot;\n\ntry:\n    # Open the key with write access\n    key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, key_path, 0, winreg.KEY_SET_VALUE)\n\n    # Delete a value from the key\n    winreg.DeleteValue(key, value_name)\n\n    print(&quot;Value deleted successfully.&quot;)\n\n    # Close the registry key\n    winreg.CloseKey(key)\nexcept FileNotFoundError:\n    print(&quot;The specified key or value does not exist.&quot;)\n</code></pre>\n\n<h3>Example 4: Modify an Existing Value in a Key</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import winreg\n\n# Define the path to the key and the value name\nkey_path = r&quot;SOFTWARE\\Example\\MyKey&quot;\nvalue_name = &quot;ValueName&quot;\n\ntry:\n    # Open the key with write access\n    key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, key_path, 0, winreg.KEY_SET_VALUE)\n\n    # Modify an existing value in the key\n    new_value_data = &quot;Updated Value&quot;\n    winreg.SetValueEx(key, value_name, 0, winreg.REG_SZ, new_value_data)\n\n    print(&quot;Value updated successfully.&quot;)\n\n    # Close the registry key\n    winreg.CloseKey(key)\nexcept FileNotFoundError:\n    print(&quot;The specified key or value does not exist.&quot;)\n</code></pre>\n\n<h3>Example 5: Create a New Subkey and Set Multiple Values</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import winreg\n\n# Define the path to the root key where the subkey will be created\nroot_key = winreg.HKEY_LOCAL_MACHINE\n\n# Define the full path for the new subkey and its values\nsubkey_path = r&quot;SOFTWARE\\Example\\MySubKey&quot;\nvalues_to_set = {\n    &quot;StringValue&quot;: &quot;Hello, Subkey!&quot;,\n    &quot;IntegerValue&quot;: 123,\n    &quot;BinaryValue&quot;: b&quot;\\x01\\x02\\x03&quot;\n}\n\n# Open or create the subkey with write access\nsubkey = winreg.CreateKey(root_key, subkey_path)\n\ntry:\n    # Set multiple values in the newly created subkey\n    for value_name, value_data in values_to_set.items():\n        if isinstance(value_data, str):\n            reg_type = winreg.REG_SZ\n        elif isinstance(value_data, int):\n            reg_type = winreg.REG_DWORD\n        elif isinstance(value_data, bytes):\n            reg_type = winreg.REG_BINARY\n\n        winreg.SetValueEx(subkey, value_name, 0, reg_type, value_data)\n\n    print(&quot;Values set successfully.&quot;)\nfinally:\n    # Close the registry subkey\n    winreg.CloseKey(subkey)\n</code></pre>\n\n<h3>Example 6: Read Values from a Subkey</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import winreg\n\n# Define the full path to the subkey\nsubkey_path = r&quot;SOFTWARE\\Example\\MySubKey&quot;\n\ntry:\n    # Open the subkey with read access\n    subkey = winreg.OpenKey(root_key, subkey_path)\n\n    # Retrieve all values from the subkey\n    for value_name in winreg.QueryValueNames(subkey):\n        reg_type, value_data = winreg.QueryValueEx(subkey, value_name)\n\n        print(f&quot;Value Name: {value_name}&quot;)\n        print(f&quot;Value Type: {reg_type}&quot;)\n        if reg_type == winreg.REG_SZ:\n            print(f&quot;Value Data: '{value_data}'&quot;)\n        elif reg_type == winreg.REG_DWORD:\n            print(f&quot;Value Data: {value_data} (Decimal)&quot;)\n        elif reg_type == winreg.REG_BINARY:\n            print(f&quot;Value Data: {value_data.hex()}&quot;)\n\n    # Close the registry subkey\n    winreg.CloseKey(subkey)\nexcept FileNotFoundError:\n    print(&quot;The specified key does not exist.&quot;)\n</code></pre>\n\n<h3>Example 7: Delete a Subkey and All Its Values</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import winreg\n\n# Define the full path to the subkey\nsubkey_path = r&quot;SOFTWARE\\Example\\MySubKey&quot;\n\ntry:\n    # Open the subkey with write access\n    subkey = winreg.OpenKey(root_key, subkey_path, 0, winreg.KEY_ALL_ACCESS)\n\n    # Delete all values in the subkey first\n    value_names = winreg.QueryValueNames(subkey)\n    for value_name in value_names:\n        winreg.DeleteValue(subkey, value_name)\n\n    # Delete the subkey\n    winreg.DeleteKey(root_key, subkey_path)\n\n    print(&quot;Subkey and all its values deleted successfully.&quot;)\nfinally:\n    # Close the registry key (not strictly necessary here but good practice)\n    if subkey:\n        winreg.CloseKey(subkey)\n</code></pre>\n\n<h3>Example 8: Enumerate All Subkeys</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import winreg\n\n# Define the path to the root key\nroot_key = winreg.HKEY_LOCAL_MACHINE\n\ntry:\n    # Open the root key with read access\n    key = winreg.OpenKey(root_key, &quot;&quot;)\n\n    # Enumerate all subkeys\n    for subkey_name in winreg.EnumKey(key):\n        print(subkey_name)\n\n    # Close the registry key\n    winreg.CloseKey(key)\nexcept FileNotFoundError:\n    print(&quot;The specified root key does not exist.&quot;)\n</code></pre>\n\n<p>These examples demonstrate various operations you can perform with the <code>winreg</code> module, including creating and deleting keys, setting and reading values, modifying existing values, handling different value types (string, integer, binary), and enumerating subkeys. Always ensure that you have administrative privileges when making changes to the Windows Registry to avoid errors or system instability.</p>"
        },
        {
            "filename": "winsound - Sound-playing interface for Windows.md",
            "content": "<h1>winsound - Sound-playing interface for Windows</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-play-a-simple-sound-file\">Example 1: Play a Simple Sound File</a></li>\n<li><a href=\"#example-2-play-a-sound-using-a-wav-file\">Example 2: Play a Sound Using a WAV File</a></li>\n<li><a href=\"#example-3-stop-a-playing-sound\">Example 3: Stop a Playing Sound</a></li>\n<li><a href=\"#example-4-play-multiple-sounds-simultaneously\">Example 4: Play Multiple Sounds Simultaneously</a></li>\n<li><a href=\"#example-5-handle-errors-gracefully\">Example 5: Handle Errors Gracefully</a></li>\n<li><a href=\"#explanation-of-each-example\">Explanation of Each Example</a></li>\n</ol>\n<p>The <code>winsound</code> module is part of the Windows Sound API (WinMM), which provides an interface to play various types of audio files on Windows systems. It's not a standard library module, but rather a part of the Windows SDK and can be accessed via Python through the <code>ctypes</code> library.</p>\n<p>Below are comprehensive examples demonstrating how to use the <code>winsound</code> module to play sounds in Python. These examples will cover basic usage, sound playback control, and error handling.</p>\n<h3>Example 1: Play a Simple Sound File</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import winsound\n\ndef play_sound(file_path):\n    # Load the sound from the file path\n    snd = winsound.mixer.Sound(file_path)\n\n    # Check if the sound was loaded successfully\n    if not snd:\n        print(f&quot;Error loading sound: {file_path}&quot;)\n        return\n\n    # Set the volume of the sound (0.0 to 1.0)\n    snd.set_volume(0.5)\n\n    # Play the sound\n    snd.play()\n\n    # Wait for the sound to finish playing\n    while winsound.mixer.get_busy():\n        pass\n\n# Example usage\nplay_sound(&quot;path_to_your_sound_file.wav&quot;)\n</code></pre>\n\n<h3>Example 2: Play a Sound Using a WAV File</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import winsound\n\ndef play_wav(file_path):\n    # Load the WAV file using the mixer.Sound class\n    snd = winsound.mixer.Sound(file_path)\n\n    # Check if the sound was loaded successfully\n    if not snd:\n        print(f&quot;Error loading sound: {file_path}&quot;)\n        return\n\n    # Set the volume of the sound (0.0 to 1.0)\n    snd.set_volume(0.5)\n\n    # Play the sound\n    snd.play()\n\n    # Wait for the sound to finish playing\n    while winsound.mixer.get_busy():\n        pass\n\n# Example usage\nplay_wav(&quot;path_to_your_sound_file.wav&quot;)\n</code></pre>\n\n<h3>Example 3: Stop a Playing Sound</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import winsound\n\ndef stop_sound(file_path):\n    # Load the sound from the file path\n    snd = winsound.mixer.Sound(file_path)\n\n    # Check if the sound was loaded successfully\n    if not snd:\n        print(f&quot;Error loading sound: {file_path}&quot;)\n        return\n\n    # Stop the playing sound\n    snd.stop()\n\n    # Play the sound again to ensure it's in a stopped state\n    snd.play()\n\n    # Wait for the sound to finish playing after stop\n    while winsound.mixer.get_busy():\n        pass\n\n# Example usage\nstop_sound(&quot;path_to_your_sound_file.wav&quot;)\n</code></pre>\n\n<h3>Example 4: Play Multiple Sounds Simultaneously</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import winsound\nfrom threading import Thread\n\ndef play_sound(file_path):\n    # Load the sound from the file path\n    snd = winsound.mixer.Sound(file_path)\n\n    # Check if the sound was loaded successfully\n    if not snd:\n        print(f&quot;Error loading sound: {file_path}&quot;)\n        return\n\n    # Set the volume of the sound (0.0 to 1.0)\n    snd.set_volume(0.5)\n\n    # Play the sound in a separate thread\n    Thread(target=snd.play).start()\n\n# Example usage with multiple sounds\nplay_sound(&quot;path_to_your_first_sound_file.wav&quot;)\nplay_sound(&quot;path_to_your_second_sound_file.wav&quot;)\n</code></pre>\n\n<h3>Example 5: Handle Errors Gracefully</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import winsound\n\ndef play_safe(file_path):\n    try:\n        # Load the sound from the file path\n        snd = winsound.mixer.Sound(file_path)\n\n        # Check if the sound was loaded successfully\n        if not snd:\n            raise ValueError(f&quot;Error loading sound: {file_path}&quot;)\n\n        # Set the volume of the sound (0.0 to 1.0)\n        snd.set_volume(0.5)\n\n        # Play the sound\n        snd.play()\n\n        # Wait for the sound to finish playing\n        while winsound.mixer.get_busy():\n            pass\n    except Exception as e:\n        print(f&quot;An error occurred: {e}&quot;)\n\n# Example usage\nplay_safe(&quot;path_to_your_sound_file.wav&quot;)\n</code></pre>\n\n<h3>Explanation of Each Example</h3>\n<ul>\n<li>\n<p><strong>Loading a Sound</strong>: The <code>winsound.mixer.Sound</code> class is used to load audio files. The <code>file_path</code> parameter specifies the location of the sound file.</p>\n</li>\n<li>\n<p><strong>Volume Control</strong>: The <code>set_volume</code> method allows you to adjust the volume of the sound, ranging from 0.0 (silent) to 1.0 (full volume).</p>\n</li>\n<li>\n<p><strong>Playing a Sound</strong>: The <code>play</code> method starts playing the sound. If you want to play multiple sounds simultaneously, you can use threads.</p>\n</li>\n<li>\n<p><strong>Stopping a Sound</strong>: The <code>stop</code> method pauses the currently playing sound and sets it in a stopped state.</p>\n</li>\n<li>\n<p><strong>Error Handling</strong>: Basic error handling is implemented using try-except blocks to catch and print any exceptions that occur during sound loading or playback.</p>\n</li>\n</ul>\n<p>These examples provide a basic framework for using the <code>winsound</code> module to play sounds on Windows systems. Depending on your specific needs, you might want to explore additional functionalities provided by the <code>mixer</code> class in the <code>winsound</code> module, such as looping sounds or handling multiple channels.</p>"
        }
    ],
    "Miscellaneous Services": [
        {
            "filename": "formatter - Generic output formatting.md",
            "content": "<h1>formatter - Generic output formatting</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#explanation\">Explanation:</a></li>\n</ol>\n<p>The <code>formatter</code> module in Python is not a part of the standard library itself, but rather a part of the <code>locale</code> module, which provides locale-aware functions and classes. This module does not include any generic output formatting functionality. Instead, it is used for handling locale-specific information and number formatting.</p>\n<p>However, I can provide an example of how to use the <code>locale</code> module to format numbers in different locales. Here's a comprehensive guide on how you might achieve this:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import locale\n\ndef format_number(number, locale_str):\n    &quot;&quot;&quot;\n    Formats a given number into a string using the specified locale.\n\n    Parameters:\n    - number: The number to be formatted.\n    - locale_str: A string representing the locale (e.g., 'en_US.UTF-8', 'fr_FR.UTF-8').\n\n    Returns:\n    - A string representation of the number in the specified locale.\n    &quot;&quot;&quot;\n    try:\n        # Set the locale\n        locale.setlocale(locale.LC_ALL, locale_str)\n\n        # Format the number using the current locale\n        formatted_number = locale.format_string(&quot;%d&quot;, number, grouping=True)\n\n        return formatted_number\n    except locale.Error as e:\n        print(f&quot;Error setting locale: {e}&quot;)\n        return None\n\n# Example usage\nif __name__ == &quot;__main__&quot;:\n    # List of locales to test\n    locales = ['en_US.UTF-8', 'fr_FR.UTF-8', 'de_DE.UTF-8']\n\n    # Number to format\n    number_to_format = 1234567\n\n    # Iterate over each locale and print the formatted number\n    for locale_str in locales:\n        formatted_number = format_number(number_to_format, locale_str)\n        if formatted_number is not None:\n            print(f&quot;Number {number_to_format} formatted as '{formatted_number}' in {locale_str}.&quot;)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ol>\n<li>\n<p><strong>Locale Setting</strong>: The <code>locale.setlocale()</code> function is used to set the global locale for number formatting. This sets the locale for all categories, including numeric formats.</p>\n</li>\n<li>\n<p><strong>Formatting Numbers</strong>: The <code>locale.format_string()</code> function is used to format numbers according to the current locale settings. The <code>%d</code> directive is used for integers, and <code>grouping=True</code> adds commas as thousands separators.</p>\n</li>\n<li>\n<p><strong>Error Handling</strong>: A try-except block is used to handle any errors that might occur when setting the locale, such as unsupported locales or missing data files.</p>\n</li>\n<li>\n<p><strong>Example Usage</strong>: The script demonstrates how to format the number 1234567 into strings for three different locales: US English, French, and German.</p>\n</li>\n</ol>\n<p>This example provides a basic framework for using the <code>locale</code> module to handle number formatting in different locales, which is often necessary for applications that need to display numbers according to user preferences or specific standards.</p>"
        }
    ],
    "Multimedia Services": [
        {
            "filename": "aifc - Read and write AIFF and AIFC files.md",
            "content": "<h1>aifc - Read and write AIFF and AIFC files</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-writing-an-aiff-audio-file\">Example 1: Writing an AIFF Audio File</a></li>\n<li><a href=\"#example-2-reading-an-aiff-audio-file\">Example 2: Reading an AIFF Audio File</a></li>\n<li><a href=\"#example-3-writing-an-aiff-c-audio-file\">Example 3: Writing an AIFF-C Audio File</a></li>\n<li><a href=\"#example-4-reading-an-aiff-c-audio-file\">Example 4: Reading an AIFF-C Audio File</a></li>\n<li><a href=\"#example-5-handling-different-sample-widths\">Example 5: Handling Different Sample Widths</a></li>\n<li><a href=\"#example-6-handling-different-compression-types\">Example 6: Handling Different Compression Types</a></li>\n</ol>\n<p>The <code>aifc</code> module in Python is used to read and write AIFF (Audio Interchange File Format) and AIFC (AIFF-C, which stands for Audio Interchange File Format with Compression) audio files. These formats are commonly used for digital music files and are widely supported across various platforms.</p>\n<p>Below are comprehensive code examples for common tasks related to reading and writing AIFF/AIFC files using the <code>aifc</code> module:</p>\n<h3>Example 1: Writing an AIFF Audio File</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import aifc\n\ndef write_aiff_file(filename, frames, sample_rate, channels):\n    &quot;&quot;&quot;\n    Write audio data to an AIFF file.\n\n    Parameters:\n    - filename (str): The name of the output AIFF file.\n    - frames (array-like): The audio data in the form of a sequence of samples.\n    - sample_rate (int): The sampling rate of the audio data in Hz.\n    - channels (int): The number of channels (1 for mono, 2 for stereo).\n    &quot;&quot;&quot;\n    with aifc.open(filename, 'wb') as wavf:\n        # Set the parameters\n        wavf.setnchannels(channels)\n        wavf.setsampwidth(2)  # 16-bit samples\n        wavf.setframerate(sample_rate)\n\n        # Write the audio frames to the file\n        wavf.writeframes(frames.tobytes())\n\n# Example usage\naudio_data = np.array([32768, 0, -32768, 0], dtype=np.int16)  # 4 samples at 16-bit resolution\nwrite_aiff_file('output.aif', audio_data, sample_rate=44100, channels=1)\n</code></pre>\n\n<h3>Example 2: Reading an AIFF Audio File</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import aifc\nimport numpy as np\n\ndef read_aiff_file(filename):\n    &quot;&quot;&quot;\n    Read audio data from an AIFF file.\n\n    Parameters:\n    - filename (str): The name of the input AIFF file.\n\n    Returns:\n    - tuple: A tuple containing the audio data, sampling rate, and number of channels.\n    &quot;&quot;&quot;\n    with aifc.open(filename, 'rb') as wavf:\n        # Read the parameters\n        nchannels = wavf.getnchannels()\n        sampwidth = wavf.getsampwidth()\n        sample_rate = wavf.getframerate()\n\n        # Read all frames and convert to numpy array\n        audio_data = np.frombuffer(wavf.readframes(-1), dtype=np.int16)\n\n    return audio_data, sample_rate, nchannels\n\n# Example usage\naudio_data, sample_rate, channels = read_aiff_file('input.aif')\nprint(f&quot;Audio Data: {audio_data}&quot;)\nprint(f&quot;Sample Rate: {sample_rate} Hz&quot;)\nprint(f&quot;Number of Channels: {channels}&quot;)\n</code></pre>\n\n<h3>Example 3: Writing an AIFF-C Audio File</h3>\n<p>AIFF-C is a compressed version of the AIFF format. It uses either the u-law or A-LAW compression schemes for audio data.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import aifc\nimport numpy as np\n\ndef write_aiff_c_file(filename, frames, sample_rate, channels, compression_type='u-law'):\n    &quot;&quot;&quot;\n    Write audio data to an AIFF-C file with specified compression type.\n\n    Parameters:\n    - filename (str): The name of the output AIFF-C file.\n    - frames (array-like): The audio data in the form of a sequence of samples.\n    - sample_rate (int): The sampling rate of the audio data in Hz.\n    - channels (int): The number of channels (1 for mono, 2 for stereo).\n    - compression_type (str): The compression type ('u-law' or 'a-law').\n    &quot;&quot;&quot;\n    with aifc.open(filename, 'wb') as wavf:\n        # Set the parameters\n        wavf.setnchannels(channels)\n        wavf.setsampwidth(1)  # 8-bit samples\n        wavf.setframerate(sample_rate)\n\n        if compression_type == 'u-law':\n            wavf.setcomptype('ULAW')\n        elif compression_type == 'a-law':\n            wavf.setcomptype('A-LAW')\n        else:\n            raise ValueError(&quot;Unsupported compression type. Use 'u-law' or 'a-law'.&quot;)\n\n        # Write the audio frames to the file\n        wavf.writeframes(frames.tobytes())\n\n# Example usage\naudio_data = np.array([32, 0, -16, 0], dtype=np.int8)  # 4 samples at 8-bit resolution\nwrite_aiff_c_file('output.aifc', audio_data, sample_rate=44100, channels=1, compression_type='u-law')\n</code></pre>\n\n<h3>Example 4: Reading an AIFF-C Audio File</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import aifc\nimport numpy as np\n\ndef read_aiff_c_file(filename):\n    &quot;&quot;&quot;\n    Read audio data from an AIFF-C file.\n\n    Parameters:\n    - filename (str): The name of the input AIFF-C file.\n\n    Returns:\n    - tuple: A tuple containing the audio data, sampling rate, and number of channels.\n    &quot;&quot;&quot;\n    with aifc.open(filename, 'rb') as wavf:\n        # Read the parameters\n        nchannels = wavf.getnchannels()\n        sampwidth = wavf.getsampwidth()\n        sample_rate = wavf.getframerate()\n\n        # Determine compression type\n        if wavf.getcomptype() == 'ULAW':\n            dtype = np.int8  # u-law samples are stored as 8-bit integers\n        elif wavf.getcomptype() == 'A-LAW':\n            dtype = np.int8  # a-law samples are stored as 8-bit integers\n        else:\n            raise ValueError(&quot;Unsupported compression type. Use 'u-law' or 'a-law'.&quot;)\n\n        # Read all frames and convert to numpy array\n        audio_data = np.frombuffer(wavf.readframes(-1), dtype=dtype)\n\n    return audio_data, sample_rate, nchannels\n\n# Example usage\naudio_data, sample_rate, channels = read_aiff_c_file('input.aifc')\nprint(f&quot;Audio Data: {audio_data}&quot;)\nprint(f&quot;Sample Rate: {sample_rate} Hz&quot;)\nprint(f&quot;Number of Channels: {channels}&quot;)\n</code></pre>\n\n<h3>Example 5: Handling Different Sample Widths</h3>\n<p>The <code>aifc</code> module can handle different sample widths, which are specified using the <code>setsampwidth</code> method. This allows you to work with audio data in various bit depths.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import aifc\nimport numpy as np\n\ndef write_custom_aiff_file(filename, frames, sample_rate, channels, sample_width):\n    &quot;&quot;&quot;\n    Write audio data to an AIFF file with a specified sample width.\n\n    Parameters:\n    - filename (str): The name of the output AIFF file.\n    - frames (array-like): The audio data in the form of a sequence of samples.\n    - sample_rate (int): The sampling rate of the audio data in Hz.\n    - channels (int): The number of channels (1 for mono, 2 for stereo).\n    - sample_width (int): The sample width in bytes (e.g., 1 for 8-bit, 2 for 16-bit).\n    &quot;&quot;&quot;\n    with aifc.open(filename, 'wb') as wavf:\n        # Set the parameters\n        wavf.setnchannels(channels)\n        wavf.setsampwidth(sample_width)\n        wavf.setframerate(sample_rate)\n\n        # Write the audio frames to the file\n        wavf.writeframes(frames.tobytes())\n\n# Example usage\naudio_data = np.array([32, 0, -16, 0], dtype=np.int8)  # 4 samples at 8-bit resolution\nwrite_custom_aiff_file('output_custom.aif', audio_data, sample_rate=44100, channels=1, sample_width=1)\n</code></pre>\n\n<h3>Example 6: Handling Different Compression Types</h3>\n<p>AIFF-C supports compression types like U-LAW and A-LAW. These are set using the <code>setcomptype</code> method.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import aifc\nimport numpy as np\n\ndef write_custom_aiff_c_file(filename, frames, sample_rate, channels, compression_type='u-law'):\n    &quot;&quot;&quot;\n    Write audio data to an AIFF-C file with a specified compression type.\n\n    Parameters:\n    - filename (str): The name of the output AIFF-C file.\n    - frames (array-like): The audio data in the form of a sequence of samples.\n    - sample_rate (int): The sampling rate of the audio data in Hz.\n    - channels (int): The number of channels (1 for mono, 2 for stereo).\n    - compression_type (str): The compression type ('u-law' or 'a-law').\n    &quot;&quot;&quot;\n    with aifc.open(filename, 'wb') as wavf:\n        # Set the parameters\n        wavf.setnchannels(channels)\n        wavf.setsampwidth(1)  # 8-bit samples\n        wavf.setframerate(sample_rate)\n\n        if compression_type == 'u-law':\n            wavf.setcomptype('ULAW')\n        elif compression_type == 'a-law':\n            wavf.setcomptype('A-LAW')\n        else:\n            raise ValueError(&quot;Unsupported compression type. Use 'u-law' or 'a-law'.&quot;)\n\n        # Write the audio frames to the file\n        wavf.writeframes(frames.tobytes())\n\n# Example usage\naudio_data = np.array([32, 0, -16, 0], dtype=np.int8)  # 4 samples at 8-bit resolution\nwrite_custom_aiff_c_file('output_custom.aifc', audio_data, sample_rate=44100, channels=1, compression_type='u-law')\n</code></pre>\n\n<p>These examples demonstrate how to use the <code>aifc</code> module to create and read AIFF and AIFF-C files with different sample widths, compression types, and formats. The code is designed to be clear and self-contained, allowing you to easily integrate audio handling into your applications.</p>"
        },
        {
            "filename": "audioop - Manipulate raw audio data.md",
            "content": "<h1>audioop - Manipulate raw audio data</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-reading-audio-data-from-a-file\">Example 1: Reading Audio Data from a File</a></li>\n<li><a href=\"#example-2-converting-audio-data-to-different-formats\">Example 2: Converting Audio Data to Different Formats</a></li>\n<li><a href=\"#example-3-calculating-the-rms-root-mean-square-of-audio-data\">Example 3: Calculating the RMS (Root Mean Square) of Audio Data</a></li>\n<li><a href=\"#example-4-applying-a-volume-adjustment-to-audio-data\">Example 4: Applying a Volume Adjustment to Audio Data</a></li>\n<li><a href=\"#example-5-writing-audio-data-to-a-file\">Example 5: Writing Audio Data to a File</a></li>\n<li><a href=\"#explanation\">Explanation</a></li>\n</ol>\n<p>The <code>audioop</code> module in Python provides functions to manipulate raw audio data, such as converting between different sample formats and performing various operations on audio samples. Below are comprehensive examples of how to use these functions, along with explanations for each step.</p>\n<h3>Example 1: Reading Audio Data from a File</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import wave\n\ndef read_audio_data(filename):\n    &quot;&quot;&quot;\n    Reads audio data from a WAV file and returns the sample rate, number of channels,\n    and audio frames as a list of bytes.\n    &quot;&quot;&quot;\n    with wave.open(filename, 'rb') as wav_file:\n        # Get the parameters (sample rate, number of channels, bits per sample)\n        params = wav_file.getparams()\n\n        # Read all the audio data\n        audio_frames = wav_file.readframes(params.nframes)\n\n        return params.samplerate, params.nchannels, audio_frames\n\n# Example usage\nsample_rate, num_channels, audio_data = read_audio_data('example.wav')\nprint(f&quot;Sample Rate: {sample_rate} Hz&quot;)\nprint(f&quot;Number of Channels: {num_channels}&quot;)\n</code></pre>\n\n<h3>Example 2: Converting Audio Data to Different Formats</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import wave\nimport audioop\n\ndef convert_to_int16(audio_frames):\n    &quot;&quot;&quot;\n    Converts a sequence of bytes representing audio frames into signed 16-bit integers.\n    Assumes the input is in unsigned 8-bit format.\n    &quot;&quot;&quot;\n    # Convert to signed 16-bit using audioop.lin2lin()\n    converted_audio = audioop.lin2lin(audio_frames, 'U', 'S')\n    return converted_audio\n\n# Example usage\nsample_rate, num_channels, audio_data = read_audio_data('example.wav')\nconverted_audio = convert_to_int16(audio_data)\n</code></pre>\n\n<h3>Example 3: Calculating the RMS (Root Mean Square) of Audio Data</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import wave\nimport audioop\n\ndef calculate_rms(audio_frames):\n    &quot;&quot;&quot;\n    Calculates the root mean square (RMS) of a sequence of bytes representing audio frames.\n    Assumes the input is in signed 16-bit format.\n    &quot;&quot;&quot;\n    # Calculate RMS using audioop.rms()\n    rms = audioop.rms(audio_frames, 2)\n    return rms\n\n# Example usage\nsample_rate, num_channels, audio_data = read_audio_data('example.wav')\nconverted_audio = convert_to_int16(audio_data)\nrms_value = calculate_rms(converted_audio)\nprint(f&quot;RMS Value: {rms_value}&quot;)\n</code></pre>\n\n<h3>Example 4: Applying a Volume Adjustment to Audio Data</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import wave\nimport audioop\n\ndef apply_volume_adjustment(audio_frames, volume_factor):\n    &quot;&quot;&quot;\n    Applies a volume adjustment to a sequence of bytes representing audio frames.\n    Assumes the input is in signed 16-bit format.\n    &quot;&quot;&quot;\n    # Apply volume adjustment using audioop.mul()\n    adjusted_audio = audioop.mul(audio_frames, 2, volume_factor)\n    return adjusted_audio\n\n# Example usage\nsample_rate, num_channels, audio_data = read_audio_data('example.wav')\nconverted_audio = convert_to_int16(audio_data)\nvolume_adjusted_audio = apply_volume_adjustment(converted_audio, 0.5)  # Half the original volume\n</code></pre>\n\n<h3>Example 5: Writing Audio Data to a File</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import wave\n\ndef write_audio_data(filename, sample_rate, num_channels, audio_frames):\n    &quot;&quot;&quot;\n    Writes raw audio data to a WAV file.\n    &quot;&quot;&quot;\n    with wave.open(filename, 'wb') as wav_file:\n        # Write the parameters (sample rate, number of channels, bits per sample)\n        wav_file.setnchannels(num_channels)\n        wav_file.setsampwidth(2)  # Signed 16-bit\n        wav_file.setframerate(sample_rate)\n\n        # Write all the audio data\n        wav_file.writeframes(audio_frames)\n\n# Example usage\nsample_rate = 44100\nnum_channels = 2\naudio_data = converted_audio  # Use converted data from previous example\nwrite_audio_data('output.wav', sample_rate, num_channels, audio_data)\n</code></pre>\n\n<h3>Explanation</h3>\n<ul>\n<li>\n<p><strong>Reading Audio Data</strong>: The <code>wave</code> module is used to open and read audio files. The <code>getparams()</code> method retrieves the format parameters (sample rate, number of channels, bits per sample), and <code>readframes()</code> reads all the frames.</p>\n</li>\n<li>\n<p><strong>Converting Formats</strong>: The <code>audioop.lin2lin()</code> function converts between different linear sample formats.</p>\n</li>\n<li>\n<p><strong>Calculating RMS</strong>: The <code>audioop.rms()</code> function calculates the root mean square of audio data, which is a measure of its power or loudness.</p>\n</li>\n<li>\n<p><strong>Volume Adjustment</strong>: The <code>audioop.mul()</code> function multiplies each sample in the audio data by a volume factor, effectively changing the volume level.</p>\n</li>\n<li>\n<p><strong>Writing Audio Data</strong>: The <code>wave</code> module is used to write audio data back to a file with specified parameters and frames.</p>\n</li>\n</ul>\n<p>These examples demonstrate how to manipulate audio data using the <code>audioop</code> module in Python. Each function is thoroughly documented to ensure clarity and ease of use in real-world applications.</p>"
        },
        {
            "filename": "chunk - Read IFF chunked data.md",
            "content": "<h1>chunk - Read IFF chunked data</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-reading-iff-audio-file-using-a-fictional-chunk-module\">Example 1: Reading IFF Audio File (using a fictional <code>chunk</code> module)</a></li>\n<li><a href=\"#example-2-extracting-iff-image-file-using-a-fictional-chunk-module\">Example 2: Extracting IFF Image File (using a fictional <code>chunk</code> module)</a></li>\n<li><a href=\"#notes\">Notes:</a></li>\n</ol>\n<p>The <code>chunk</code> module is not a standard library module in Python. It appears to be a fictional or hypothetical module for demonstrating purposes, as there is no actual <code>chunk</code> module available in Python's standard library. However, I can provide examples of how you might work with IFF (Interleaved File Format) data, which is often used for audio and image files.</p>\n<p>IFF is a file format that uses chunks to store different types of data within the same file. The <code>chunk</code> module would typically be used to extract or manipulate these chunks from an IFF file.</p>\n<p>Here are some example code snippets that demonstrate how you might read and process IFF files in Python:</p>\n<h3>Example 1: Reading IFF Audio File (using a fictional <code>chunk</code> module)</h3>\n<p>Assume we have a fictional <code>chunk</code> module that provides functions to interact with IFF files. This is just for demonstration purposes.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import chunk\n\ndef read_iff_file(file_path):\n    # Open the IFF file in binary mode\n    with open(file_path, 'rb') as file:\n        # Read the ID of the first chunk\n        id = file.read(4)\n\n        while id != b'\\0\\xff\\xff\\0':\n            # Get the size of the current chunk\n            chunk_size = int.from_bytes(file.read(4), byteorder='big')\n\n            # Read the data of the current chunk\n            chunk_data = file.read(chunk_size)\n\n            # Process or extract the data as needed\n\n            # Move to the next chunk ID and size\n            file.seek(chunk_size + 8, os.SEEK_CUR)\n\n            # Read the ID of the next chunk\n            id = file.read(4)\n\n# Example usage\nread_iff_file('example.iff')\n</code></pre>\n\n<h3>Example 2: Extracting IFF Image File (using a fictional <code>chunk</code> module)</h3>\n<p>Again, assume we have a fictional <code>chunk</code> module for handling IFF files.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import chunk\n\ndef read_iff_image(file_path):\n    # Open the IFF file in binary mode\n    with open(file_path, 'rb') as file:\n        # Read the ID of the first chunk\n        id = file.read(4)\n\n        while id != b'\\0\\xff\\xff\\0':\n            # Get the size of the current chunk\n            chunk_size = int.from_bytes(file.read(4), byteorder='big')\n\n            if id == b'FORM':  # This is a common chunk ID for IFF files\n                # Extract and process the FORM chunk\n                form_type = file.read(4).decode('ascii')\n\n                print(f&quot;Found FORM: {form_type}&quot;)\n\n                # Move to the next chunk ID and size\n                file.seek(chunk_size + 8, os.SEEK_CUR)\n\n                # Read the ID of the next chunk\n                id = file.read(4)\n\n            elif id == b'DSCS':  # This is a common chunk ID for IFF files\n                # Extract and process the DSCS chunk (display specification)\n                description_size = int.from_bytes(file.read(4), byteorder='big')\n\n                if description_size &gt; 0:\n                    description = file.read(description_size).decode('ascii')\n                    print(f&quot;Found DSCS: {description}&quot;)\n\n                # Move to the next chunk ID and size\n                file.seek(chunk_size + 8, os.SEEK_CUR)\n\n                # Read the ID of the next chunk\n                id = file.read(4)\n\n            else:\n                # Skip unsupported chunks\n                file.seek(chunk_size, os.SEEK_CUR)\n\n            # Continue reading chunks\n            id = file.read(4)\n\n# Example usage\nread_iff_image('example.iff')\n</code></pre>\n\n<h3>Notes:</h3>\n<ol>\n<li><strong>Chunk ID</strong>: The <code>chunk</code> module would typically have functions to read and write specific chunk IDs (e.g., <code>FORM</code>, <code>DSCS</code> for audio/image files).</li>\n<li><strong>Byte Order</strong>: The examples assume big-endian byte order, which is common in IFF files.</li>\n<li><strong>Error Handling</strong>: In a real-world scenario, you would add error handling for cases where chunks are not found or have unexpected sizes.</li>\n</ol>\n<p>These examples illustrate how you might interact with IFF files using a fictional <code>chunk</code> module. If there is no actual <code>chunk</code> module available, you would need to implement your own solution or use an existing library that can handle IFF files.</p>"
        },
        {
            "filename": "colorsys - Conversions between color systems.md",
            "content": "<h1>colorsys - Conversions between color systems</h1>\n<p>The <code>colorsys</code> module in Python provides a set of functions to convert colors among different models, such as RGB, HSV, CMYK, and more. Below are comprehensive code examples demonstrating various conversions using this module.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import colorsys\n\n# Example 1: Convert from RGB to HSV\ndef rgb_to_hsv(rgb):\n    &quot;&quot;&quot;\n    Converts an RGB tuple (r, g, b) to an HSV tuple (h, s, v).\n\n    Parameters:\n    rgb (tuple): A tuple containing three integers representing the red, green, and blue channels of a color.\n\n    Returns:\n    tuple: A tuple containing three floats representing the hue (0-1), saturation (0-1), and value (0-1) of the color.\n    &quot;&quot;&quot;\n    r, g, b = rgb / 255.0\n    h, s, v = colorsys.rgb_to_hsv(r, g, b)\n    return h, s, v\n\n# Example 2: Convert from HSV to RGB\ndef hsv_to_rgb(hsv):\n    &quot;&quot;&quot;\n    Converts an HSV tuple (h, s, v) to an RGB tuple (r, g, b).\n\n    Parameters:\n    hsv (tuple): A tuple containing three floats representing the hue (0-1), saturation (0-1), and value (0-1) of a color.\n\n    Returns:\n    tuple: A tuple containing three integers representing the red, green, and blue channels of the color.\n    &quot;&quot;&quot;\n    h, s, v = hsv\n    r, g, b = colorsys.hsv_to_rgb(h, s, v)\n    return int(r * 255), int(g * 255), int(b * 255)\n\n# Example 3: Convert from RGB to CMYK\ndef rgb_to_cmyk(rgb):\n    &quot;&quot;&quot;\n    Converts an RGB tuple (r, g, b) to a CMYK tuple (c, m, y, k).\n\n    Parameters:\n    rgb (tuple): A tuple containing three integers representing the red, green, and blue channels of a color.\n\n    Returns:\n    tuple: A tuple containing four floats representing the cyan, magenta, yellow, and key (black) channels of the color.\n    &quot;&quot;&quot;\n    r, g, b = rgb / 255.0\n    c = 1 - r\n    m = 1 - g\n    y = 1 - b\n    k = min(c, m, y)\n    if k == 1:\n        return 0, 0, 0, 1\n    else:\n        c = (c - k) / (1 - k)\n        m = (m - k) / (1 - k)\n        y = (y - k) / (1 - k)\n        return c, m, y, k\n\n# Example 4: Convert from CMYK to RGB\ndef cmyk_to_rgb(cmyk):\n    &quot;&quot;&quot;\n    Converts a CMYK tuple (c, m, y, k) to an RGB tuple (r, g, b).\n\n    Parameters:\n    cmyk (tuple): A tuple containing four floats representing the cyan, magenta, yellow, and key (black) channels of a color.\n\n    Returns:\n    tuple: A tuple containing three integers representing the red, green, and blue channels of the color.\n    &quot;&quot;&quot;\n    c, m, y, k = cmyk\n    r = 1 - c * (1 - k)\n    g = 1 - m * (1 - k)\n    b = 1 - y * (1 - k)\n    return int(r * 255), int(g * 255), int(b * 255)\n\n# Example 5: Convert from RGB to HSL\ndef rgb_to_hsl(rgb):\n    &quot;&quot;&quot;\n    Converts an RGB tuple (r, g, b) to an HSL tuple (h, s, l).\n\n    Parameters:\n    rgb (tuple): A tuple containing three integers representing the red, green, and blue channels of a color.\n\n    Returns:\n    tuple: A tuple containing three floats representing the hue (0-1), saturation (0-1), and lightness (0-1) of the color.\n    &quot;&quot;&quot;\n    r, g, b = rgb / 255.0\n    h, s, l = colorsys.rgb_to_hls(r, g, b)\n    return h, s, l\n\n# Example 6: Convert from HSL to RGB\ndef hsl_to_rgb(hsl):\n    &quot;&quot;&quot;\n    Converts an HSL tuple (h, s, l) to an RGB tuple (r, g, b).\n\n    Parameters:\n    hsl (tuple): A tuple containing three floats representing the hue (0-1), saturation (0-1), and lightness (0-1) of a color.\n\n    Returns:\n    tuple: A tuple containing three integers representing the red, green, and blue channels of the color.\n    &quot;&quot;&quot;\n    h, s, l = hsl\n    r, g, b = colorsys.hls_to_rgb(h, s, l)\n    return int(r * 255), int(g * 255), int(b * 255)\n\n# Example 7: Convert from RGB to hexadecimal string\ndef rgb_to_hex(rgb):\n    &quot;&quot;&quot;\n    Converts an RGB tuple (r, g, b) to a hexadecimal string.\n\n    Parameters:\n    rgb (tuple): A tuple containing three integers representing the red, green, and blue channels of a color.\n\n    Returns:\n    str: A string representing the hexadecimal representation of the color.\n    &quot;&quot;&quot;\n    r, g, b = rgb\n    return &quot;#{:02x}{:02x}{:02x}&quot;.format(r, g, b)\n\n# Example 8: Convert from hex to RGB tuple\ndef hex_to_rgb(hex_color):\n    &quot;&quot;&quot;\n    Converts a hexadecimal string to an RGB tuple (r, g, b).\n\n    Parameters:\n    hex_color (str): A string representing the hexadecimal color code.\n\n    Returns:\n    tuple: A tuple containing three integers representing the red, green, and blue channels of the color.\n    &quot;&quot;&quot;\n    hex_color = hex_color.lstrip('#')\n    r, g, b = int(hex_color[0:2], 16), int(hex_color[2:4], 16), int(hex_color[4:6], 16)\n    return r, g, b\n\n# Example 9: Convert from RGB to XYZ\ndef rgb_to_xyz(rgb):\n    &quot;&quot;&quot;\n    Converts an RGB tuple (r, g, b) to an XYZ tuple.\n\n    Parameters:\n    rgb (tuple): A tuple containing three integers representing the red, green, and blue channels of a color.\n\n    Returns:\n    tuple: A tuple containing three floats representing the X, Y, and Z coordinates in the CIE XYZ color space.\n    &quot;&quot;&quot;\n    r, g, b = rgb / 255.0\n    r = r ** 3 if r &gt; 0.04045 else (r + 0.055) / 1.055\n    g = g ** 3 if g &gt; 0.04045 else (g + 0.055) / 1.055\n    b = b ** 3 if b &gt; 0.04045 else (b + 0.055) / 1.055\n    r *= 129.876\n    g *= 129.876\n    b *= 129.876\n    return 0.4124 * r, 0.3576 * g, 0.1805 * b\n\n# Example 10: Convert from XYZ to RGB\ndef xyz_to_rgb(xyz):\n    &quot;&quot;&quot;\n    Converts an XYZ tuple (x, y, z) to an RGB tuple.\n\n    Parameters:\n    xyz (tuple): A tuple containing three floats representing the X, Y, and Z coordinates in the CIE XYZ color space.\n\n    Returns:\n    tuple: A tuple containing three integers representing the red, green, and blue channels of the color.\n    &quot;&quot;&quot;\n    x, y, z = xyz\n    r = 3.2406 * x - 1.5372 * y - 0.4986 * z\n    g = -0.9689 * x + 1.8758 * y + 0.0415 * z\n    b = 0.0557 * x - 0.2040 * y + 1.0570 * z\n    r, g, b = [129.876 / c for c in (r, g, b)]\n    r = r ** (1/3) if r &gt; 0.0031308 else r * 1.055 - 0.055\n    g = g ** (1/3) if g &gt; 0.0031308 else g * 1.055 - 0.055\n    b = b ** (1/3) if b &gt; 0.0031308 else b * 1.055 - 0.055\n    return int(round(r * 255)), int(round(g * 255)), int(round(b * 255))\n\n# Example usage:\nrgb = (255, 0, 0)\nhex_color = rgb_to_hex(rgb)\nxyz = rgb_to_xyz(rgb)\nprint(&quot;RGB:&quot;, rgb)\nprint(&quot;Hex Color:&quot;, hex_color)\nprint(&quot;XYZ Coordinates:&quot;, xyz)\n\n# Convert XYZ back to RGB\nnew_rgb = xyz_to_rgb(xyz)\nprint(&quot;Converted RGB from XYZ:&quot;, new_rgb)\n</code></pre>\n\n<p>This Python script defines functions to convert between various color representations such as RGB, hexadecimal, HSL, CIE XYZ, and more. The conversions are based on standard formulas for each representation. This script also includes example usage of these conversion functions. You can run this script in a Python environment to see the results of the conversions. Keep in mind that some conversions may involve rounding or other adjustments to ensure accurate color representation in different spaces. These scripts are useful for applications requiring precise color manipulation, such as image processing, design software, and web development. Enjoy experimenting with these conversions!  \"</p>"
        },
        {
            "filename": "imghdr - Determine the type of an image.md",
            "content": "<h1>imghdr - Determine the type of an image</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-identifyfilename\">1. <code>identify(filename)</code></a></li>\n<li><a href=\"#2-whatbuf\">2. <code>what(buf)</code></a></li>\n<li><a href=\"#3-isgifbuf\">3. <code>isgif(buf)</code></a></li>\n<li><a href=\"#4-ispngbuf\">4. <code>ispng(buf)</code></a></li>\n<li><a href=\"#5-issvgbuf\">5. <code>issvg(buf)</code></a></li>\n<li><a href=\"#6-istiffbuf\">6. <code>istiff(buf)</code></a></li>\n<li><a href=\"#7-iswebpbuf\">7. <code>iswebp(buf)</code></a></li>\n<li><a href=\"#8-isspcbuf\">8. <code>isspc(buf)</code></a></li>\n<li><a href=\"#9-isepsbuf\">9. <code>iseps(buf)</code></a></li>\n<li><a href=\"#10-isppmbuf\">10. <code>isppm(buf)</code></a></li>\n</ol>\n<p>The <code>imghdr</code> module in Python is used to identify the format of image files by checking their first few bytes. This can be particularly useful when dealing with images where you need to programmatically determine the file type without relying on file extensions.</p>\n<p>Below are comprehensive code examples for each functionality available in the <code>imghdr</code> module:</p>\n<h3>1. <code>identify(filename)</code></h3>\n<p>This function takes a filename as input and returns a tuple containing two elements: the image format (if recognized) and an error message if no format is recognized.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import imghdr\n\ndef identify_image_format(filename):\n    result = imghdr.identify(filename)\n    if result:\n        format, error = result\n        print(f&quot;Image format identified as: {format}&quot;)\n    else:\n        print(&quot;No image format found. Error:&quot;, error)\n\n# Example usage\nidentify_image_format('example.jpg')\n</code></pre>\n\n<h3>2. <code>what(buf)</code></h3>\n<p>This function takes a bytes-like object containing the first few bytes of an image file and returns the image format if recognized, or <code>None</code> if no format is recognized.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import imghdr\n\ndef identify_image_format_from_bytes(buffer):\n    result = imghdr.what(buffer)\n    if result:\n        print(f&quot;Image format identified as: {result}&quot;)\n    else:\n        print(&quot;No image format found.&quot;)\n\n# Example usage\nbuffer = b'\\xFFD8\\xFFE0\\x00\\x10JFIF\\x00'\nidentify_image_format_from_bytes(buffer)\n</code></pre>\n\n<h3>3. <code>isgif(buf)</code></h3>\n<p>This function checks if the provided bytes-like object contains a GIF file.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import imghdr\n\ndef is_gif_file(buffer):\n    result = imghdr.isgif(buffer)\n    print(f&quot;Is the buffer a GIF file? {result}&quot;)\n\n# Example usage\nbuffer = b'\\x47\\x49\\x46\\x38\\x39'\nis_gif_file(buffer)\n</code></pre>\n\n<h3>4. <code>ispng(buf)</code></h3>\n<p>This function checks if the provided bytes-like object contains a PNG file.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import imghdr\n\ndef is_png_file(buffer):\n    result = imghdr.ispng(buffer)\n    print(f&quot;Is the buffer a PNG file? {result}&quot;)\n\n# Example usage\nbuffer = b'\\x89PNG\\r\\n\\x1a\\n'\nis_png_file(buffer)\n</code></pre>\n\n<h3>5. <code>issvg(buf)</code></h3>\n<p>This function checks if the provided bytes-like object contains an SVG file.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import imghdr\n\ndef is_svg_file(buffer):\n    result = imghdr.issvg(buffer)\n    print(f&quot;Is the buffer an SVG file? {result}&quot;)\n\n# Example usage\nbuffer = b'&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;100&quot; height=&quot;100&quot;&gt;'\nis_svg_file(buffer)\n</code></pre>\n\n<h3>6. <code>istiff(buf)</code></h3>\n<p>This function checks if the provided bytes-like object contains a TIFF file.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import imghdr\n\ndef is_tiff_file(buffer):\n    result = imghdr.istiff(buffer)\n    print(f&quot;Is the buffer a TIFF file? {result}&quot;)\n\n# Example usage\nbuffer = b'II\\x2a\\x00\\x16'\nis_tiff_file(buffer)\n</code></pre>\n\n<h3>7. <code>iswebp(buf)</code></h3>\n<p>This function checks if the provided bytes-like object contains a WebP file.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import imghdr\n\ndef is_webp_file(buffer):\n    result = imghdr.iswebp(buffer)\n    print(f&quot;Is the buffer a WebP file? {result}&quot;)\n\n# Example usage\nbuffer = b'\\x52\\x49\\x46\\x50\\x2A\\x31\\x2E\\x30'\nis_webp_file(buffer)\n</code></pre>\n\n<h3>8. <code>isspc(buf)</code></h3>\n<p>This function checks if the provided bytes-like object contains a SPARK file.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import imghdr\n\ndef is_spark_file(buffer):\n    result = imghdr.isspc(buffer)\n    print(f&quot;Is the buffer a SPARK file? {result}&quot;)\n\n# Example usage\nbuffer = b'\\x53\\x50\\x42\\x48'\nis_spark_file(buffer)\n</code></pre>\n\n<h3>9. <code>iseps(buf)</code></h3>\n<p>This function checks if the provided bytes-like object contains an EPS (Encapsulated PostScript) file.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import imghdr\n\ndef is_eps_file(buffer):\n    result = imghdr.iseps(buffer)\n    print(f&quot;Is the buffer an EPS file? {result}&quot;)\n\n# Example usage\nbuffer = b'\\x25\\x21\\x43\\x0D\\x0A\\x0A'\nis_eps_file(buffer)\n</code></pre>\n\n<h3>10. <code>isppm(buf)</code></h3>\n<p>This function checks if the provided bytes-like object contains a PPM (Portable Pixel Map) file.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import imghdr\n\ndef is_ppm_file(buffer):\n    result = imghdr.isppm(buffer)\n    print(f&quot;Is the buffer a PPM file? {result}&quot;)\n\n# Example usage\nbuffer = b'P3\\n20 20\\n150\\n'\nis_ppm_file(buffer)\n</code></pre>\n\n<h3>11. <code>ispbm(buf)</code></h3>\n<p>This function checks if the provided bytes-like object contains a PBM (Portable BitMap) file.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import imghdr\n\ndef is_pbm_file(buffer):\n    result = imghdr.ispbm(buffer)\n    print(f&quot;Is the buffer a PBM file? {result}&quot;)\n\n# Example usage\nbuffer = b'P1\\n20 20'\nis_pbm_file(buffer)\n</code></pre>\n\n<h3>12. <code>ispgm(buf)</code></h3>\n<p>This function checks if the provided bytes-like object contains a PGM (Portable GrayMap) file.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import imghdr\n\ndef is_pgm_file(buffer):\n    result = imghdr.ispgm(buffer)\n    print(f&quot;Is the buffer a PGM file? {result}&quot;)\n\n# Example usage\nbuffer = b'P5\\n20 20\\n150'\nis_pgm_file(buffer)\n</code></pre>\n\n<h3>13. <code>isxpm(buf)</code></h3>\n<p>This function checks if the provided bytes-like object contains an XPM (X PixMap) file.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import imghdr\n\ndef is_xpm_file(buffer):\n    result = imghdr.isxpm(buffer)\n    print(f&quot;Is the buffer an XPM file? {result}&quot;)\n\n# Example usage\nbuffer = b'/* XPM */\nstatic char *xpm[] = {\n    &quot;16 16 2 1&quot;,\n    &quot;      c none&quot;,\n    &quot;.     c black&quot;,\n    &quot;................&quot;\n}\nis_xpm_file(buffer)\n</code></pre>\n\n<p>These examples demonstrate how to use each function in the <code>imghdr</code> module to determine the format of image files. Each example includes comments explaining the purpose and usage of the function, making it easy to understand and integrate into larger projects.</p>"
        },
        {
            "filename": "ossaudiodev - Access to OSS-compatible audio devices.md",
            "content": "<h1>ossaudiodev - Access to OSS-compatible audio devices</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#key-points\">Key Points:</a></li>\n</ol>\n<p>The <code>ossaudiodev</code> module in Python provides low-level access to OSS (Open Sound System) compatible audio devices. OSS is a Unix-like sound system that has been used on many Linux distributions, as well as other systems like FreeBSD and Solaris.</p>\n<p>Below are comprehensive code examples for the <code>ossaudiodev</code> module, covering various functionalities such as opening a device, setting parameters, playing and recording audio, and closing the device:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import ossaudiodev\n\n# Example 1: Open an OSS audio device for output (e.g., ALSA)\ndef open_audio_output():\n    &quot;&quot;&quot;\n    Opens an OSS audio device for output.\n\n    Returns:\n        file-like object: A file-like object that can be used to write audio data.\n    &quot;&quot;&quot;\n    try:\n        # Open a file in binary mode\n        out_device = ossaudiodev.open('w', -1)\n\n        # Set the number of channels (e.g., 2 for stereo)\n        out_device.setchannels(2)\n\n        # Set the sample rate (e.g., 44100 Hz)\n        out_device.setrate(44100)\n\n        # Set the format (e.g., 8-bit mono, 16-bit stereo)\n        out_device.setformat(ossaudiodev.AFMT_S16_LE)  # or AFMT_U8 for 8-bit\n\n        return out_device\n    except Exception as e:\n        print(f&quot;Error opening audio output device: {e}&quot;)\n        return None\n\n# Example 2: Open an OSS audio device for input (e.g., ALSA)\ndef open_audio_input():\n    &quot;&quot;&quot;\n    Opens an OSS audio device for input.\n\n    Returns:\n        file-like object: A file-like object that can be used to read audio data.\n    &quot;&quot;&quot;\n    try:\n        # Open a file in binary mode\n        in_device = ossaudiodev.open('r', -1)\n\n        # Set the number of channels (e.g., 2 for stereo)\n        in_device.setchannels(2)\n\n        # Set the sample rate (e.g., 44100 Hz)\n        in_device.setrate(44100)\n\n        # Set the format (e.g., 8-bit mono, 16-bit stereo)\n        in_device.setformat(ossaudiodev.AFMT_S16_LE)  # or AFMT_U8 for 8-bit\n\n        return in_device\n    except Exception as e:\n        print(f&quot;Error opening audio input device: {e}&quot;)\n        return None\n\n# Example 3: Play an audio file using open_audio_output\ndef play_audio_file(filename, out_device):\n    &quot;&quot;&quot;\n    Plays an audio file using the provided output device.\n\n    Args:\n        filename (str): The path to the audio file.\n        out_device (file-like object): An OSS audio device opened for output.\n    &quot;&quot;&quot;\n    try:\n        with open(filename, 'rb') as infile:\n            data = infile.read()\n            while data:\n                out_device.write(data)\n                data = infile.read()\n        print(&quot;Audio playback complete.&quot;)\n    except Exception as e:\n        print(f&quot;Error playing audio file: {e}&quot;)\n\n# Example 4: Record an audio file using open_audio_input\ndef record_audio_file(filename, in_device):\n    &quot;&quot;&quot;\n    Records an audio file from the provided input device.\n\n    Args:\n        filename (str): The path to save the recorded audio file.\n        in_device (file-like object): An OSS audio device opened for input.\n    &quot;&quot;&quot;\n    try:\n        with open(filename, 'wb') as outfile:\n            while True:\n                data = in_device.read(1024)\n                if not data:\n                    break\n                outfile.write(data)\n        print(&quot;Audio recording complete.&quot;)\n    except Exception as e:\n        print(f&quot;Error recording audio file: {e}&quot;)\n\n# Example 5: Close the OSS audio devices\ndef close_audio_devices(out_device, in_device):\n    &quot;&quot;&quot;\n    Closes the provided OSS audio devices.\n\n    Args:\n        out_device (file-like object): The output device to close.\n        in_device (file-like object): The input device to close.\n    &quot;&quot;&quot;\n    try:\n        if out_device:\n            out_device.close()\n        if in_device:\n            in_device.close()\n        print(&quot;Audio devices closed.&quot;)\n    except Exception as e:\n        print(f&quot;Error closing audio devices: {e}&quot;)\n\n# Example usage\nif __name__ == &quot;__main__&quot;:\n    # Open an output device for playback\n    out_device = open_audio_output()\n\n    # Play a sample audio file\n    play_audio_file('path_to_sample.wav', out_device)\n\n    # Close the output device\n    close_audio_devices(out_device, None)\n\n    # Optionally, open an input device and record an audio file\n    in_device = open_audio_input()\n    if in_device:\n        record_audio_file('recorded_audio.wav', in_device)\n        close_audio_devices(None, in_device)\n</code></pre>\n\n<h3>Key Points:</h3>\n<ol>\n<li>\n<p><strong>Device Open</strong>: The <code>open</code> function is used to open a device for either output or input. It takes two arguments: the mode ('w' for write, 'r' for read) and an index (usually <code>-1</code> for default).</p>\n</li>\n<li>\n<p><strong>Parameters</strong>: Functions like <code>setchannels</code>, <code>setrate</code>, and <code>setformat</code> are used to set the number of channels, sample rate, and audio format respectively.</p>\n</li>\n<li>\n<p><strong>File-like Operations</strong>: The device is treated as a file object, allowing you to write or read data using standard I/O operations (<code>write</code> and <code>read</code>).</p>\n</li>\n<li>\n<p><strong>Error Handling</strong>: Basic error handling is included to catch and print exceptions that may occur during device opening or operations.</p>\n</li>\n<li>\n<p><strong>Closing Devices</strong>: Always close the devices after use to free up resources and ensure proper cleanup.</p>\n</li>\n</ol>\n<p>These examples provide a comprehensive introduction to using the <code>ossaudiodev</code> module for audio processing tasks in Python.</p>"
        },
        {
            "filename": "sndhdr - Determine type of sound file.md",
            "content": "<h1>sndhdr - Determine type of sound file</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#explanation\">Explanation:</a></li>\n</ol>\n<p>The <code>sndhdr</code> module in Python is used to determine the type of a sound file based on its header information. It provides functions to read and parse the headers of various audio formats and return their corresponding names.</p>\n<p>Here are comprehensive code examples for using the <code>sndhdr</code> module:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import sndhdr\n\ndef determine_sound_type(file_path):\n    &quot;&quot;&quot;\n    Determine the type of a sound file using the sndhdr module.\n\n    Args:\n    file_path (str): The path to the audio file.\n\n    Returns:\n    str: The name of the sound format, or None if the file is not recognized.\n    &quot;&quot;&quot;\n    # Use sndhdr.what() function to determine the type of the sound file\n    result = sndhdr.what(file_path)\n\n    # Check if the file was successfully identified\n    if result is None:\n        return None\n\n    # Return the name of the sound format\n    return result[0]\n\n# Example usage\nfile_path = 'example.wav'\nsound_format = determine_sound_type(file_path)\n\nif sound_format:\n    print(f&quot;The sound file '{file_path}' is of type: {sound_format}&quot;)\nelse:\n    print(f&quot;The sound file '{file_path}' is not recognized.&quot;)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ol>\n<li>\n<p><strong>Import the <code>sndhdr</code> module</strong>: This module provides the necessary functions to work with sound file headers.</p>\n</li>\n<li>\n<p><strong>Function Definition</strong>: The <code>determine_sound_type</code> function takes a file path as input and returns the name of the audio format if recognized, or <code>None</code> otherwise.</p>\n</li>\n<li>\n<p><strong>Using <code>sndhdr.what()</code></strong>: This function reads the header of the specified audio file and attempts to identify its format. It returns a tuple containing the format name and some additional information about the file (e.g., the number of channels and sample rate).</p>\n</li>\n<li>\n<p><strong>Error Handling</strong>: If <code>sndhdr.what()</code> returns <code>None</code>, it means the file was not recognized, and the function returns <code>None</code>.</p>\n</li>\n<li>\n<p><strong>Example Usage</strong>: The example demonstrates how to use the <code>determine_sound_type</code> function to identify a sound file named <code>'example.wav'</code>. It prints the result or indicates if the file is not recognized.</p>\n</li>\n</ol>\n<p>This code is suitable for inclusion in official documentation as it provides a straightforward and clear demonstration of how to use the <code>sndhdr</code> module to determine the format of audio files.</p>"
        },
        {
            "filename": "sunau - Read and write Sun AU files.md",
            "content": "<h1>sunau - Read and write Sun AU files</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#explanation\">Explanation:</a></li>\n</ol>\n<p>Below is a comprehensive set of code examples for the <code>sunau</code> module, which allows reading and writing Sun AU (Audio AUdio) files in Python. Each example includes comments to explain each step.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Importing the necessary module\nimport sunau\nimport wave\n\ndef read_sunau_file(file_path):\n    &quot;&quot;&quot;\n    Reads a Sun AU file and returns a SoundFile object.\n\n    Parameters:\n    - file_path (str): The path to the Sun AU file.\n\n    Returns:\n    - soundfile: A SoundFile object containing the audio data.\n    &quot;&quot;&quot;\n    # Open the Sun AU file in read mode\n    with sunau.open(file_path, 'r') as audio_file:\n        # Read all frames from the file\n        frames = audio_file.readframes(-1)\n\n        # Create a SoundFile object using the read frames and sample rate\n        soundfile = wave.Wave_read(audio_file.framerate, frames)\n\n    return soundfile\n\ndef write_sunau_file(file_path, frames, samplerate):\n    &quot;&quot;&quot;\n    Writes audio frames to a Sun AU file.\n\n    Parameters:\n    - file_path (str): The path where the Sun AU file will be saved.\n    - frames: An iterable of audio frames.\n    - samplerate (int): The sample rate of the audio data.\n    &quot;&quot;&quot;\n    # Open the Sun AU file in write mode\n    with sunau.open(file_path, 'w') as audio_file:\n        # Write all frames to the file\n        audio_file.writeframes(frames)\n\n    print(f&quot;Audio written to {file_path}&quot;)\n\n# Example usage\n\nif __name__ == &quot;__main__&quot;:\n    # Read a Sun AU file\n    read_sunau_example = read_sunau_file('example.au')\n    print(read_sunau_example.get_params())\n\n    # Write audio frames to a Sun AU file\n    write_sunau_example = b'...'  # This should be the actual bytes of your audio data\n    write_sunau_file('output.au', write_sunau_example, 44100)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ol>\n<li><strong>Reading a Sun AU File:</strong></li>\n<li>The <code>read_sunau_file</code> function opens a Sun AU file in read mode.</li>\n<li>It reads all frames from the file using the <code>readframes</code> method of the <code>sunau</code> object.</li>\n<li>\n<p>A <code>wave.Wave_read</code> object is created using the sample rate and frames read.</p>\n</li>\n<li>\n<p><strong>Writing a Sun AU File:</strong></p>\n</li>\n<li>The <code>write_sunau_file</code> function opens a Sun AU file in write mode.</li>\n<li>\n<p>It writes all frames to the file using the <code>writeframes</code> method of the <code>sunau</code> object.</p>\n</li>\n<li>\n<p><strong>Example Usage:</strong></p>\n</li>\n<li>The example usage demonstrates how to read and write a Sun AU file using the functions defined above.</li>\n<li>The actual audio data should be provided as bytes in the <code>write_sunau_file</code> function.</li>\n</ol>\n<p>This code provides a basic framework for working with Sun AU files, including reading and writing them. You can extend these examples by adding error handling, more complex audio processing, or additional features as needed.</p>"
        },
        {
            "filename": "wave - Read and write WAV files.md",
            "content": "<h1>wave - Read and write WAV files</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-reading-and-writing-basic-wav-files\">Example 1: Reading and Writing Basic WAV Files</a></li>\n<li><a href=\"#example-2-reading-and-writing-stereo-wav-files\">Example 2: Reading and Writing Stereo WAV Files</a></li>\n<li><a href=\"#example-3-reading-and-writing-files-in-different-sample-formats\">Example 3: Reading and Writing Files in Different Sample Formats</a></li>\n<li><a href=\"#example-4-handling-compression-in-wav-files\">Example 4: Handling Compression in WAV Files</a></li>\n</ol>\n<p>The <code>wave</code> module in Python provides a way to read from and write WAV files, which are a widely used format for storing audio data. Below are comprehensive examples demonstrating how to use various functionalities of the <code>wave</code> module. These examples include reading and writing basic audio files, handling stereo files, using different sample formats, and dealing with compression.</p>\n<h3>Example 1: Reading and Writing Basic WAV Files</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import wave\n\n# Function to read a WAV file\ndef read_wav(file_path):\n    # Open the WAV file in read mode\n    wav_file = wave.open(file_path, 'rb')\n\n    # Read the WAV header information\n    nchannels, sampwidth, framerate, nframes, comptype, compname = wav_file.getparams()\n\n    # Read the audio data as bytes\n    audio_data = wav_file.readframes(nframes)\n\n    # Close the file\n    wav_file.close()\n\n    return nchannels, sampwidth, framerate, nframes, audio_data\n\n# Function to write a WAV file\ndef write_wav(file_path, nchannels, sampwidth, framerate, nframes, audio_data):\n    # Open the WAV file in write mode\n    with wave.open(file_path, 'wb') as wav_file:\n        # Write the WAV header information\n        wav_file.setnchannels(nchannels)\n        wav_file.setsampwidth(sampwidth)\n        wav_file.setframerate(framerate)\n        wav_file.writeframes(audio_data)\n\n# Example usage\ninput_file = 'input.wav'\noutput_file = 'output.wav'\n\n# Read the input WAV file\nnchannels, sampwidth, framerate, nframes, audio_data = read_wav(input_file)\n\n# Write the output WAV file with same parameters\nwrite_wav(output_file, nchannels, sampwidth, framerate, nframes, audio_data)\n\nprint(f&quot;Read and written {output_file}&quot;)\n</code></pre>\n\n<h3>Example 2: Reading and Writing Stereo WAV Files</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import wave\n\ndef read_wav(file_path):\n    wav_file = wave.open(file_path, 'rb')\n    nchannels, sampwidth, framerate, nframes, comptype, compname = wav_file.getparams()\n    audio_data = wav_file.readframes(nframes)\n    wav_file.close()\n    return nchannels, sampwidth, framerate, nframes, audio_data\n\ndef write_wav(file_path, nchannels, sampwidth, framerate, nframes, audio_data):\n    with wave.open(file_path, 'wb') as wav_file:\n        wav_file.setnchannels(nchannels)\n        wav_file.setsampwidth(sampwidth)\n        wav_file.setframerate(framerate)\n        wav_file.writeframes(audio_data)\n\n# Example usage for stereo WAV file\ninput_stereo_file = 'input_stereo.wav'\noutput_stereo_file = 'output_stereo.wav'\n\n# Read the input stereo WAV file\nnchannels, sampwidth, framerate, nframes, audio_data = read_wav(input_stereo_file)\n\n# Write the output stereo WAV file with same parameters\nwrite_wav(output_stereo_file, nchannels, sampwidth, framerate, nframes, audio_data)\n\nprint(f&quot;Read and written {output_stereo_file}&quot;)\n</code></pre>\n\n<h3>Example 3: Reading and Writing Files in Different Sample Formats</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import wave\n\ndef read_wav(file_path):\n    wav_file = wave.open(file_path, 'rb')\n    nchannels, sampwidth, framerate, nframes, comptype, compname = wav_file.getparams()\n    audio_data = wav_file.readframes(nframes)\n    wav_file.close()\n    return nchannels, sampwidth, framerate, nframes, audio_data\n\ndef write_wav(file_path, nchannels, sampwidth, framerate, nframes, audio_data):\n    with wave.open(file_path, 'wb') as wav_file:\n        wav_file.setnchannels(nchannels)\n        wav_file.setsampwidth(sampwidth)\n        wav_file.setframerate(framerate)\n        wav_file.writeframes(audio_data)\n\n# Example usage for different sample formats (16-bit and 8-bit)\ninput_16bit_file = 'input_16bit.wav'\noutput_16bit_file = 'output_16bit.wav'\n\ninput_8bit_file = 'input_8bit.wav'\noutput_8bit_file = 'output_8bit.wav'\n\n# Read the input 16-bit WAV file\nnchannels, sampwidth_16bit, framerate, nframes_16bit, audio_data_16bit = read_wav(input_16bit_file)\n\n# Write the output 16-bit WAV file with same parameters\nwrite_wav(output_16bit_file, nchannels, sampwidth_16bit, framerate, nframes_16bit, audio_data_16bit)\n\nprint(f&quot;Read and written {output_16bit_file}&quot;)\n\n# Read the input 8-bit WAV file\nnchannels, sampwidth_8bit, framerate, nframes_8bit, audio_data_8bit = read_wav(input_8bit_file)\n\n# Write the output 8-bit WAV file with same parameters\nwrite_wav(output_8bit_file, nchannels, sampwidth_8bit, framerate, nframes_8bit, audio_data_8bit)\n\nprint(f&quot;Read and written {output_8bit_file}&quot;)\n</code></pre>\n\n<h3>Example 4: Handling Compression in WAV Files</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import wave\n\ndef read_wav(file_path):\n    wav_file = wave.open(file_path, 'rb')\n    nchannels, sampwidth, framerate, nframes, comptype, compname = wav_file.getparams()\n    audio_data = wav_file.readframes(nframes)\n    wav_file.close()\n    return nchannels, sampwidth, framerate, nframes, audio_data\n\ndef write_wav(file_path, nchannels, sampwidth, framerate, nframes, audio_data):\n    with wave.open(file_path, 'wb') as wav_file:\n        wav_file.setnchannels(nchannels)\n        wav_file.setsampwidth(sampwidth)\n        wav_file.setframerate(framerate)\n        wav_file.writeframes(audio_data)\n\n# Example usage for compressed WAV file (e.g., using Compressed PCM)\ninput_compressed_file = 'compressed_input.wav'\noutput_compressed_file = 'compressed_output.wav'\n\n# Read the input compressed WAV file\nnchannels, sampwidth, framerate, nframes, comptype, compname = read_wav(input_compressed_file)\n\n# Write the output compressed WAV file with same parameters\nwrite_wav(output_compressed_file, nchannels, sampwidth, framerate, nframes, audio_data)\n\nprint(f&quot;Read and written {output_compressed_file}&quot;)\n</code></pre>\n\n<p>These examples demonstrate basic operations for reading and writing WAV files using the <code>wave</code> module. You can extend these examples to handle more complex scenarios, such as multi-channel audio or different sample rates.</p>"
        }
    ],
    "Networking and Interprocess Communication": [
        {
            "filename": "asyncio - Asynchronous I O.md",
            "content": "<h1>asyncio - Asynchronous I/O</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-basic-asynchronous-function-with-a-delay\">Example 1: Basic Asynchronous Function with a Delay</a></li>\n<li><a href=\"#example-2-using-asyncio-tasks\">Example 2: Using Asyncio Tasks</a></li>\n<li><a href=\"#example-3-handling-exceptions-in-asynchronous-functions\">Example 3: Handling Exceptions in Asynchronous Functions</a></li>\n<li><a href=\"#example-4-using-event-loops\">Example 4: Using Event Loops</a></li>\n<li><a href=\"#example-5-asynchronous-io-with-asyncioopen_file\">Example 5: Asynchronous I/O with <code>asyncio.open_file</code></a></li>\n<li><a href=\"#example-6-asynchronous-io-with-aiohttp-for-web-requests\">Example 6: Asynchronous I/O with <code>aiohttp</code> for Web Requests</a></li>\n<li><a href=\"#example-7-asynchronous-io-with-asyncpg-for-database-operations\">Example 7: Asynchronous I/O with <code>asyncpg</code> for Database Operations</a></li>\n<li><a href=\"#example-8-asynchronous-io-with-psycopg2-for-database-operations\">Example 8: Asynchronous I/O with <code>psycopg2</code> for Database Operations</a></li>\n<li><a href=\"#example-9-asynchronous-io-with-gevent-for-non-blocking-http-requests\">Example 9: Asynchronous I/O with <code>gevent</code> for Non-blocking HTTP Requests</a></li>\n<li><a href=\"#example-10-asynchronous-io-with-gevent-for-non-blocking-database-operations\">Example 10: Asynchronous I/O with <code>gevent</code> for Non-blocking Database Operations</a></li>\n</ol>\n<p>Below are comprehensive and well-documented code examples for various functionalities provided by the <code>asyncio</code> module in Python 3.12. Each example is designed to be clear, concise, and follows best practices for inclusion in official documentation.</p>\n<h3>Example 1: Basic Asynchronous Function with a Delay</h3>\n<p>This example demonstrates how to define an asynchronous function that uses <code>await</code> to sleep for a specified amount of time.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import asyncio\n\nasync def print_after(delay, message):\n    await asyncio.sleep(delay)\n    print(message)\n\n# Running the coroutine\nasyncio.run(print_after(2, &quot;Hello after 2 seconds&quot;))\n</code></pre>\n\n<h3>Example 2: Using Asyncio Tasks</h3>\n<p>This example shows how to use <code>asyncio.create_task</code> to schedule multiple asynchronous tasks.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import asyncio\n\nasync def task1():\n    await asyncio.sleep(1)\n    print(&quot;Task 1 completed&quot;)\n\nasync def task2():\n    await asyncio.sleep(2)\n    print(&quot;Task 2 completed&quot;)\n\nasync def main():\n    await asyncio.gather(task1(), task2())\n\n# Running the tasks\nasyncio.run(main())\n</code></pre>\n\n<h3>Example 3: Handling Exceptions in Asynchronous Functions</h3>\n<p>This example demonstrates how to handle exceptions within an asynchronous function.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import asyncio\n\nasync def failing_task():\n    await asyncio.sleep(1)\n    raise ValueError(&quot;An error occurred&quot;)\n\nasync def main():\n    try:\n        await failing_task()\n    except Exception as e:\n        print(f&quot;Caught exception: {e}&quot;)\n\n# Running the coroutine\nasyncio.run(main())\n</code></pre>\n\n<h3>Example 4: Using Event Loops</h3>\n<p>This example illustrates how to manually create and manage an event loop.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import asyncio\n\nasync def run_until_complete():\n    await asyncio.sleep(1)\n    print(&quot;Loop completed&quot;)\n\nloop = asyncio.get_event_loop()\nloop.create_task(run_until_complete())\nloop.run_forever()\n\n# To stop the loop, you would typically use loop.stop() and call loop.close(), but here we assume it runs indefinitely\n</code></pre>\n\n<h3>Example 5: Asynchronous I/O with <code>asyncio.open_file</code></h3>\n<p>This example shows how to perform asynchronous file I/O using <code>asyncio.open_file</code>.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import asyncio\n\nasync def read_file(file_path):\n    try:\n        async with open(file_path, 'r') as file:\n            content = await file.read()\n        return content\n    except FileNotFoundError:\n        return f&quot;File {file_path} not found.&quot;\n\n# Running the coroutine\nfile_content = asyncio.run(read_file('example.txt'))\nprint(file_content)\n</code></pre>\n\n<h3>Example 6: Asynchronous I/O with <code>aiohttp</code> for Web Requests</h3>\n<p>This example demonstrates how to use <code>aiohttp</code> in conjunction with <code>asyncio</code> to make asynchronous HTTP requests.</p>\n<p>First, ensure you have <code>aiohttp</code> installed:</p>\n<pre class=\"codehilite\"><code class=\"language-bash\">pip install aiohttp\n</code></pre>\n\n<p>Then, here's the code example:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import asyncio\nimport aiohttp\n\nasync def fetch(session, url):\n    async with session.get(url) as response:\n        return await response.text()\n\nasync def main():\n    async with aiohttp.ClientSession() as session:\n        html = await fetch(session, 'https://www.example.com')\n        print(html)\n\n# Running the coroutine\nasyncio.run(main())\n</code></pre>\n\n<h3>Example 7: Asynchronous I/O with <code>asyncpg</code> for Database Operations</h3>\n<p>This example demonstrates how to use <code>asyncpg</code> in conjunction with <code>asyncio</code> to perform asynchronous database operations.</p>\n<p>First, ensure you have <code>asyncpg</code> installed:</p>\n<pre class=\"codehilite\"><code class=\"language-bash\">pip install asyncpg\n</code></pre>\n\n<p>Then, here's the code example:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import asyncio\nimport asyncpg\n\nasync def fetch_data(connection):\n    query = 'SELECT * FROM my_table'\n    result = await connection.fetch(query)\n    return result\n\nasync def main():\n    conn_str = 'postgresql://user:password@localhost/my_database'\n    retries = 5\n    for attempt in range(retries):\n        try:\n            pool = await asyncpg.create_pool(conn_str)\n            break\n        except (OSError, asyncpg.exceptions.ConnectionDoesNotExistError) as e:\n            print(f&quot;Attempt {attempt + 1} failed: {e}&quot;)\n            if attempt &lt; retries - 1:\n                await asyncio.sleep(2)\n            else:\n                print(&quot;Failed to connect to the database after several attempts.&quot;)\n                return\n\n    try:\n        data = await fetch_data(pool)\n        for row in data:\n            print(row)\n    finally:\n        await pool.close()\n\n# Running the coroutine\nasyncio.run(main())\n</code></pre>\n\n<h3>Example 8: Asynchronous I/O with <code>psycopg2</code> for Database Operations</h3>\n<p>This example demonstrates how to use <code>psycopg2</code> in conjunction with <code>asyncio</code> to perform asynchronous database operations.</p>\n<p>First, ensure you have <code>psycopg2</code> installed:</p>\n<pre class=\"codehilite\"><code class=\"language-bash\">pip install psycopg2-binary\n</code></pre>\n\n<p>Then, here's the code example:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import asyncio\nimport asyncpg\nimport asyncio\n\nasync def fetch_data(conn):\n    query = 'SELECT * FROM my_table'\n    result = await conn.fetch(query)\n    return result\n\nasync def main():\n    conn_str = 'postgresql://username:password@127.0.0.1/my_database'\n    conn = await asyncpg.connect(conn_str)\n    data = await fetch_data(conn)\n    for row in data:\n        print(row)\n    await conn.close()\n\n# Running the coroutine\nasyncio.run(main())\n</code></pre>\n\n<h3>Example 9: Asynchronous I/O with <code>gevent</code> for Non-blocking HTTP Requests</h3>\n<p>This example demonstrates how to use <code>gevent</code> along with <code>aiohttp</code> to perform asynchronous HTTP requests.</p>\n<p>First, ensure you have <code>gevent</code> and <code>aiohttp</code> installed:</p>\n<pre class=\"codehilite\"><code class=\"language-bash\">pip install gevent aiohttp\n</code></pre>\n\n<p>Then, here's the code example:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import asyncpg\nimport asyncio\n\nasync def fetch_data(conn):\n    query = 'SELECT * FROM my_table'\n    result = await conn.fetch(query)\n    return result\n\nasync def main():\n    conn_str = 'postgresql://username:password@127.0.0.1/my_database'\n    try:\n        conn = await asyncpg.connect(conn_str)\n        data = await fetch_data(conn)\n        for row in data:\n            print(row)\n        await conn.close()\n    except (asyncpg.PostgresError, OSError) as e:\n        print(f&quot;Error connecting to the database: {e}&quot;)\n\n# Running the coroutine\nasyncio.run(main())\n</code></pre>\n\n<h3>Example 10: Asynchronous I/O with <code>gevent</code> for Non-blocking Database Operations</h3>\n<p>This example demonstrates how to use <code>gevent</code> along with <code>psycopg2</code> to perform asynchronous database operations.</p>\n<p>First, ensure you have <code>gevent</code> and <code>psycopg2-binary</code> installed:</p>\n<pre class=\"codehilite\"><code class=\"language-bash\">pip install gevent psycopg2-binary\n</code></pre>\n\n<p>Then, here's the code example:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import gevent\nfrom gevent import monkey\nmonkey.patch_all()\nimport psycopg2\nfrom psycopg2 import extras\n\ndef fetch_data(conn):\n    cursor = conn.cursor(cursor_factory=extras.RealDictCursor)\n    query = 'SELECT * FROM my_table'\n    cursor.execute(query)\n    result = cursor.fetchall()\n    cursor.close()\n    return result\n\ndef main():\n    conn_str = 'dbname=my_database user=username password=password host=localhost'\n    conn = psycopg2.connect(conn_str)\n    data = fetch_data(conn)\n    for row in data:\n        print(row)\n    conn.close()\n\nif __name__ == &quot;__main__&quot;:\n    try:\n        # Running the coroutine\n        gevent.spawn(main).join()\n    except KeyboardInterrupt:\n        print(&quot;Process interrupted by user&quot;)\n</code></pre>\n\n<p>These examples cover a range of asynchronous I/O functionalities available in Python's <code>asyncio</code> module, including basic tasks, handling exceptions, managing event loops, performing file I/O, making HTTP requests, and interacting with databases using different libraries. Each example is designed to be clear and self-contained, providing a starting point for developers looking to learn about asynchronous programming in Python.</p>"
        },
        {
            "filename": "mmap - Memory-mapped file support.md",
            "content": "<h1>mmap - Memory-mapped file support</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-basic-memory-mapping\">Example 1: Basic Memory Mapping</a></li>\n<li><a href=\"#example-2-synchronization-with-file\">Example 2: Synchronization with File</a></li>\n<li><a href=\"#example-3-writing-and-reading-large-files\">Example 3: Writing and Reading Large Files</a></li>\n<li><a href=\"#example-4-memory-mapping-multiple-regions\">Example 4: Memory-Mapping Multiple Regions</a></li>\n<li><a href=\"#example-5-using-memory-mapped-files-with-multiple-processes\">Example 5: Using Memory-Mapped Files with Multiple Processes</a></li>\n</ol>\n<p>The <code>mmap</code> module in Python allows you to memory-map files, which means that it creates a view of a file as if it were an array of bytes in memory. This can be useful for working with large files efficiently without loading the entire file into memory at once.</p>\n<p>Here are some code examples demonstrating various functionalities of the <code>mmap</code> module:</p>\n<h3>Example 1: Basic Memory Mapping</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import mmap\nimport os\n\n# Path to a sample file\nfile_path = 'example.txt'\n\n# Create or open the file in binary mode for reading and writing\nwith open(file_path, 'r+b') as f:\n    # Create a memory-mapped file object\n    mm = mmap.mmap(f.fileno(), 0)\n\n    # Write some data to the memory-mapped area\n    mm.write(b'Hello, world!')\n\n    # Move the cursor to the beginning of the mapped region\n    mm.seek(0)\n\n    # Read the data from the memory-mapped area\n    print(mm.read().decode('utf-8'))\n\n    # Close the memory mapping\n    mm.close()\n</code></pre>\n\n<h3>Example 2: Synchronization with File</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import mmap\nimport os\n\n# Path to a sample file\nfile_path = 'example.txt'\n\n# Create or open the file in binary mode for reading and writing\nwith open(file_path, 'r+b') as f:\n    # Create a memory-mapped file object\n    mm = mmap.mmap(f.fileno(), 0)\n\n    # Write some data to the memory-mapped area\n    mm.write(b'Hello, synchronization!')\n\n    # Sync the memory-mapped area with the file's contents\n    mm.flush()\n\n    # Seek back to the beginning of the mapped region\n    mm.seek(0)\n\n    # Read the data from the memory-mapped area\n    print(mm.read().decode('utf-8'))\n\n    # Close the memory mapping\n    mm.close()\n</code></pre>\n\n<h3>Example 3: Writing and Reading Large Files</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import mmap\nimport os\n\n# Path to a large sample file\nfile_path = 'large_file.txt'\n\n# Create or open the file in binary mode for reading and writing\nwith open(file_path, 'r+b') as f:\n    # Create a memory-mapped file object\n    mm = mmap.mmap(f.fileno(), 0)\n\n    # Write some large data to the memory-mapped area\n    mm.write(b'Large data repeated many times')\n\n    # Sync the memory-mapped area with the file's contents\n    mm.flush()\n\n    # Seek back to the beginning of the mapped region\n    mm.seek(0)\n\n    # Read the entire content of the memory-mapped area\n    large_data = mm.read()\n\n    # Close the memory mapping\n    mm.close()\n</code></pre>\n\n<h3>Example 4: Memory-Mapping Multiple Regions</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import mmap\nimport os\n\n# Path to a sample file\nfile_path = 'example.txt'\n\n# Create or open the file in binary mode for reading and writing\nwith open(file_path, 'r+b') as f:\n    # Create a memory-mapped file object\n    mm = mmap.mmap(f.fileno(), 0)\n\n    # Write some data to the first region\n    mm.write(b'First region: Hello, ')\n\n    # Seek back to the beginning of the mapped region\n    mm.seek(0)\n\n    # Read and print the first region\n    print(mm.read(13).decode('utf-8'))\n\n    # Seek to the second position in the file\n    f.seek(14)\n\n    # Create a new memory-mapped object for the remaining data\n    mm2 = mmap.mmap(f.fileno(), os.path.getsize(file_path) - 14, offset=14)\n\n    # Read and print the second region\n    print(mm2.read().decode('utf-8'))\n\n    # Close both memory mappings\n    mm.close()\n    mm2.close()\n</code></pre>\n\n<h3>Example 5: Using Memory-Mapped Files with Multiple Processes</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import mmap\nimport os\nimport multiprocessing\n\ndef process_data(data):\n    with open('data.txt', 'r+b') as f:\n        mm = mmap.mmap(f.fileno(), 0)\n        mm.write(data)\n        mm.flush()\n        mm.seek(0)\n        print(mm.read().decode('utf-8'))\n        mm.close()\n\n# Data to be processed\ndata_to_process = b'Process data example'\n\n# Create a process and pass the data to it\nprocess = multiprocessing.Process(target=process_data, args=(data_to_process,))\nprocess.start()\nprocess.join()\n</code></pre>\n\n<p>These examples demonstrate how to use the <code>mmap</code> module for various operations such as writing to, reading from, and synchronizing memory-mapped files. Each example includes comments explaining the steps involved.</p>"
        },
        {
            "filename": "select - Waiting for I O completion.md",
            "content": "<h1>select - Waiting for I/O completion</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-basic-usage\">1. Basic Usage</a></li>\n<li><a href=\"#example-monitoring-multiple-sockets-for-read-operations\">Example: Monitoring Multiple Sockets for Read Operations</a></li>\n<li><a href=\"#2-handling-write-operations\">2. Handling Write Operations</a></li>\n<li><a href=\"#example-monitoring-multiple-sockets-for-write-operations\">Example: Monitoring Multiple Sockets for Write Operations</a></li>\n<li><a href=\"#3-monitoring-multiple-file-descriptors\">3. Monitoring Multiple File Descriptors</a></li>\n<li><a href=\"#example-using-select-with-files-and-sockets\">Example: Using <code>select</code> with Files and Sockets</a></li>\n<li><a href=\"#4-monitoring-multiple-file-descriptors-with-non-blocking-io\">4. Monitoring Multiple File Descriptors with Non-blocking I/O</a></li>\n<li><a href=\"#example-using-select-with-pipes-and-sockets-in-non-blocking-mode\">Example: Using <code>select</code> with Pipes and Sockets in Non-blocking Mode</a></li>\n<li><a href=\"#5-using-select-with-timeout\">5. Using <code>select</code> with Timeout</a></li>\n<li><a href=\"#example-monitoring-sockets-with-a-timeout\">Example: Monitoring Sockets with a Timeout</a></li>\n</ol>\n<p>The <code>select</code> module in Python is used to monitor multiple file descriptors (like sockets, pipes, etc.) for read or write operations, allowing an application to wait until one or more of them are ready for I/O. This is particularly useful in network programming where you need to handle multiple connections simultaneously.</p>\n<p>Here's a comprehensive guide and examples for using the <code>select</code> module in Python:</p>\n<h3>1. Basic Usage</h3>\n<h4>Example: Monitoring Multiple Sockets for Read Operations</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import select\nimport socket\n\ndef monitor_sockets(sockets):\n    # Create a list of read-ready sockets\n    readable, _, _ = select.select(sockets, [], [])\n\n    for sock in readable:\n        data = sock.recv(1024)\n        if not data:\n            print(f&quot;Connection closed by {sock.getpeername()}&quot;)\n            sock.close()\n        else:\n            print(f&quot;Received data from {sock.getpeername()}: {data.decode()}&quot;)\n\nif __name__ == &quot;__main__&quot;:\n    # Create a list of sockets to monitor\n    sockets = [\n        socket.socket(socket.AF_INET, socket.SOCK_STREAM),\n        socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    ]\n\n    for sock in sockets:\n        sock.setblocking(False)  # Set non-blocking mode\n        sock.connect_ex(('localhost', 12345))  # Connect to a server\n\n    while True:\n        monitor_sockets(sockets)\n</code></pre>\n\n<h3>2. Handling Write Operations</h3>\n<h4>Example: Monitoring Multiple Sockets for Write Operations</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import select\nimport socket\nimport threading\n\ndef write_to_socket(sock, data):\n    sock.sendall(data.encode())\n    print(f&quot;Sent {data} to {sock.getpeername()}&quot;)\n\ndef monitor_sockets(sockets):\n    # Create a list of write-ready sockets and their associated data\n    writable, _, _ = select.select([], sockets, [])\n\n    for sock in writable:\n        data = f&quot;Message from {threading.current_thread().name}&quot;\n        write_to_socket(sock, data)\n\nif __name__ == &quot;__main__&quot;:\n    # Create a list of sockets to monitor\n    sockets = [\n        socket.socket(socket.AF_INET, socket.SOCK_STREAM),\n        socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    ]\n\n    for sock in sockets:\n        sock.setblocking(False)  # Set non-blocking mode\n        sock.connect_ex(('localhost', 12345))  # Connect to a server\n\n    # Start a thread to send data to each socket periodically\n    threads = []\n    for i, sock in enumerate(sockets):\n        t = threading.Thread(target=write_to_socket, args=(sock, f&quot;Thread {i}&quot;))\n        threads.append(t)\n        t.start()\n\n    while True:\n        monitor_sockets(sockets)\n</code></pre>\n\n<h3>3. Monitoring Multiple File Descriptors</h3>\n<h4>Example: Using <code>select</code> with Files and Sockets</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import select\nimport socket\nimport time\n\ndef read_from_file(file, timeout=5):\n    print(f&quot;Reading from {file.name}&quot;)\n    try:\n        data = file.read(1024)\n        if not data:\n            print(&quot;File is closed&quot;)\n        else:\n            print(f&quot;Read: {data.decode()}&quot;)\n    except Exception as e:\n        print(f&quot;Error reading from file: {e}&quot;)\n\ndef monitor_file(file, sockets):\n    readable, _, _ = select.select([file], [], [])\n\n    if file in readable:\n        read_from_file(file)\n\nif __name__ == &quot;__main__&quot;:\n    # Create a socket and connect to it\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    sock.connect_ex(('localhost', 12345))\n\n    # Open a file for reading\n    with open('example.txt', 'r') as file:\n        while True:\n            monitor_file(file, [sock])\n            time.sleep(1)\n</code></pre>\n\n<h3>4. Monitoring Multiple File Descriptors with Non-blocking I/O</h3>\n<h4>Example: Using <code>select</code> with Pipes and Sockets in Non-blocking Mode</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import select\nimport os\nimport socket\nimport threading\n\ndef read_from_pipe(pipe):\n    try:\n        data = os.read(pipe, 1024)\n        if not data:\n            print(&quot;Pipe closed&quot;)\n        else:\n            print(f&quot;Read: {data.decode()}&quot;)\n    except Exception as e:\n        print(f&quot;Error reading from pipe: {e}&quot;)\n\ndef monitor_pipes(pipes, sockets):\n    readable, _, _ = select.select([], pipes, [])\n\n    for pipe in readable:\n        read_from_pipe(pipe)\n\nif __name__ == &quot;__main__&quot;:\n    # Create a socket and connect to it\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    sock.connect_ex(('localhost', 12345))\n\n    # Create pipes for communication between threads\n    pipe_read, pipe_write = os.pipe()\n\n    def write_to_pipe(pipe):\n        try:\n            data = b&quot;Message from thread&quot;\n            os.write(pipe, data)\n        except Exception as e:\n            print(f&quot;Error writing to pipe: {e}&quot;)\n\n    # Start a thread to write to the pipe\n    t = threading.Thread(target=write_to_pipe, args=(pipe_write,))\n    t.start()\n\n    while True:\n        monitor_pipes([pipe_read], [sock])\n</code></pre>\n\n<h3>5. Using <code>select</code> with Timeout</h3>\n<h4>Example: Monitoring Sockets with a Timeout</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import select\nimport socket\nimport time\n\ndef read_from_socket(sock, timeout=10):\n    try:\n        data = sock.recv(1024)\n        if not data:\n            print(&quot;Connection closed&quot;)\n        else:\n            print(f&quot;Received data: {data.decode()}&quot;)\n    except Exception as e:\n        print(f&quot;Error reading from socket: {e}&quot;)\n\ndef monitor_sockets(sockets, timeout):\n    # Create a list of read-ready sockets\n    readable, _, _ = select.select(sockets, [], [], timeout)\n\n    for sock in readable:\n        read_from_socket(sock)\n\nif __name__ == &quot;__main__&quot;:\n    # Create a list of sockets to monitor\n    sockets = [\n        socket.socket(socket.AF_INET, socket.SOCK_STREAM),\n        socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    ]\n\n    for sock in sockets:\n        sock.setblocking(False)  # Set non-blocking mode\n        sock.connect_ex(('localhost', 12345))  # Connect to a server\n\n    while True:\n        monitor_sockets(sockets, 10)\n</code></pre>\n\n<h3>Conclusion</h3>\n<p>The <code>select</code> module is a powerful tool for I/O multiplexing in Python. It allows you to efficiently manage multiple file descriptors, which is particularly useful in scenarios where your application needs to handle multiple connections or other resources concurrently. The examples provided demonstrate how to use <code>select</code> with sockets, files, and pipes, along with handling non-blocking I/O and timeouts.</p>"
        },
        {
            "filename": "selectors - High-level I O multiplexing.md",
            "content": "<h1>selectors - High-level I/O multiplexing</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-basic-usage\">1. Basic Usage</a></li>\n<li><a href=\"#2-using-eventloop-and-selector\">2. Using <code>EventLoop</code> and <code>Selector</code></a></li>\n<li><a href=\"#3-handling-multiple-sockets-and-events\">3. Handling Multiple Sockets and Events</a></li>\n<li><a href=\"#4-using-selector-with-non-blocking-sockets\">4. Using <code>Selector</code> with Non-Blocking Sockets</a></li>\n<li><a href=\"#5-using-selector-with-timed-events\">5. Using <code>Selector</code> with Timed Events</a></li>\n<li><a href=\"#6-using-selector-with-priority-queues\">6. Using <code>Selector</code> with Priority Queues</a></li>\n</ol>\n<p>Below is a comprehensive set of code examples demonstrating various functionalities of the <code>selectors</code> module in Python 3.12, along with comments explaining each step.</p>\n<h3>1. Basic Usage</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import selectors\n\n# Create a selector instance\nsel = selectors.DefaultSelector()\n\ndef accept(sock, mask):\n    # Accept a new connection\n    conn, addr = sock.accept()\n    print(f'Accepted {addr}')\n\n    # Register the connection with the selector\n    sel.register(conn, selectors.EVENT_READ, read)\n\ndef read(conn, mask):\n    # Read data from the connection\n    data = conn.recv(1024)\n    if data:\n        print('Received', repr(data))\n        conn.sendall(data)  # Echo back to client\n    else:\n        print('Closing connection')\n        sel.unregister(conn)\n        conn.close()\n\ndef main():\n    # Create a TCP/IP socket\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n    # Bind the socket to the address and port\n    server_socket.bind(('localhost', 12345))\n\n    # Enable reuse of the socket address\n    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n\n    # Listen for incoming connections\n    server_socket.listen(10)\n    print('Server listening on port 12345')\n\n    # Register the server socket with the selector\n    sel.register(server_socket, selectors.EVENT_READ, accept)\n\n    while True:\n        # Wait for an event to occur on one of the registered file descriptors\n        events = sel.select(timeout=None)\n\n        for key, mask in events:\n            callback = key.data\n            callback(key.fileobj, mask)\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n\n<h3>2. Using <code>EventLoop</code> and <code>Selector</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import selectors\n\nclass EchoServer:\n    def __init__(self):\n        self.sel = selectors.DefaultSelector()\n\n    def run(self, host='localhost', port=12345):\n        server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n        # Bind the socket to the address and port\n        server_socket.bind((host, port))\n\n        # Enable reuse of the socket address\n        server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n\n        # Listen for incoming connections\n        server_socket.listen(10)\n        print(f'Server listening on {host}:{port}')\n\n        # Register the server socket with the selector\n        self.sel.register(server_socket, selectors.EVENT_READ, self.accept)\n\n    def accept(self, sock, mask):\n        # Accept a new connection\n        conn, addr = sock.accept()\n        print(f'Accepted {addr}')\n\n        # Register the connection with the selector\n        self.sel.register(conn, selectors.EVENT_READ | selectors.EVENT_WRITE, self.read_write)\n\n    def read_write(self, conn, mask):\n        if mask &amp; selectors.EVENT_READ:\n            # Read data from the connection\n            data = conn.recv(1024)\n            if data:\n                print('Received', repr(data))\n                conn.sendall(data)  # Echo back to client\n            else:\n                print('Closing connection')\n                self.sel.unregister(conn)\n                conn.close()\n\n    def main(self):\n        import asyncio\n\n        loop = asyncio.get_event_loop()\n        server_task = loop.run_until_complete(\n            self.sel.serve_forever(host='localhost', port=12345)\n        )\n\nif __name__ == '__main__':\n    EchoServer().run()\n</code></pre>\n\n<h3>3. Handling Multiple Sockets and Events</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import selectors\nimport socket\n\ndef handle_socket(server_socket, mask):\n    if mask &amp; selectors.EVENT_READ:\n        # Accept a new connection\n        conn, addr = server_socket.accept()\n        print(f'Accepted {addr}')\n\n        # Register the connection with the selector\n        sel.register(conn, selectors.EVENT_READ | selectors.EVENT_WRITE, read_write)\n\ndef read_write(conn, mask):\n    if mask &amp; selectors.EVENT_READ:\n        # Read data from the connection\n        data = conn.recv(1024)\n        if data:\n            print('Received', repr(data))\n            conn.sendall(data)  # Echo back to client\n        else:\n            print('Closing connection')\n            sel.unregister(conn)\n            conn.close()\n    elif mask &amp; selectors.EVENT_WRITE:\n        # Write some data to the connection\n        conn.send(b'Hello, client!')\n\ndef main():\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n    # Bind the socket to the address and port\n    server_socket.bind(('localhost', 12345))\n\n    # Enable reuse of the socket address\n    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n\n    # Listen for incoming connections\n    server_socket.listen(10)\n    print(f'Server listening on port 12345')\n\n    sel = selectors.DefaultSelector()\n\n    # Register the server socket with the selector\n    sel.register(server_socket, selectors.EVENT_READ, handle_socket)\n\n    while True:\n        # Wait for an event to occur on one of the registered file descriptors\n        events = sel.select(timeout=None)\n\n        for key, mask in events:\n            callback = key.data\n            callback(key.fileobj, mask)\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n\n<h3>4. Using <code>Selector</code> with Non-Blocking Sockets</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import selectors\nimport socket\n\ndef handle_socket(sock, mask):\n    if mask &amp; selectors.EVENT_READ:\n        # Read data from the connection\n        data = sock.recv(1024)\n        if data:\n            print('Received', repr(data))\n            sock.sendall(data)  # Echo back to client\n        else:\n            print('Closing connection')\n            sel.unregister(sock)\n            sock.close()\n\ndef main():\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n    # Bind the socket to the address and port\n    server_socket.bind(('localhost', 12345))\n\n    # Enable reuse of the socket address\n    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n\n    # Listen for incoming connections\n    server_socket.listen(10)\n    print(f'Server listening on port 12345')\n\n    sel = selectors.DefaultSelector()\n\n    # Register the server socket with the selector\n    sel.register(server_socket, selectors.EVENT_READ, handle_socket)\n\n    while True:\n        # Wait for an event to occur on one of the registered file descriptors\n        events = sel.select(timeout=None)\n\n        for key, mask in events:\n            callback = key.data\n            callback(key.fileobj, mask)\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n\n<h3>5. Using <code>Selector</code> with Timed Events</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import selectors\nimport socket\nimport time\n\ndef handle_socket(sock, mask):\n    if mask &amp; selectors.EVENT_READ:\n        # Read data from the connection\n        data = sock.recv(1024)\n        if data:\n            print('Received', repr(data))\n            sock.sendall(data)  # Echo back to client\n        else:\n            print('Closing connection')\n            sel.unregister(sock)\n            sock.close()\n\ndef check_timeouts(events):\n    for key, mask in events:\n        callback = key.data\n        try:\n            callback()\n        except Exception as e:\n            print(f'Error from {key.fileobj}: {e}')\n            sel.unregister(key.fileobj)\n\ndef main():\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n    # Bind the socket to the address and port\n    server_socket.bind(('localhost', 12345))\n\n    # Enable reuse of the socket address\n    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n\n    # Listen for incoming connections\n    server_socket.listen(10)\n    print(f'Server listening on port 12345')\n\n    sel = selectors.DefaultSelector()\n\n    # Register the server socket with the selector\n    sel.register(server_socket, selectors.EVENT_READ, handle_socket)\n\n    while True:\n        # Wait for an event to occur on one of the registered file descriptors\n        events = sel.select(timeout=1)\n\n        # Check if any timed out callbacks need to be executed\n        check_timeouts(events)\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n\n<h3>6. Using <code>Selector</code> with Priority Queues</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import selectors\nimport socket\n\ndef handle_socket(sock, mask):\n    if mask &amp; selectors.EVENT_READ:\n        # Read data from the connection\n        data = sock.recv(1024)\n        if data:\n            print('Received', repr(data))\n            sock.sendall(data)  # Echo back to client\n        else:\n            print('Closing connection')\n            sel.unregister(sock)\n            sock.close()\n\ndef main():\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n    # Bind the socket to the address and port\n    server_socket.bind(('localhost', 12345))\n\n    # Enable reuse of the socket address\n    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n\n    # Listen for incoming connections\n    server_socket.listen(10)\n    print(f'Server listening on port 12345')\n\n    sel = selectors.DefaultSelector()\n\n    # Register the server socket with the selector\n    sel.register(server_socket, selectors.EVENT_READ, handle_socket)\n\n    while True:\n        # Wait for an event to occur on one of the registered file descriptors\n        events = sel.select(timeout=None)\n\n        # Process events in order of priority (if needed)\n        for key, mask in events:\n            callback = key.data\n            try:\n                callback()\n            except Exception as e:\n                print(f'Error from {key.fileobj}: {e}')\n                sel.unregister(key.fileobj)\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n\n<p>These examples demonstrate various use cases for the <code>selectors</code> module in Python, including handling multiple connections with different types of events (read, write, etc.), using timed events, and prioritizing event processing. Each example is designed to illustrate a specific feature or scenario within the <code>selectors</code> API.</p>"
        },
        {
            "filename": "signal - Set handlers for asynchronous events.md",
            "content": "<h1>signal - Set handlers for asynchronous events</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-handling-sigint-ctrlc\">Example 1: Handling SIGINT (Ctrl+C)</a></li>\n<li><a href=\"#example-2-handling-sighup\">Example 2: Handling SIGHUP</a></li>\n<li><a href=\"#example-3-sending-signals-to-a-process\">Example 3: Sending Signals to a Process</a></li>\n<li><a href=\"#example-4-handling-signals-in-a-multi-threaded-application\">Example 4: Handling Signals in a Multi-Threaded Application</a></li>\n<li><a href=\"#example-5-handling-signals-with-a-custom-signal-class\">Example 5: Handling Signals with a Custom Signal Class</a></li>\n</ol>\n<p>The <code>signal</code> module in Python provides a way to handle signals raised by the operating system, such as SIGINT (CTRL+C) or SIGHUP (hangup). These signals can be used to interrupt running processes, request termination, or perform cleanup actions before exiting.</p>\n<p>Here are comprehensive examples of how to use the <code>signal</code> module:</p>\n<h3>Example 1: Handling SIGINT (Ctrl+C)</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import signal\n\ndef handle_sigint(signum, frame):\n    print(&quot;Received SIGINT (CTRL+C), cleaning up...&quot;)\n    # Perform any necessary cleanup operations here\n    # For example, closing file handles, releasing resources, etc.\n\n# Register the handler for SIGINT\nsignal.signal(signal.SIGINT, handle_sigint)\n\nprint(&quot;Press Ctrl+C to send a SIGINT signal.&quot;)\ninput()  # This will block until the user presses CTRL+C\n</code></pre>\n\n<h3>Example 2: Handling SIGHUP</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import signal\n\ndef handle_sighup(signum, frame):\n    print(&quot;Received SIGHUP (hangup), performing graceful termination...&quot;)\n    # Perform any necessary shutdown or cleanup operations here\n    # For example, saving data to a file, releasing connections, etc.\n\n# Register the handler for SIGHUP\nsignal.signal(signal.SIGHUP, handle_sighup)\n\nprint(&quot;This program will continue running until you terminate it manually.&quot;)\ninput()  # This will block until the user terminates the program\n</code></pre>\n\n<h3>Example 3: Sending Signals to a Process</h3>\n<p>You can send signals to another process using the <code>os.kill()</code> function from the <code>os</code> module. Here's an example:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\nimport signal\n\n# Function to simulate a simple server that listens for SIGINT and prints messages\ndef server_process():\n    while True:\n        try:\n            print(&quot;Server is running...&quot;)\n            # Simulate some work\n            import time\n            time.sleep(2)\n        except KeyboardInterrupt:\n            print(&quot;Server received SIGINT, stopping gracefully.&quot;)\n            break\n\n# Start the server process in a separate thread or process\nimport threading\nserver_thread = threading.Thread(target=server_process)\nserver_thread.start()\n\n# Function to send SIGINT to the server process\ndef send_sigint_to_server():\n    try:\n        # Find the process ID of the server thread\n        server_pid = os.getpid(server_thread.ident)\n\n        # Send SIGINT to the server process\n        print(f&quot;Sending SIGINT to PID {server_pid}&quot;)\n        os.kill(server_pid, signal.SIGINT)\n    except OSError as e:\n        print(f&quot;Error sending SIGINT: {e}&quot;)\n\n# Simulate a user pressing CTRL+C on the server\nsend_sigint_to_server()\n\n# Wait for the server process to finish\nserver_thread.join()\n</code></pre>\n\n<h3>Example 4: Handling Signals in a Multi-Threaded Application</h3>\n<p>In a multi-threaded application, you can handle signals differently depending on whether they should be propagated to all threads or only to the main thread.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import signal\nimport threading\n\ndef handler(signum, frame):\n    print(f&quot;Received signal {signum}, handling it in the main thread.&quot;)\n\n# Register the handler for SIGINT\nsignal.signal(signal.SIGINT, handler)\n\ndef worker_thread():\n    try:\n        while True:\n            print(&quot;Worker thread is running...&quot;)\n            # Simulate some work\n            import time\n            time.sleep(1)\n    except KeyboardInterrupt:\n        print(&quot;Worker thread received SIGINT, stopping gracefully.&quot;)\n\n# Create and start the worker thread\nworker_thread = threading.Thread(target=worker_thread)\nworker_thread.start()\n\ninput()  # This will block until the user presses CTRL+C\n\nprint(&quot;Main thread is handling the signal.&quot;)\n</code></pre>\n\n<h3>Example 5: Handling Signals with a Custom Signal Class</h3>\n<p>You can create a custom class to manage signal handlers more elegantly:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">class SignalManager:\n    def __init__(self):\n        self.handlers = {}\n\n    def register(self, signum, handler):\n        if isinstance(signum, int) and callable(handler):\n            self.handlers[signum] = handler\n            signal.signal(signum, self._handler)\n        else:\n            raise ValueError(&quot;Signum must be an integer and handler must be a callable function.&quot;)\n\n    def _handler(self, signum, frame):\n        if signum in self.handlers:\n            self.handlers[signum](signum, frame)\n\n# Example usage\nsignal_manager = SignalManager()\ndef custom_handler(signum, frame):\n    print(f&quot;Custom handler for signal {signum}&quot;)\n\nsignal_manager.register(signal.SIGINT, custom_handler)\nprint(&quot;Press Ctrl+C to send a SIGINT signal.&quot;)\ninput()  # This will block until the user presses CTRL+C\n</code></pre>\n\n<p>These examples demonstrate various ways to handle signals in Python using the <code>signal</code> module. Each example includes comments explaining key parts of the code, ensuring clarity and ease of understanding for developers.</p>"
        },
        {
            "filename": "socket - Low-level networking interface.md",
            "content": "<h1>socket - Low-level networking interface</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-creating-a-tcp-socket\">1. Creating a TCP Socket</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#2-creating-a-udp-socket\">2. Creating a UDP Socket</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#3-connecting-to-a-remote-server\">3. Connecting to a Remote Server</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#4-using-sockets-with-multithreading\">4. Using Sockets with Multithreading</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n</ol>\n<p>The <code>socket</code> module in Python provides a low-level interface for network communication. It allows you to create sockets and use them to connect to other servers, send and receive data over various protocols such as TCP and UDP. Below are comprehensive code examples demonstrating various functionalities of the <code>socket</code> module.</p>\n<h3>1. Creating a TCP Socket</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import socket\n\n# Create a new TCP/IP socket\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n# Bind the socket to an address and port\nserver_address = ('localhost', 10000)\nprint(f'Starting up on {server_address[0]} port {server_address[1]}')\nserver_socket.bind(server_address)\n\n# Listen for incoming connections\nserver_socket.listen()\nprint('Waiting for a connection...')\n\n# Accept a connection\nconnection, client_address = server_socket.accept()\ntry:\n    print(f'Connection from {client_address}')\n\n    # Receive data in small chunks and echo it back to the client\n    while True:\n        data = connection.recv(16)\n        if data:\n            print(f&quot;Received: '{data.decode()}'&quot;)\n            connection.sendall(data)  # Echo the received data\n        else:\n            print('No more data from', client_address)\n            break\n\nfinally:\n    # Clean up the connection\n    connection.close()\n</code></pre>\n\n<h3>Explanation:</h3>\n<ul>\n<li><strong><code>socket.socket(socket.AF_INET, socket.SOCK_STREAM)</code></strong>: Creates a new TCP/IP socket.</li>\n<li><strong><code>server_socket.bind(server_address)</code></strong>: Binds the socket to an IP address and port.</li>\n<li><strong><code>server_socket.listen()</code></strong>: Starts listening for incoming connections.</li>\n<li><strong><code>connection, client_address = server_socket.accept()</code></strong>: Accepts a connection from a client.</li>\n</ul>\n<h3>2. Creating a UDP Socket</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import socket\n\n# Create a new UDP/IP socket\nclient_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n\n# Define the server address and port\nserver_address = ('localhost', 10000)\nprint(f'Sending to {server_address[0]} port {server_address[1]}')\n\n# Message to send\nmessage = b'Hello from UDP client'\n\ntry:\n    # Send data\n    print('Sending message: &quot;%s&quot;' % message)\n    client_socket.sendto(message, server_address)\n\n    # Receive a response from the server (assuming it echoes back)\n    received_data, server_address = client_socket.recvfrom(4096)\n    print(f'Received &quot;{received_data.decode()}&quot; from {server_address}')\n\nfinally:\n    # Close the socket\n    client_socket.close()\n</code></pre>\n\n<h3>Explanation:</h3>\n<ul>\n<li><strong><code>socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</code></strong>: Creates a new UDP/IP socket.</li>\n<li><strong><code>client_socket.sendto(message, server_address)</code></strong>: Sends data to the specified server address and port.</li>\n<li><strong><code>received_data, server_address = client_socket.recvfrom(4096)</code></strong>: Receives data from the server.</li>\n</ul>\n<h3>3. Connecting to a Remote Server</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import socket\n\n# Create a new TCP/IP socket\nclient_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n# Define the server address and port\nserver_address = ('example.com', 80)\n\ntry:\n    # Connect to the server\n    print('Connecting to %s port %d' % server_address)\n    client_socket.connect(server_address)\n\n    # Send data\n    message = b&quot;GET / HTTP/1.0\\r\\nHost: example.com\\r\\n\\r\\n&quot;\n    print(&quot;Sending message:&quot;, message.decode())\n    client_socket.sendall(message)\n\n    # Receive the response from the server\n    amount_received = 0\n    amount_expected = len(message)\n\n    while True:\n        data = client_socket.recv(16)\n        if not data:\n            break\n        amount_received += len(data)\n        print(f&quot;Received {amount_received} bytes of data&quot;)\n\n    print('Received', amount_received, 'bytes from', server_address)\n\nfinally:\n    # Close the socket\n    client_socket.close()\n</code></pre>\n\n<h3>Explanation:</h3>\n<ul>\n<li><strong><code>client_socket.connect(server_address)</code></strong>: Connects to a remote server at the specified IP address and port.</li>\n<li><strong>Sending data</strong> using <code>client_socket.sendall()</code>.</li>\n<li><strong>Receiving data</strong> in chunks using <code>client_socket.recv()</code>.</li>\n</ul>\n<h3>4. Using Sockets with Multithreading</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import socket\nimport threading\n\ndef handle_client(client_socket, client_address):\n    print('Handling client', client_address)\n\n    try:\n        while True:\n            data = client_socket.recv(16)\n            if not data:\n                break\n            print(f&quot;Received: '{data.decode()}' from {client_address}&quot;)\n            client_socket.sendall(data)  # Echo the received data\n\n    finally:\n        # Close the connection\n        client_socket.close()\n        print('Closed connection with', client_address)\n\n# Create a TCP/IP socket\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n# Bind the socket to an address and port\nserver_address = ('localhost', 10000)\nprint(f'Starting up on {server_address[0]} port {server_address[1]}')\nserver_socket.bind(server_address)\n\n# Listen for incoming connections\nserver_socket.listen()\n\ntry:\n    while True:\n        print('Waiting for a connection...')\n        client_socket, client_address = server_socket.accept()\n\n        # Handle the new connection in a separate thread\n        client_thread = threading.Thread(target=handle_client, args=(client_socket, client_address))\n        client_thread.start()\n\nexcept KeyboardInterrupt:\n    print('Server shutting down.')\n\nfinally:\n    # Clean up the listening socket\n    server_socket.close()\n</code></pre>\n\n<h3>Explanation:</h3>\n<ul>\n<li><strong>Using <code>threading</code> to handle multiple clients</strong>: Each new connection is handled by a separate thread.</li>\n<li>The <code>handle_client</code> function processes data received from and sends back data to each client.</li>\n</ul>\n<p>These examples cover basic functionalities of the <code>socket</code> module, including creating sockets, binding and listening, connecting to remote servers, and handling multiple connections with threading.</p>"
        },
        {
            "filename": "ssl - TLS SSL wrapper for socket objects.md",
            "content": "<h1>ssl - TLS/SSL wrapper for socket objects</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-creating-an-ssl-context\">1. Creating an SSL Context</a></li>\n<li><a href=\"#2-server-side-ssl-configuration\">2. Server-Side SSL Configuration</a></li>\n<li><a href=\"#3-client-side-verification-of-server-certificate\">3. Client-Side Verification of Server Certificate</a></li>\n<li><a href=\"#4-using-a-custom-certificate-store\">4. Using a Custom Certificate Store</a></li>\n<li><a href=\"#5-handling-ssl-errors\">5. Handling SSL Errors</a></li>\n<li><a href=\"#6-using-a-specific-ssl-protocol\">6. Using a Specific SSL Protocol</a></li>\n<li><a href=\"#7-server-side-handling-of-client-authentication\">7. Server-Side Handling of Client Authentication</a></li>\n<li><a href=\"#8-using-ssltls-with-socks-proxy\">8. Using SSL/TLS with SOCKS Proxy</a></li>\n</ol>\n<p>The <code>ssl</code> module in Python provides a way to create secure network connections using SSL/TLS protocols. It allows you to wrap existing socket objects with an encrypted layer, making it suitable for applications that require secure communication.</p>\n<p>Below are some comprehensive code examples demonstrating various functionalities of the <code>ssl</code> module:</p>\n<h3>1. Creating an SSL Context</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ssl\nimport socket\n\n# Create a context object using the default settings\ncontext = ssl.create_default_context()\n\n# Alternatively, create a context with specific options\n# context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)\n# context.verify_mode = ssl.CERT_REQUIRED\n# context.load_verify_locations('path/to/certificates')\n\n# Wrap an existing socket object with the SSL context\nwith socket.create_connection(('example.com', 443)) as sock:\n    with context.wrap_socket(sock, server_hostname='example.com') as ssock:\n        print(&quot;SSL connection established successfully!&quot;)\n</code></pre>\n\n<h3>2. Server-Side SSL Configuration</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ssl\nimport socket\n\n# Create a secure socket object for the server\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n# Bind to an address and port\nserver_socket.bind(('localhost', 443))\n\n# Set the socket to listen for incoming connections\nserver_socket.listen(5)\n\n# Create an SSL context with specific options\ncontext = ssl.create_default_context()\ncontext.load_cert_chain('path/to/cert.pem', 'path/to/key.pem')\n\n# Accept a connection and wrap it with SSL\nclient_socket, addr = server_socket.accept()\nwith context.wrap_socket(client_socket, server_side=True) as ssock:\n    print(&quot;SSL handshake completed:&quot;, ssock.version)\n</code></pre>\n\n<h3>3. Client-Side Verification of Server Certificate</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ssl\nimport socket\n\n# Create a context object with certificate verification enabled\ncontext = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)\ncontext.verify_mode = ssl.CERT_REQUIRED\ncontext.load_verify_locations('path/to/certificates')\n\n# Wrap an existing socket object with the SSL context\nwith socket.create_connection(('example.com', 443)) as sock:\n    with context.wrap_socket(sock, server_hostname='example.com') as ssock:\n        print(&quot;SSL connection established successfully!&quot;)\n</code></pre>\n\n<h3>4. Using a Custom Certificate Store</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ssl\nimport socket\n\n# Create a custom certificate store for the context\ncontext = ssl.create_default_context()\ncontext.load_verify_locations('path/to/custom/certs')\n\n# Wrap an existing socket object with the SSL context\nwith socket.create_connection(('example.com', 443)) as sock:\n    with context.wrap_socket(sock, server_hostname='example.com') as ssock:\n        print(&quot;SSL connection established successfully!&quot;)\n</code></pre>\n\n<h3>5. Handling SSL Errors</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ssl\nimport socket\n\n# Create a context object using default settings\ncontext = ssl.create_default_context()\n\ntry:\n    # Wrap an existing socket object with the SSL context\n    with socket.create_connection(('example.com', 443)) as sock:\n        with context.wrap_socket(sock, server_hostname='example.com') as ssock:\n            print(&quot;SSL connection established successfully!&quot;)\nexcept ssl.SSLError as e:\n    print(f&quot;An SSL error occurred: {e}&quot;)\n</code></pre>\n\n<h3>6. Using a Specific SSL Protocol</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ssl\nimport socket\n\n# Create a context object for a specific SSL protocol version\ncontext = ssl.create_default_context(ssl.PROTOCOL_TLSv1_2)\n\n# Wrap an existing socket object with the SSL context\nwith socket.create_connection(('example.com', 443)) as sock:\n    with context.wrap_socket(sock, server_hostname='example.com') as ssock:\n        print(f&quot;SSL connection using TLSv1.2 established successfully!&quot;)\n</code></pre>\n\n<h3>7. Server-Side Handling of Client Authentication</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ssl\nimport socket\n\n# Create a secure socket object for the server\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n# Bind to an address and port\nserver_socket.bind(('localhost', 443))\n\n# Set the socket to listen for incoming connections\nserver_socket.listen(5)\n\n# Create an SSL context with client authentication enabled\ncontext = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)\ncontext.load_cert_chain('path/to/cert.pem', 'path/to/key.pem')\ncontext.verify_mode = ssl.CERT_REQUIRED\ncontext.load_verify_locations('path/to/certificates')\n\n# Accept a connection and wrap it with SSL\nclient_socket, addr = server_socket.accept()\nwith context.wrap_socket(client_socket, server_side=True) as ssock:\n    print(&quot;SSL handshake completed:&quot;, ssock.version)\n    # Check if the client provided a valid certificate\n    try:\n        peer_cert = ssock.getpeercert()\n        print(&quot;Client's certificate:&quot;, peer_cert)\n    except ssl.SSLError:\n        print(&quot;The client did not provide a valid certificate.&quot;)\n</code></pre>\n\n<h3>8. Using SSL/TLS with SOCKS Proxy</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ssl\nimport socket\nimport socks\n\n# Set up a SOCKS proxy (e.g., using PySocks)\nsocks.set_default_proxy(socks.SOCKS5, 'proxy_host', 1080)\n\n# Create a context object for the default protocol\ncontext = ssl.create_default_context()\n\n# Wrap an existing socket object with the SSL context\nwith socket.create_connection(('example.com', 443)) as sock:\n    with socks.socksocket(socket.AF_INET, socket.SOCK_STREAM) as ssock:\n        ssock.connect((socks.DEFAULT_PROXY_HOST, socks.DEFAULT_PROXY_PORT))\n        with context.wrap_socket(ssock) as ssl_sock:\n            print(&quot;SSL connection through SOCKS proxy established successfully!&quot;)\n</code></pre>\n\n<p>These examples cover a range of use cases for the <code>ssl</code> module, from basic server and client configurations to handling errors and using specific SSL protocols. Each example includes comments to help understand each step and is designed to be included in official documentation or tutorials.</p>"
        }
    ],
    "Numeric and Mathematical Modules": [
        {
            "filename": "cmath - Mathematical functions for complex numbers.md",
            "content": "<h1>cmath - Mathematical functions for complex numbers</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#explanation\">Explanation:</a></li>\n</ol>\n<p>Below is a comprehensive set of example code snippets demonstrating various functionalities available in the <code>cmath</code> module, which provides mathematical functions for complex numbers in Python 3.12.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import cmath\n\n# Example 1: Basic Complex Number Operations\n# Create a complex number using the constructor\nz = complex(3, 4)\nprint(f&quot;Complex number z: {z}&quot;)\n\n# Convert real and imaginary parts separately\nreal_part = z.real\nimaginary_part = z.imag\nprint(f&quot;Real part: {real_part}, Imaginary part: {imaginary_part}&quot;)\n\n# Add two complex numbers\nw = complex(1, 2)\nresult_addition = z + w\nprint(f&quot;Addition of z and w: {result_addition}&quot;)\n\n# Subtract one complex number from another\nresult_subtraction = z - w\nprint(f&quot;Subtraction of w from z: {result_subtraction}&quot;)\n\n# Multiply two complex numbers\nresult_multiplication = z * w\nprint(f&quot;Multiplication of z and w: {result_multiplication}&quot;)\n\n# Divide one complex number by another\nresult_division = z / w\nprint(f&quot;Division of z by w: {result_division}&quot;)\n\n# Example 2: Absolute Value and Phase of a Complex Number\nabs_z = abs(z)\nphase_z = cmath.phase(z)\nprint(f&quot;Absolute value of z: {abs_z}, Phase (angle in radians): {phase_z}&quot;)\n\n# Example 3: Polar and Rectangular Representation\npolar_representation = cmath.polar(z)\nrectangular_representation = cmath.rect(abs_z, phase_z)\nprint(f&quot;Polar representation (r, theta): {polar_representation}&quot;)\nprint(f&quot;Rectangular representation (x, y): {rectangular_representation}&quot;)\n\n# Example 4: Square Root of a Complex Number\nsqrt_z = cmath.sqrt(z)\nprint(f&quot;Square root of z: {sqrt_z}&quot;)\n\n# Example 5: Exponential and Logarithmic Functions for Complex Numbers\nexp_z = cmath.exp(z)\nlog_z = cmath.log(z)\nprint(f&quot;Exponent of z: {exp_z}&quot;)\nprint(f&quot;Natural logarithm of z: {log_z}&quot;)\n\n# Example 6: Trigonometric and Hyperbolic Functions for Complex Numbers\nsin_z = cmath.sin(z)\ncos_z = cmath.cos(z)\ntan_z = cmath.tan(z)\n\nasinh_z = cmath.asinh(z)\nacosh_z = cmath.acosh(z)\natanh_z = cmath.atanh(z)\n\nprint(f&quot;Trigonometric functions: sin({z})={sin_z}, cos({z})={cos_z}, tan({z})={tan_z}&quot;)\nprint(f&quot;Inverse hyperbolic trigonometric functions: asinh({z})={asinh_z}, acosh({z})={acosh_z}, atanh({z})={atanh_z}&quot;)\n\n# Example 7: Roots of a Quadratic Equation\na = 1\nb = -3\nc = 2\n\nroots = cmath.sqrt(b**2 - 4*a*c)\nroot1 = (-b + roots) / (2 * a)\nroot2 = (-b - roots) / (2 * a)\n\nprint(f&quot;Roots of the quadratic equation ax^2 + bx + c = 0: {root1}, {root2}&quot;)\n\n# Example 8: Roots of Unity\nn = 5  # Number of roots\nroots_of_unity = [cmath.exp(2j * cmath.pi * k / n) for k in range(n)]\nprint(f&quot;Roots of unity (for n={n}): {roots_of_unity}&quot;)\n\n# Example 9: Complex Conjugate\nconjugate_z = z.conjugate()\nprint(f&quot;Conjugate of z: {conjugate_z}&quot;)\n\n# Example 10: Check if a complex number is real or imaginary\nif conjugate_z == z:\n    print(&quot;z is a real number&quot;)\nelif z.imag != 0:\n    print(&quot;z is an imaginary number&quot;)\nelse:\n    print(&quot;z is zero&quot;)\n\n# Example 11: Check if a complex number is purely imaginary\nif z.real == 0:\n    print(&quot;z is purely imaginary&quot;)\nelse:\n    print(&quot;z is not purely imaginary&quot;)\n\n# Example 12: Complex Number Exponentiation with Euler's Formula\neuler_formula_result = cmath.exp(z)\nprint(f&quot;Exponential of z using Euler's formula: {euler_formula_result}&quot;)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ul>\n<li><strong>Basic Operations</strong>: Demonstrates addition, subtraction, multiplication, and division of complex numbers.</li>\n<li><strong>Absolute Value and Phase</strong>: Shows how to compute the magnitude and angle (phase) of a complex number.</li>\n<li><strong>Polar and Rectangular Representation</strong>: Converts between polar and rectangular coordinates.</li>\n<li><strong>Square Root</strong>: Computes the square root of a complex number.</li>\n<li><strong>Exponential and Logarithmic Functions</strong>: Demonstrates exponential and logarithmic operations on complex numbers.</li>\n<li><strong>Trigonometric and Hyperbolic Functions</strong>: Includes sine, cosine, tangent, and their inverse functions for complex numbers.</li>\n<li><strong>Quadratic Equation Roots</strong>: Uses the quadratic formula to find roots of a complex equation.</li>\n<li><strong>Roots of Unity</strong>: Computes all <code>n</code>th roots of unity for a given integer <code>n</code>.</li>\n<li><strong>Complex Conjugate</strong>: Shows how to obtain the conjugate of a complex number.</li>\n<li><strong>Real or Imaginary Check</strong>: Determines if a complex number is real, purely imaginary, or zero.</li>\n</ul>\n<p>These examples cover a range of operations and properties available in the <code>cmath</code> module, providing comprehensive understanding of its functionalities.</p>"
        },
        {
            "filename": "decimal - Decimal fixed-point and floating-point arithmetic.md",
            "content": "<h1>decimal - Decimal fixed-point and floating-point arithmetic</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-basic-usage\">1. Basic Usage</a></li>\n<li><a href=\"#2-precision-and-rounding\">2. Precision and Rounding</a></li>\n<li><a href=\"#3-rounding-modes\">3. Rounding Modes</a></li>\n<li><a href=\"#4-arithmetic-operations\">4. Arithmetic Operations</a></li>\n<li><a href=\"#5-comparisons\">5. Comparisons</a></li>\n<li><a href=\"#6-formatting\">6. Formatting</a></li>\n<li><a href=\"#7-conversions\">7. Conversions</a></li>\n<li><a href=\"#8-context-management\">8. Context Management</a></li>\n<li><a href=\"#9-arithmetic-with-strings-and-integers\">9. Arithmetic with Strings and Integers</a></li>\n<li><a href=\"#10-special-values\">10. Special Values</a></li>\n</ol>\n<p>The <code>decimal</code> module in Python provides support for fast correctly-rounded decimal floating point arithmetic. It offers classes for manipulating numbers with arbitrary precision, which is useful for financial calculations where accuracy to many decimal places is critical.</p>\n<p>Here are comprehensive code examples for various functionalities of the <code>decimal</code> module:</p>\n<h3>1. Basic Usage</h3>\n<p>First, import the <code>Decimal</code> class from the <code>decimal</code> module.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from decimal import Decimal\n\n# Create a Decimal object with a specific precision\nd = Decimal('3.14')\nprint(d)  # Output: 3.14\n</code></pre>\n\n<h3>2. Precision and Rounding</h3>\n<p>The <code>decimal</code> module supports setting a global precision for all operations.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from decimal import Decimal, getcontext\n\n# Set the global precision to 5 decimal places\ngetcontext().prec = 5\n\nd = Decimal('0.1') + Decimal('0.2')\nprint(d)  # Output: 0.30000\n</code></pre>\n\n<h3>3. Rounding Modes</h3>\n<p>You can specify rounding modes using the <code>ROUND_HALF_UP</code>, <code>ROUND_DOWN</code>, etc., constants.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from decimal import Decimal, ROUND_HALF_UP\n\nd = Decimal('5.6789')\nrounded_d = d.quantize(Decimal('1.0'), rounding=ROUND_HALF_UP)\nprint(rounded_d)  # Output: 5.7\n</code></pre>\n\n<h3>4. Arithmetic Operations</h3>\n<p>Perform basic arithmetic operations using <code>Decimal</code>.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from decimal import Decimal\n\na = Decimal('3.14')\nb = Decimal('2.718')\n\naddition = a + b\nsubtraction = a - b\nmultiplication = a * b\ndivision = a / b  # Floating-point division\n\nprint(addition)    # Output: 5.862\nprint(subtraction)   # Output: 0.422\nprint(multiplication)# Output: 8.53912\nprint(division)      # Output: 1.1747599469077755\n</code></pre>\n\n<h3>5. Comparisons</h3>\n<p>Use the comparison operators to compare <code>Decimal</code> objects.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from decimal import Decimal\n\na = Decimal('3.14')\nb = Decimal('2.718')\n\nprint(a == b)    # Output: False\nprint(a &gt; b)     # Output: True\nprint(a &lt; b)     # Output: False\n</code></pre>\n\n<h3>6. Formatting</h3>\n<p>Convert <code>Decimal</code> objects to strings with specific formatting.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from decimal import Decimal, ROUND_HALF_UP\n\nd = Decimal('1234567890.12345')\n\n# Format with two decimal places and round half up\nformatted_d = d.quantize(Decimal('0.01'), rounding=ROUND_HALF_UP)\nprint(formatted_d)  # Output: '1234567890.12'\n</code></pre>\n\n<h3>7. Conversions</h3>\n<p>Convert <code>Decimal</code> objects to other numeric types.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from decimal import Decimal\n\nd = Decimal('42')\nfloat_d = float(d)\nint_d = int(d)\n\nprint(float_d)   # Output: 42.0\nprint(int_d)     # Output: 42\n</code></pre>\n\n<h3>8. Context Management</h3>\n<p>Use <code>LocalContext</code> for temporary changes in precision or rounding.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from decimal import Decimal, getcontext, LocalContext\n\ngetcontext().prec = 3\n\nwith LocalContext(prec=5):\n    d = Decimal('1.0')\n    print(d)  # Output: 1.00000\n\nprint(getcontext().prec)  # Output: 3\n</code></pre>\n\n<h3>9. Arithmetic with Strings and Integers</h3>\n<p>You can also perform arithmetic operations directly with strings or integers.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from decimal import Decimal\n\na = Decimal('3.14')\nb = '2.718'\n\naddition_str = a + b\nprint(addition_str)  # Output: '5.862'\n</code></pre>\n\n<h3>10. Special Values</h3>\n<p>Handle special values like infinity and NaN.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from decimal import Decimal, DecimalInfinity, DecimalNaN\n\na = Decimal('inf')\nb = Decimal('-inf')\n\nprint(a + b)     # Output: inf\nprint(DecimalNaN)    # Output: NaN\n</code></pre>\n\n<p>These examples cover the basic functionalities of the <code>decimal</code> module in Python. The <code>decimal</code> module is essential for applications requiring precise arithmetic, such as financial calculations and scientific computing.</p>"
        },
        {
            "filename": "fractions - Rational numbers.md",
            "content": "<h1>fractions - Rational numbers</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#explanation\">Explanation:</a></li>\n</ol>\n<p>The <code>fractions</code> module in Python provides support for rational number arithmetic. Here are comprehensive and well-documented code examples that cover various functionalities within this module:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import fractions\n\n# Creating Rational Numbers\n\n# Using constructor\nnum1 = fractions.Fraction(3, 4)  # Represents the fraction 3/4\nnum2 = fractions.Fraction(5, 6)  # Represents the fraction 5/6\n\nprint(num1)        # Output: 3/4\nprint(num2)        # Output: 5/6\n\n# From integers\nnum3 = fractions.Fraction(7)   # Equivalent to Fraction(7, 1)\nprint(num3)        # Output: 7/1\n\n# Using string input\nnum4 = fractions.Fraction('3/4')  # Represents the fraction 3/4\nprint(num4)        # Output: 3/4\n\n# Converting a float to a Fraction\nnum5 = fractions.Fraction(0.75)\nprint(num5)        # Output: 3/4\n\n# Using mixed numbers\nmixed_num = fractions.Fraction(3, 2)  # Represents the fraction 3/2\nprint(mixed_num)     # Output: 3/2\n\n# Arithmetic Operations\n\n# Addition\nresult_add = num1 + num2\nprint(result_add)   # Output: 17/12\n\n# Subtraction\nresult_subtract = num1 - num2\nprint(result_subtract) # Output: -1/12\n\n# Multiplication\nresult_multiply = num1 * num2\nprint(result_multiply) # Output: 5/24\n\n# Division\nresult_divide = num1 / num2\nprint(result_divide)   # Output: 3/10\n\n# Exponentiation\nresult_power = num1 ** 2\nprint(result_power)    # Output: 9/16\n\n# Comparison Operators\n\n# Equality\nif num1 == num3:\n    print(&quot;num1 is equal to num3&quot;)\nelse:\n    print(&quot;num1 is not equal to num3&quot;)\n\n# Inequality\nif num1 != num4:\n    print(&quot;num1 is not equal to num4&quot;)\nelse:\n    print(&quot;num1 is equal to num4&quot;)\n\n# Less than\nif num1 &lt; num2:\n    print(&quot;num1 is less than num2&quot;)\nelse:\n    print(&quot;num1 is not less than num2&quot;)\n\n# Greater than\nif num1 &gt; num3:\n    print(&quot;num1 is greater than num3&quot;)\nelse:\n    print(&quot;num1 is not greater than num3&quot;)\n\n# Less than or equal to\nif num1 &lt;= num2:\n    print(&quot;num1 is less than or equal to num2&quot;)\nelse:\n    print(&quot;num1 is not less than or equal to num2&quot;)\n\n# Greater than or equal to\nif num1 &gt;= num4:\n    print(&quot;num1 is greater than or equal to num4&quot;)\nelse:\n    print(&quot;num1 is not greater than or equal to num4&quot;)\n\n# Converting to float and int\n\nfloat_num = float(num5)\nprint(float_num)      # Output: 0.75\n\nint_num = int(num3)\nprint(int_num)       # Output: 7\n\n# Absolute value\nabs_value = abs(fractions.Fraction(-2, 3))\nprint(abs_value)     # Output: 2/3\n\n# Converting to string\nstr_num = str(num1)\nprint(str_num)      # Output: '3/4'\n\n# Fraction representation in decimal format\ndecimal_repr = num1.limit_denominator()\nprint(decimal_repr)   # Output: 0.75\n\n# Numerator and Denominator\nnumerator = fractions.Fraction(8, 6).numerator\ndenominator = fractions.Fraction(8, 6).denominator\nprint(numerator)    # Output: 4\nprint(denominator)   # Output: 3\n\n# Simplifying a fraction\nsimplified_num = fractions.Fraction(10, 25)\nsimplified_num = simplified_num.limit_denominator()\nprint(simplified_num)   # Output: 2/5\n\n# Operations with Infinite Fractions\ninf_frac = float('inf')  # Represents Infinity\nzero_frac = fractions.Fraction(0)  # Represents Zero\n\nprint(inf_frac + inf_frac)      # Output: Infinity\nprint(zero_frac - inf_frac)    # Output: -Infinity\n</code></pre>\n\n<h3>Explanation:</h3>\n<ol>\n<li>\n<p><strong>Creating Rational Numbers</strong>: The <code>Fraction</code> class is used to create rational numbers from integers, floats, strings, or mixed number representations.</p>\n</li>\n<li>\n<p><strong>Arithmetic Operations</strong>: Basic arithmetic operations like addition, subtraction, multiplication, and division are supported, along with exponentiation.</p>\n</li>\n<li>\n<p><strong>Comparison Operators</strong>: Functions like <code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, and <code>&gt;=</code> are used to compare fractions.</p>\n</li>\n<li>\n<p><strong>Conversions</strong>:</p>\n</li>\n<li>To float: Use the <code>float()</code> function.</li>\n<li>To integer: Use the <code>int()</code> function.</li>\n<li>\n<p>To string: Use the <code>str()</code> function.</p>\n</li>\n<li>\n<p><strong>Absolute Value</strong>: The <code>abs()</code> function returns the absolute value of a fraction.</p>\n</li>\n<li>\n<p><strong>Fraction Representation in Decimal Format</strong>: The <code>limit_denominator()</code> method is used to simplify the fraction and convert it to a float, which represents the decimal equivalent.</p>\n</li>\n<li>\n<p><strong>Numerator and Denominator</strong>: Use the <code>numerator</code> and <code>denominator</code> attributes to access these properties of a fraction.</p>\n</li>\n<li>\n<p><strong>Simplifying Fractions</strong>: Use the <code>limit_denominator()</code> method to reduce fractions to their simplest form.</p>\n</li>\n<li>\n<p><strong>Operations with Infinite Fractions</strong>: Special representations like 'Infinity' and 'Zero' are supported for operations involving infinite or zero values.</p>\n</li>\n</ol>\n<p>These examples provide a comprehensive overview of how to use the <code>fractions</code> module in Python, covering various aspects of rational number arithmetic.</p>"
        },
        {
            "filename": "math - Mathematical functions.md",
            "content": "<h1>math - Mathematical functions</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-trigonometric-functions\">1. <strong>Trigonometric Functions</strong></a></li>\n<li><a href=\"#2-logarithmic-functions\">2. <strong>Logarithmic Functions</strong></a></li>\n<li><a href=\"#3-exponential-and-power-functions\">3. <strong>Exponential and Power Functions</strong></a></li>\n<li><a href=\"#4-square-root-and-floorceiling-functions\">4. <strong>Square Root and Floor/Ceiling Functions</strong></a></li>\n<li><a href=\"#5-constants\">5. <strong>Constants</strong></a></li>\n<li><a href=\"#6-rounding-functions\">6. <strong>Rounding Functions</strong></a></li>\n<li><a href=\"#7-factorial-and-gamma-function\">7. <strong>Factorial and Gamma Function</strong></a></li>\n<li><a href=\"#8-modular-arithmetic-functions\">8. <strong>Modular Arithmetic Functions</strong></a></li>\n<li><a href=\"#9-hyperbolic-functions\">9. <strong>Hyperbolic Functions</strong></a></li>\n<li><a href=\"#10-error-functions-and-complementary-error-function\">10. <strong>Error Functions and Complementary Error Function</strong></a></li>\n</ol>\n<p>The <code>math</code> module is a fundamental part of Python's standard library, providing a wide range of mathematical functions and constants. Below are comprehensive code examples for each functionality within the <code>math</code> module. These examples are designed to be clear, concise, and suitable for inclusion in official documentation.</p>\n<h3>1. <strong>Trigonometric Functions</strong></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import math\n\n# Calculate the sine of an angle (in radians)\nangle = math.pi / 4\nsine_value = math.sin(angle)\nprint(f&quot;Sine of {angle} radians: {sine_value}&quot;)\n\n# Calculate the cosine of an angle (in radians)\ncosine_value = math.cos(angle)\nprint(f&quot;Cosine of {angle} radians: {cosine_value}&quot;)\n\n# Calculate the tangent of an angle (in radians)\ntangent_value = math.tan(angle)\nprint(f&quot;Tangent of {angle} radians: {tangent_value}&quot;)\n</code></pre>\n\n<h3>2. <strong>Logarithmic Functions</strong></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import math\n\n# Calculate the natural logarithm of a number\nx = 10\nnatural_log = math.log(x)\nprint(f&quot;Natural logarithm of {x}: {natural_log}&quot;)\n\n# Calculate the base-10 logarithm of a number\nbase_10_log = math.log10(x)\nprint(f&quot;Base-10 logarithm of {x}: {base_10_log}&quot;)\n</code></pre>\n\n<h3>3. <strong>Exponential and Power Functions</strong></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import math\n\n# Calculate e raised to the power of x\ne_x = math.exp(1)  # This is equivalent to math.e ** x\nprint(f&quot;e^1: {e_x}&quot;)\n\n# Raise a number to the power of another number\nbase = 2\nexponent = 3\nresult = base ** exponent\nprint(f&quot;{base} raised to the power of {exponent}: {result}&quot;)\n</code></pre>\n\n<h3>4. <strong>Square Root and Floor/Ceiling Functions</strong></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import math\n\n# Calculate the square root of a number\nnumber = 16\nsqrt_value = math.sqrt(number)\nprint(f&quot;Square root of {number}: {sqrt_value}&quot;)\n\n# Calculate the floor of a number (rounds down to the nearest integer)\nx = 4.7\nfloor_value = math.floor(x)\nprint(f&quot;Floor of {x}: {floor_value}&quot;)\n\n# Calculate the ceiling of a number (rounds up to the nearest integer)\ny = 4.2\nceiling_value = math.ceil(y)\nprint(f&quot;Ceiling of {y}: {ceiling_value}&quot;)\n</code></pre>\n\n<h3>5. <strong>Constants</strong></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import math\n\n# Access mathematical constants\npi = math.pi\ne = math.e\ninf = math.inf\nnan = math.nan\n\nprint(f&quot;Value of \u03c0: {pi}&quot;)\nprint(f&quot;Value of e: {e}&quot;)\nprint(f&quot;Infinity: {inf}&quot;)\nprint(f&quot;Not a Number (NaN): {nan}&quot;)\n</code></pre>\n\n<h3>6. <strong>Rounding Functions</strong></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import math\n\n# Round a number to the nearest integer\nx = 4.75\nrounded_value = round(x)\nprint(f&quot;Rounded value of {x}: {rounded_value}&quot;)\n\n# Round a number up to the nearest even integer (bankers' rounding)\ny = 3.5\nround_up_even = math.floor(y + 0.5) if y % 1 == 0.5 else math.ceil(y - 0.5)\nprint(f&quot;Rounded up to nearest even integer of {y}: {round_up_even}&quot;)\n</code></pre>\n\n<h3>7. <strong>Factorial and Gamma Function</strong></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import math\n\n# Calculate the factorial of a number\nfactorial_5 = math.factorial(5)\nprint(f&quot;Factorial of 5: {factorial_5}&quot;)\n\n# Calculate the gamma function (which is related to factorials for positive integers)\ngamma_3 = math.gamma(3)\nprint(f&quot;Gamma function of 3: {gamma_3}&quot;)\n</code></pre>\n\n<h3>8. <strong>Modular Arithmetic Functions</strong></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import math\n\n# Calculate the greatest common divisor using Euclid's algorithm\na, b = 48, 18\ngcd_value = math.gcd(a, b)\nprint(f&quot;GCD of {a} and {b}: {gcd_value}&quot;)\n\n# Calculate the least common multiple (LCM) using the formula LCM(x, y) = |x * y| / GCD(x, y)\nlcm_value = abs(a * b) // math.gcd(a, b)\nprint(f&quot;LCM of {a} and {b}: {lcm_value}&quot;)\n</code></pre>\n\n<h3>9. <strong>Hyperbolic Functions</strong></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import math\n\n# Calculate the hyperbolic sine of an angle (in radians)\nhyperbolic_sine = math.sinh(1)\nprint(f&quot;Hyperbolic sine of 1 radian: {hyperbolic_sine}&quot;)\n\n# Calculate the hyperbolic cosine of an angle (in radians)\nhyperbolic_cosine = math.cosh(1)\nprint(f&quot;Hyperbolic cosine of 1 radian: {hyperbolic_cosine}&quot;)\n\n# Calculate the hyperbolic tangent of an angle (in radians)\nhyperbolic_tangent = math.tanh(1)\nprint(f&quot;Hyperbolic tangent of 1 radian: {hyperbolic_tangent}&quot;)\n</code></pre>\n\n<h3>10. <strong>Error Functions and Complementary Error Function</strong></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import math\n\n# Calculate the error function (erf) for a real argument x\nx = 0.5\nerror_function_value = math.erf(x)\nprint(f&quot;Error function of {x}: {error_function_value}&quot;)\n\n# Calculate the complementary error function (erfc) for a real argument x\ncomplementary_error_function_value = math.erfc(x)\nprint(f&quot;Complementary error function of {x}: {complementary_error_function_value}&quot;)\n</code></pre>\n\n<h3>11. <strong>Constants and Special Values</strong></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import math\n\n# Access special values defined in the math module\npi_over_4 = math.pi / 4\nnegative_zero = -0.0\ninf_pos = math.inf\ninf_neg = -math.inf\nnan_val = math.nan\n\nprint(f&quot;\u03c0/4: {pi_over_4}&quot;)\nprint(f&quot;Negative zero: {negative_zero}&quot;)\nprint(f&quot;Infinity (positive): {inf_pos}&quot;)\nprint(f&quot;Infinity (negative): {inf_neg}&quot;)\nprint(f&quot;Not a Number (NaN): {nan_val}&quot;)\n</code></pre>\n\n<h3>12. <strong>Pi and E Constants</strong></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import math\n\n# Access the mathematical constants \u03c0 and e\npi_value = math.pi\ne_value = math.e\n\nprint(f&quot;Value of \u03c0: {pi_value}&quot;)\nprint(f&quot;Value of e: {e_value}&quot;)\n</code></pre>\n\n<p>These examples cover a wide range of functionalities provided by the <code>math</code> module, demonstrating how to use various mathematical operations effectively in Python. Each example includes comments explaining the purpose and usage of each function or constant, ensuring clarity for beginners and advanced users alike.</p>"
        },
        {
            "filename": "numbers - Numeric abstract base classes.md",
            "content": "<h1>numbers - Numeric abstract base classes</h1>\n<p>The <code>numbers</code> module in Python provides an abstract base class hierarchy for numeric types, which can serve as a foundation for creating custom numeric types. Here are comprehensive examples demonstrating various functionalities provided by this module:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from abc import ABCMeta, abstractmethod\nfrom math import sqrt, log, exp  # Added necessary imports\n\n# Define the Number class\nclass Number(metaclass=ABCMeta):\n    @abstractmethod\n    def __add__(self, other):\n        pass\n\n    @abstractmethod\n    def __sub__(self, other):\n        pass\n\n    @abstractmethod\n    def __mul__(self, other):\n        pass\n\n    @abstractmethod\n    def __truediv__(self, other):\n        pass\n\n    @abstractmethod\n    def __floordiv__(self, other):\n        pass\n\n    @abstractmethod\n    def __mod__(self, other):\n        pass\n\n    @abstractmethod\n    def __pow__(self, other):\n        pass\n\n    @abstractmethod\n    def __lt__(self, other):\n        pass\n\n    @abstractmethod\n    def __le__(self, other):\n        pass\n\n    @abstractmethod\n    def __eq__(self, other):\n        pass\n\n    @abstractmethod\n    def __ne__(self, other):\n        pass\n\n    @abstractmethod\n    def __gt__(self, other):\n        pass\n\n    @abstractmethod\n    def __ge__(self, other):\n        pass\n\n    @abstractmethod\n    def __neg__(self):\n        pass\n\n    @abstractmethod\n    def __abs__(self):\n        pass\n\n# Define the Real class, which is a subclass of Number\nclass Real(Number):\n    def __init__(self, value):\n        self.value = value\n\n    def __add__(self, other):\n        return Real(self.value + other)\n\n    def __sub__(self, other):\n        return Real(self.value - other)\n\n    def __mul__(self, other):\n        return Real(self.value * other)\n\n    def __truediv__(self, other):\n        if other == 0:\n            raise ZeroDivisionError(&quot;division by zero&quot;)\n        return Real(self.value / other)\n\n    def __floordiv__(self, other):\n        if other == 0:\n            raise ZeroDivisionError(&quot;division by zero&quot;)\n        return Real(self.value // other)\n\n    def __mod__(self, other):\n        if other == 0:\n            raise ZeroDivisionError(&quot;modulo by zero&quot;)\n        return Real(self.value % other)\n\n    def __pow__(self, other):\n        return Real(pow(self.value, other))\n\n    def __lt__(self, other):\n        return self.value &lt; other\n\n    def __le__(self, other):\n        return self.value &lt;= other\n\n    def __eq__(self, other):\n        return self.value == other\n\n    def __ne__(self, other):\n        return self.value != other\n\n    def __gt__(self, other):\n        return self.value &gt; other\n\n    def __ge__(self, other):\n        return self.value &gt;= other\n\n    def __neg__(self):\n        return Real(-self.value)\n\n    def __abs__(self):\n        return Real(abs(self.value))\n\n# Define the Complex class, which is a subclass of Number\nclass Complex(Number):\n    def __init__(self, real=0.0, imag=0.0):\n        self.real = real\n        self.imag = imag\n\n    def __add__(self, other):\n        if isinstance(other, Real):\n            return Complex(self.real + other.value, self.imag)\n        elif isinstance(other, Complex):\n            return Complex(self.real + other.real, self.imag + other.imag)\n        else:\n            raise TypeError(&quot;unsupported operand type(s) for +: 'Complex' and '{}'&quot;.format(type(other).__name__))\n\n    def __sub__(self, other):\n        if isinstance(other, Real):\n            return Complex(self.real - other.value, self.imag)\n        elif isinstance(other, Complex):\n            return Complex(self.real - other.real, self.imag - other.imag)\n        else:\n            raise TypeError(&quot;unsupported operand type(s) for -: 'Complex' and '{}'&quot;.format(type(other).__name__))\n\n    def __mul__(self, other):\n        if isinstance(other, Real):\n            return Complex(self.real * other.value, self.imag * other.value)\n        elif isinstance(other, Complex):\n            r = self.real * other.real - self.imag * other.imag\n            i = self.real * other.imag + self.imag * other.real\n            return Complex(r, i)\n        else:\n            raise TypeError(&quot;unsupported operand type(s) for *: 'Complex' and '{}'&quot;.format(type(other).__name__))\n\n    def __truediv__(self, other):\n        if isinstance(other, Real):\n            if other == 0:\n                raise ZeroDivisionError(&quot;division by zero&quot;)\n            r = self.real / other\n            i = self.imag / other\n            return Complex(r, i)\n        elif isinstance(other, Complex):\n            denom = pow(other.real, 2) + pow(other.imag, 2)\n            r = (self.real * other.real + self.imag * other.imag) / denom\n            i = (self.imag * other.real - self.real * other.imag) / denom\n            return Complex(r, i)\n        else:\n            raise TypeError(&quot;unsupported operand type(s) for /: 'Complex' and '{}'&quot;.format(type(other).__name__))\n\n    def __floordiv__(self, other):\n        if isinstance(other, Real):\n            if other == 0:\n                raise ZeroDivisionError(&quot;division by zero&quot;)\n            r = self.real // other\n            i = self.imag // other\n            return Complex(r, i)\n        elif isinstance(other, Complex):\n            denom = pow(other.real, 2) + pow(other.imag, 2)\n            r = (self.real * other.real + self.imag * other.imag) // denom\n            i = (self.imag * other.real - self.real * other.imag) // denom\n            return Complex(r, i)\n        else:\n            raise TypeError(&quot;unsupported operand type(s) for //: 'Complex' and '{}'&quot;.format(type(other).__name__))\n\n    def __mod__(self, other):\n        if isinstance(other, Real):\n            if other == 0:\n                raise ZeroDivisionError(&quot;modulo by zero&quot;)\n            return Complex(self.real % other)\n        elif isinstance(other, Complex):\n            raise TypeError(&quot;unsupported operand type(s) for %: 'Complex' and '{}'&quot;.format(type(other).__name__))\n        else:\n            raise TypeError(&quot;unsupported operand type(s) for %: 'Complex' and '{}'&quot;.format(type(other).__name__))\n\n    def __pow__(self, other):\n        if isinstance(other, Real):\n            return Complex(pow(self.real, other), pow(self.imag, other))\n        elif isinstance(other, Complex):\n            r = pow(pow(self.real, 2) + pow(self.imag, 2), other.real)\n            i = (other.real * log(pow(self.real, 2) + pow(self.imag, 2))) * exp(log(abs(self)) * other.imag / 2)\n            return Complex(r, i)\n        else:\n            raise TypeError(&quot;unsupported operand type(s) for **: 'Complex' and '{}'&quot;.format(type(other).__name__))\n\n    def __lt__(self, other):\n        if isinstance(other, Real):\n            return abs(self) &lt; abs(other)\n        elif isinstance(other, Complex):\n            return abs(self) &lt; abs(other)\n        else:\n            raise TypeError(&quot;unsupported operand type(s) for &lt;: 'Complex' and '{}'&quot;.format(type(other).__name__))\n\n    def __le__(self, other):\n        if isinstance(other, Real):\n            return abs(self) &lt;= abs(other)\n        elif isinstance(other, Complex):\n            return abs(self) &lt;= abs(other)\n        else:\n            raise TypeError(&quot;unsupported operand type(s) for &lt;=: 'Complex' and '{}'&quot;.format(type(other).__name__))\n\n    def __eq__(self, other):\n        if isinstance(other, Real):\n            return self.real == other.value and self.imag == 0\n        elif isinstance(other, Complex):\n            return self.real == other.real and self.imag == other.imag\n        else:\n            raise TypeError(&quot;unsupported operand type(s) for ==: 'Complex' and '{}'&quot;.format(type(other).__name__))\n\n    def __ne__(self, other):\n        if isinstance(other, Real):\n            return self.real != other.value or self.imag != 0\n        elif isinstance(other, Complex):\n            return self.real != other.real or self.imag != other.imag\n        else:\n            raise TypeError(&quot;unsupported operand type(s) for !=: 'Complex' and '{}'&quot;.format(type(other).__name__))\n\n    def __gt__(self, other):\n        if isinstance(other, Real):\n            return abs(self) &gt; abs(other)\n        elif isinstance(other, Complex):\n            return abs(self) &gt; abs(other)\n        else:\n            raise TypeError(&quot;unsupported operand type(s) for &gt;: 'Complex' and '{}'&quot;.format(type(other).__name__))\n\n    def __ge__(self, other):\n        if isinstance(other, Real):\n            return abs(self) &gt;= abs(other)\n        elif isinstance(other, Complex):\n            return abs(self) &gt;= abs(other)\n        else:\n            raise TypeError(&quot;unsupported operand type(s) for &gt;=: 'Complex' and '{}'&quot;.format(type(other).__name__))\n\n    def __neg__(self):\n        return Complex(-self.real, -self.imag)\n\n    def __abs__(self):\n        return sqrt(pow(self.real, 2) + pow(self.imag, 2))\n\n    def __str__(self):\n        return f&quot;{self.real} + {self.imag}i&quot;\n\n# Example usage\nc1 = Complex(3, 4)\nc2 = Complex(1, 2)\n\nprint(c1 + c2)  # Output: 4 + 6i\nprint(c1 * c2)  # Output: -5 + 14i\n</code></pre>\n\n<p>This implementation provides basic complex number operations such as addition, multiplication, and comparison. Note that this is a simple example and does not include all the methods required by the <code>complex</code> class in Python. You might want to extend it to handle more features or optimizations depending on your needs. In real-world applications, you would typically use Python's built-in <code>complex</code> class for complex number operations.</p>"
        },
        {
            "filename": "random - Generate pseudo-random numbers.md",
            "content": "<h1>random - Generate Pseudo-Random Numbers</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-basic-random-number-generation\">1. Basic Random Number Generation</a></li>\n<li><a href=\"#2-random-floating-point-numbers\">2. Random Floating-Point Numbers</a></li>\n<li><a href=\"#3-random-choice-from-a-list\">3. Random Choice from a List</a></li>\n<li><a href=\"#4-random-selection-with-replacement\">4. Random Selection with Replacement</a></li>\n<li><a href=\"#5-random-shuffle-a-list\">5. Random Shuffle a List</a></li>\n<li><a href=\"#6-random-seed-for-reproducibility\">6. Random Seed for Reproducibility</a></li>\n<li><a href=\"#7-random-normal-distribution\">7. Random Normal Distribution</a></li>\n<li><a href=\"#8-random-binomial-distribution\">8. Random Binomial Distribution</a></li>\n<li><a href=\"#9-random-exponential-distribution\">9. Random Exponential Distribution</a></li>\n<li><a href=\"#10-random-choices-with-weights\">10. Random Choices with Weights</a></li>\n</ol>\n<p>The <code>random</code> module in Python provides various functions to generate pseudo-random numbers, which are useful for simulations, cryptography, and more. Below are comprehensive examples of how to use this module to generate different types of random numbers.</p>\n<h2>1. Basic Random Number Generation</h2>\n<p>To generate a random integer within a specified range, you can use the <code>randint()</code> function:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import random\n\n# Generate a random integer between 1 and 10 (inclusive)\nrandom_integer = random.randint(1, 10)\nprint(&quot;Random Integer:&quot;, random_integer)\n\n# Generate a random integer between -5 and 5 (inclusive)\nrandom_integer_negative = random.randint(-5, 5)\nprint(&quot;Random Integer (negative range):&quot;, random_integer_negative)\n</code></pre>\n\n<h3>2. Random Floating-Point Numbers</h3>\n<p>To generate a floating-point number within a specified range, you can use the <code>uniform()</code> function:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import random\n\n# Generate a random floating-point number between 0 and 1\nrandom_float = random.uniform(0, 1)\nprint(&quot;Random Float:&quot;, random_float)\n\n# Generate a random floating-point number between 3.5 and 7.8\nrandom_float_custom_range = random.uniform(3.5, 7.8)\nprint(&quot;Random Float (custom range):&quot;, random_float_custom_range)\n</code></pre>\n\n<h3>3. Random Choice from a List</h3>\n<p>To select a random element from a list, you can use the <code>choice()</code> function:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import random\n\nfruits = ['apple', 'banana', 'cherry', 'date']\nrandom_fruit = random.choice(fruits)\nprint(&quot;Random Fruit:&quot;, random_fruit)\n\n# Selecting multiple random elements without replacement\nrandom_fruits_multiple = random.sample(fruits, 3)\nprint(&quot;Random Fruits (multiple selection without replacement):&quot;, random_fruits_multiple)\n</code></pre>\n\n<h3>4. Random Selection with Replacement</h3>\n<p>To select a random element from a list and allow replacement (i.e., selecting the same element multiple times), you can use the <code>choices()</code> function:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import random\n\nfruits = ['apple', 'banana', 'cherry', 'date']\nrandom_fruits_with_replacement = random.choices(fruits, k=3)\nprint(&quot;Random Fruits (with replacement):&quot;, random_fruits_with_replacement)\n</code></pre>\n\n<h3>5. Random Shuffle a List</h3>\n<p>To shuffle the elements of a list in place, you can use the <code>shuffle()</code> function:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import random\n\nfruits = ['apple', 'banana', 'cherry', 'date']\nrandom.shuffle(fruits)\nprint(&quot;Shuffled Fruits:&quot;, fruits)\n\n# Note: The original list is modified in place\n</code></pre>\n\n<h3>6. Random Seed for Reproducibility</h3>\n<p>To ensure that your random number generation is reproducible, you can set a seed using the <code>seed()</code> function:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import random\n\nrandom.seed(42)\nprint(&quot;Random Number with Seed:&quot;, random.randint(1, 10))\n\n# Using the same seed will produce the same random numbers\nrandom.seed(42)\nprint(&quot;Another Random Number with Same Seed:&quot;, random.randint(1, 10))\n</code></pre>\n\n<h3>7. Random Normal Distribution</h3>\n<p>To generate random numbers from a normal distribution, you can use the <code>normalvariate()</code> function:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import random\n\n# Generate a random number from a normal distribution with mean 0 and standard deviation 1\nrandom_normal = random.normalvariate(0, 1)\nprint(&quot;Random Normal Number:&quot;, random_normal)\n\n# Generate multiple numbers from a normal distribution\nrandom_normals = [random.normalvariate(0, 1) for _ in range(5)]\nprint(&quot;Random Normals:&quot;, random_normals)\n</code></pre>\n\n<h3>8. Random Binomial Distribution</h3>\n<p>To generate random numbers from a binomial distribution, you can use the <code>binomial()</code> function:</p>\n<p>pip install numpy</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import numpy as np\n\n# Generate a random number from a binomial distribution with parameters n=10 and p=0.5\nrandom_binomial = np.random.binomial(10, 0.5)\nprint(&quot;Random Binomial Number:&quot;, random_binomial)\n\n# Generate multiple numbers from a binomial distribution\nrandom_bins = [np.random.binomial(10, 0.5) for _ in range(5)]\nprint(&quot;Random Bins:&quot;, random_bins)\n</code></pre>\n\n<h3>9. Random Exponential Distribution</h3>\n<p>To generate random numbers from an exponential distribution, you can use the <code>expovariate()</code> function:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import random\n\n# Generate a random number from an exponential distribution with rate parameter \u03bb=1\nrandom_exponential = random.expovariate(1)\nprint(&quot;Random Exponential Number:&quot;, random_exponential)\n\n# Generate multiple numbers from an exponential distribution\nrandom_expenses = [random.expovariate(0.5) for _ in range(5)]\nprint(&quot;Random Expenses:&quot;, random_expenses)\n</code></pre>\n\n<h3>10. Random Choices with Weights</h3>\n<p>To generate a list of random choices based on weights, you can use the <code>choices()</code> function:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import random\n\nfruits = ['apple', 'banana', 'cherry', 'date']\nweights = [2, 3, 1, 4]  # Corresponding to the frequency of each fruit\n\nrandom_fruits_weighted = random.choices(fruits, weights=weights, k=5)\nprint(&quot;Random Fruits with Weights:&quot;, random_fruits_weighted)\n</code></pre>\n\n<h3>Conclusion</h3>\n<p>The <code>random</code> module in Python provides a wide range of functions to generate various types of pseudo-random numbers. These examples cover basic operations like generating integers and floats, selecting elements from lists, shuffling lists, and generating numbers from different distributions. By using these functions, you can effectively incorporate randomness into your applications for simulations, games, and more.</p>"
        },
        {
            "filename": "statistics - Mathematical statistics functions.md",
            "content": "<h1>statistics - Mathematical statistics functions</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-calculating-mean\">1. Calculating Mean</a></li>\n<li><a href=\"#2-calculating-median\">2. Calculating Median</a></li>\n<li><a href=\"#3-calculating-mode\">3. Calculating Mode</a></li>\n<li><a href=\"#4-calculating-standard-deviation\">4. Calculating Standard Deviation</a></li>\n<li><a href=\"#5-calculating-variance\">5. Calculating Variance</a></li>\n<li><a href=\"#6-calculating-quartiles\">6. Calculating Quartiles</a></li>\n<li><a href=\"#7-handling-large-data-sets\">7. Handling Large Data Sets</a></li>\n<li><a href=\"#8-handling-missing-values\">8. Handling Missing Values</a></li>\n<li><a href=\"#9-handling-negative-numbers\">9. Handling Negative Numbers</a></li>\n<li><a href=\"#10-handling-outliers\">10. Handling Outliers</a></li>\n</ol>\n<p>The <code>statistics</code> module in Python provides a collection of mathematical statistical functions. Below are comprehensive and well-documented examples for every possible functionality within this module, following best practices and suitable for inclusion in official documentation.</p>\n<h3>1. Calculating Mean</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import statistics\n\n# Example 1: Calculate the mean of a list of numbers\nnumbers = [10, 20, 30, 40, 50]\nmean_value = statistics.mean(numbers)\nprint(f&quot;Mean of {numbers}: {mean_value}&quot;)\n</code></pre>\n\n<h3>2. Calculating Median</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import statistics\n\n# Example 2: Calculate the median of a list of numbers\nnumbers = [10, 20, 30, 40, 50]\nmedian_value = statistics.median(numbers)\nprint(f&quot;Median of {numbers}: {median_value}&quot;)\n</code></pre>\n\n<h3>3. Calculating Mode</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import statistics\n\n# Example 3: Calculate the mode of a list of numbers\ndata = [1, 2, 2, 3, 4, 5, 5]\nmode_value = statistics.mode(data)\nprint(f&quot;Mode of {data}: {mode_value}&quot;)\n</code></pre>\n\n<h3>4. Calculating Standard Deviation</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import statistics\n\n# Example 4: Calculate the standard deviation of a list of numbers\ndata = [10, 20, 30, 40, 50]\nstd_dev_value = statistics.stdev(data)\nprint(f&quot;Standard Deviation of {data}: {std_dev_value}&quot;)\n</code></pre>\n\n<h3>5. Calculating Variance</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import statistics\n\n# Example 5: Calculate the variance of a list of numbers\ndata = [10, 20, 30, 40, 50]\nvariance_value = statistics.variance(data)\nprint(f&quot;Variance of {data}: {variance_value}&quot;)\n</code></pre>\n\n<h3>6. Calculating Quartiles</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import statistics\n\n# Example 6: Calculate the quartiles of a list of numbers\nnumbers = [10, 20, 30, 40, 50]\nquartiles = statistics.quantiles(numbers)\nprint(f&quot;Quartiles of {numbers}: {quartiles}&quot;)\n</code></pre>\n\n<h3>7. Handling Large Data Sets</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import statistics\n\n# Example 7: Calculate the mean of a large dataset using the 'statistics' module\nlarge_data = list(range(10000))  # Generates a list of numbers from 0 to 9999\nmean_large_value = statistics.mean(large_data)\nprint(f&quot;Mean of {len(large_data)} elements: {mean_large_value}&quot;)\n</code></pre>\n\n<h3>8. Handling Missing Values</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import statistics\n\n# Example 8: Calculate the mean while ignoring missing values (NaNs) in a list\nnumbers_with_nan = [10, 20, float('nan'), 40, 50]\nmean_nan_ignored = statistics.mean(numbers_with_nan)\nprint(f&quot;Mean of {numbers_with_nan} with NaN ignored: {mean_nan_ignored}&quot;)\n</code></pre>\n\n<h3>9. Handling Negative Numbers</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import statistics\n\n# Example 9: Calculate the mean of a list containing negative numbers\nnegative_numbers = [-10, -20, -30, -40, -50]\nmean_negative_value = statistics.mean(negative_numbers)\nprint(f&quot;Mean of {negative_numbers}: {mean_negative_value}&quot;)\n</code></pre>\n\n<h3>10. Handling Outliers</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import statistics\n\n# Example 10: Calculate the mean while ignoring outliers using the 'statistics' module's robust statistics approach\nnumbers_with_outlier = [10, 20, 30, 4000, 50]\nmean_robust_value = statistics.median(numbers_with_outlier)\nprint(f&quot;Robust mean of {numbers_with_outlier}: {mean_robust_value}&quot;)\n</code></pre>\n\n<h3>11. Handling Non-Numbers</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import statistics\n\n# Example 11: Calculate the mean while ignoring non-numbers in a list\nmixed_data = [10, 'a', 20, float('inf'), 40, 50]\nmean_non_number_ignored = statistics.mean(mixed_data)\nprint(f&quot;Mean of {len(mixed_data)} elements with non-numbers ignored: {mean_non_number_ignored}&quot;)\n</code></pre>\n\n<h3>12. Handling Large Number of Duplicates</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import statistics\n\n# Example 12: Calculate the mode of a list with multiple modes using the 'statistics' module's robust approach\ndata_with_multiple_modes = [1, 1, 2, 2, 3, 4]\nmode_robust_value = statistics.mode(data_with_multiple_modes)\nprint(f&quot;Robust mode of {data_with_multiple_modes}: {mode_robust_value}&quot;)\n</code></pre>\n\n<h3>13. Handling Small Sample Sizes</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import statistics\n\n# Example 13: Calculate the mean and standard deviation for a small sample size\nsmall_sample = [1, 2, 3, 4]\nmean_small_sample = statistics.mean(small_sample)\nstd_dev_small_sample = statistics.stdev(small_sample)\nprint(f&quot;Mean of {small_sample}: {mean_small_sample}&quot;)\nprint(f&quot;Standard Deviation of {small_sample}: {std_dev_small_sample}&quot;)\n</code></pre>\n\n<h3>14. Handling Continuous Data</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import statistics\n\n# Example 14: Calculate the mean and median for a continuous dataset\ncontinuous_data = [0.5, 1.5, 2.5, 3.5, 4.5]\nmean_continuous_value = statistics.mean(continuous_data)\nmedian_continuous_value = statistics.median(continuous_data)\nprint(f&quot;Mean of {continuous_data}: {mean_continuous_value}&quot;)\nprint(f&quot;Median of {continuous_data}: {median_continuous_value}&quot;)\n</code></pre>\n\n<h3>15. Handling Discrete Data</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import statistics\n\n# Example 15: Calculate the mode for a discrete dataset\ndiscrete_data = [1, 2, 3, 4, 5]\nmode_discrete_value = statistics.mode(discrete_data)\nprint(f&quot;Mode of {discrete_data}: {mode_discrete_value}&quot;)\n</code></pre>\n\n<p>These examples cover various aspects of statistical calculations using the <code>statistics</code> module in Python. Each example includes comments explaining the purpose and functionality of the code, making it suitable for documentation and educational purposes.</p>"
        }
    ],
    "Program Frameworks": [
        {
            "filename": "cmd - Support for line-oriented command interpreters.md",
            "content": "<h1>cmd - Support for line-oriented command interpreters</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-basic-command-interpreter\">Example 1: Basic Command Interpreter</a></li>\n<li><a href=\"#example-2-command-with-arguments\">Example 2: Command with Arguments</a></li>\n<li><a href=\"#example-3-command-with-flags\">Example 3: Command with Flags</a></li>\n<li><a href=\"#example-4-command-history\">Example 4: Command History</a></li>\n<li><a href=\"#example-5-subclassing-cmd-for-custom-commands\">Example 5: Subclassing <code>Cmd</code> for Custom Commands</a></li>\n<li><a href=\"#example-6-using-cmdcmd-in-a-web-application\">Example 6: Using <code>cmd.Cmd</code> in a Web Application</a></li>\n</ol>\n<p>The <code>cmd</code> module in Python provides a framework for writing line-oriented command interpreters, allowing you to create simple text-based interfaces for interacting with commands and processes.</p>\n<p>Here are some comprehensive code examples that cover various functionalities of the <code>cmd</code> module. These examples are designed to be clear, concise, and follow best practices suitable for inclusion in official documentation.</p>\n<h3>Example 1: Basic Command Interpreter</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import cmd\n\nclass SimpleInterpreter(cmd.Cmd):\n    prompt = '(simple) '\n\n    def do_hello(self, arg):\n        &quot;&quot;&quot;Print a greeting.&quot;&quot;&quot;\n        print(&quot;Hello!&quot;)\n\n    def do_exit(self, arg):\n        &quot;&quot;&quot;Exit the interpreter.&quot;&quot;&quot;\n        return True\n\nif __name__ == '__main__':\n    SimpleInterpreter().cmdloop()\n</code></pre>\n\n<h3>Example 2: Command with Arguments</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import cmd\n\nclass Calculator(cmd.Cmd):\n    prompt = '(calc) '\n\n    def do_add(self, arg):\n        &quot;&quot;&quot;Add two numbers.&quot;&quot;&quot;\n        try:\n            num1, num2 = map(float, arg.split())\n            result = num1 + num2\n            print(f&quot;Result: {result}&quot;)\n        except ValueError:\n            print(&quot;Please enter valid numbers.&quot;)\n\nif __name__ == '__main__':\n    Calculator().cmdloop()\n</code></pre>\n\n<h3>Example 3: Command with Flags</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import cmd\n\nclass FileManipulator(cmd.Cmd):\n    prompt = '(file) '\n\n    def do_open(self, arg):\n        &quot;&quot;&quot;Open a file and print its contents.&quot;&quot;&quot;\n        try:\n            filename = arg.strip()\n            with open(filename, 'r') as file:\n                content = file.read()\n                print(content)\n        except FileNotFoundError:\n            print(&quot;File not found.&quot;)\n\nif __name__ == '__main__':\n    FileManipulator().cmdloop()\n</code></pre>\n\n<h3>Example 4: Command History</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import cmd\n\nclass HistoryInterpreter(cmd.Cmd):\n    prompt = '(history) '\n    historyfile = None\n\n    def postcmd(self, stop, line):\n        &quot;&quot;&quot;Store the last command in history.&quot;&quot;&quot;\n        if not stop:\n            self.historyfile.append(line)\n        return True\n\nif __name__ == '__main__':\n    HistoryInterpreter().cmdloop()\n</code></pre>\n\n<h3>Example 5: Subclassing <code>Cmd</code> for Custom Commands</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import cmd\n\nclass MyCommand(cmd.Cmd):\n    prompt = '(mycommand) '\n\n    def do_create(self, arg):\n        &quot;&quot;&quot;Create a new file.&quot;&quot;&quot;\n        try:\n            filename = arg.strip()\n            with open(filename, 'w') as file:\n                print(f&quot;File {filename} created.&quot;)\n        except IOError:\n            print(&quot;Error creating the file.&quot;)\n\nif __name__ == '__main__':\n    MyCommand().cmdloop()\n</code></pre>\n\n<h3>Example 6: Using <code>cmd.Cmd</code> in a Web Application</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import cmd\nfrom http.server import HTTPServer, BaseHTTPRequestHandler\n\nclass CommandHTTPHandler(BaseHTTPRequestHandler):\n    prompt = '(command) '\n\n    def do_hello(self, arg):\n        &quot;&quot;&quot;Print a greeting over HTTP.&quot;&quot;&quot;\n        self.send_response(200)\n        self.wfile.write(b&quot;Hello!\\n&quot;)\n\nif __name__ == '__main__':\n    server_address = ('', 8000)\n    httpd = HTTPServer(server_address, CommandHTTPHandler)\n    print(&quot;Serving on port 8000...&quot;)\n    httpd.serve_forever()\n</code></pre>\n\n<p>These examples demonstrate how to create a simple command interpreter using the <code>cmd</code> module. Each example includes comments that explain the purpose of each part of the code, making it easier for others (or yourself in the future) to understand and modify the code.</p>\n<p>These examples can be expanded with more complex features such as error handling, input validation, and more sophisticated command structures to suit a wide range of applications.</p>"
        },
        {
            "filename": "shlex - Simple lexical analysis.md",
            "content": "<h1>shlex - Simple lexical analysis</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-basic-tokenization\">1. Basic Tokenization</a></li>\n<li><a href=\"#2-handling-quoted-strings\">2. Handling Quoted Strings</a></li>\n<li><a href=\"#3-escaping-characters\">3. Escaping Characters</a></li>\n<li><a href=\"#4-ignoring-comments\">4. Ignoring Comments</a></li>\n<li><a href=\"#5-handling-special-characters\">5. Handling Special Characters</a></li>\n<li><a href=\"#6-quoting-special-characters\">6. Quoting Special Characters</a></li>\n<li><a href=\"#7-handling-multiple-whitespace\">7. Handling Multiple Whitespace</a></li>\n<li><a href=\"#8-handling-non-latin-characters\">8. Handling Non-Latin Characters</a></li>\n<li><a href=\"#9-using-shlex-in-a-script\">9. Using <code>shlex</code> in a Script</a></li>\n<li><a href=\"#10-using-shlex-for-parsing-shell-commands\">10. Using <code>shlex</code> for Parsing Shell Commands</a></li>\n</ol>\n<p>The <code>shlex</code> module in Python provides a robust interface for parsing simple command-like strings into tokens, handling quoted strings, escaped characters, and other special cases that are common in shell scripts. Below are comprehensive examples of how to use each functionality provided by the <code>shlex</code> module.</p>\n<h3>1. Basic Tokenization</h3>\n<p>The most basic usage involves using the <code>shlex.split()</code> function to tokenize a string into a list of words.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import shlex\n\n# Example command-like string\ncommand = 'echo &quot;Hello, world!&quot;'\n\n# Tokenize the command\ntokens = shlex.split(command)\n\nprint(tokens)  # Output: ['echo', '&quot;Hello, world!&quot;']\n</code></pre>\n\n<h3>2. Handling Quoted Strings</h3>\n<p>Quoted strings are handled correctly by <code>shlex</code>. Double quotes allow for inclusion of spaces and other special characters within a single token.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import shlex\n\n# Example with quoted string\ncommand = 'ls -l &quot;file with spaces.txt&quot;'\n\n# Tokenize the command\ntokens = shlex.split(command)\n\nprint(tokens)  # Output: ['ls', '-l', '&quot;file with spaces.txt&quot;']\n</code></pre>\n\n<h3>3. Escaping Characters</h3>\n<p>Backslashes can be used to escape special characters within quoted strings.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import shlex\n\n# Example with escaped character\ncommand = 'echo &quot;This is a \\'quoted\\' string.&quot;'\n\n# Tokenize the command\ntokens = shlex.split(command)\n\nprint(tokens)  # Output: ['echo', '&quot;This is a \\'quoted\\' string.&quot;']\n</code></pre>\n\n<h3>4. Ignoring Comments</h3>\n<p>The <code>shlex</code> module can ignore comments in strings by setting the <code>commentchars</code> parameter.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import shlex\n\n# Example with comment\ncommand = 'ls -l /path/to/directory # This is a comment'\n\n# Tokenize the command, ignoring comments\ntokens = shlex.split(command, commentchars='#')\n\nprint(tokens)  # Output: ['ls', '-l', '/path/to/directory']\n</code></pre>\n\n<h3>5. Handling Special Characters</h3>\n<p>Special characters like <code>$</code>, <code>@</code>, and <code>!</code> are treated as part of tokens unless they are escaped or quoted.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import shlex\n\n# Example with special character\ncommand = 'echo $HOME'\n\n# Tokenize the command\ntokens = shlex.split(command)\n\nprint(tokens)  # Output: ['echo', '$HOME']\n</code></pre>\n\n<h3>6. Quoting Special Characters</h3>\n<p>Special characters can be quoted to ensure they are treated as literals.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import shlex\n\n# Example with quoted special character\ncommand = 'echo &quot;$USER&quot;'\n\n# Tokenize the command\ntokens = shlex.split(command)\n\nprint(tokens)  # Output: ['echo', '$USER']\n</code></pre>\n\n<h3>7. Handling Multiple Whitespace</h3>\n<p>The <code>split()</code> function automatically handles multiple whitespace characters as a single delimiter.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import shlex\n\n# Example with multiple whitespace\ncommand = 'ls -l /path/to/directory '\n\n# Tokenize the command\ntokens = shlex.split(command)\n\nprint(tokens)  # Output: ['ls', '-l', '/path/to/directory']\n</code></pre>\n\n<h3>8. Handling Non-Latin Characters</h3>\n<p>The <code>shlex</code> module can handle non-Latin characters correctly, ensuring that they are treated as part of tokens.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import shlex\n\n# Example with non-Latin character\ncommand = 'echo &quot;\u3053\u3093\u306b\u3061\u306f\u3001\u4e16\u754c&quot;'\n\n# Tokenize the command\ntokens = shlex.split(command)\n\nprint(tokens)  # Output: ['echo', '&quot;\u3053\u3093\u306b\u3061\u306f\u3001\u4e16\u754c&quot;']\n</code></pre>\n\n<h3>9. Using <code>shlex</code> in a Script</h3>\n<p>The <code>shlex</code> module can be used in scripts to parse command-line arguments or user input.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import shlex\n\n# Example script that processes command-line arguments\ndef process_command(command):\n    tokens = shlex.split(command)\n    print(&quot;Tokens:&quot;, tokens)\n\nif __name__ == &quot;__main__&quot;:\n    # Parse command-line arguments\n    import sys\n    if len(sys.argv) &gt; 1:\n        process_command(sys.argv[1])\n</code></pre>\n\n<h3>10. Using <code>shlex</code> for Parsing Shell Commands</h3>\n<p>The <code>shlex</code> module can be used to parse shell commands, handling complex structures like pipelines and redirects.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import shlex\nimport subprocess\n\n# Example of parsing a shell command\ncommand = 'ls -l | grep &quot;file*&quot;'\n\n# Tokenize the command\ntokens = shlex.split(command)\n\nprint(&quot;Tokens:&quot;, tokens)  # Output: ['ls', '-l', '|', 'grep', '&quot;file*&quot;', '']\n\n# Execute the command using subprocess\nprocess = subprocess.Popen(tokens, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\noutput, error = process.communicate()\n\nprint(&quot;Output:&quot;, output.decode('utf-8'))\nprint(&quot;Error:&quot;, error.decode('utf-8'))\n</code></pre>\n\n<p>These examples demonstrate various use cases for the <code>shlex</code> module, covering basic tokenization, handling of quotes and special characters, ignoring comments, and using the module in scripts. The code is designed to be clear and self-contained, with appropriate comments explaining each step.</p>"
        },
        {
            "filename": "turtle - Turtle graphics.md",
            "content": "<h1>turtle - Turtle graphics</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#basic-usage-example\">Basic Usage Example</a></li>\n<li><a href=\"#drawing-shapes-example\">Drawing Shapes Example</a></li>\n<li><a href=\"#drawing-a-circle-example\">Drawing a Circle Example</a></li>\n<li><a href=\"#customizing-turtle-appearance-example\">Customizing Turtle Appearance Example</a></li>\n<li><a href=\"#using-pen-up-and-down-commands-example\">Using Pen Up and Down Commands Example</a></li>\n<li><a href=\"#drawing-multiple-shapes-example\">Drawing Multiple Shapes Example</a></li>\n<li><a href=\"#using-functions-example\">Using Functions Example</a></li>\n<li><a href=\"#using-event-handling-example\">Using Event Handling Example</a></li>\n<li><a href=\"#using-screen-properties-example\">Using Screen Properties Example</a></li>\n</ol>\n<p>The <code>turtle</code> module is a versatile tool in Python that provides a simple way to create visual graphics using turtles, which are animated line segments on the screen. Here are comprehensive and well-documented code examples for various functionalities of the <code>turtle</code> module:</p>\n<h3>Basic Usage Example</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import turtle\n\n# Create a turtle object\nt = turtle.Turtle()\n\n# Move the turtle forward by 100 units\nt.forward(100)\n\n# Turn the turtle left by 90 degrees\nt.left(90)\n\n# Draw a square\nfor _ in range(4):\n    t.forward(100)\n    t.right(90)\n\n# Hide the turtle and exit on click\nt.hideturtle()\nturtle.done()\n</code></pre>\n\n<h3>Drawing Shapes Example</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import turtle\n\n# Create a turtle object\nt = turtle.Turtle()\n\n# Draw an equilateral triangle\nside_length = 100\nfor _ in range(3):\n    t.forward(side_length)\n    t.left(120)\n\n# Hide the turtle and exit on click\nt.hideturtle()\nturtle.done()\n</code></pre>\n\n<h3>Drawing a Circle Example</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import turtle\n\n# Create a turtle object\nt = turtle.Turtle()\n\n# Draw a circle with radius 50\nradius = 50\nt.circle(radius)\n\n# Hide the turtle and exit on click\nt.hideturtle()\nturtle.done()\n</code></pre>\n\n<h3>Customizing Turtle Appearance Example</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import turtle\n\n# Create a turtle object\nt = turtle.Turtle()\n\n# Set the color of the turtle to blue\nt.color(&quot;blue&quot;)\n\n# Set the shape of the turtle to square\nt.shape(&quot;square&quot;)\n\n# Draw a square with side length 100\nfor _ in range(4):\n    t.forward(100)\n    t.right(90)\n\n# Hide the turtle and exit on click\nt.hideturtle()\nturtle.done()\n</code></pre>\n\n<h3>Using Pen Up and Down Commands Example</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import turtle\n\n# Create a turtle object\nt = turtle.Turtle()\n\n# Move the turtle forward by 100 units\nt.forward(100)\n\n# Lift up the pen, so the turtle won't draw while moving\nt.penup()\n\n# Move the turtle backward by 50 units\nt.backward(50)\n\n# Put down the pen again to start drawing\nt.pendown()\n\n# Draw a line of length 100 from the current position\nt.forward(100)\n\n# Hide the turtle and exit on click\nt.hideturtle()\nturtle.done()\n</code></pre>\n\n<h3>Drawing Multiple Shapes Example</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import turtle\n\n# Create a turtle object\nt = turtle.Turtle()\n\n# Draw a square and then a circle\nside_length = 100\ncircle_radius = 50\n\n# Draw an equilateral triangle\nfor _ in range(3):\n    t.forward(side_length)\n    t.left(120)\n\n# Move to the position above the square\nt.penup()\nt.goto(-side_length // 2, side_length // 4)\nt.pendown()\n\n# Draw a circle\nt.circle(circle_radius)\n\n# Hide the turtle and exit on click\nt.hideturtle()\nturtle.done()\n</code></pre>\n\n<h3>Using Functions Example</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import turtle\n\n# Create a turtle object\nt = turtle.Turtle()\n\ndef draw_square(t, side_length):\n    &quot;&quot;&quot;Draws a square with the given side length.&quot;&quot;&quot;\n    for _ in range(4):\n        t.forward(side_length)\n        t.right(90)\n\ndef draw_circle(t, radius):\n    &quot;&quot;&quot;Draws a circle with the given radius.&quot;&quot;&quot;\n    t.circle(radius)\n\n# Draw a square and then a circle\nside_length = 100\ncircle_radius = 50\n\ndraw_square(t, side_length)\nt.penup()\nt.goto(-side_length // 2, side_length // 4)\nt.pendown()\n\ndraw_circle(t, circle_radius)\n\n# Hide the turtle and exit on click\nt.hideturtle()\nturtle.done()\n</code></pre>\n\n<h3>Using Event Handling Example</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import turtle\n\n# Create a turtle object\nt = turtle.Turtle()\n\ndef draw_square(event):\n    &quot;&quot;&quot;Draws a square in response to mouse click.&quot;&quot;&quot;\n    t.penup()\n    x, y = event.x, event.y\n    t.goto(x, y)\n    t.pendown()\n    for _ in range(4):\n        t.forward(50)\n        t.right(90)\n\n# Bind the draw_square function to the left button of the mouse\nturtle.onscreenclick(draw_square)\n\n# Hide the turtle and exit on click\nt.hideturtle()\nturtle.done()\n</code></pre>\n\n<h3>Using Screen Properties Example</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import turtle\n\n# Create a screen object with a specific background color\nscreen = turtle.Screen()\nscreen.bgcolor(&quot;lightblue&quot;)\n\n# Create a turtle object\nt = turtle.Turtle()\n\n# Draw a square and then change the background color to yellow\nside_length = 100\ncircle_radius = 50\n\ndraw_square(t, side_length)\nt.penup()\nt.goto(-side_length // 2, side_length // 4)\nt.pendown()\n\ndraw_circle(t, circle_radius)\n\n# Change the background color of the screen\nscreen.bgcolor(&quot;yellow&quot;)\n\n# Hide the turtle and exit on click\nt.hideturtle()\nturtle.done()\n</code></pre>\n\n<p>These examples cover a range of functionalities available in the <code>turtle</code> module, from basic drawing commands to more advanced features like event handling and screen properties. They are designed to be clear, concise, and suitable for inclusion in official documentation or educational materials.</p>"
        }
    ],
    "Python Language Services": [
        {
            "filename": "ast - Abstract Syntax Trees.md",
            "content": "<h1>ast - Abstract Syntax Trees</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-parsing-source-code\">1. Parsing Source Code</a></li>\n<li><a href=\"#2-walking-the-ast\">2. Walking the AST</a></li>\n<li><a href=\"#3-modifying-the-ast\">3. Modifying the AST</a></li>\n<li><a href=\"#4-evaluating-an-ast\">4. Evaluating an AST</a></li>\n<li><a href=\"#5-extracting-information-from-an-ast\">5. Extracting Information from an AST</a></li>\n</ol>\n<p>The <code>ast</code> module in Python is used to parse Python source code into an abstract syntax tree (AST). This AST can then be transformed or analyzed using various functions provided by the module. Below are comprehensive and well-documented code examples for each functionality available in the <code>ast</code> module.</p>\n<h3>1. Parsing Source Code</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ast\n\n# Sample Python source code as a string\nsource_code = &quot;&quot;&quot;\ndef add(a, b):\n    return a + b\n\nresult = add(3, 5)\n&quot;&quot;&quot;\n\n# Parse the source code into an AST\ntree = ast.parse(source_code)\n\n# Print the AST in a readable format\nprint(ast.dump(tree))\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- <code>ast.parse(source_code)</code>: Parses the given Python source code string into an abstract syntax tree (AST).\n- <code>ast.dump(tree)</code>: Prints the AST in a human-readable format.</p>\n<h3>2. Walking the AST</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ast\n\n# Sample AST from the previous example\ntree = ast.parse(source_code)\n\ndef traverse(node, indent=0):\n    print(' ' * indent + node.__class__.__name__)\n    for child in ast.iter_child_nodes(node):\n        traverse(child, indent + 4)\n\n# Traverse the AST and print each node's class name\ntraverse(tree)\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- <code>ast.iter_child_nodes(node)</code>: Iterates over all child nodes of a given AST node.\n- The <code>traverse</code> function is used to recursively print the structure of the AST, indenting each level for better readability.</p>\n<h3>3. Modifying the AST</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ast\n\n# Sample AST from the previous example\ntree = ast.parse(source_code)\n\ndef modify(node):\n    if isinstance(node, ast.FunctionDef) and node.name == 'add':\n        # Modify the function definition to include a docstring\n        node.body.insert(0, ast.Expr(value=ast.Str(s='This is a modified add function')))\n\n# Traverse the AST and modify nodes as needed\nmodify(tree)\n\n# Reconstruct the source code from the modified AST\nmodified_source_code = compile(tree, '&lt;input&gt;', 'exec')\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- <code>isinstance(node, ast.FunctionDef) and node.name == 'add'</code>: Checks if a node is a function definition named <code>add</code>.\n- <code>node.body.insert(0, ast.Expr(value=ast.Str(s='This is a modified add function')))</code> inserts a docstring at the beginning of the function's body.\n- <code>compile(tree, '&lt;input&gt;', 'exec')</code>: Converts the modified AST back into Python source code.</p>\n<h3>4. Evaluating an AST</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ast\nimport operator as op\n\n# Sample AST from the previous example\ntree = ast.parse(source_code)\n\ndef evaluate(node):\n    if isinstance(node, ast.Num):\n        return node.n\n    elif isinstance(node, ast.BinOp):\n        left = evaluate(ast.walk(node)[0])\n        right = evaluate(ast.walk(node)[-1])\n        operators = {\n            ast.Add: op.add,\n            ast.Sub: op.sub,\n            ast.Mult: op.mul,\n            ast.Div: op.truediv,\n            ast.Pow: op.pow\n        }\n        return operators[type(node.op)](left, right)\n    else:\n        raise ValueError(f&quot;Unsupported node type: {node.__class__.__name__}&quot;)\n\n# Evaluate the AST to compute the result of the `add` function call\nresult = evaluate(tree.body[0].value.args[1])\nprint(result)\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- <code>ast.walk(node)</code>: Generates a sequence of all nodes in the AST, which is then used to access specific nodes like numbers and binary operations.\n- <code>operators[type(node.op)](left, right)</code>: Maps binary operation node types to their corresponding Python operators for evaluation.</p>\n<h3>5. Extracting Information from an AST</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ast\n\n# Sample AST from the previous example\ntree = ast.parse(source_code)\n\ndef extract_functions(tree):\n    functions = []\n    for node in ast.walk(tree):\n        if isinstance(node, ast.FunctionDef):\n            functions.append(node.name)\n    return functions\n\n# Extract all function names from the AST\nfunction_names = extract_functions(tree)\nprint(function_names)\n</code></pre>\n\n<p><strong>Explanation:</strong>\n- <code>ast.walk(tree)</code>: Iterates over all nodes in the AST.\n- <code>isinstance(node, ast.FunctionDef)</code>: Checks if a node is a function definition.\n- Collects all function names into a list and returns it.</p>\n<p>These examples demonstrate various ways to use the <code>ast</code> module for parsing, analyzing, and modifying Python source code programmatically. The examples are designed to be clear, concise, and suitable for inclusion in official documentation.</p>"
        },
        {
            "filename": "compileall - Byte-compile Python libraries.md",
            "content": "<h1>compileall - Byte-compile Python libraries</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-byte-compile-all-modules-in-a-directory\">Example 1: Byte-Compile All Modules in a Directory</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#example-2-byte-compile-only-modified-modules\">Example 2: Byte-Compile Only Modified Modules</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#example-3-compile-all-modules-in-a-directory-and-output-errors-to-a-file\">Example 3: Compile All Modules in a Directory and Output Errors to a File</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#example-4-compile-all-modules-in-a-directory-with-optimization\">Example 4: Compile All Modules in a Directory with Optimization</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n</ol>\n<p>The <code>compileall</code> module in Python is used to byte-compile all modules within a specified directory, which can help improve the performance of your Python application by compiling source files into bytecode during execution. Below are comprehensive code examples for using the <code>compileall</code> module.</p>\n<h3>Example 1: Byte-Compile All Modules in a Directory</h3>\n<p>This example demonstrates how to use <code>compileall.compile_dir()</code> to byte-compile all modules in a directory.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import compileall\n\n# Specify the directory to be compiled\ndirectory_to_compile = '/path/to/your/python/library'\n\n# Compile all Python files in the specified directory\ncompiled_files = compileall.compile_dir(directory=directory_to_compile)\n\n# Print the list of compiled files\nprint(&quot;Compiled files:&quot;, compiled_files)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ol>\n<li><strong>Import <code>compileall</code>:</strong> Start by importing the <code>compileall</code> module.</li>\n<li><strong>Specify the Directory:</strong> Define the path to the directory containing your Python modules that you want to compile.</li>\n<li><strong>Compile All Files:</strong> Use <code>compileall.compile_dir()</code> with the specified directory. This function returns a list of filenames that were compiled.</li>\n<li><strong>Print Compiled Files:</strong> Print the list of files that were successfully compiled.</li>\n</ol>\n<h3>Example 2: Byte-Compile Only Modified Modules</h3>\n<p>This example shows how to use <code>compileall.compile_dir()</code> with the <code>force</code> parameter to byte-compile only modified modules since the last compilation.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import compileall\n\n# Specify the directory to be compiled\ndirectory_to_compile = '/path/to/your/python/library'\n\n# Compile only modified files, including those that were already compiled but have been updated\ncompiled_files = compileall.compile_dir(directory=directory_to_compile, force=True)\n\n# Print the list of compiled files\nprint(&quot;Compiled files:&quot;, compiled_files)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ol>\n<li><strong>Import <code>compileall</code>:</strong> Again, import the <code>compileall</code> module.</li>\n<li><strong>Specify the Directory:</strong> Define the path to the directory containing your Python modules.</li>\n<li><strong>Compile Only Modified Files:</strong> Use <code>compileall.compile_dir()</code> with the <code>force=True</code> parameter. This ensures that only files that have been modified since their last compilation are compiled again.</li>\n<li><strong>Print Compiled Files:</strong> Print the list of files that were successfully compiled, including any that were already present but updated.</li>\n</ol>\n<h3>Example 3: Compile All Modules in a Directory and Output Errors to a File</h3>\n<p>This example demonstrates how to use <code>compileall.compile_dir()</code> with an output file to capture any errors that occur during compilation.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import compileall\n\n# Specify the directory to be compiled\ndirectory_to_compile = '/path/to/your/python/library'\n\n# Specify the output file for error messages\noutput_file = 'compile_errors.txt'\n\n# Compile all Python files in the specified directory and write errors to a file\ncompiled_files, errors = compileall.compile_dir(directory=directory_to_compile, force=True, quiet=False)\n\n# Print the list of compiled files and any errors encountered\nprint(&quot;Compiled files:&quot;, compiled_files)\nprint(&quot;Errors:&quot;)\nfor error in errors:\n    print(error)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ol>\n<li><strong>Import <code>compileall</code>:</strong> Import the <code>compileall</code> module.</li>\n<li><strong>Specify the Directory:</strong> Define the path to the directory containing your Python modules.</li>\n<li><strong>Compile All Files and Capture Errors:</strong> Use <code>compileall.compile_dir()</code> with <code>force=True</code> and <code>quiet=False</code>. The <code>quiet=False</code> parameter ensures that errors are printed during compilation, and the results are also captured in a file specified by <code>output_file</code>.</li>\n<li><strong>Print Compiled Files and Errors:</strong> Print the list of files that were compiled and any error messages that occurred.</li>\n</ol>\n<h3>Example 4: Compile All Modules in a Directory with Optimization</h3>\n<p>This example shows how to use <code>compileall.compile_dir()</code> to byte-compile all modules in a directory, optimizing them for performance.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import compileall\n\n# Specify the directory to be compiled\ndirectory_to_compile = '/path/to/your/python/library'\n\n# Compile all Python files in the specified directory with optimization level 2\ncompiled_files = compileall.compile_dir(directory=directory_to_compile, force=True, optimize=2)\n\n# Print the list of compiled files\nprint(&quot;Compiled files:&quot;, compiled_files)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ol>\n<li><strong>Import <code>compileall</code>:</strong> Import the <code>compileall</code> module.</li>\n<li><strong>Specify the Directory:</strong> Define the path to the directory containing your Python modules.</li>\n<li><strong>Compile All Files with Optimization:</strong> Use <code>compileall.compile_dir()</code> with <code>force=True</code> and <code>optimize=2</code>. The optimization level 2 enables more aggressive optimizations, which can improve performance.</li>\n<li><strong>Print Compiled Files:</strong> Print the list of files that were successfully compiled.</li>\n</ol>\n<p>These examples provide a comprehensive overview of using the <code>compileall</code> module in Python to byte-compile your Python libraries. Each example demonstrates different use cases and options available for fine-tuning the compilation process.</p>"
        },
        {
            "filename": "dis - Disassembler for Python bytecode.md",
            "content": "<h1>dis - Disassembler for Python bytecode</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-basic-disassembly\">1. Basic Disassembly</a></li>\n<li><a href=\"#2-disassembling-a-built-in-function\">2. Disassembling a Built-in Function</a></li>\n<li><a href=\"#3-iterating-over-instructions\">3. Iterating Over Instructions</a></li>\n<li><a href=\"#4-disassembling-a-module\">4. Disassembling a Module</a></li>\n<li><a href=\"#5-disassembling-a-class-method\">5. Disassembling a Class Method</a></li>\n<li><a href=\"#6-disassembling-a-module-with-decorators\">6. Disassembling a Module with Decorators</a></li>\n<li><a href=\"#7-disassembling-a-generator-function\">7. Disassembling a Generator Function</a></li>\n<li><a href=\"#8-disassembling-a-list-comprehension\">8. Disassembling a List Comprehension</a></li>\n<li><a href=\"#9-disassembling-a-nested-function\">9. Disassembling a Nested Function</a></li>\n<li><a href=\"#10-disassembling-a-function-with-keyword-arguments\">10. Disassembling a Function with Keyword Arguments</a></li>\n</ol>\n<p>The <code>dis</code> module is a part of the Python standard library that provides a way to examine Python bytecode. It can help you understand how Python programs are executed and debug them. Below are several comprehensive examples demonstrating various functionalities of the <code>dis</code> module.</p>\n<h3>1. Basic Disassembly</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import dis\n\n# Example function to demonstrate basic disassembly\ndef example_function(x):\n    return x * 2 + 3\n\n# Get bytecode for the function\nbytecode = example_function.__code__.co_code\n\n# Disassemble the bytecode\ndis.dis(bytecode)\n</code></pre>\n\n<h3>2. Disassembling a Built-in Function</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import dis\n\n# Disassemble the built-in sum function\ndis.dis(sum)\n</code></pre>\n\n<h3>3. Iterating Over Instructions</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import dis\n\ndef print_instructions(func):\n    # Get bytecode for the function\n    bytecode = func.__code__.co_code\n\n    # Iterate over instructions and print them\n    for offset, instruction in enumerate(dis.get_instructions(bytecode)):\n        print(f&quot;{offset:04d}: {instruction.opname} {instruction.argval}&quot;)\n\n# Example function to demonstrate iterating over instructions\ndef example_function(x):\n    return x * 2 + 3\n\nprint_instructions(example_function)\n</code></pre>\n\n<h3>4. Disassembling a Module</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import dis\nimport inspect\n\n# Get bytecode for the current module\nmodule = inspect.currentframe().f_code.co_filename\nwith open(module, 'rb') as f:\n    bytecode = f.read()\n\n# Disassemble the bytecode of the entire module\ndis.dis(bytecode)\n</code></pre>\n\n<h3>5. Disassembling a Class Method</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import dis\n\nclass MyClass:\n    @staticmethod\n    def my_method(x):\n        return x * 2 + 3\n\n# Get bytecode for the class method\nbytecode = MyClass.my_method.__code__.co_code\n\n# Disassemble the bytecode\ndis.dis(bytecode)\n</code></pre>\n\n<h3>6. Disassembling a Module with Decorators</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import dis\nimport inspect\n\ndef my_decorator(func):\n    def wrapper(*args, **kwargs):\n        print(&quot;Decorator called&quot;)\n        return func(*args, **kwargs)\n    return wrapper\n\n@my_decorator\ndef example_function(x):\n    return x * 2 + 3\n\n# Get bytecode for the decorated function\nbytecode = example_function.__code__.co_code\n\n# Disassemble the bytecode\ndis.dis(bytecode)\n</code></pre>\n\n<h3>7. Disassembling a Generator Function</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import dis\n\ndef count_up_to(n):\n    i = 0\n    while i &lt; n:\n        yield i\n        i += 1\n\n# Get bytecode for the generator function\nbytecode = count_up_to.__code__.co_code\n\n# Disassemble the bytecode\ndis.dis(bytecode)\n</code></pre>\n\n<h3>8. Disassembling a List Comprehension</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import dis\n\ndef list_comprehension_example():\n    return [x * 2 + 3 for x in range(5)]\n\n# Get bytecode for the list comprehension\nbytecode = list_comprehension_example.__code__.co_code\n\n# Disassemble the bytecode\ndis.dis(bytecode)\n</code></pre>\n\n<h3>9. Disassembling a Nested Function</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import dis\n\ndef outer_function(x):\n    def inner_function(y):\n        return x * y + 3\n\n    return inner_function(2)\n\n# Get bytecode for the nested function\nbytecode = outer_function.__code__.co_code\n\n# Disassemble the bytecode\ndis.dis(bytecode)\n</code></pre>\n\n<h3>10. Disassembling a Function with Keyword Arguments</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import dis\n\ndef example_function_with_kwargs(x, y=3):\n    return x * y + 2\n\n# Get bytecode for the function with keyword arguments\nbytecode = example_function_with_kwargs.__code__.co_code\n\n# Disassemble the bytecode\ndis.dis(bytecode)\n</code></pre>\n\n<h3>11. Disassembling a Function with Default Values</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import dis\n\ndef example_function_with_defaults(x, y=3):\n    return x * y + 2\n\n# Get bytecode for the function with default values\nbytecode = example_function_with_defaults.__code__.co_code\n\n# Disassemble the bytecode\ndis.dis(bytecode)\n</code></pre>\n\n<p>These examples cover a range of functionalities within the <code>dis</code> module, from basic disassembly to more complex scenarios involving decorators and nested functions. Each example is thoroughly documented to help understand how to use each feature effectively.</p>"
        },
        {
            "filename": "keyword - Testing for Python keywords.md",
            "content": "<h1>keyword - Testing for Python keywords</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-basic-usage\">Example 1: Basic Usage</a></li>\n<li><a href=\"#example-2-using-all-with-keywordiskeyword\">Example 2: Using <code>all()</code> with <code>keyword.iskeyword()</code></a></li>\n<li><a href=\"#example-3-handling-non-string-inputs\">Example 3: Handling Non-String Inputs</a></li>\n<li><a href=\"#example-4-testing-keywords-in-specific-contexts\">Example 4: Testing Keywords in Specific Contexts</a></li>\n<li><a href=\"#example-5-using-list-to-get-all-keywords\">Example 5: Using <code>list()</code> to Get All Keywords</a></li>\n<li><a href=\"#example-6-using-in-operator-to-check-if-a-string-is-a-keyword\">Example 6: Using <code>in</code> Operator to Check if a String is a Keyword</a></li>\n<li><a href=\"#example-7-testing-keywords-in-different-programming-styles\">Example 7: Testing Keywords in Different Programming Styles</a></li>\n<li><a href=\"#example-8-testing-keywords-in-different-module-contexts\">Example 8: Testing Keywords in Different Module Contexts</a></li>\n</ol>\n<p>The <code>keyword</code> module in Python is used to test if a given string is a reserved word in the language. It provides a function called <code>iskeyword()</code> that returns <code>True</code> if the string is a keyword and <code>False</code> otherwise.</p>\n<p>Here are some examples of how to use the <code>keyword</code> module:</p>\n<h3>Example 1: Basic Usage</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import keyword\n\n# Check if 'def' is a keyword\nprint(keyword.iskeyword('def'))  # Output: True\n\n# Check if 'if' is also a keyword\nprint(keyword.iskeyword('if'))    # Output: True\n\n# Check if 'not' is not a keyword\nprint(keyword.iskeyword('not'))   # Output: False\n\n# Check if '0x123' is not a keyword\nprint(keyword.iskeyword('0x123'))  # Output: False\n</code></pre>\n\n<h3>Example 2: Using <code>all()</code> with <code>keyword.iskeyword()</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import keyword\n\n# List of words to test\nwords_to_test = ['def', 'if', 'not', '0x123', 'True']\n\n# Check if all elements in the list are keywords\nprint(all(keyword.iskeyword(word) for word in words_to_test))  # Output: True\n</code></pre>\n\n<h3>Example 3: Handling Non-String Inputs</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import keyword\n\n# Attempt to use iskeyword() with a non-string input\ntry:\n    print(keyword.iskeyword(123))   # Raises TypeError\nexcept TypeError as e:\n    print(e)  # Output: iskeyword() argument must be a string, not int\n</code></pre>\n\n<h3>Example 4: Testing Keywords in Specific Contexts</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import keyword\n\n# Check if keywords are correctly recognized in function definitions\ndef my_function():\n    pass\n\nprint(keyword.iskeyword('my_function'))  # Output: False\n\n# Define a local variable named 'for'\nfor i in range(10):\n    pass\n\nprint(keyword.iskeyword('for'))  # Output: True\n\n# Check if keywords are correctly recognized in class definitions\nclass MyClass:\n    pass\n\nprint(keyword.iskeyword('MyClass'))  # Output: False\n</code></pre>\n\n<h3>Example 5: Using <code>list()</code> to Get All Keywords</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import keyword\n\n# Convert all keywords into a list\nall_keywords = list(keyword.kwlist)\n\n# Print the first and last keywords in the list\nprint(&quot;First keyword:&quot;, all_keywords[0])  # Output: 'False'\nprint(&quot;Last keyword:&quot;, all_keywords[-1])   # Output: 'yield'\n</code></pre>\n\n<h3>Example 6: Using <code>in</code> Operator to Check if a String is a Keyword</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import keyword\n\n# List of words to check against keywords\nwords = ['def', 'if', 'else', 'return']\n\n# Use the in operator to check each word\nfor word in words:\n    print(f&quot;'{word}' is a keyword: {keyword.iskeyword(word)}&quot;)\n</code></pre>\n\n<h3>Example 7: Testing Keywords in Different Programming Styles</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import keyword\n\n# Define a function using keyword-style argument assignment\ndef my_function(name='World'):\n    print(f'Hello, {name}!')\n\n# Check if 'print' and 'if' are keywords\nprint(keyword.iskeyword('print'))   # Output: False\nprint(keyword.iskeyword('if'))    # Output: True\n\n# Define a class with keyword-style member variables\nclass MyClass:\n    def __init__(self, name):\n        self.name = name\n\n# Check if 'name' is a keyword\nprint(keyword.iskeyword('name'))  # Output: False\n</code></pre>\n\n<h3>Example 8: Testing Keywords in Different Module Contexts</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import keyword\n\n# Define a function using keyword-style argument assignment in another module\ndef my_function(name='World'):\n    print(f'Hello, {name}!')\n\n# Check if 'print' and 'if' are keywords\nprint(keyword.iskeyword('print'))   # Output: False\nprint(keyword.iskeyword('if'))    # Output: True\n\n# Define a class with keyword-style member variables in another module\nclass MyClass:\n    def __init__(self, name):\n        self.name = name\n\n# Check if 'name' is a keyword\nprint(keyword.iskeyword('name'))  # Output: False\n</code></pre>\n\n<p>These examples demonstrate various use cases of the <code>keyword</code> module, including basic testing, handling non-string inputs, and understanding keywords in different programming contexts.</p>"
        },
        {
            "filename": "parser - Access Python parse trees.md",
            "content": "<h1>parser - Access Python parse trees</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#notes\">Notes:</a></li>\n<li><a href=\"#example-for-parsing-html-with-htmlparser\">Example for Parsing HTML with <code>html.parser</code>:</a></li>\n<li><a href=\"#example-for-parsing-xml-with-xmletreeelementtree\">Example for Parsing XML with <code>xml.etree.ElementTree</code>:</a></li>\n</ol>\n<p>The <code>parser</code> module in Python is not a standard module, but it can be used to parse text files using regular expressions or simple parsing techniques. However, if you are referring to parsing HTML or XML documents, there are more suitable modules like <code>html.parser</code> and <code>xml.etree.ElementTree</code>.</p>\n<p>For those interested in parsing text with regular expressions or other basic parsing techniques, I can provide examples of how to use the <code>re</code> module for pattern matching:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import re\n\n# Example 1: Simple pattern matching using re.match()\npattern = r'hello'\ntext = 'hello world!'\nmatch = re.match(pattern, text)\n\nif match:\n    print('Pattern found:', match.group())\nelse:\n    print('Pattern not found.')\n\n# Example 2: Finding all occurrences of a pattern\npattern = r'\\bword\\b'\ntext = 'This is a word and another word.'\nmatches = re.findall(pattern, text)\nprint('Found words:', matches)\n\n# Example 3: Using regular expressions for simple parsing\ndef parse_phone_number(text):\n    pattern = r'(\\+\\d{1,2}\\s?)?(\\(?\\d{3}\\)?[-.\\s]?)\\d{3}[-.\\s]?\\d{4}'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return 'No phone number found.'\n\ntext = &quot;Contact: 123-456-7890 or +1 (401) 555-1234&quot;\nprint('Parsed phone number:', parse_phone_number(text))\n</code></pre>\n\n<h3>Notes:</h3>\n<ul>\n<li><strong><code>re.match()</code></strong>: This function checks for a match only at the beginning of the string.</li>\n<li><strong><code>re.findall()</code></strong>: This function returns all non-overlapping matches of pattern in string, as a list of strings. It is similar to <code>finditer()</code> but returns a list of strings instead of iterator objects.</li>\n<li><strong>Regular Expressions</strong>: The examples use basic regular expressions to match and parse patterns like words, phone numbers, etc.</li>\n</ul>\n<p>If you are looking to parse HTML or XML documents, consider using the <code>html.parser</code> or <code>xml.etree.ElementTree</code> modules:</p>\n<h3>Example for Parsing HTML with <code>html.parser</code>:</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from html.parser import HTMLParser\n\nclass MyHTMLParser(HTMLParser):\n    def handle_starttag(self, tag, attrs):\n        print('Start tag:', tag)\n        for attr in attrs:\n            print('Attribute:', attr)\n\n    def handle_endtag(self, tag):\n        print('End tag  :', tag)\n\n    def handle_data(self, data):\n        print('Data     :', data)\n\nhtml = &quot;&quot;&quot;\n&lt;html&gt;\n&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n&lt;p&gt;This is a &lt;a href=&quot;https://example.com&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n&quot;&quot;&quot;\n\nparser = MyHTMLParser()\nparser.feed(html)\n</code></pre>\n\n<h3>Example for Parsing XML with <code>xml.etree.ElementTree</code>:</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import xml.etree.ElementTree as ET\n\nxml_data = &quot;&quot;&quot;\n&lt;bookstore&gt;\n    &lt;book category=&quot;cooking&quot;&gt;\n        &lt;title lang=&quot;en&quot;&gt;Everyday Italian&lt;/title&gt;\n        &lt;author&gt;Giada De Laurentiis&lt;/author&gt;\n        &lt;year&gt;2005&lt;/year&gt;\n        &lt;price&gt;36.99&lt;/price&gt;\n    &lt;/book&gt;\n    &lt;book category=&quot;children&quot;&gt;\n        &lt;title lang=&quot;en&quot;&gt;Harry Potter&lt;/title&gt;\n        &lt;author&gt;J.K. Rowling&lt;/author&gt;\n        &lt;year&gt;2005&lt;/year&gt;\n        &lt;price&gt;29.99&lt;/price&gt;\n    &lt;/book&gt;\n&lt;/bookstore&gt;\n&quot;&quot;&quot;\n\nroot = ET.fromstring(xml_data)\n\nfor book in root.findall('book'):\n    title = book.find('title').text\n    author = book.find('author').text\n    year = book.find('year').text\n    price = book.find('price').text\n    print(f&quot;Title: {title}, Author: {author}, Year: {year}, Price: {price}&quot;)\n</code></pre>\n\n<p>These examples demonstrate how to parse simple text patterns and XML documents using Python's standard libraries. For parsing HTML, <code>html.parser</code> is sufficient for basic tasks; for more complex scenarios, consider using libraries like BeautifulSoup or lxml.</p>"
        },
        {
            "filename": "pickletools - Tools for pickle developers.md",
            "content": "<h1>pickletools - Tools for pickle developers</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#example-2-extracting-source-code-from-a-pickled-object\">Example 2: Extracting Source Code from a Pickled Object</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#example-3-generating-python-source-code-for-a-pickled-object\">Example 3: Generating Python Source Code for a Pickled Object</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n</ol>\n<p>The <code>pickletools</code> module in Python provides tools for examining and debugging pickled data, which is used to serialize and deserialize objects. Below are comprehensive code examples for each functionality provided by <code>pickletools</code>, including comments explaining each step.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Example 1: Inspecting a Pickle File\n\nimport pickletools\n\ndef inspect_pickle_file(filename):\n    # Open the pickle file in binary read mode\n    with open(filename, 'rb') as f:\n        # Load and parse the pickle data\n        parsed_data = pickletools.dis(f)\n\n        # Print the disassembly of the pickled data\n        for line in parsed_data.splitlines():\n            print(line)\n\n# Example usage\ninspect_pickle_file('example.pkl')\n</code></pre>\n\n<h3>Explanation:</h3>\n<ul>\n<li><strong>Function Definition</strong>: The function <code>inspect_pickle_file</code> takes a filename as an argument.</li>\n<li><strong>File Opening</strong>: The file is opened in binary read mode (<code>'rb'</code>) to handle the serialized data.</li>\n<li><strong>Loading and Parsing</strong>: The <code>pickletools.dis()</code> function is used to parse the pickle data, which disassembles it into human-readable form.</li>\n<li><strong>Output</strong>: Each line of disassembly is printed to the console.</li>\n</ul>\n<h3>Example 2: Extracting Source Code from a Pickled Object</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import pickletools\n\ndef extract_source_code(obj):\n    # Create an in-memory buffer and write the object to it\n    import io\n    buf = io.BytesIO()\n    pickle.dump(obj, buf)\n\n    # Get the bytecode of the pickled data\n    bytecodes = buf.getvalue()\n\n    # Disassemble the bytecodes\n    parsed_data = pickletools.dis(bytecodes)\n\n    # Print the disassembly\n    for line in parsed_data.splitlines():\n        print(line)\n\n# Example usage\nclass MyClass:\n    def __init__(self, value):\n        self.value = value\n\nobj = MyClass(42)\nextract_source_code(obj)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ul>\n<li><strong>Object Creation</strong>: A simple class <code>MyClass</code> is defined with an initializer.</li>\n<li><strong>Buffer and Serialization</strong>: The object is serialized into a memory buffer using <code>pickle.dump()</code>.</li>\n<li><strong>Bytecode Retrieval</strong>: The bytecodes are extracted from the buffer.</li>\n<li><strong>Disassembly</strong>: The <code>pickletools.dis()</code> function disassembles the bytecodes, providing insights into the serialization process.</li>\n</ul>\n<h3>Example 3: Generating Python Source Code for a Pickled Object</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import pickletools\nimport ast\n\ndef generate_python_source_code(obj):\n    # Create an in-memory buffer and write the object to it\n    import io\n    buf = io.BytesIO()\n    pickle.dump(obj, buf)\n\n    # Get the bytecodes of the pickled data\n    bytecodes = buf.getvalue()\n\n    # Disassemble the bytecodes\n    parsed_data = pickletools.dis(bytecodes)\n\n    # Parse the disassembly into Python source code\n    ast_code = ast.parse(parsed_data)\n\n    # Print the generated source code\n    import pprint\n    pprint.pprint(ast_code)\n\n# Example usage\nclass MyClass:\n    def __init__(self, value):\n        self.value = value\n\nobj = MyClass(42)\ngenerate_python_source_code(obj)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ul>\n<li><strong>Buffer and Serialization</strong>: Similar to example 2, the object is serialized into a buffer.</li>\n<li><strong>Disassembly</strong>: The bytecodes are disassembled to understand the serialization process.</li>\n<li><strong>Parsing</strong>: The <code>ast.parse()</code> function converts the disassembly into Python source code.</li>\n<li><strong>Output</strong>: The parsed source code is printed using <code>pprint.pprint()</code>, which provides a readable representation of the AST.</li>\n</ul>\n<p>These examples demonstrate how to use <code>pickletools</code> for various purposes, from inspecting pickled data to generating Python source code that reconstructs it.</p>"
        },
        {
            "filename": "py_compile - Compile Python source files.md",
            "content": "<h1>py_compile - Compile Python source files</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-compile-a-single-source-file\">Example 1: Compile a Single Source File</a></li>\n<li><a href=\"#example-2-compile-multiple-source-files-in-a-directory\">Example 2: Compile Multiple Source Files in a Directory</a></li>\n<li><a href=\"#example-3-compile-a-source-file-with-specific-options\">Example 3: Compile a Source File with Specific Options</a></li>\n<li><a href=\"#example-4-check-if-a-file-is-already-compiled\">Example 4: Check if a File is Already Compiled</a></li>\n<li><a href=\"#example-5-compile-a-source-file-with-specific-mode\">Example 5: Compile a Source File with Specific Mode</a></li>\n</ol>\n<p>The <code>py_compile</code> module in Python's standard library provides a simple way to compile Python source files into bytecode using the built-in compiler. This is useful for distributing Python programs, as it allows you to distribute only the compiled bytecode instead of the source code. Below are several examples demonstrating various functionalities of the <code>py_compile</code> module.</p>\n<h3>Example 1: Compile a Single Source File</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import py_compile\n\n# Specify the source file and its output path (compiled bytecode)\nsource_file = 'example.py'\nbytecode_file = 'example.pyc'\n\ntry:\n    # Compile the source file into bytecode\n    py_compile.compile(source_file, outdir=bytecode_file)\n    print(f&quot;Source file '{source_file}' compiled to '{bytecode_file}'.&quot;)\nexcept FileNotFoundError:\n    print(f&quot;Error: Source file '{source_file}' not found.&quot;)\nexcept Exception as e:\n    print(f&quot;An error occurred during compilation: {e}&quot;)\n</code></pre>\n\n<h3>Example 2: Compile Multiple Source Files in a Directory</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import py_compile\nimport os\n\n# Specify the directory containing source files and the output directory for bytecode\nsrc_dir = 'src'\nbytecode_dir = 'build'\n\ntry:\n    # Ensure the output directory exists\n    if not os.path.exists(bytecode_dir):\n        os.makedirs(bytecode_dir)\n\n    # Compile all .py files in the source directory into bytecode\n    for filename in os.listdir(src_dir):\n        if filename.endswith('.py'):\n            py_compile.compile(os.path.join(src_dir, filename), outdir=bytecode_dir)\n            print(f&quot;Compiled {filename} to {os.path.join(bytecode_dir, filename)}&quot;)\nexcept FileNotFoundError:\n    print(&quot;Error: Source directory not found.&quot;)\nexcept Exception as e:\n    print(f&quot;An error occurred during compilation: {e}&quot;)\n</code></pre>\n\n<h3>Example 3: Compile a Source File with Specific Options</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import py_compile\n\n# Specify the source file and its output path (compiled bytecode)\nsource_file = 'example.py'\nbytecode_file = 'example.pyc'\n\ntry:\n    # Compile the source file into bytecode with optimization enabled\n    py_compile.compile(source_file, outdir=bytecode_dir, optimize=2)\n    print(f&quot;Source file '{source_file}' compiled to '{bytecode_file}' with optimization level 2.&quot;)\nexcept FileNotFoundError:\n    print(&quot;Error: Source file not found.&quot;)\nexcept Exception as e:\n    print(f&quot;An error occurred during compilation: {e}&quot;)\n</code></pre>\n\n<h3>Example 4: Check if a File is Already Compiled</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import py_compile\n\n# Specify the source and bytecode files\nsource_file = 'example.py'\nbytecode_file = 'example.pyc'\n\nif py_compile.is_compiled(source_file):\n    print(f&quot;{source_file} is already compiled to {bytecode_file}.&quot;)\nelse:\n    print(f&quot;{source_file} is not yet compiled.&quot;)\n</code></pre>\n\n<h3>Example 5: Compile a Source File with Specific Mode</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import py_compile\n\n# Specify the source file and its output path (compiled bytecode)\nsource_file = 'example.py'\nbytecode_file = 'example.pyc'\n\ntry:\n    # Compile the source file into bytecode using the standard compiler mode\n    py_compile.compile(source_file, outdir=bytecode_dir, modname='example')\n    print(f&quot;Source file '{source_file}' compiled to '{bytecode_dir}/__pycache__/example.cpython-312-py3-none-any.pyc' with module name 'example'.&quot;)\nexcept FileNotFoundError:\n    print(&quot;Error: Source file not found.&quot;)\nexcept Exception as e:\n    print(f&quot;An error occurred during compilation: {e}&quot;)\n</code></pre>\n\n<p>These examples cover basic use cases for the <code>py_compile</code> module, including compiling a single source file, multiple files in a directory, specifying optimization levels, checking if a file is already compiled, and using a specific mode for compilation. Each example includes error handling to manage potential issues such as missing files or compilation errors.</p>"
        },
        {
            "filename": "pyclbr - Python class browser support.md",
            "content": "<h1>pyclbr - Python class browser support</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#explanation\">Explanation:</a></li>\n</ol>\n<p>The <code>pyclbr</code> module is a built-in Python module that provides a simple way to browse the directory of classes, functions, and methods defined by the Python compiler. It can be used to extract information about modules and objects within those modules.</p>\n<p>Here are comprehensive code examples for the <code>pyclbr</code> module:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import pyclbr\n\n# Load a module\nmodule = pyclbr.readmodule('os')\n\n# Print all classes in the loaded module\nprint(&quot;Classes in os:&quot;)\nfor cls in module.classes():\n    print(f&quot;  - {cls.name}&quot;)\n\n# Print all functions in the loaded module\nprint(&quot;\\nFunctions in os:&quot;)\nfor func in module.functions():\n    print(f&quot;  - {func.name}&quot;)\n\n# Print details of a specific class\nclass_name = 'os.path'\nif class_name in module.classes():\n    cls_details = module.classes()[class_name]\n    print(f&quot;\\nDetails of {class_name}:&quot;)\n    for attr in cls_details.attributes:\n        print(f&quot;  - {attr.name} ({attr.type})&quot;)\n\n# Print details of a specific function\nfunction_name = 'os.path.join'\nif function_name in module.functions():\n    func_details = module.functions()[function_name]\n    print(f&quot;\\nDetails of {function_name}:&quot;)\n    for arg in func_details.arguments:\n        print(f&quot;  - {arg.name} ({arg.type})&quot;)\n\n# Print all methods in a specific class\nclass_name = 'os.path'\nif class_name in module.classes():\n    cls_details = module.classes()[class_name]\n    print(&quot;\\nMethods in os.path:&quot;)\n    for method in cls_details.methods:\n        print(f&quot;  - {method.name} ({method.type})&quot;)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ol>\n<li><strong>Loading a Module</strong>: </li>\n<li>\n<p><code>pyclbr.readmodule('os')</code> loads the contents of the <code>os</code> module and returns a dictionary-like object containing information about all classes, functions, and methods defined in the module.</p>\n</li>\n<li>\n<p><strong>Printing All Classes</strong>:</p>\n</li>\n<li>\n<p>Iterates over the classes and prints their names.</p>\n</li>\n<li>\n<p><strong>Printing All Functions</strong>:</p>\n</li>\n<li>\n<p>Iterates over the functions and prints their names.</p>\n</li>\n<li>\n<p><strong>Details of a Specific Class</strong>:</p>\n</li>\n<li>Checks if a specific class exists and retrieves its details.</li>\n<li>\n<p>Prints all attributes, arguments, and methods for that class.</p>\n</li>\n<li>\n<p><strong>Details of a Specific Function</strong>:</p>\n</li>\n<li>Checks if a specific function exists and retrieves its details.</li>\n<li>\n<p>Prints all arguments and their types for that function.</p>\n</li>\n<li>\n<p><strong>Methods in a Specific Class</strong>:</p>\n</li>\n<li>Retrieves the methods of a specific class and prints them.</li>\n</ol>\n<p>These examples demonstrate how to use <code>pyclbr</code> to extract and display information about classes, functions, and methods within Python modules. The code is structured to be clear and easy to understand, making it suitable for inclusion in official documentation or educational purposes.</p>"
        },
        {
            "filename": "symtable - Access to the compiler s symbol tables.md",
            "content": "<h1>symtable - Access to the compiler\u2019s symbol tables</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-parsing-source-code\">Example 1: Parsing Source Code</a></li>\n<li><a href=\"#example-2-extracting-function-names\">Example 2: Extracting Function Names</a></li>\n<li><a href=\"#example-3-inspecting-node-attributes\">Example 3: Inspecting Node Attributes</a></li>\n<li><a href=\"#example-4-extracting-variable-names\">Example 4: Extracting Variable Names</a></li>\n<li><a href=\"#example-5-inspecting-node-types\">Example 5: Inspecting Node Types</a></li>\n<li><a href=\"#example-6-extracting-comments\">Example 6: Extracting Comments</a></li>\n</ol>\n<p>The <code>symtable</code> module in Python is designed to provide access to the symbol tables generated by the Python parser. These symbol tables are useful for introspection and can be used to understand the structure of a program's code at compile time. However, it's important to note that the <code>symtable</code> module is deprecated as of Python 3.8 and may not be supported in future versions. For most modern use cases, you should consider using other libraries or techniques for introspection.</p>\n<p>Below are some examples of how you might interact with the symbol tables using the <code>ast</code> module, which provides a way to parse Python source code into an abstract syntax tree (AST). While <code>symtable</code> is not directly available for ASTs in Python 3.8 and later, it can be used indirectly by understanding the structure of AST nodes.</p>\n<h3>Example 1: Parsing Source Code</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ast\n\n# Sample Python code\nsource_code = &quot;&quot;&quot;\ndef example_function(a, b):\n    return a + b\n&quot;&quot;&quot;\n\n# Parse the source code into an AST\ntree = ast.parse(source_code)\n\n# Print the type and name of each node in the AST\nfor node in tree:\n    print(f&quot;Node Type: {type(node).__name__}, Node Name: {node.__class__.__name__}&quot;)\n</code></pre>\n\n<h3>Example 2: Extracting Function Names</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ast\n\ndef extract_function_names(source_code):\n    tree = ast.parse(source_code)\n\n    function_names = set()\n    for node in ast.walk(tree):\n        if isinstance(node, ast.FunctionDef):\n            function_names.add(node.name)\n\n    return function_names\n\n# Sample Python code\nsource_code = &quot;&quot;&quot;\ndef example_function(a, b):\n    return a + b\n\ndef another_example_function(c, d):\n    e = c * d\n&quot;&quot;&quot;\n\n# Extract and print the function names\nfunction_names = extract_function_names(source_code)\nprint(&quot;Function Names:&quot;, function_names)\n</code></pre>\n\n<h3>Example 3: Inspecting Node Attributes</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ast\n\ndef inspect_node_attributes(source_code):\n    tree = ast.parse(source_code)\n\n    for node in ast.walk(tree):\n        if isinstance(node, ast.FunctionDef):\n            print(f&quot;Function Name: {node.name}&quot;)\n            print(&quot;Arguments:&quot;)\n            for arg in node.args.args:\n                print(f&quot;  - {arg.arg}&quot;)\n            print(&quot;Returns:&quot;, node.returns)\n\n# Sample Python code\nsource_code = &quot;&quot;&quot;\ndef example_function(a, b):\n    return a + b\n\ndef another_example_function(c, d):\n    e = c * d\n&quot;&quot;&quot;\n\n# Inspect attributes of function nodes\ninspect_node_attributes(source_code)\n</code></pre>\n\n<h3>Example 4: Extracting Variable Names</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ast\n\ndef extract_variable_names(source_code):\n    tree = ast.parse(source_code)\n\n    variable_names = set()\n    for node in ast.walk(tree):\n        if isinstance(node, (ast.Name, ast.Attribute)):\n            variable_names.add(node.id)\n\n    return variable_names\n\n# Sample Python code\nsource_code = &quot;&quot;&quot;\na = 10\nb = a + 20\nc = &quot;hello&quot;\nd = c * 3\n&quot;&quot;&quot;\n\n# Extract and print the variable names\nvariable_names = extract_variable_names(source_code)\nprint(&quot;Variable Names:&quot;, variable_names)\n</code></pre>\n\n<h3>Example 5: Inspecting Node Types</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ast\n\ndef inspect_node_types(source_code):\n    tree = ast.parse(source_code)\n\n    for node in ast.walk(tree):\n        print(f&quot;Node Type: {type(node).__name__}&quot;)\n\n# Sample Python code\nsource_code = &quot;&quot;&quot;\na = 10 + 20\nb = &quot;hello&quot;\nc = a + b\n&quot;&quot;&quot;\n\n# Inspect the types of nodes in the AST\ninspect_node_types(source_code)\n</code></pre>\n\n<h3>Example 6: Extracting Comments</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import ast\n\ndef extract_comments(source_code):\n    tree = ast.parse(source_code)\n\n    comments = []\n    for node in ast.walk(tree):\n        if isinstance(node, ast.Expr) and isinstance(node.value, ast.Str):\n            comments.append(node.value.s)\n\n    return comments\n\n# Sample Python code with comments\nsource_code = &quot;&quot;&quot;\na = 10 + 20  # This is a comment\nb = &quot;hello&quot;  # Another comment\nc = a + b\n&quot;&quot;&quot;\n\n# Extract and print the comments\ncomments = extract_comments(source_code)\nprint(&quot;Comments:&quot;, comments)\n</code></pre>\n\n<p>These examples demonstrate how to parse and inspect Python source code using the <code>ast</code> module, which provides a powerful way to interact with the abstract syntax tree of Python programs. While the <code>symtable</code> module is deprecated, understanding ASTs can be a useful tool for introspection in Python programs.</p>"
        },
        {
            "filename": "tabnanny - Detection of ambiguous indentation.md",
            "content": "<h1>tabnanny - Detection of ambiguous indentation</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-basic-usage\">1. Basic Usage</a></li>\n<li><a href=\"#2-custom-indentation-check\">2. Custom Indentation Check</a></li>\n<li><a href=\"#3-checking-multiple-files\">3. Checking Multiple Files</a></li>\n<li><a href=\"#4-skipping-lines\">4. Skipping Lines</a></li>\n<li><a href=\"#5-handling-output\">5. Handling Output</a></li>\n<li><a href=\"#6-using-tabnanny-as-a-command-line-tool\">6. Using <code>tabnanny</code> as a Command-Line Tool</a></li>\n<li><a href=\"#7-customizing-the-output-format\">7. Customizing the Output Format</a></li>\n</ol>\n<p>The <code>tabnanny</code> module is used to detect and report on ambiguous indentation in Python scripts. Ambiguous indentation can lead to errors or unexpected behavior, so it's important to ensure consistent indentation in your code. Below are comprehensive examples demonstrating various functionalities of the <code>tabnanny</code> module.</p>\n<h3>1. Basic Usage</h3>\n<p>The simplest use case for <code>tabnanny</code> is to check a file for ambiguous indentation and report any issues.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import tabnanny\n\n# Path to the Python script you want to check\nfile_path = 'example.py'\n\n# Run the check on the specified file\nproblems = tabnanny.check(open(file_path))\n\nif problems:\n    print(&quot;Ambiguous indentation found:&quot;)\n    for problem in problems:\n        print(problem)\nelse:\n    print(&quot;No ambiguous indentation issues found.&quot;)\n</code></pre>\n\n<h3>2. Custom Indentation Check</h3>\n<p>You can specify a custom indentation size when checking the file.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import tabnanny\n\n# Path to the Python script you want to check\nfile_path = 'example.py'\n\n# Specify a custom indentation size (e.g., 4 spaces)\ncustom_indent_size = 4\n\n# Run the check with a specified indentation size\nproblems = tabnanny.check(open(file_path), width=custom_indent_size)\n\nif problems:\n    print(&quot;Ambiguous indentation found:&quot;)\n    for problem in problems:\n        print(problem)\nelse:\n    print(&quot;No ambiguous indentation issues found.&quot;)\n</code></pre>\n\n<h3>3. Checking Multiple Files</h3>\n<p>You can check multiple files at once by providing a list of file paths.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import tabnanny\n\n# List of Python script paths you want to check\nfile_paths = ['example1.py', 'example2.py']\n\n# Run the check on the specified files\nproblems = tabnanny.check([open(file_path) for file_path in file_paths])\n\nif problems:\n    print(&quot;Ambiguous indentation found:&quot;)\n    for problem in problems:\n        print(problem)\nelse:\n    print(&quot;No ambiguous indentation issues found.&quot;)\n</code></pre>\n\n<h3>4. Skipping Lines</h3>\n<p>You can specify lines to skip during the check by providing a list of line numbers.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import tabnanny\n\n# Path to the Python script you want to check\nfile_path = 'example.py'\n\n# Specify lines to skip\nlines_to_skip = [1, 5]  # Skip lines 1 and 5\n\n# Run the check with specified lines to skip\nproblems = tabnanny.check(open(file_path), skip=[line - 1 for line in lines_to_skip])\n\nif problems:\n    print(&quot;Ambiguous indentation found:&quot;)\n    for problem in problems:\n        print(problem)\nelse:\n    print(&quot;No ambiguous indentation issues found.&quot;)\n</code></pre>\n\n<h3>5. Handling Output</h3>\n<p>You can handle the output of the check using a custom function.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import tabnanny\n\ndef print_problem(problem):\n    print(f&quot;Line: {problem.line}, Column: {problem.column}, Indent: {problem.indent}&quot;)\n\n# Path to the Python script you want to check\nfile_path = 'example.py'\n\n# Run the check and handle each problem using a custom function\nproblems = tabnanny.check(open(file_path), line_handler=print_problem)\n\nif problems:\n    print(&quot;Ambiguous indentation found.&quot;)\nelse:\n    print(&quot;No ambiguous indentation issues found.&quot;)\n</code></pre>\n\n<h3>6. Using <code>tabnanny</code> as a Command-Line Tool</h3>\n<p>You can use <code>tabnanny</code> as a command-line tool to check files directly.</p>\n<pre class=\"codehilite\"><code class=\"language-sh\"># Run tabnanny on a file\npython -m tabnanny example.py\n\n# Check multiple files using a wildcard\npython -m tabnanny *.py\n</code></pre>\n\n<h3>7. Customizing the Output Format</h3>\n<p>You can customize the output format by providing a custom handler function.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import tabnanny\n\ndef print_custom(problem):\n    print(f&quot;Line: {problem.line}, Indent: {problem.indent}, Reason: {problem.reason}&quot;)\n\n# Path to the Python script you want to check\nfile_path = 'example.py'\n\n# Run the check with a custom line handler and format\nproblems = tabnanny.check(open(file_path), line_handler=print_custom, width=4)\n\nif problems:\n    print(&quot;Ambiguous indentation found:&quot;)\nelse:\n    print(&quot;No ambiguous indentation issues found.&quot;)\n</code></pre>\n\n<p>These examples cover various scenarios for using <code>tabnanny</code> to detect and report on ambiguous indentation in Python scripts. By following these examples, you can effectively use <code>tabnanny</code> to maintain clean and consistent code indentation across your projects.</p>"
        },
        {
            "filename": "token - Constants used with Python parse trees.md",
            "content": "<h1>token - Constants used with Python parse trees</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#explanation\">Explanation:</a></li>\n</ol>\n<p>The <code>token</code> module in Python provides constants that are used to identify different types of tokens in a Python source code. These constants are part of the Abstract Syntax Tree (AST) and are used by tools like PEP 8 checkers, linters, and static code analysis tools to analyze Python code.</p>\n<p>Here are comprehensive examples for each constant provided by the <code>token</code> module:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import token\n\n# Define a simple Python expression as a string\nsource_code = &quot;42 + 5&quot;\n\n# Tokenize the source code into tokens\ntokens = []\nfor tok in tokenize.tokenize(io.BytesIO(source_code.encode('utf-8')).readline):\n    # Append each token to the list with its type and value\n    tokens.append((tok.type, tok.string))\n\n# Print the list of tokens\nprint(tokens)\n\n# Example: Extracting specific tokens from the list\ninteger_tokens = [t for t in tokens if t[0] == token.NUMBER]\nprint(integer_tokens)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ol>\n<li>\n<p><strong>Import Token</strong>: The <code>token</code> module is imported to access the constants and functions related to tokens.</p>\n</li>\n<li>\n<p><strong>Source Code</strong>: A simple Python expression is defined as a string.</p>\n</li>\n<li>\n<p><strong>Tokenization</strong>: The <code>tokenize.tokenize()</code> function is used to tokenize the source code. It reads the source code line by line, converting it into a sequence of tokens.</p>\n</li>\n<li>\n<p><strong>Collect Tokens</strong>: Each token is captured and stored in a list along with its type and value.</p>\n</li>\n<li>\n<p><strong>Print Tokens</strong>: The list of tokens is printed, showing each token's type and string representation.</p>\n</li>\n<li>\n<p><strong>Extract Specific Tokens</strong>: A list comprehension is used to extract all <code>NUMBER</code> tokens from the list, which represent integer literals in Python.</p>\n</li>\n</ol>\n<p>These examples demonstrate how to use the <code>token</code> module to process and analyze Python source code tokens.</p>"
        },
        {
            "filename": "tokenize - Tokenizer for Python source.md",
            "content": "<h1>tokenize - Tokenizer for Python source</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-basic-tokenization\">Example 1: Basic Tokenization</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#example-2-handling-errors-in-tokenization\">Example 2: Handling Errors in Tokenization</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#example-3-extracting-tokens-with-specific-names\">Example 3: Extracting Tokens with Specific Names</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#example-4-tokenizing-from-a-file\">Example 4: Tokenizing from a File</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n</ol>\n<p>The <code>tokenize</code> module in Python is used to break a Python source file into tokens, which are the smallest units of Python syntax. Below are comprehensive examples demonstrating various functionalities provided by the <code>tokenize</code> module.</p>\n<h3>Example 1: Basic Tokenization</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tokenize\nfrom io import BytesIO\n\n# Define a sample Python code as a byte string\ncode = b'print(&quot;Hello, World!&quot;)'\n\n# Create a buffer from the byte string\nbuffer = BytesIO(code)\n\n# Get an iterator over the tokens in the buffer\ntokens = tokenize.tokenize(buffer.readline)\n\n# Iterate and print each token\nfor toknum, tokval, start, end, line in tokens:\n    print(f&quot;Token: {toknum}, Value: '{tokval}', Start: {start}, End: {end}, Line: '{line}'&quot;)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ul>\n<li><strong>Import Statements</strong>: We import the <code>tokenize</code> module and <code>BytesIO</code> from the <code>io</code> module.</li>\n<li><strong>Buffer Creation</strong>: We create a byte string representing a simple Python statement and wrap it in a <code>BytesIO</code> buffer. This allows us to simulate reading from a file-like object.</li>\n<li><strong>Tokenization</strong>: We use the <code>tokenize.tokenize()</code> function, which takes a generator that returns lines of input. Each token is returned as an iterable of five elements: <code>(toknum, tokval, start, end, line)</code>.</li>\n<li><strong>Output</strong>: We print each token's numeric type, value, and location within the source code.</li>\n</ul>\n<h3>Example 2: Handling Errors in Tokenization</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tokenize\nfrom io import BytesIO\n\n# Define a sample Python code with an error\ncode = b'print(&quot;Hello, World!'; # This is a syntax error'\n\n# Create a buffer from the byte string\nbuffer = BytesIO(code)\n\n# Get an iterator over the tokens in the buffer\ntokens = tokenize.tokenize(buffer.readline)\n\ntry:\n    for toknum, tokval, start, end, line in tokens:\n        print(f&quot;Token: {toknum}, Value: '{tokval}', Start: {start}, End: {end}, Line: '{line}'&quot;)\nexcept tokenize.TokenError as e:\n    print(f&quot;Error encountered at tokenization: {e}&quot;)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ul>\n<li><strong>Error Handling</strong>: We handle <code>tokenize.TokenError</code> to catch and report any errors that occur during tokenization.</li>\n<li><strong>Output</strong>: The error message is printed if an exception occurs, providing more context about the problem.</li>\n</ul>\n<h3>Example 3: Extracting Tokens with Specific Names</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tokenize\nfrom io import BytesIO\n\n# Define a sample Python code with multiple tokens\ncode = b'x = y + z; print(x);'\n\n# Create a buffer from the byte string\nbuffer = BytesIO(code)\n\n# Get an iterator over the tokens in the buffer\ntokens = tokenize.tokenize(buffer.readline)\n\n# Extract and print only 'NAME' (variable names) and 'NUMBER' (numeric literals)\nfor toknum, tokval, start, end, line in tokens:\n    if toknum in (tokenize.NAME, tokenize.NUMBER):\n        print(f&quot;Token: {toknum}, Value: '{tokval}', Start: {start}, End: {end}, Line: '{line}'&quot;)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ul>\n<li><strong>Filtering Tokens</strong>: We filter tokens based on their numeric identifiers <code>tokenize.NAME</code> (variable names) and <code>tokenize.NUMBER</code> (numeric literals).</li>\n<li><strong>Output</strong>: Only the filtered tokens are printed, showcasing how to selectively extract specific types of tokens.</li>\n</ul>\n<h3>Example 4: Tokenizing from a File</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import tokenize\nimport os\n\n# Define the path to a Python source file\nfile_path = 'example.py'\n\n# Open and read the file\nwith open(file_path, 'rb') as file:\n    code = file.read()\n\n# Create a buffer from the file content\nbuffer = BytesIO(code)\n\n# Get an iterator over the tokens in the buffer\ntokens = tokenize.tokenize(buffer.readline)\n\n# Iterate and print each token\nfor toknum, tokval, start, end, line in tokens:\n    print(f&quot;Token: {toknum}, Value: '{tokval}', Start: {start}, End: {end}, Line: '{line}'&quot;)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ul>\n<li><strong>File Handling</strong>: We open a file in binary mode and read its content into a byte string.</li>\n<li><strong>Buffer Creation</strong>: Similar to the previous examples, we create a <code>BytesIO</code> buffer from the file content.</li>\n<li><strong>Tokenization</strong>: The tokenization process is identical to before, but now we are processing tokens from a file instead of a byte string.</li>\n</ul>\n<p>These examples demonstrate how to use the <code>tokenize</code> module effectively for various tasks such as analyzing Python code, debugging, or extracting specific information from source files.</p>"
        }
    ],
    "Python Runtime Services": [
        {
            "filename": "__future__ - Future statement definitions.md",
            "content": "<h1><strong>future</strong> - Future statement definitions</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-using-generators-with-expressions\">1. Using Generators with Expressions</a></li>\n<li><a href=\"#2-unpacking-star-expressions\">2. Unpacking Star Expressions</a></li>\n<li><a href=\"#3-division-behavior\">3. Division Behavior</a></li>\n<li><a href=\"#4-print-function-syntax\">4. Print Function Syntax</a></li>\n<li><a href=\"#5-float-division-with\">5. Float Division with <code>//</code></a></li>\n</ol>\n<p>The <code>__future__</code> module in Python provides a way to specify features that are still experimental or may change in future versions of the language. These features can be enabled by using \"future\" statements at the top of your script or module. This module is part of Python's standard library, so it doesn't need to be installed separately.</p>\n<p>Here are some examples of how you might use <code>__future__</code> statements:</p>\n<h3>1. Using Generators with Expressions</h3>\n<p>In Python 3, generators can be used in expressions directly without parentheses. To enable this behavior in earlier versions of Python, you can use the <code>from __future__ import generator_expr</code>.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Example using generator expressions before Python 3\neven_numbers = (x for x in range(10) if x % 2 == 0)\n\n# Using generator expression with future statement in Python 2\nfrom __future__ import generator_expr\n\neven_numbers = (x for x in range(10) if x % 2 == 0)\n</code></pre>\n\n<h3>2. Unpacking Star Expressions</h3>\n<p>In Python 3, you can use the <code>*</code> operator directly to unpack iterables into positional arguments without parentheses. To enable this behavior in earlier versions of Python, you can use the <code>from __future__ import star_args</code>.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Example using star expressions before Python 3\ndef print_numbers(*args):\n    for num in args:\n        print(num)\n\nnumbers = [1, 2, 3]\nprint_numbers(numbers)  # Output: 1 2 3\n\n# Using star expressions with future statement in Python 2\nfrom __future__ import star_args\n\ndef print_numbers(*args):\n    for num in args:\n        print(num)\n\nnumbers = [1, 2, 3]\nprint_numbers(*numbers)  # Output: 1 2 3\n</code></pre>\n\n<h3>3. Division Behavior</h3>\n<p>In Python 3, the division of two integers results in a float. However, in earlier versions, it performed integer division and returned an integer result. To enable the behavior of returning a float, you can use the <code>from __future__ import division</code>.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Example of integer division before Python 3\nresult = 5 / 2  # Output: 2\n\n# Using division with future statement in Python 2\nfrom __future__ import division\n\nresult = 5 / 2  # Output: 2.5\n</code></pre>\n\n<h3>4. Print Function Syntax</h3>\n<p>In Python 3, the <code>print</code> function is a built-in function and does not require parentheses around its arguments. To enable this behavior in earlier versions of Python, you can use the <code>from __future__ import print_function</code>.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Example using print function without parentheses before Python 3\nprint(&quot;Hello&quot;, &quot;World&quot;)\n\n# Using print function with future statement in Python 2\nfrom __future__ import print_function\n\nprint(&quot;Hello&quot;, &quot;World&quot;)\n</code></pre>\n\n<h3>5. Float Division with <code>//</code></h3>\n<p>In Python 3, the floor division of two integers returns an integer result. To enable this behavior in earlier versions of Python, you can use the <code>from __future__ import floor_division</code>.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Example of floor division before Python 3\nresult = 5 // 2  # Output: 2\n\n# Using floor division with future statement in Python 2\nfrom __future__ import floor_division\n\nresult = 5 // 2  # Output: 2\n</code></pre>\n\n<p>These examples demonstrate how to use <code>__future__</code> statements to leverage new features of Python without breaking compatibility with older versions. It's important to note that not all features are supported by the <code>__future__</code> module, and some may require additional imports or configuration depending on your specific use case and environment.</p>"
        },
        {
            "filename": "__main__ - Top-level script environment.md",
            "content": "<h1><strong>main</strong> - Top-level script environment</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-printing-a-message\">Example 1: Printing a Message</a></li>\n<li><a href=\"#example-2-defining-a-function-with-command-line-arguments\">Example 2: Defining a Function with Command-Line Arguments</a></li>\n<li><a href=\"#example-3-handling-exceptions\">Example 3: Handling Exceptions</a></li>\n<li><a href=\"#example-4-using-a-main-function\">Example 4: Using a Main Function</a></li>\n<li><a href=\"#example-5-using-if-__name__-__main__-for-test-execution\">Example 5: Using <code>if __name__ == \"__main__\":</code> for Test Execution</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n</ol>\n<p>The <code>__main__</code> module is a special module in Python that serves as the entry point for standalone scripts or when a script is executed from the command line. It allows you to define functions, classes, and variables that are not accessible by other modules.</p>\n<p>Here's a comprehensive set of code examples demonstrating different functionalities within the <code>__main__</code> module:</p>\n<h3>Example 1: Printing a Message</h3>\n<pre class=\"codehilite\"><code class=\"language-python\"># Main script file, e.g., my_script.py\n\ndef main():\n    &quot;&quot;&quot;\n    This function is the entry point for the script.\n    It prints a welcome message when the script is run.\n    &quot;&quot;&quot;\n    print(&quot;Welcome to my Python script!&quot;)\n\nif __name__ == &quot;__main__&quot;:\n    # Check if this script is being run directly (not imported)\n    main()\n</code></pre>\n\n<h3>Example 2: Defining a Function with Command-Line Arguments</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import sys\n\ndef sum_numbers(numbers):\n    &quot;&quot;&quot;\n    This function takes a list of numbers as input and returns their sum.\n    It uses command-line arguments for flexibility.\n    &quot;&quot;&quot;\n    total = 0\n    for number in numbers:\n        total += int(number)\n    return total\n\nif __name__ == &quot;__main__&quot;:\n    # Check if this script is being run directly (not imported)\n    if len(sys.argv) &gt; 1:\n        numbers = sys.argv[1:]\n        result = sum_numbers(numbers)\n        print(f&quot;The sum of {numbers} is {result}.&quot;)\n    else:\n        print(&quot;Please provide a list of numbers as command-line arguments.&quot;)\n</code></pre>\n\n<h3>Example 3: Handling Exceptions</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">def divide(a, b):\n    &quot;&quot;&quot;\n    This function divides two numbers and handles exceptions.\n    It returns the result or an error message if division by zero occurs.\n    &quot;&quot;&quot;\n    try:\n        return a / b\n    except ZeroDivisionError:\n        return &quot;Error: Division by zero is not allowed.&quot;\n\nif __name__ == &quot;__main__&quot;:\n    # Check if this script is being run directly (not imported)\n    try:\n        num1 = int(input(&quot;Enter the first number: &quot;))\n        num2 = int(input(&quot;Enter the second number: &quot;))\n        result = divide(num1, num2)\n        print(f&quot;The result of {num1} divided by {num2} is {result}.&quot;)\n    except ValueError:\n        print(&quot;Error: Please enter valid integers.&quot;)\n</code></pre>\n\n<h3>Example 4: Using a Main Function</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">def add(a, b):\n    &quot;&quot;&quot;\n    This function adds two numbers.\n    It returns the sum of `a` and `b`.\n    &quot;&quot;&quot;\n    return a + b\n\ndef subtract(a, b):\n    &quot;&quot;&quot;\n    This function subtracts `b` from `a`.\n    It returns the result of `a - b`.\n    &quot;&quot;&quot;\n    return a - b\n\ndef multiply(a, b):\n    &quot;&quot;&quot;\n    This function multiplies two numbers.\n    It returns the product of `a` and `b`.\n    &quot;&quot;&quot;\n    return a * b\n\ndef divide(a, b):\n    &quot;&quot;&quot;\n    This function divides `a` by `b`.\n    It returns the result of `a / b`.\n    &quot;&quot;&quot;\n    try:\n        return a / b\n    except ZeroDivisionError:\n        return &quot;Error: Division by zero is not allowed.&quot;\n\nif __name__ == &quot;__main__&quot;:\n    # Check if this script is being run directly (not imported)\n    print(&quot;Options:&quot;)\n    print(&quot;1. Add&quot;)\n    print(&quot;2. Subtract&quot;)\n    print(&quot;3. Multiply&quot;)\n    print(&quot;4. Divide&quot;)\n\n    choice = input(&quot;Enter your choice: &quot;)\n    num1 = float(input(&quot;Enter the first number: &quot;))\n    num2 = float(input(&quot;Enter the second number: &quot;))\n\n    if choice == '1':\n        result = add(num1, num2)\n    elif choice == '2':\n        result = subtract(num1, num2)\n    elif choice == '3':\n        result = multiply(num1, num2)\n    elif choice == '4':\n        result = divide(num1, num2)\n    else:\n        print(&quot;Invalid choice.&quot;)\n        exit()\n\n    print(f&quot;The result of {num1} {choice} {num2} is {result}.&quot;)\n</code></pre>\n\n<h3>Example 5: Using <code>if __name__ == \"__main__\":</code> for Test Execution</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">def multiply(a, b):\n    &quot;&quot;&quot;\n    This function multiplies two numbers.\n    It returns the product of `a` and `b`.\n    &quot;&quot;&quot;\n    return a * b\n\n# Test cases to verify the correctness of the multiply function\ndef test_multiply():\n    assert multiply(2, 3) == 6\n    assert multiply(-1, 5) == -5\n    assert multiply(0, 7) == 0\n    assert multiply(4.5, 2) == 9.0\n\nif __name__ == &quot;__main__&quot;:\n    # Check if this script is being run directly (not imported)\n    test_multiply()\n    print(&quot;All tests passed!&quot;)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ul>\n<li><strong>Example 1</strong>: Demonstrates how to define a <code>main</code> function and use it as the entry point of a script.</li>\n<li><strong>Example 2</strong>: Shows how to handle command-line arguments and perform calculations based on those inputs.</li>\n<li><strong>Example 3</strong>: Illustrates error handling using try-except blocks, specifically for division by zero.</li>\n<li><strong>Example 4</strong>: Provides a simple calculator with menu-driven operations, demonstrating function definition and usage.</li>\n<li><strong>Example 5</strong>: Uses the <code>if __name__ == \"__main__\":</code> idiom to run test cases only when the script is executed directly.</li>\n</ul>\n<p>These examples cover various aspects of using the <code>__main__</code> module effectively, from basic structure to more complex interactions with command-line arguments and error handling.</p>"
        },
        {
            "filename": "abc - Abstract Base Classes.md",
            "content": "<h1>abc - Abstract Base Classes</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-defining-an-abstract-base-class\">1. Defining an Abstract Base Class</a></li>\n<li><a href=\"#2-subclassing-and-implementing-abstract-methods\">2. Subclassing and Implementing Abstract Methods</a></li>\n<li><a href=\"#3-abstract-properties\">3. Abstract Properties</a></li>\n<li><a href=\"#4-using-abcs-with-register-to-customize-base-class\">4. Using ABCs with <code>register</code> to Customize Base Class</a></li>\n<li><a href=\"#5-using-abstractmethod-on-class-methods-and-static-methods\">5. Using <code>abstractmethod</code> on Class Methods and Static Methods</a></li>\n<li><a href=\"#6-using-abc-with-inheritance-and-multiple-abstract-methods\">6. Using <code>abc</code> with Inheritance and Multiple Abstract Methods</a></li>\n<li><a href=\"#7-using-abc-with-inheritance-and-multiple-abstract-methods-in-a-subclass\">7. Using <code>abc</code> with Inheritance and Multiple Abstract Methods in a Subclass</a></li>\n<li><a href=\"#8-using-abc-with-inheritance-and-multiple-abstract-methods-in-a-subclass-with-class-attributes\">8. Using <code>abc</code> with Inheritance and Multiple Abstract Methods in a Subclass with Class Attributes</a></li>\n<li><a href=\"#9-using-abc-with-inheritance-and-multiple-abstract-methods-in-a-subclass-with-class-attributes-and-properties\">9. Using <code>abc</code> with Inheritance and Multiple Abstract Methods in a Subclass with Class Attributes and Properties</a></li>\n<li><a href=\"#10-using-abc-with-inheritance-and-multiple-abstract-methods-in-a-subclass-with-class-attributes-and-properties\">10. Using <code>abc</code> with Inheritance and Multiple Abstract Methods in a Subclass with Class Attributes and Properties</a></li>\n</ol>\n<p>The <code>abc</code> (Abstract Base Class) module in Python provides a way to define abstract base classes, which are classes that cannot be instantiated directly but serve as a blueprint for subclasses. This module includes the <code>ABC</code> class and decorators such as <code>abstractmethod</code> and <code>abstractproperty</code>. Below are comprehensive code examples demonstrating various functionalities of this module.</p>\n<h3>1. Defining an Abstract Base Class</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from abc import ABC, abstractmethod\n\nclass Animal(ABC):\n    # Constructor\n    def __init__(self, name):\n        self.name = name\n\n    @abstractmethod\n    def speak(self):\n        pass\n\n# Attempting to instantiate the base class will raise a TypeError\ntry:\n    animal = Animal(&quot;Generic Animal&quot;)  # This line will cause an error\nexcept TypeError as e:\n    print(e)  # Output: Can't instantiate abstract class Animal with abstract methods speak\n</code></pre>\n\n<h3>2. Subclassing and Implementing Abstract Methods</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from abc import ABC, abstractmethod\n\nclass Dog(Animal):\n    def __init__(self, name):\n        super().__init__(name)\n\n    @abstractmethod\n    def bark(self):\n        pass\n\n    def speak(self):\n        return self.bark()\n\nclass Cat(Animal):\n    def __init__(self, name):\n        super().__init__(name)\n\n    @abstractmethod\n    def meow(self):\n        pass\n\n    def speak(self):\n        return self.meow()\n</code></pre>\n\n<h3>3. Abstract Properties</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from abc import ABC, abstractmethod\n\nclass Vehicle(ABC):\n    @abstractmethod\n    def get_color(self):\n        pass\n\n    @property\n    @abstractmethod\n    def color(self):\n        pass\n\n    @color.setter\n    @abstractmethod\n    def color(self, value):\n        pass\n\nclass Car(Vehicle):\n    _color = None\n\n    def __init__(self, make, model, color=&quot;red&quot;):\n        self.make = make\n        self.model = model\n        self.color = color\n\n    def get_color(self):\n        return self._color\n\n    @property\n    def color(self):\n        return self._color\n\n    @color.setter\n    def color(self, value):\n        if isinstance(value, str) and value.lower() in [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;]:\n            self._color = value.upper()\n        else:\n            raise ValueError(&quot;Invalid color. Choose from: red, blue, green&quot;)\n</code></pre>\n\n<h3>4. Using ABCs with <code>register</code> to Customize Base Class</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from abc import ABC, abstractmethod\n\nclass Vehicle(ABC):\n    @abstractmethod\n    def drive(self):\n        pass\n\n# Define a custom class that will be registered as a subclass of Vehicle\nclass Bike(Vehicle):\n    def drive(self):\n        return &quot;Riding the bike&quot;\n\n# Register the custom class with the Vehicle ABC\nVehicle.register(Bike)\n\n# Example usage\nvehicle = Bike()\nprint(vehicle.drive())  # Output: Riding the bike\n\n# Attempting to instantiate a non-registered subclass will raise an error\ntry:\n    vehicle = Vehicle()  # This line will cause an error\nexcept TypeError as e:\n    print(e)  # Output: Can't instantiate abstract class Vehicle with abstract methods drive\n</code></pre>\n\n<h3>5. Using <code>abstractmethod</code> on Class Methods and Static Methods</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from abc import ABC, abstractmethod\n\nclass MathOperations(ABC):\n    @staticmethod\n    @abstractmethod\n    def add(x, y):\n        pass\n\n    @classmethod\n    @abstractmethod\n    def multiply(cls, x, y):\n        pass\n\nclass Calculator(MathOperations):\n    @staticmethod\n    def add(x, y):\n        return x + y\n\n    @classmethod\n    def multiply(cls, x, y):\n        return x * y\n\n# Example usage\ncalc = Calculator()\nprint(calc.add(3, 5))       # Output: 8\nprint(calc.multiply(4, 6))   # Output: 24\n</code></pre>\n\n<h3>6. Using <code>abc</code> with Inheritance and Multiple Abstract Methods</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from abc import ABC, abstractmethod\n\nclass Shape(ABC):\n    @abstractmethod\n    def area(self):\n        pass\n\n    @abstractmethod\n    def perimeter(self):\n        pass\n\nclass Rectangle(Shape):\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    def area(self):\n        return self.width * self.height\n\n    def perimeter(self):\n        return 2 * (self.width + self.height)\n\n# Example usage\nrectangle = Rectangle(5, 3)\nprint(&quot;Area:&quot;, rectangle.area())   # Output: Area: 15\nprint(&quot;Perimeter:&quot;, rectangle.perimeter()) # Output: Perimeter: 16\n</code></pre>\n\n<h3>7. Using <code>abc</code> with Inheritance and Multiple Abstract Methods in a Subclass</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from abc import ABC, abstractmethod\n\nclass Animal(ABC):\n    @abstractmethod\n    def speak(self):\n        pass\n\nclass Mammal(Animal):\n    def __init__(self, name):\n        self.name = name\n\nclass Dog(Mammal):\n    def speak(self):\n        return &quot;Woof!&quot;\n\n# Example usage\ndog = Dog(&quot;Buddy&quot;)\nprint(dog.speak())  # Output: Woof!\n</code></pre>\n\n<h3>8. Using <code>abc</code> with Inheritance and Multiple Abstract Methods in a Subclass with Class Attributes</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from abc import ABC, abstractmethod\n\nclass Shape(ABC):\n    @abstractmethod\n    def area(self):\n        pass\n\nclass Rectangle(Shape):\n    _width = None\n    _height = None\n\n    def __init__(self, width, height):\n        self._width = width\n        self._height = height\n\n    def get_area(self):\n        return self._width * self._height\n\n# Example usage\nrectangle = Rectangle(5, 3)\nprint(&quot;Area:&quot;, rectangle.get_area())   # Output: Area: 15\n</code></pre>\n\n<h3>9. Using <code>abc</code> with Inheritance and Multiple Abstract Methods in a Subclass with Class Attributes and Properties</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from abc import ABC, abstractmethod\n\nclass Animal(ABC):\n    @abstractmethod\n    def speak(self):\n        pass\n\nclass Mammal(Animal):\n    _name = None\n\n    def __init__(self, name):\n        self._name = name\n\nclass Dog(Mammal):\n    def speak(self):\n        return &quot;Woof!&quot;\n\n# Example usage\ndog = Dog(&quot;Buddy&quot;)\nprint(dog.speak())  # Output: Woof!\n</code></pre>\n\n<h3>10. Using <code>abc</code> with Inheritance and Multiple Abstract Methods in a Subclass with Class Attributes and Properties</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from abc import ABC, abstractmethod\n\nclass Animal(ABC):\n    @abstractmethod\n    def speak(self):\n        pass\n\nclass Mammal(Animal):\n    _name = None\n\n    def __init__(self, name):\n        self._name = name\n\nclass Dog(Mammal):\n    def speak(self):\n        return &quot;Woof!&quot;\n\n# Example usage\ndog = Dog(&quot;Buddy&quot;)\nprint(dog.speak())  # Output: Woof!\n</code></pre>\n\n<p>These examples demonstrate various aspects of using the <code>abc</code> module in Python, including defining abstract base classes, subclassing, implementing methods and properties, and using <code>register</code> to customize base classes. Each example includes comments explaining each step for clarity.</p>"
        },
        {
            "filename": "atexit - Exit handlers.md",
            "content": "<h1>atexit - Exit handlers</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-basic-usage\">1. Basic Usage</a></li>\n<li><a href=\"#2-multiple-handlers\">2. Multiple Handlers</a></li>\n<li><a href=\"#3-handling-exceptions\">3. Handling Exceptions</a></li>\n<li><a href=\"#4-cleanup-on-module-exit\">4. Cleanup on Module Exit</a></li>\n<li><a href=\"#5-using-atexit-with-subprocesses\">5. Using <code>atexit</code> with Subprocesses</a></li>\n<li><a href=\"#6-using-atexit-with-signals\">6. Using <code>atexit</code> with Signals</a></li>\n<li><a href=\"#7-using-atexit-with-threads\">7. Using <code>atexit</code> with Threads</a></li>\n<li><a href=\"#8-using-atexit-with-resource-management\">8. Using <code>atexit</code> with Resource Management</a></li>\n</ol>\n<p>The <code>atexit</code> module in Python provides a way to register functions that will be called when normal program termination occurs, typically upon exit. This is useful for cleanup tasks such as closing files or releasing resources.</p>\n<p>Below are comprehensive code examples demonstrating various functionalities of the <code>atexit</code> module:</p>\n<h3>1. Basic Usage</h3>\n<p>The simplest use case involves registering a function to be called on program exit.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import atexit\n\ndef cleanup_function():\n    print(&quot;Cleanup function executed&quot;)\n\n# Register the cleanup function\natexit.register(cleanup_function)\n\n# Simulate program termination (e.g., by reaching the end of the script)\nprint(&quot;Program is about to terminate&quot;)\n</code></pre>\n\n<h3>2. Multiple Handlers</h3>\n<p>You can register multiple functions that will be called in reverse order of registration.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import atexit\n\ndef first_cleanup():\n    print(&quot;First cleanup function executed&quot;)\n\ndef second_cleanup():\n    print(&quot;Second cleanup function executed&quot;)\n\n# Register multiple cleanup functions\natexit.register(first_cleanup)\natexit.register(second_cleanup)\n\n# Simulate program termination\nprint(&quot;Program is about to terminate&quot;)\n</code></pre>\n\n<h3>3. Handling Exceptions</h3>\n<p>If one of the cleanup functions raises an exception, it will be caught by Python's default exception handling mechanism.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import atexit\n\ndef first_cleanup():\n    print(&quot;First cleanup function executed&quot;)\n\ndef second_cleanup():\n    raise Exception(&quot;Error in second cleanup&quot;)\n\n# Register multiple cleanup functions\natexit.register(first_cleanup)\natexit.register(second_cleanup)\n\ntry:\n    # Simulate program termination with an error\n    print(&quot;Program is about to terminate&quot;)\nexcept Exception as e:\n    print(f&quot;An error occurred: {e}&quot;)\n</code></pre>\n\n<h3>4. Cleanup on Module Exit</h3>\n<p>You can use <code>atexit</code> in modules to ensure cleanup code runs when the module is unloaded.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import atexit\n\ndef my_module_cleanup():\n    print(&quot;Module cleanup function executed&quot;)\n\n# Register a cleanup function for this module\natexit.register(my_module_cleanup)\n\ndef my_module_function():\n    # Module-specific logic here\n    print(&quot;Module function is running&quot;)\n\n# Use the module\nmy_module_function()\n</code></pre>\n\n<h3>5. Using <code>atexit</code> with Subprocesses</h3>\n<p>When working with subprocesses, you might want to ensure that cleanup actions are performed on both the parent and child processes.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import atexit\nimport os\nimport sys\nimport subprocess\n\ndef parent_cleanup():\n    print(&quot;Parent cleanup function executed&quot;)\n\ndef child_cleanup():\n    print(&quot;Child cleanup function executed&quot;)\n\n# Register cleanup functions for the parent and child processes\natexit.register(parent_cleanup)\natexit.register(child_cleanup)\n\n# Create a new process\npid = os.fork()\n\nif pid == 0:\n    # This is the child process\n    sys.exit(0)  # Terminate the child process\nelse:\n    # This is the parent process\n    print(&quot;Parent process is running&quot;)\n</code></pre>\n\n<h3>6. Using <code>atexit</code> with Signals</h3>\n<p>You can use signals to trigger cleanup actions, such as when a program receives a termination signal.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import atexit\nimport os\nimport signal\n\ndef cleanup_function():\n    print(&quot;Cleanup function executed&quot;)\n\n# Register the cleanup function\natexit.register(cleanup_function)\n\n# Set up a signal handler for SIGTERM (kill -SIGTERM)\nsignal.signal(signal.SIGTERM, lambda signum, frame: cleanup_function())\n\nprint(&quot;Program is running and can be terminated with Ctrl+C&quot;)\ntry:\n    while True:\n        # Simulate long-running task\n        pass\nexcept KeyboardInterrupt:\n    print(&quot;Termination signal received&quot;)\n</code></pre>\n\n<h3>7. Using <code>atexit</code> with Threads</h3>\n<p>When using threads, you might want to ensure that cleanup actions are performed when all threads complete.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import atexit\nimport threading\nimport time\n\ndef thread_cleanup():\n    print(&quot;Thread cleanup function executed&quot;)\n\n# Register the cleanup function\natexit.register(thread_cleanup)\n\ndef worker_thread(name):\n    print(f&quot;Thread {name} is running&quot;)\n    time.sleep(2)\n    print(f&quot;Thread {name} is completed&quot;)\n\n# Create and start multiple threads\nthreads = []\nfor i in range(3):\n    thread = threading.Thread(target=worker_thread, args=(i,))\n    threads.append(thread)\n    thread.start()\n\n# Wait for all threads to complete\nfor thread in threads:\n    thread.join()\n\nprint(&quot;All threads have completed&quot;)\n</code></pre>\n\n<h3>8. Using <code>atexit</code> with Resource Management</h3>\n<p>You can use <code>atexit</code> to ensure that resources are properly released when the program terminates.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import atexit\nimport tempfile\n\ndef cleanup_file():\n    # Clean up any temporary files created by this module\n    for filename in os.listdir(tempfile.gettempdir()):\n        if filename.startswith(&quot;my_module_temp_&quot;):\n            os.remove(os.path.join(tempfile.gettempdir(), filename))\n\n# Register the cleanup function\natexit.register(cleanup_file)\n\ndef my_module_function():\n    # Create a temporary file\n    with tempfile.NamedTemporaryFile(delete=False) as temp:\n        print(f&quot;Created temporary file: {temp.name}&quot;)\n\nmy_module_function()\nprint(&quot;Program is running&quot;)\n</code></pre>\n\n<p>These examples demonstrate various use cases for the <code>atexit</code> module, including basic cleanup, handling exceptions, and using <code>atexit</code> within modules and threads. By following these examples, you can effectively manage resources and ensure that your program performs necessary cleanup actions before termination.</p>"
        },
        {
            "filename": "builtins - Built-in objects.md",
            "content": "<h1>builtins - Built-in objects</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-accessing-built-in-functions\">1. Accessing Built-in Functions</a></li>\n<li><a href=\"#2-accessing-built-in-types\">2. Accessing Built-in Types</a></li>\n<li><a href=\"#3-accessing-built-in-exceptions\">3. Accessing Built-in Exceptions</a></li>\n<li><a href=\"#4-accessing-built-in-constants\">4. Accessing Built-in Constants</a></li>\n<li><a href=\"#5-accessing-built-in-modules\">5. Accessing Built-in Modules</a></li>\n<li><a href=\"#6-accessing-built-in-classes\">6. Accessing Built-in Classes</a></li>\n<li><a href=\"#7-accessing-built-in-methods\">7. Accessing Built-in Methods</a></li>\n<li><a href=\"#8-accessing-built-in-modules-and-functions\">8. Accessing Built-in Modules and Functions</a></li>\n<li><a href=\"#9-accessing-built-in-constants-and-functions\">9. Accessing Built-in Constants and Functions</a></li>\n<li><a href=\"#10-accessing-built-in-operators\">10. Accessing Built-in Operators</a></li>\n</ol>\n<p>The <code>builtins</code> module in Python is a special module that contains all the built-in names available in every interactive session and in all modules. It provides access to the most commonly used functions, types, and exceptions.</p>\n<p>Here are some comprehensive code examples for each functionality in the <code>builtins</code> module:</p>\n<h3>1. Accessing Built-in Functions</h3>\n<pre class=\"codehilite\"><code class=\"language-python\"># Example: Using abs() function\nnumber = -42\nabsolute_value = abs(number)\nprint(f&quot;The absolute value of {number} is {absolute_value}&quot;)\n\n# Example: Using max() function\nlist_of_numbers = [3, 5, 7, 1, 9]\nmaximum_number = max(list_of_numbers)\nprint(f&quot;The maximum number in the list is {maximum_number}&quot;)\n\n# Example: Using min() function\nminimum_number = min(list_of_numbers)\nprint(f&quot;The minimum number in the list is {minimum_number}&quot;)\n</code></pre>\n\n<h3>2. Accessing Built-in Types</h3>\n<pre class=\"codehilite\"><code class=\"language-python\"># Example: Creating a list\nmy_list = [1, 2, 3, 4, 5]\nprint(&quot;List:&quot;, my_list)\n\n# Example: Creating a tuple\nmy_tuple = (10, 20, 30)\nprint(&quot;Tuple:&quot;, my_tuple)\n\n# Example: Creating a dictionary\nmy_dict = {'name': 'Alice', 'age': 30}\nprint(&quot;Dictionary:&quot;, my_dict)\n</code></pre>\n\n<h3>3. Accessing Built-in Exceptions</h3>\n<pre class=\"codehilite\"><code class=\"language-python\"># Example: Using ValueError exception to catch invalid input\ntry:\n    value = int('abc')\nexcept ValueError as e:\n    print(f&quot;ValueError caught: {e}&quot;)\n\n# Example: Using FileNotFoundError exception to handle missing files\ntry:\n    with open('nonexistent_file.txt', 'r') as file:\n        content = file.read()\nexcept FileNotFoundError as e:\n    print(f&quot;FileNotFoundError caught: {e}&quot;)\n</code></pre>\n\n<h3>4. Accessing Built-in Constants</h3>\n<pre class=\"codehilite\"><code class=\"language-python\"># Example: Using True, False, and None constants\nprint(&quot;True:&quot;, True)\nprint(&quot;False:&quot;, False)\nprint(&quot;None:&quot;, None)\n\n# Example: Accessing the maximum value an int can hold in Python\nmax_int = sys.maxsize\nprint(f&quot;The maximum value an int can hold is {max_int}&quot;)\n\n# Example: Using pi from math module (accessed through builtins)\nimport math\npi_value = math.pi\nprint(f&quot;Value of pi: {pi_value}&quot;)\n</code></pre>\n\n<h3>5. Accessing Built-in Modules</h3>\n<pre class=\"codehilite\"><code class=\"language-python\"># Example: Importing the math module\nimport math\n\n# Using a function from the math module\nresult = math.sqrt(25)\nprint(f&quot;The square root of 25 is {result}&quot;)\n\n# Accessing an attribute from the math module\ne_value = math.e\nprint(f&quot;Value of e (Euler's number): {e_value}&quot;)\n</code></pre>\n\n<h3>6. Accessing Built-in Classes</h3>\n<pre class=\"codehilite\"><code class=\"language-python\"># Example: Using the complex class to create a complex number\ncomplex_number = complex(3, 4)\nprint(&quot;Complex Number:&quot;, complex_number)\n\n# Example: Using the list class to create a mutable list\nmutable_list = [1, 2, 3]\nprint(&quot;Mutable List:&quot;, mutable_list)\n\n# Accessing an attribute from a class in builtins\nlist_len = len(mutable_list)\nprint(f&quot;Length of the list: {list_len}&quot;)\n</code></pre>\n\n<h3>7. Accessing Built-in Methods</h3>\n<pre class=\"codehilite\"><code class=\"language-python\"># Example: Using the upper() method on a string\ntext = &quot;hello&quot;\nuppercase_text = text.upper()\nprint(f&quot;Uppercase text: '{uppercase_text}'&quot;)\n\n# Example: Using the append() method on a list\nmutable_list.append(6)\nprint(&quot;Updated List:&quot;, mutable_list)\n\n# Accessing an attribute of a class instance in builtins\nlist_count = len(mutable_list)\nprint(f&quot;Length of the list after appending: {list_count}&quot;)\n</code></pre>\n\n<h3>8. Accessing Built-in Modules and Functions</h3>\n<pre class=\"codehilite\"><code class=\"language-python\"># Example: Using the time module to get current time\nimport time\n\ncurrent_time = time.localtime()\nprint(&quot;Current Time:&quot;, current_time)\n\n# Example: Using the random module to generate a random number\nimport random\n\nrandom_number = random.randint(1, 10)\nprint(f&quot;Random Number between 1 and 10: {random_number}&quot;)\n</code></pre>\n\n<h3>9. Accessing Built-in Constants and Functions</h3>\n<pre class=\"codehilite\"><code class=\"language-python\"># Example: Using the math constants pi and e\nimport math\n\npi_value = math.pi\ne_value = math.e\n\nprint(f&quot;Value of pi: {pi_value}&quot;)\nprint(f&quot;Value of e (Euler's number): {e_value}&quot;)\n\n# Example: Using the math functions sin() and cos()\nsin_value = math.sin(math.pi / 2)\ncos_value = math.cos(0)\n\nprint(f&quot;Sine of pi/2: {sin_value}&quot;)\nprint(f&quot;Cosine of 0: {cos_value}&quot;)\n</code></pre>\n\n<h3>10. Accessing Built-in Operators</h3>\n<pre class=\"codehilite\"><code class=\"language-python\"># Example: Using the addition operator (+) with numbers\nnum1 = 5\nnum2 = 3\nsum_result = num1 + num2\nprint(f&quot;Sum of {num1} and {num2} is {sum_result}&quot;)\n\n# Example: Using the multiplication operator (*) with strings\nstring1 = &quot;Hello&quot;\nstring2 = &quot;World&quot;\nproduct_string = string1 * 3\nprint(f&quot;Product of '{string1}' repeated 3 times: '{product_string}'&quot;)\n</code></pre>\n\n<p>These examples demonstrate various aspects of using the <code>builtins</code> module, including accessing built-in functions, types, exceptions, constants, modules, classes, methods, and operators. Each example is clear, concise, and includes comments to explain each step.</p>"
        },
        {
            "filename": "code - Interpreter base classes.md",
            "content": "<h1>code - Interpreter base classes</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-creating-a-custom-code-object\">Example 1: Creating a Custom Code Object</a></li>\n<li><a href=\"#example-2-executing-a-custom-code-object\">Example 2: Executing a Custom Code Object</a></li>\n<li><a href=\"#example-3-creating-and-executing-code-objects-from-strings\">Example 3: Creating and Executing Code Objects from Strings</a></li>\n<li><a href=\"#explanation\">Explanation</a></li>\n</ol>\n<p>The <code>code</code> module is part of Python's standard library and provides a way to define and execute code objects, which can be useful for implementing dynamic language interpreters or other features that require executing arbitrary code. This module does not contain any public functions; instead, it defines a base class for classes representing code objects.</p>\n<p>Here are some examples demonstrating how you might use the <code>code</code> module internally, assuming you want to create your own interpreter:</p>\n<h3>Example 1: Creating a Custom Code Object</h3>\n<p>First, let's define a custom code object that can be executed. This is done by subclassing <code>types.CodeType</code>.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import types\n\nclass CustomCodeObject:\n    def __init__(self, co_name, co_code, co_filename, co_firstlineno, co_globals):\n        self.co_name = co_name\n        self.co_code = co_code\n        self.co_filename = co_filename\n        self.co_firstlineno = co_firstlineno\n        self.co_globals = co_globals\n\n    def __repr__(self):\n        return f&quot;CustomCodeObject(name={self.co_name}, filename={self.co_filename})&quot;\n\n# Example usage\ncode_obj = CustomCodeObject(\n    &quot;my_function&quot;,\n    b&quot;\\x03\\x41\\x00\\x00\\x00&quot;,  # Bytecode for a simple print statement: 'print(&quot;Hello, World!&quot;)'\n    &quot;__main__.py&quot;,\n    1,\n    {&quot;print&quot;: print}\n)\n</code></pre>\n\n<h3>Example 2: Executing a Custom Code Object</h3>\n<p>Next, we can execute this custom code object using the <code>exec</code> function.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">def execute_custom_code(code_obj):\n    # Convert the bytecode to a string representation for execution\n    byte_string = bytes.fromhex(code_obj.co_code.decode('latin1'))\n\n    # Execute the code\n    exec(byte_string, code_obj.co_globals)\n\n# Example usage\nexecute_custom_code(code_obj)\n</code></pre>\n\n<h3>Example 3: Creating and Executing Code Objects from Strings</h3>\n<p>You can also create a <code>CodeType</code> object directly from strings.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import types\n\ndef create_and_execute_code_from_strings(\n    name,\n    source_code,\n    filename=&quot;__main__.py&quot;,\n    firstlineno=1,\n    globals={}\n):\n    # Compile the source code into bytecode\n    byte_code = compile(source_code, filename, 'exec')\n\n    # Create a CodeType object\n    co_type = types.CodeType(\n        len(byte_code.co_names),  # Number of local variables\n        len(byte_code.co_varnames),  # Number of global variables\n        len(byte_code.co_consts),   # Number of constants\n        len(byte_code.co_cellvars),  # Number of cell variables\n        len(byte_code.co_freevars),  # Number of free variables\n        byte_code.co_flags,         # Flags for the code object\n        byte_code.co_code,           # Bytecode\n        byte_code.co_consts,           # Constant pool\n        byte_code.co_names,          # Local variable names\n        byte_code.co_varnames,        # Global variable names\n        filename,\n        firstlineno\n    )\n\n    # Create a custom code object from the CodeType\n    code_obj = CustomCodeObject(\n        name,\n        co_type.co_code.decode('latin1'),\n        filename,\n        firstlineno,\n        globals\n    )\n\n    return code_obj\n\n# Example usage\ncode_string = &quot;&quot;&quot;\nprint(&quot;Hello, World!&quot;)\n&quot;&quot;&quot;\ncode_obj = create_and_execute_code_from_strings(\n    &quot;my_function&quot;,\n    code_string\n)\n</code></pre>\n\n<h3>Explanation</h3>\n<ul>\n<li>\n<p><strong>CustomCodeObject</strong>: This class is a simple representation of a code object. It includes attributes for the name, bytecode, filename, line number, and global namespace.</p>\n</li>\n<li>\n<p><strong>execute_custom_code</strong>: This function converts the bytecode string back to a byte array and uses <code>exec</code> to execute it within the provided global namespace.</p>\n</li>\n<li>\n<p><strong>create_and_execute_code_from_strings</strong>: This function takes Python source code as input, compiles it into bytecode, creates a <code>CodeType</code> object, and then uses that to create and execute a custom code object.</p>\n</li>\n</ul>\n<p>These examples demonstrate how you can use the <code>code</code> module to define and execute arbitrary code objects in Python. Note that executing untrusted code can be dangerous and should only be done with caution, especially in environments where security is critical.</p>"
        },
        {
            "filename": "codeop - Compile Python code.md",
            "content": "<h1>codeop - Compile Python code</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-basic-compilation-and-execution\">Example 1: Basic Compilation and Execution</a></li>\n<li><a href=\"#example-2-compiling-source-code-with-specific-mode\">Example 2: Compiling Source Code with Specific Mode</a></li>\n<li><a href=\"#example-3-compiling-source-code-into-bytecode-without-executing\">Example 3: Compiling Source Code into Bytecode Without Executing</a></li>\n<li><a href=\"#example-4-handling-syntax-errors-gracefully\">Example 4: Handling Syntax Errors Gracefully</a></li>\n<li><a href=\"#example-5-compiling-and-executing-dynamically\">Example 5: Compiling and Executing Dynamically</a></li>\n<li><a href=\"#example-6-using-compile_command-with-specific-mode-and-flags\">Example 6: Using <code>compile_command</code> with Specific Mode and Flags</a></li>\n<li><a href=\"#example-7-using-compile_command-with-input-file\">Example 7: Using <code>compile_command</code> with Input File</a></li>\n</ol>\n<p>The <code>codeop</code> module in Python provides tools to compile Python source code into bytecode. It's particularly useful for situations where you need to dynamically execute or modify Python code at runtime, such as in interactive shells, interpreters, or during the execution of custom scripts.</p>\n<p>Below are some comprehensive examples that demonstrate various functionalities provided by the <code>codeop</code> module:</p>\n<h3>Example 1: Basic Compilation and Execution</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import codeop\n\n# Define a Python source code string\nsource_code = &quot;&quot;&quot;\ndef greet(name):\n    print(f&quot;Hello, {name}!&quot;)\n\ngreet(&quot;Alice&quot;)\n&quot;&quot;&quot;\n\n# Compile the source code into bytecode using codeop.compile_command\ncode_ast = codeop.compile_command(source_code)\n\n# Execute the compiled bytecode to call the function and display output\nresult = eval(code_ast)\nprint(result)  # Output: Hello, Alice!\n</code></pre>\n\n<h3>Example 2: Compiling Source Code with Specific Mode</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import codeop\n\n# Define a Python source code string\nsource_code = &quot;&quot;&quot;\ndef add(x, y):\n    return x + y\n&quot;&quot;&quot;\n\n# Compile the source code into bytecode using a specific mode (e.g., 'exec')\ncode_ast = codeop.compile_command(source_code, mode='exec')\n\n# Execute the compiled bytecode to define the function\neval(code_ast)\n\n# Call the function and display output\nresult = add(3, 5)\nprint(result)  # Output: 8\n</code></pre>\n\n<h3>Example 3: Compiling Source Code into Bytecode Without Executing</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import codeop\n\n# Define a Python source code string\nsource_code = &quot;&quot;&quot;\ndef multiply(x, y):\n    return x * y\n&quot;&quot;&quot;\n\n# Compile the source code into bytecode using codeop.compile_command\ncode_ast = codeop.compile_command(source_code)\n\n# The result is a syntax tree (AST) node, not executable bytecode\nprint(code_ast)\n</code></pre>\n\n<h3>Example 4: Handling Syntax Errors Gracefully</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import codeop\n\n# Define a Python source code string with an error\nsource_code_with_error = &quot;&quot;&quot;\ndef divide(x, y):\n    return x / y\n&quot;&quot;&quot;\n\ntry:\n    # Compile the source code into bytecode\n    code_ast = codeop.compile_command(source_code_with_error)\nexcept SyntaxError as e:\n    print(f&quot;Compilation error: {e}&quot;)\n</code></pre>\n\n<h3>Example 5: Compiling and Executing Dynamically</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import codeop\n\n# Define a function to compile and execute Python source code dynamically\ndef run_python_code(code):\n    try:\n        # Compile the source code into bytecode\n        code_ast = codeop.compile_command(code)\n\n        # Execute the compiled bytecode to call the function or execute statements\n        result = eval(code_ast)\n        return result\n    except SyntaxError as e:\n        print(f&quot;Compilation error: {e}&quot;)\n        return None\n\n# Example usage of the run_python_code function\ncode_to_run = &quot;&quot;&quot;\ndef square(x):\n    return x * x\n\nresult = square(4)\nprint(result)  # Output: 16\n&quot;&quot;&quot;\noutput = run_python_code(code_to_run)\nprint(output)  # Output: 16\n</code></pre>\n\n<h3>Example 6: Using <code>compile_command</code> with Specific Mode and Flags</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import codeop\n\n# Define a Python source code string\nsource_code = &quot;&quot;&quot;\nx = 10\ny = 20\n&quot;&quot;&quot;\n\n# Compile the source code into bytecode using a specific mode ('exec') and flags (optimize)\ncode_ast = codeop.compile_command(source_code, mode='exec', flags=codeop.OPTIMIZE)\n\n# Execute the compiled bytecode to define variables\neval(code_ast)\n\n# Access and print variables from the compiled environment\nprint(x)  # Output: 10\nprint(y)  # Output: 20\n</code></pre>\n\n<h3>Example 7: Using <code>compile_command</code> with Input File</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import codeop\n\n# Define a file path containing Python source code\nfile_path = 'example.py'\n\n# Compile the content of the file into bytecode using codeop.compile_file\nwith open(file_path, 'r') as file:\n    file_content = file.read()\n    code_ast = codeop.compile_file(file_content)\n\n# Execute the compiled bytecode from the file\neval(code_ast)\n</code></pre>\n\n<p>These examples cover a range of use cases for the <code>codeop</code> module, including basic compilation and execution, handling syntax errors gracefully, dynamically compiling and executing Python code, and using the module with specific modes and flags. The examples are designed to be clear, concise, and suitable for inclusion in official documentation.</p>"
        },
        {
            "filename": "contextlib - Utilities for with-statement contexts.md",
            "content": "<h1>contextlib - Utilities for with-statement contexts</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-context-managers\">1. Context Managers</a></li>\n<li><a href=\"#example-1-using-with-statement-with-open\">Example 1: Using <code>with</code> Statement with <code>open()</code></a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#2-contextlibnested\">2. <code>contextlib.nested()</code></a></li>\n<li><a href=\"#example-2-using-nested-with-open-and-sqlite3connect\">Example 2: Using <code>nested()</code> with <code>open()</code> and <code>sqlite3.connect()</code></a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#3-contextlibexitstack\">3. <code>contextlib.ExitStack</code></a></li>\n<li><a href=\"#example-3-using-exitstack-with-open-and-closing-them-in-reverse-order\">Example 3: Using <code>ExitStack</code> with <code>open()</code> and closing them in reverse order</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#4-contextlibsuppress\">4. <code>contextlib.suppress()</code></a></li>\n</ol>\n<p>The <code>contextlib</code> module in Python provides utilities for managing resources, especially those that need to be set up before a block of code is executed and cleaned up afterward. It offers several classes and functions designed to simplify common tasks like handling temporary files, database connections, and more. Below are comprehensive examples of how to use each of the main classes and functions in the <code>contextlib</code> module.</p>\n<h3>1. Context Managers</h3>\n<p>Context managers allow you to define a block of code that should be executed within a specific context, such as opening and closing a file, connecting to a database, or ensuring resources are freed correctly.</p>\n<h4>Example 1: Using <code>with</code> Statement with <code>open()</code></h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import contextlib\n\n# Use the 'with' statement to manage file operations\nwith open('example.txt', 'w') as f:\n    # Write some text to the file\n    f.write(&quot;Hello, context manager!&quot;)\n</code></pre>\n\n<h4>Explanation:</h4>\n<ul>\n<li><strong>Importing</strong>: The <code>contextlib</code> module is imported at the beginning.</li>\n<li><strong>Using <code>with</code> Statement</strong>: The <code>with</code> statement ensures that the file is properly closed after its suite finishes, even if an exception is raised on the way. This prevents resource leaks and ensures that the file handle is released.</li>\n<li><strong>File Operations</strong>: The file is opened in write mode (<code>'w'</code>) and written to.</li>\n</ul>\n<h3>2. <code>contextlib.nested()</code></h3>\n<p>The <code>nested()</code> function allows multiple context managers to be used simultaneously within a single block.</p>\n<h4>Example 2: Using <code>nested()</code> with <code>open()</code> and <code>sqlite3.connect()</code></h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import contextlib\nimport sqlite3\n\n# Use nested contexts for multiple operations\nwith contextlib.nested(open('example.txt', 'w'), sqlite3.connect(':memory:')) as (f, conn):\n    f.write(&quot;Hello from file and database!&quot;)\n    cursor = conn.cursor()\n    cursor.execute(&quot;CREATE TABLE example_table (id INTEGER PRIMARY KEY, value TEXT)&quot;)\n    cursor.execute(&quot;INSERT INTO example_table (value) VALUES ('Test')&quot;)\n</code></pre>\n\n<h4>Explanation:</h4>\n<ul>\n<li><strong>Multiple Context Managers</strong>: The <code>nested()</code> function is used to manage both the file writing and database connection.</li>\n<li><strong>File Operations</strong>: The file is opened in write mode as before.</li>\n<li><strong>Database Operations</strong>: A SQLite connection is established, a cursor created, and a simple table and record are inserted.</li>\n</ul>\n<h3>3. <code>contextlib.ExitStack</code></h3>\n<p><code>ExitStack</code> allows multiple contexts to be pushed onto it, which are then closed in the order they were pushed. This is useful for managing resources that need to be cleaned up in a specific order.</p>\n<h4>Example 3: Using <code>ExitStack</code> with <code>open()</code> and closing them in reverse order</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import contextlib\nimport sqlite3\n\n# Use ExitStack for managing multiple resources\nwith contextlib.ExitStack() as stack:\n    f = stack.enter_context(open('example.txt', 'w'))\n    conn = stack.enter_context(sqlite3.connect(':memory:'))\n\n    # File and database operations\n    f.write(&quot;Hello from file and database!&quot;)\n    cursor = conn.cursor()\n    cursor.execute(&quot;CREATE TABLE example_table (id INTEGER PRIMARY KEY, value TEXT)&quot;)\n    cursor.execute(&quot;INSERT INTO example_table (value) VALUES ('Test')&quot;)\n\n    # Close resources in reverse order\n    stack.pop_all()\n</code></pre>\n\n<h4>Explanation:</h4>\n<ul>\n<li><strong>ExitStack</strong>: An <code>ExitStack</code> is created to manage multiple contexts.</li>\n<li><strong>Entering Contexts</strong>: Both the file and database connection are entered onto the stack using <code>enter_context()</code>.</li>\n<li><strong>Closing Resources</strong>: The <code>pop_all()</code> method ensures that resources are closed in the reverse order of their entry, which can be useful for managing resources that have dependencies on each other.</li>\n</ul>\n<h3>4. <code>contextlib.suppress()</code></h3>\n<p><code>suppress()</code> is used to suppress specific exceptions during execution. This is particularly useful when you want to ignore certain errors without changing the code's flow.</p>\n<h4>Example 4: Using <code>suppress()</code> with <code>os.remove()</code></h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import contextlib\nimport os\n\n# Use suppress to handle missing file exception\nwith contextlib.suppress(FileNotFoundError):\n    os.remove('nonexistent_file.txt')\n</code></pre>\n\n<h4>Explanation:</h4>\n<ul>\n<li><strong>Handling Missing File</strong>: The <code>suppress()</code> function is used to ignore the <code>FileNotFoundError</code> when trying to remove a non-existent file.</li>\n<li><strong>Simplified Error Handling</strong>: This makes the code cleaner and less error-prone by handling specific exceptions directly.</li>\n</ul>\n<h3>5. <code>contextlib.redirect_stdout</code></h3>\n<p><code>redirect_stdout</code> redirects the standard output of a block of code to a specified stream, allowing you to capture and manipulate it easily.</p>\n<h4>Example 5: Using <code>redirect_stdout</code> to capture console output</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import contextlib\nimport sys\n\n# Use redirect_stdout to capture console output\nwith contextlib.redirect_stdout(sys.stderr):\n    print(&quot;This will be printed to stderr&quot;)\n\nwith contextlib.redirect_stdout(open('output.txt', 'w')):\n    print(&quot;This will be written to file output.txt&quot;)\n</code></pre>\n\n<h4>Explanation:</h4>\n<ul>\n<li><strong>Capturing Console Output</strong>: The <code>redirect_stdout</code> function is used to redirect the standard output to either a file or another stream.</li>\n<li><strong>Output Management</strong>: This is useful for logging, testing, and other scenarios where you need to capture console output.</li>\n</ul>\n<h3>6. <code>contextlib.redirect_stderr</code></h3>\n<p>Similar to <code>redirect_stdout</code>, <code>redirect_stderr</code> redirects the standard error of a block of code to a specified stream, allowing you to capture and manipulate it easily.</p>\n<h4>Example 6: Using <code>redirect_stderr</code> to capture console error</h4>\n<pre class=\"codehilite\"><code class=\"language-python\">import contextlib\nimport sys\n\n# Use redirect_stderr to capture console error\nwith contextlib.redirect_stderr(sys.stdout):\n    print(&quot;This will be printed to stdout&quot;)\n\nwith contextlib.redirect_stderr(open('error.txt', 'w')):\n    print(&quot;This will be written to file error.txt&quot;)\n</code></pre>\n\n<h4>Explanation:</h4>\n<ul>\n<li><strong>Capturing Console Error</strong>: The <code>redirect_stderr</code> function is used to redirect the standard error to either a file or another stream.</li>\n<li><strong>Error Management</strong>: This is useful for logging, testing, and other scenarios where you need to capture console errors.</li>\n</ul>\n<h3>7. <code>contextlib.redirect_stdout</code></h3>\n<p>A simple example of using <code>redirect_stdout</code> to capture console output from a function.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import contextlib\nimport sys\n\ndef my_function():\n    print(&quot;This is the output&quot;)\n\n# Capture console output using redirect_stdout\nwith contextlib.redirect_stdout(sys.stderr):\n    my_function()\n</code></pre>\n\n<h4>Explanation:</h4>\n<ul>\n<li><strong>Function Output</strong>: The <code>my_function</code> prints a message to the standard output.</li>\n<li><strong>Capturing Output</strong>: Using <code>redirect_stdout</code>, we capture this output and print it to stderr, which can be useful for logging or debugging.</li>\n</ul>\n<h3>8. <code>contextlib.suppress()</code></h3>\n<p>A simple example of using <code>suppress()</code> to handle exceptions within a function.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import contextlib\n\ndef risky_function():\n    try:\n        1 / 0\n    except ZeroDivisionError as e:\n        print(f&quot;Caught an error: {e}&quot;)\n\n# Suppressing division by zero exception\nwith contextlib.suppress(ZeroDivisionError):\n    risky_function()\n</code></pre>\n\n<h4>Explanation:</h4>\n<ul>\n<li><strong>Function with Exception</strong>: The <code>risky_function</code> attempts to divide by zero, which raises a <code>ZeroDivisionError</code>.</li>\n<li><strong>Suppressing Exception</strong>: Using <code>suppress()</code>, we suppress the <code>ZeroDivisionError</code>, allowing the function to continue without crashing.</li>\n</ul>\n<h3>9. <code>contextlib.suppress()</code></h3>\n<p>A simple example of using <code>suppress()</code> to handle exceptions within a function and logging them.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import contextlib\nimport logging\n\ndef risky_function():\n    try:\n        1 / 0\n    except Exception as e:\n        logging.error(f&quot;Caught an error: {e}&quot;)\n\n# Suppressing all exceptions and logging errors\nwith contextlib.suppress(Exception):\n    risky_function()\n</code></pre>\n\n<h4>Explanation:</h4>\n<ul>\n<li><strong>Function with Multiple Exceptions</strong>: The <code>risky_function</code> attempts to divide by zero, which raises a <code>ZeroDivisionError</code>.</li>\n<li><strong>Suppressing All Exceptions</strong>: Using <code>suppress()</code>, we suppress all exceptions, allowing the function to continue without crashing. Instead, any caught exception is logged using Python's logging module.</li>\n</ul>\n<h3>10. <code>contextlib.suppress()</code></h3>\n<p>A simple example of using <code>suppress()</code> to handle multiple specific exceptions within a function.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import contextlib\n\ndef risky_function():\n    try:\n        1 / 0\n    except ZeroDivisionError as e:\n        print(f&quot;Caught an error: {e}&quot;)\n    except TypeError as e:\n        print(f&quot;Caught another error: {e}&quot;)\n\n# Suppressing specific exceptions\nwith contextlib.suppress(ZeroDivisionError, TypeError):\n    risky_function()\n</code></pre>\n\n<h4>Explanation:</h4>\n<ul>\n<li><strong>Function with Multiple Exceptions</strong>: The <code>risky_function</code> attempts to divide by zero and performs an invalid operation.</li>\n<li><strong>Suppressing Specific Exceptions</strong>: Using <code>suppress()</code>, we suppress only the <code>ZeroDivisionError</code> and <code>TypeError</code>, allowing the function to continue without crashing for these specific exceptions.</li>\n</ul>\n<p>These examples demonstrate how to use various features provided by the <code>contextlib</code> module to manage resources, capture and handle output and errors, and simplify the management of context in Python.</p>"
        },
        {
            "filename": "dataclasses - Data Classes.md",
            "content": "<h1>dataclasses - Data Classes</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#installation\">Installation</a></li>\n<li><a href=\"#example-1-basic-usage\">Example 1: Basic Usage</a></li>\n<li><a href=\"#example-2-multiple-default-values\">Example 2: Multiple Default Values</a></li>\n<li><a href=\"#example-3-immutable-attributes\">Example 3: Immutable Attributes</a></li>\n<li><a href=\"#example-4-custom-initialization\">Example 4: Custom Initialization</a></li>\n<li><a href=\"#example-5-auto-generated-special-methods\">Example 5: Auto-Generated Special Methods</a></li>\n<li><a href=\"#example-6-optional-attributes\">Example 6: Optional Attributes</a></li>\n<li><a href=\"#example-7-recursive-data-classes\">Example 7: Recursive Data Classes</a></li>\n<li><a href=\"#example-8-custom-class-methods\">Example 8: Custom Class Methods</a></li>\n<li><a href=\"#example-9-custom-class-variables\">Example 9: Custom Class Variables</a></li>\n</ol>\n<p>Data classes in Python provide a convenient way to create classes with default values, immutable attributes, and automatically generated special methods like <code>__init__</code>, <code>__repr__</code>, <code>__eq__</code>, etc. They are particularly useful for creating classes that represent complex data structures.</p>\n<p>Here is a comprehensive guide with code examples for various functionalities of the <code>dataclasses</code> module in Python 3.12:</p>\n<h3>Installation</h3>\n<p>Data classes are part of Python's standard library starting from version 3.7, so no installation is necessary. However, if you're using an older version of Python, ensure you have it installed.</p>\n<h3>Example 1: Basic Usage</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from dataclasses import dataclass\n\n# Define a simple data class with default values\n@dataclass\nclass Point:\n    x: int = 0\n    y: int = 0\n\n# Create an instance of the Point class\np = Point(3, 4)\n\n# Print the object representation\nprint(p)  # Output: Point(x=3, y=4)\n\n# Accessing attributes\nprint(p.x)  # Output: 3\nprint(p.y)  # Output: 4\n\n# Modify an attribute and print again\np.x = 5\nprint(p)  # Output: Point(x=5, y=4)\n</code></pre>\n\n<h3>Example 2: Multiple Default Values</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from dataclasses import dataclass\n\n# Define a data class with multiple default values\n@dataclass\nclass Circle:\n    radius: float = 1.0\n    color: str = &quot;red&quot;\n\n# Create an instance of the Circle class\nc = Circle()\n\n# Print the object representation\nprint(c)  # Output: Circle(radius=1.0, color='red')\n\n# Modify attributes and print again\nc.radius = 2.5\nc.color = &quot;blue&quot;\nprint(c)  # Output: Circle(radius=2.5, color='blue')\n</code></pre>\n\n<h3>Example 3: Immutable Attributes</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from dataclasses import dataclass\n\n# Define a data class with an immutable attribute\n@dataclass(frozen=True)\nclass PointImmutable:\n    x: int = 0\n    y: int = 0\n\n# Create an instance of the PointImmutable class\np_immutable = PointImmutable(3, 4)\n\n# Attempt to modify an immutable attribute (will raise an error)\ntry:\n    p_immutable.x = 5\nexcept AttributeError as e:\n    print(e)  # Output: can't set attribute\n</code></pre>\n\n<h3>Example 4: Custom Initialization</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from dataclasses import dataclass\n\n# Define a data class with custom initialization logic\n@dataclass\nclass Person:\n    name: str\n    age: int\n\n    def __post_init__(self):\n        self.full_name = f&quot;{self.name} {self.age}&quot;\n\n# Create an instance of the Person class\np_person = Person(&quot;John&quot;, 30)\n\n# Print the object representation and the custom attribute\nprint(p_person)  # Output: Person(name='John', age=30)\nprint(p_person.full_name)  # Output: John 30\n</code></pre>\n\n<h3>Example 5: Auto-Generated Special Methods</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from dataclasses import dataclass\n\n# Define a data class with auto-generated special methods\n@dataclass\nclass Employee:\n    name: str\n    position: str\n    salary: float = 0.0\n\n    def __post_init__(self):\n        self.full_name = f&quot;{self.name} ({self.position})&quot;\n\n# Create an instance of the Employee class\ne_employee = Employee(&quot;Alice&quot;, &quot;Developer&quot;)\n\n# Print the object representation and the custom attribute\nprint(e_employee)  # Output: Employee(name='Alice', position='Developer')\nprint(e_employee.full_name)  # Output: Alice (Developer)\n</code></pre>\n\n<h3>Example 6: Optional Attributes</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from dataclasses import dataclass, field\n\n# Define a data class with optional attributes using the `field` function\n@dataclass\nclass Book:\n    title: str = field(default=&quot;Unknown Title&quot;)\n    author: str\n    year: int = None\n\n# Create an instance of the Book class without specifying optional attributes\nb_book = Book(&quot;Python Programming&quot;)\n\n# Print the object representation and default values for optional attributes\nprint(b_book)  # Output: Book(title='Python Programming', author=None, year=None)\n</code></pre>\n\n<h3>Example 7: Recursive Data Classes</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from dataclasses import dataclass\n\n# Define a recursive data class to represent a tree structure\n@dataclass\nclass TreeNode:\n    value: int\n    left: 'TreeNode' = None\n    right: 'TreeNode' = None\n\n# Create an instance of the TreeNode class as a simple binary search tree\ntree = TreeNode(10, TreeNode(5), TreeNode(15))\n\n# Print the object representation and structure\nprint(tree)  # Output: TreeNode(value=10, left=TreeNode(value=5, left=None, right=None), right=TreeNode(value=15, left=None, right=None))\n</code></pre>\n\n<h3>Example 8: Custom Class Methods</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from dataclasses import dataclass\n\n# Define a data class with custom class methods\n@dataclass\nclass Triangle:\n    side_a: float\n    side_b: float\n    side_c: float\n\n    @property\n    def is_equilateral(self) -&gt; bool:\n        return self.side_a == self.side_b and self.side_b == self.side_c\n\n# Create an instance of the Triangle class\nt_triangle = Triangle(3, 3, 3)\n\n# Check if the triangle is equilateral\nprint(t_triangle.is_equilateral)  # Output: True\n</code></pre>\n\n<h3>Example 9: Custom Class Variables</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from dataclasses import dataclass\n\n# Define a data class with custom class variables\n@dataclass\nclass Account:\n    balance: float = 0.0\n\n    @classmethod\n    def create_new_account(cls, initial_deposit: float) -&gt; 'Account':\n        account = cls(initial_deposit)\n        return account\n\n# Create a new instance of the Account class using the class method\na_account = Account.create_new_account(100.0)\n\n# Print the object representation and balance\nprint(a_account)  # Output: Account(balance=100.0)\n</code></pre>\n\n<h3>Example 10: Handling Nested Data Classes</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from dataclasses import dataclass\n\n# Define nested data classes to represent a tree structure\n@dataclass\nclass TreeNode:\n    value: int\n    children: list['TreeNode'] = field(default_factory=list)\n\n# Create an instance of the TreeNode class as a simple binary search tree with nested nodes\ntree_nested = TreeNode(10, [TreeNode(5), TreeNode(15)])\n\n# Print the object representation and structure\nprint(tree_nested)  # Output: TreeNode(value=10, children=[TreeNode(value=5, children=[]), TreeNode(value=15, children=[])])\n</code></pre>\n\n<h3>Example 11: Data Classes with <code>from __future__ import annotations</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from dataclasses import dataclass\nfrom typing import Union\n\n# Define a data class that uses type hints with `Union` and `from __future__ import annotations`\n@dataclass\nclass Shape:\n    shape_type: str = &quot;unknown&quot;\n    size: Union[int, float] = 0.0\n\n# Create an instance of the Shape class using type hints\ns_shape = Shape(shape_type=&quot;circle&quot;, size=3.14)\n\n# Print the object representation and attributes\nprint(s_shape)  # Output: Shape(shape_type='circle', size=3.14)\n</code></pre>\n\n<h3>Example 12: Using <code>dataclasses.asdict</code> for Serialization</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from dataclasses import dataclass, asdict\n\n# Define a data class with default values\n@dataclass\nclass Person:\n    name: str = &quot;John&quot;\n    age: int = 30\n\n# Create an instance of the Person class\np_person = Person()\n\n# Convert the data class to a dictionary using `asdict`\nperson_dict = asdict(p_person)\n\n# Print the resulting dictionary\nprint(person_dict)  # Output: {'name': 'John', 'age': 30}\n</code></pre>\n\n<h3>Example 13: Using <code>dataclasses.astuple</code> for Serialization</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from dataclasses import dataclass, astuple\n\n# Define a simple data class with default values\n@dataclass\nclass Point:\n    x: int = 0\n    y: int = 0\n\n# Create an instance of the Point class\np_point = Point(3, 4)\n\n# Convert the data class to a tuple using `astuple`\npoint_tuple = astuple(p_point)\n\n# Print the resulting tuple\nprint(point_tuple)  # Output: (3, 4)\n</code></pre>\n\n<h3>Example 14: Using <code>dataclasses.replace</code> for Object Modification</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from dataclasses import dataclass, replace\n\n# Define a simple data class with default values\n@dataclass\nclass Person:\n    name: str = &quot;John&quot;\n    age: int = 30\n\n# Create an instance of the Person class\np_person = Person(name=&quot;Alice&quot;, age=25)\n\n# Modify the object using `replace`\nnew_person = replace(p_person, name=&quot;Bob&quot;)\n\n# Print the modified object\nprint(new_person)  # Output: Person(name='Bob', age=30)\n</code></pre>\n\n<p>These examples demonstrate various use cases and features of Python's <code>dataclasses</code> module, including default values, class methods, custom variables, nested data classes, type hints, serialization, and object modification. Each example provides a practical application of the module to handle complex data structures efficiently.</p>"
        },
        {
            "filename": "gc - Garbage Collector interface.md",
            "content": "<h1>gc - Garbage Collector interface</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#explanation\">Explanation:</a></li>\n</ol>\n<p>The <code>gc</code> module in Python is used to control garbage collection runtime behavior. It provides a way to enable or disable automatic garbage collection, tune the collector's parameters, and collect garbage manually.</p>\n<p>Here are comprehensive code examples that cover various functionalities of the <code>gc</code> module:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import gc\n\n# Enable automatic garbage collection (default state)\nprint(&quot;Automatic garbage collection is currently enabled:&quot;, gc.isenabled())\n\n# Disable automatic garbage collection\ngc.disable()\nprint(&quot;Automatic garbage collection is now disabled:&quot;, gc.isenabled())\n\n# Re-enable automatic garbage collection\ngc.enable()\nprint(&quot;Automatic garbage collection is now enabled:&quot;, gc.isenabled())\n\n# Set the garbage collector's threshold to 100 objects\ngc.set_threshold(100)\nprint(&quot;Garbage collection threshold set to:&quot;, gc.get_threshold())\n\n# Print the current state of the garbage collector\nprint(&quot;Garbage collection status:&quot;, gc.garbage)\n\n# Collect all uncollectable objects immediately\ngc.collect()\nprint(&quot;Garbage collected:&quot;, len(gc.garbage))\n\n# Set the debug level for garbage collection (0 is no debugging, higher numbers increase verbosity)\ngc.set_debug(gc.DEBUG_STATS | gc.DEBUG_LEAK)\nprint(&quot;Garbage collection debug set to:&quot;, gc.get_debug())\n\n# Print garbage collection statistics\nprint(&quot;Garbage collection statistics:&quot;)\nfor line in gc.garbage_stats():\n    print(line)\n\n# Print the maximum memory usage of the Python interpreter\nprint(&quot;Maximum memory usage (bytes):&quot;, gc.mem_get_usage())\n</code></pre>\n\n<h3>Explanation:</h3>\n<ol>\n<li><strong>Enable and Disable Automatic Garbage Collection:</strong></li>\n<li><code>gc.isenabled()</code>: Checks if automatic garbage collection is enabled.</li>\n<li><code>gc.disable()</code>: Disables automatic garbage collection.</li>\n<li>\n<p><code>gc.enable()</code>: Re-enables automatic garbage collection.</p>\n</li>\n<li>\n<p><strong>Set Garbage Collector Threshold:</strong></p>\n</li>\n<li>\n<p><code>gc.set_threshold(n)</code>: Sets the threshold number of uncollectable objects before a collection occurs.</p>\n</li>\n<li>\n<p><strong>Check Current State of Garbage Collection:</strong></p>\n</li>\n<li>\n<p><code>gc.garbage</code>: A list of all objects that are not reachable from any reference, but have not yet been collected by garbage collection.</p>\n</li>\n<li>\n<p><strong>Perform Garbage Collection:</strong></p>\n</li>\n<li>\n<p><code>gc.collect()</code>: Initiates a garbage collection cycle and returns the number of unreachable objects collected.</p>\n</li>\n<li>\n<p><strong>Set Garbage Collection Debug Level:</strong></p>\n</li>\n<li><code>gc.set_debug(flag)</code>: Sets the debugging flags for the garbage collector.</li>\n<li>\n<p><code>gc.get_debug()</code>: Returns the current debugging level.</p>\n</li>\n<li>\n<p><strong>Print Garbage Collection Statistics:</strong></p>\n</li>\n<li>\n<p><code>gc.garbage_stats()</code>: Provides statistics about garbage collection activities, such as number of collections and time spent.</p>\n</li>\n<li>\n<p><strong>Check Memory Usage:</strong></p>\n</li>\n<li><code>gc.mem_get_usage()</code>: Returns an estimate of the maximum memory usage of the Python interpreter.</li>\n</ol>\n<p>These examples demonstrate how to manage and monitor garbage collection in a Python application, which is crucial for optimizing performance and handling memory efficiently.</p>"
        },
        {
            "filename": "inspect - Inspect live objects.md",
            "content": "<h1>inspect - Inspect live objects</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#explanation\">Explanation:</a></li>\n</ol>\n<p>The <code>inspect</code> module in Python provides several functions to access information about live objects such as modules, classes, methods, and frames. Below are comprehensive examples demonstrating various functionalities of the <code>inspect</code> module:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import inspect\n\n# Example 1: Get the source code of a function\ndef example_function(x):\n    &quot;&quot;&quot;A simple function for demonstration.&quot;&quot;&quot;\n    return x * 2\n\nsource_code = inspect.getsource(example_function)\nprint(&quot;Source code of example_function:&quot;)\nprint(source_code)\n\n# Example 2: Check if an object is a class\nclass MyClass:\n    pass\n\nis_class = inspect.isclass(MyClass)\nprint(f&quot;Is MyClass a class? {is_class}&quot;)\n\n# Example 3: Get the docstring of a function\ndocstring = inspect.getdoc(example_function)\nprint(&quot;Docstring of example_function:&quot;)\nprint(docstring)\n\n# Example 4: Get the argument specification of a function\nargspec = inspect.signature(example_function)\nprint(&quot;Argument specification of example_function:&quot;)\nfor param in argspec.parameters.values():\n    print(f&quot;Parameter name: {param.name}, Default value: {param.default}&quot;)\n\n# Example 5: Get the module containing a class or function\nmodule_name = inspect.getmodule(MyClass).__name__\nprint(f&quot;The module containing MyClass is: {module_name}&quot;)\n\n# Example 6: List all functions and classes in a module\nimport math\n\nfor name, obj in inspect.getmembers(math):\n    if inspect.isfunction(obj) or inspect.isclass(obj):\n        print(name)\n\n# Example 7: Get the current stack frame information\nframe = inspect.currentframe()\nprint(&quot;Current stack frame details:&quot;)\nprint(frame.f_code.co_filename)\nprint(frame.f_lineno)\nprint(frame.f_locals)\n\n# Example 8: Get all local variables in the current stack frame\nlocals_vars = frame.f_locals.copy()  # Create a copy of the dictionary\nprint(&quot;Local variables in the current stack frame:&quot;)\nfor key, value in locals_vars.items():\n    print(f&quot;{key}: {value}&quot;)\n\n# Example 9: Trace execution of a function using inspect.getsource and eval\ndef trace_function(func):\n    source = inspect.getsource(func)\n    # Replace 'func' with its source code to simulate execution\n    exec(source)\n\ntrace_function(example_function)\n\n# Example 10: Get the file path where an object was defined\nfile_path = inspect.getmodule(example_function).__file__\nprint(f&quot;The file path of example_function is: {file_path}&quot;)\n\n# Example 11: Check if an object is a frame\nis_frame = inspect.isframe(inspect.currentframe())\nprint(f&quot;Is current frame? {is_frame}&quot;)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ul>\n<li><strong>Source Code</strong>: <code>inspect.getsource</code> retrieves the source code of a function or method, allowing you to see the exact code that was written.</li>\n<li><strong>Class/Function Checks</strong>: <code>inspect.isclass</code> and <code>inspect.isfunction</code> determine if an object is a class or function, respectively, which is useful for type checking and validation.</li>\n<li><strong>Docstring</strong>: <code>inspect.getdoc</code> fetches the docstring of a function, providing a way to access the documentation string for better understanding of the function's purpose.</li>\n<li><strong>Argument Specification</strong>: <code>inspect.signature</code> provides detailed information about the parameters of a function, including their names and default values, which is helpful for introspection and debugging.</li>\n<li><strong>Module Information</strong>: <code>inspect.getmodule</code> returns the module where a class or function is defined, giving context about where the object originates from.</li>\n<li><strong>Member List</strong>: <code>inspect.getmembers</code> lists all members (functions and classes) in a module, which can be used to dynamically explore the contents of a module.</li>\n<li><strong>Stack Frame Details</strong>: <code>inspect.currentframe</code>, <code>f_code.co_filename</code>, <code>f_lineno</code>, and <code>f_locals</code> provide information about the current stack frame, useful for debugging and understanding the state of the program at a specific point in time.</li>\n<li><strong>Local Variables</strong>: <code>frame.f_locals</code> gives access to the local variables of the current stack frame, allowing inspection of the current state of local variables.</li>\n<li><strong>Execution Tracing</strong>: By simulating execution, <code>inspect.getsource</code> can be used to trace the flow of a function, which is useful for debugging and understanding how a function operates.</li>\n<li><strong>File Path</strong>: <code>inspect.getmodule</code> returns the file path where an object is defined, providing information about the location of the source code.</li>\n<li><strong>Frame Check</strong>: <code>inspect.isframe</code> checks if an object is a frame, which can be used to validate and work with frame objects in the current execution context.</li>\n</ul>\n<p>These examples cover various aspects of inspecting live objects in Python, providing a comprehensive overview of its capabilities.</p>"
        },
        {
            "filename": "site - Site-specific configuration hook.md",
            "content": "<h1>site - Site-specific configuration hook</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-siteaddsitedirpath\">1. <code>site.addsitedir(path)</code></a></li>\n<li><a href=\"#2-sitegetsitepackages\">2. <code>site.getsitepackages()</code></a></li>\n<li><a href=\"#3-sitegetusersitepackages\">3. <code>site.getusersitepackages()</code></a></li>\n<li><a href=\"#4-sitegetsitecustomize\">4. <code>site.getsitecustomize()</code></a></li>\n<li><a href=\"#5-siteremovesitedirpath\">5. <code>site.removesitedir(path)</code></a></li>\n<li><a href=\"#6-sitesetusersitepackagestrue-false\">6. <code>site.setusersitepackages(True | False)</code></a></li>\n<li><a href=\"#7-siteclearsitepackages\">7. <code>site.clearsitepackages()</code></a></li>\n<li><a href=\"#8-siteaddsitedirpath-setpathtrue\">8. <code>site.addsitedir(path, setpath=True)</code></a></li>\n<li><a href=\"#9-siteremovesitedirpath-unsetsitepackagesfalse\">9. <code>site.removesitedir(path, unsetsitepackages=False)</code></a></li>\n<li><a href=\"#10-siteaddsitedirpath-setpathtrue\">10. <code>site.addsitedir(path, setpath=True)</code></a></li>\n</ol>\n<p>The <code>site</code> module in Python is used to customize the behavior of Python's import system, especially when it comes to loading modules from a directory outside the standard installation path. This can be useful for various purposes, such as extending the Python environment with additional libraries or modules.</p>\n<p>Here are comprehensive code examples for each functionality provided by the <code>site</code> module:</p>\n<h3>1. <code>site.addsitedir(path)</code></h3>\n<ul>\n<li><strong>Purpose</strong>: Adds a directory to the list of directories that Python searches for site-specific modules.</li>\n<li><strong>Description</strong>: This function is used to add an additional directory to the Python path, allowing you to import modules from that directory without changing the system-wide PYTHONPATH.</li>\n</ul>\n<pre class=\"codehilite\"><code class=\"language-python\">import site\n\n# Add a custom site directory to the Python path\nsite.addsitedir('/path/to/custom/site-packages')\n\n# Now, you can import modules from this directory\ntry:\n    import my_custom_module\nexcept ImportError as e:\n    print(f&quot;Module not found: {e}&quot;)\n</code></pre>\n\n<h3>2. <code>site.getsitepackages()</code></h3>\n<ul>\n<li><strong>Purpose</strong>: Returns a list of directories where Python will look for site-specific packages.</li>\n<li><strong>Description</strong>: This function is useful for determining where additional libraries are installed and can be used to dynamically adjust paths in scripts or IDEs.</li>\n</ul>\n<pre class=\"codehilite\"><code class=\"language-python\">import site\n\n# Get the list of site-packages directories\nsite_packages_directories = site.getsitepackages()\n\nprint(&quot;Site-packages directories:&quot;, site_packages_directories)\n</code></pre>\n\n<h3>3. <code>site.getusersitepackages()</code></h3>\n<ul>\n<li><strong>Purpose</strong>: Returns a directory where Python will look for site-specific packages installed by the user.</li>\n<li><strong>Description</strong>: This function is useful for accessing the directory where user-installed packages are stored, which can be used to dynamically find or manage user-specific modules.</li>\n</ul>\n<pre class=\"codehilite\"><code class=\"language-python\">import site\n\n# Get the path to the user's site-packages directory\nuser_site_packages = site.getusersitepackages()\n\nprint(&quot;User site-packages directory:&quot;, user_site_packages)\n</code></pre>\n\n<h3>4. <code>site.getsitecustomize()</code></h3>\n<ul>\n<li><strong>Purpose</strong>: Returns the filename of the file that contains customization functions for the import system.</li>\n<li><strong>Description</strong>: This function is useful for implementing custom behavior in module loading, such as adding hooks for specific types of modules or modifying the order in which modules are imported.</li>\n</ul>\n<pre class=\"codehilite\"><code class=\"language-python\">import site\n\n# Get the path to the sitecustomize.py file\nsite_customize_path = site.getsitecustomize()\n\nprint(&quot;Sitecustomize file:&quot;, site_customize_path)\n</code></pre>\n\n<h3>5. <code>site.removesitedir(path)</code></h3>\n<ul>\n<li><strong>Purpose</strong>: Removes a directory from the list of directories that Python searches for site-specific modules.</li>\n<li><strong>Description</strong>: This function is used to remove an additional directory from the Python path, allowing you to revert the change made by <code>addsitedir</code>.</li>\n</ul>\n<pre class=\"codehilite\"><code class=\"language-python\">import site\n\n# Add a custom site directory\nsite.addsitedir('/path/to/custom/site-packages')\n\n# Remove the custom site directory\nsite.removesitedir('/path/to/custom/site-packages')\n</code></pre>\n\n<h3>6. <code>site.setusersitepackages(True | False)</code></h3>\n<ul>\n<li><strong>Purpose</strong>: Controls whether Python will look for user-specific packages.</li>\n<li><strong>Description</strong>: This function is used to enable or disable the search for user-specific packages, which can be useful in environments where user-installed packages are managed differently.</li>\n</ul>\n<pre class=\"codehilite\"><code class=\"language-python\">import site\n\n# Enable searching for user-site-packages\nsite.setusersitepackages(True)\n\n# Now Python will look in the user's site-packages directory if available\ntry:\n    import my_user_module\nexcept ImportError as e:\n    print(f&quot;Module not found: {e}&quot;)\n</code></pre>\n\n<h3>7. <code>site.clearsitepackages()</code></h3>\n<ul>\n<li><strong>Purpose</strong>: Clears the list of directories that Python searches for site-specific modules.</li>\n<li><strong>Description</strong>: This function is used to reset the Python path, removing all custom additions made by <code>addsitedir</code>.</li>\n</ul>\n<pre class=\"codehilite\"><code class=\"language-python\">import site\n\n# Add a custom site directory\nsite.addsitedir('/path/to/custom/site-packages')\n\n# Clear the list of site-packages directories\nsite.clearsitepackages()\n\n# Now Python will only search in the standard library path\ntry:\n    import my_standard_module\nexcept ImportError as e:\n    print(f&quot;Module not found: {e}&quot;)\n</code></pre>\n\n<h3>8. <code>site.addsitedir(path, setpath=True)</code></h3>\n<ul>\n<li><strong>Purpose</strong>: Adds a directory to the list of directories that Python searches for site-specific modules and optionally updates the system PYTHONPATH.</li>\n<li><strong>Description</strong>: This function is useful for adding a custom directory to the Python path and updating the system environment variable in one step.</li>\n</ul>\n<pre class=\"codehilite\"><code class=\"language-python\">import site\n\n# Add a custom site directory to the Python path and update PYTHONPATH\nsite.addsitedir('/path/to/custom/site-packages', setpath=True)\n\n# Now you can import modules from this directory and PYTHONPATH is updated\ntry:\n    import my_custom_module\nexcept ImportError as e:\n    print(f&quot;Module not found: {e}&quot;)\n</code></pre>\n\n<h3>9. <code>site.removesitedir(path, unsetsitepackages=False)</code></h3>\n<ul>\n<li><strong>Purpose</strong>: Removes a directory from the list of directories that Python searches for site-specific modules and optionally updates the system PYTHONPATH.</li>\n<li><strong>Description</strong>: This function is useful for removing a custom directory from the Python path and updating the system environment variable in one step.</li>\n</ul>\n<pre class=\"codehilite\"><code class=\"language-python\">import site\n\n# Add a custom site directory to the Python path\nsite.addsitedir('/path/to/custom/site-packages')\n\n# Remove the custom site directory and update PYTHONPATH\nsite.removesitedir('/path/to/custom/site-packages', unsetsitepackages=True)\n\n# Now Python will only search in the standard library path and PYTHONPATH is updated\ntry:\n    import my_standard_module\nexcept ImportError as e:\n    print(f&quot;Module not found: {e}&quot;)\n</code></pre>\n\n<h3>10. <code>site.addsitedir(path, setpath=True)</code></h3>\n<ul>\n<li><strong>Purpose</strong>: Adds a directory to the list of directories that Python searches for site-specific modules and optionally updates the system PYTHONPATH.</li>\n<li><strong>Description</strong>: This function is useful for adding a custom directory to the Python path and updating the system environment variable in one step.</li>\n</ul>\n<pre class=\"codehilite\"><code class=\"language-python\">import site\n\n# Add a custom site directory to the Python path and update PYTHONPATH\nsite.addsitedir('/path/to/custom/site-packages', setpath=True)\n\n# Now you can import modules from this directory and PYTHONPATH is updated\ntry:\n    import my_custom_module\nexcept ImportError as e:\n    print(f&quot;Module not found: {e}&quot;)\n</code></pre>\n\n<p>These code examples demonstrate various functionalities of the <code>site</code> module, including adding custom directories to the Python path, accessing specific directories where Python looks for site-specific packages, and managing the PYTHONPATH environment variable.</p>"
        },
        {
            "filename": "sys - System-specific parameters and functions.md",
            "content": "<h1>sys - System-specific parameters and functions</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-sysversion\">1. <code>sys.version</code></a></li>\n<li><a href=\"#2-sysexecutable\">2. <code>sys.executable</code></a></li>\n<li><a href=\"#3-sysplatform\">3. <code>sys.platform</code></a></li>\n<li><a href=\"#4-sysmodules\">4. <code>sys.modules</code></a></li>\n<li><a href=\"#5-sysmaxsize\">5. <code>sys.maxsize</code></a></li>\n<li><a href=\"#6-sysargv\">6. <code>sys.argv</code></a></li>\n<li><a href=\"#7-syspath\">7. <code>sys.path</code></a></li>\n<li><a href=\"#8-sysstdin-sysstdout-and-sysstderr\">8. <code>sys.stdin</code>, <code>sys.stdout</code>, and <code>sys.stderr</code></a></li>\n<li><a href=\"#9-sysexitstatus\">9. <code>sys.exit([status])</code></a></li>\n<li><a href=\"#10-sysgetsizeofobj-default\">10. <code>sys.getsizeof(obj[, default])</code></a></li>\n</ol>\n<p>The <code>sys</code> module in Python provides access to some variables used or maintained by the interpreter and to functions that interact strongly with the interpreter. Below are comprehensive and well-documented code examples for each functionality provided by the <code>sys</code> module.</p>\n<h3>1. <code>sys.version</code></h3>\n<p>This function returns a string containing the version number of the Python interpreter as a string in the form 'x.x.y'.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Example: Retrieve the Python version\nimport sys\n\nprint(&quot;Python version:&quot;, sys.version)\n</code></pre>\n\n<h3>2. <code>sys.executable</code></h3>\n<p>This function returns the full path to the interpreter that started the current program.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Example: Retrieve the executable file path\nimport sys\n\nprint(&quot;Executable path:&quot;, sys.executable)\n</code></pre>\n\n<h3>3. <code>sys.platform</code></h3>\n<p>This function returns a string identifying the underlying platform on which Python is running.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Example: Retrieve the platform\nimport sys\n\nprint(&quot;Platform:&quot;, sys.platform)\n</code></pre>\n\n<h3>4. <code>sys.modules</code></h3>\n<p>This variable holds the dictionary of all currently loaded modules, with keys as module names and values as their corresponding module objects.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Example: Print all imported modules\nimport sys\n\nfor name in sys.modules:\n    print(name)\n</code></pre>\n\n<h3>5. <code>sys.maxsize</code></h3>\n<p>This constant holds the maximum integer value that can be stored in an integer type on the current platform.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Example: Retrieve the maximum size of integers\nimport sys\n\nprint(&quot;Maximum size of integers:&quot;, sys.maxsize)\n</code></pre>\n\n<h3>6. <code>sys.argv</code></h3>\n<p>This list contains the command-line arguments passed to the script when it was run. The first element is always a string 'scriptname', and the rest are the remaining arguments.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Example: Print command-line arguments\nimport sys\n\nprint(&quot;Command-line arguments:&quot;, sys.argv)\n</code></pre>\n\n<h3>7. <code>sys.path</code></h3>\n<p>This list contains the current Python module search path. This is used when importing modules.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Example: Print current Python path\nimport sys\n\nprint(&quot;Current Python path:&quot;, sys.path)\n</code></pre>\n\n<h3>8. <code>sys.stdin</code>, <code>sys.stdout</code>, and <code>sys.stderr</code></h3>\n<p>These are file-like objects representing standard input, standard output, and standard error streams, respectively. You can use them to read from or write to these streams.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Example: Read from stdin and print the result\nimport sys\n\nuser_input = sys.stdin.read()\nprint(&quot;User input:&quot;, user_input)\n\n# Example: Write to stdout\nimport sys\n\nsys.stdout.write(&quot;Hello, World!\\n&quot;)\n</code></pre>\n\n<h3>9. <code>sys.exit([status])</code></h3>\n<p>This function exits the script with an optional exit status code. If no argument is given, it defaults to 0.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Example: Exit the program\nimport sys\n\nprint(&quot;Exiting the program...&quot;)\nsys.exit(0)\n</code></pre>\n\n<h3>10. <code>sys.getsizeof(obj[, default])</code></h3>\n<p>This function returns the size of an object in bytes. The <code>default</code> parameter is used if <code>obj</code> is a type object, not an instance.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Example: Get the size of an integer\nimport sys\n\nnum = 123456\nprint(&quot;Size of&quot;, num, &quot;:&quot;, sys.getsizeof(num))\n\n# Example: Get the size of a string\nstr_obj = &quot;Hello, World!&quot;\nprint(&quot;Size of&quot;, str_obj, &quot;:&quot;, sys.getsizeof(str_obj))\n</code></pre>\n\n<h3>11. <code>sys.settrace(func)</code></h3>\n<p>This function sets a global trace function for all currently running Python programs.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Example: Set a global trace function\nimport sys\n\ndef my_trace(frame, event, arg):\n    print(event, frame.f_lineno)\n\nsys.settrace(my_trace)\n</code></pre>\n\n<h3>12. <code>sys.getdefaultencoding()</code></h3>\n<p>This function returns the default encoding used by the interpreter for strings.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Example: Retrieve the default encoding\nimport sys\n\nprint(&quot;Default encoding:&quot;, sys.getdefaultencoding())\n</code></pre>\n\n<h3>13. <code>sys.setrecursionlimit(limit)</code></h3>\n<p>This function sets the maximum depth of recursion. If a recursive function calls itself too many times, it will raise a <code>RecursionError</code>.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Example: Set the recursion limit\nimport sys\n\nprint(&quot;Current recursion limit:&quot;, sys.getrecursionlimit())\nsys.setrecursionlimit(1000)\nprint(&quot;New recursion limit:&quot;, sys.getrecursionlimit())\n</code></pre>\n\n<h3>14. <code>sys.exitfunc</code></h3>\n<p>This variable holds a function to be called when the interpreter exits, such as at the end of a program or on an error.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Example: Set an exit function\nimport sys\n\ndef my_exit_function():\n    print(&quot;Exiting with custom message...&quot;)\n\nsys.exitfunc = my_exit_function\n</code></pre>\n\n<h3>15. <code>sys.dont_write_bytecode</code></h3>\n<p>This variable is used to prevent the creation of <code>.pyc</code> files.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Example: Disable bytecode writing\nimport sys\n\nprint(&quot;Bytecode writing enabled:&quot;, not sys.dont_write_bytecode)\nsys.dont_write_bytecode = True\nprint(&quot;Bytecode writing disabled:&quot;, not sys.dont_write_bytecode)\n</code></pre>\n\n<h3>16. <code>sys.flags</code></h3>\n<p>This dictionary contains various flags that control the behavior of Python.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Example: Print all flags\nimport sys\n\nfor name, value in vars(sys).items():\n    if isinstance(value, bool) and not name.startswith('__'):\n        print(name, value)\n</code></pre>\n\n<p>These examples cover a wide range of functionalities provided by the <code>sys</code> module. Each example is thoroughly documented to ensure clarity and ease of understanding.</p>"
        },
        {
            "filename": "sysconfig - Provide access to Python s configuration information.md",
            "content": "<h1>sysconfig - Provide access to Python\u2019s configuration information</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#explanation-of-the-code-examples\">Explanation of the Code Examples:</a></li>\n</ol>\n<p>The <code>sysconfig</code> module in Python provides access to Python's configuration settings, including paths to various directories such as the site-packages directory, the interpreter executable, and more. This module is particularly useful for developers who need to understand or modify the Python environment at runtime.</p>\n<p>Below are comprehensive code examples that cover various functionalities provided by the <code>sysconfig</code> module:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import sysconfig\n\n# Example 1: Get the path to the site-packages directory\nsite_packages_path = sysconfig.get_python_lib()\nprint(&quot;Path to the site-packages directory:&quot;, site_packages_path)\n\n# Example 2: Determine the Python executable used for a specific interpreter\nexecutable_path = sysconfig.get_executable()\nprint(&quot;Python executable path:&quot;, executable_path)\n\n# Example 3: Get the configuration variables as a dictionary\nconfig_vars = sysconfig.get_config_vars()\nfor key, value in config_vars.items():\n    print(f&quot;{key}: {value}&quot;)\n\n# Example 4: Check if a specific platform is supported by Python\nis_platform_supported = sysconfig.is_python_platform('Linux')\nprint(&quot;Is 'Linux' a supported platform?&quot;, is_platform_supported)\n\n# Example 5: Get the path to a specific file in the site-packages directory\nsite_packages_file_path = sysconfig.get_path('py_modules', module_name='example_module')\nif site_packages_file_path:\n    print(f&quot;Path to 'example_module.py': {site_packages_file_path}&quot;)\nelse:\n    print(&quot;Module not found in site-packages.&quot;)\n\n# Example 6: Get the build environment variables\nbuild_vars = sysconfig.get_build_info()\nprint(&quot;Build environment information:&quot;, build_vars)\n\n# Example 7: Check if a specific file exists in the Python installation directory\nfile_in_python_dir = sysconfig.find_executable('python')\nif file_in_python_dir:\n    print(f&quot;Python executable found at {file_in_python_dir}&quot;)\nelse:\n    print(&quot;Python executable not found.&quot;)\n\n# Example 8: Get the platform-specific configuration variables\nplatform_config_vars = sysconfig.get_platform()\nprint(&quot;Platform-specific configuration:&quot;, platform_config_vars)\n\n# Example 9: Get the full path to a specific resource in the Python installation directory\nresource_path = sysconfig.get_resources_path('site-packages')\nif resource_path:\n    print(f&quot;Path to site-packages resources: {resource_path}&quot;)\nelse:\n    print(&quot;Resource not found.&quot;)\n\n# Example 10: Check if the interpreter is running from a source distribution\nis_from_source_dist = sysconfig.is_python_build()\nprint(&quot;Is the interpreter running from a source distribution?&quot;, is_from_source_dist)\n\n# Example 11: Get the path to a specific file in a site-packages directory for a given interpreter\ninterpreter_site_packages_path = sysconfig.get_paths_for_interpreter(executable_path)\nfor key, value in interpreter_site_packages_path.items():\n    print(f&quot;{key}: {value}&quot;)\n\n# Example 12: Check if a specific module is installed and accessible\nmodule_installed = sysconfig.exists_module('os')\nprint(&quot;Is 'os' module installed?&quot;, module_installed)\n\n# Example 13: Get the path to a specific interpreter's site-packages directory\ninterpreter_site_packages_path = sysconfig.get_python_lib(prefix=executable_path)\nprint(f&quot;Path to {executable_path}'s site-packages directory:&quot;, interpreter_site_packages_path)\n\n# Example 14: Check if a specific file exists in the Python installation directory with a specific interpreter\nfile_in_specific_interpreter = sysconfig.find_executable('python', executable_path)\nif file_in_specific_interpreter:\n    print(f&quot;Python executable found at {file_in_specific_interpreter}&quot;)\nelse:\n    print(&quot;Python executable not found.&quot;)\n\n# Example 15: Get the path to a specific resource in the Python installation directory for a given interpreter\ninterpreter_resource_path = sysconfig.get_resources_path('site-packages', prefix=executable_path)\nif interpreter_resource_path:\n    print(f&quot;Path to site-packages resources for {executable_path}: {interpreter_resource_path}&quot;)\nelse:\n    print(&quot;Resource not found.&quot;)\n\n# Example 16: Check if the interpreter is running from a precompiled binary\nis_from_precompiled_bin = sysconfig.is_python_built()\nprint(&quot;Is the interpreter running from a precompiled binary?&quot;, is_from_precompiled_bin)\n\n# Example 17: Get the path to a specific file in a site-packages directory for a given interpreter and module\ninterpreter_site_packages_module_path = sysconfig.get_data_files(executable_path, 'module_name')\nif interpreter_site_packages_module_path:\n    print(f&quot;Path to 'module_name' in {executable_path}'s site-packages:&quot;, interpreter_site_packages_module_path)\nelse:\n    print(&quot;Module not found.&quot;)\n\n# Example 18: Check if a specific file exists in the Python installation directory with a specific interpreter and module\nfile_in_interpreter_module = sysconfig.find_executable('python', executable_path, 'module_name')\nif file_in_interpreter_module:\n    print(f&quot;Python executable found at {file_in_interpreter_module}&quot;)\nelse:\n    print(&quot;Python executable not found.&quot;)\n</code></pre>\n\n<h3>Explanation of the Code Examples:</h3>\n<ol>\n<li><strong>Example 1</strong>: Retrieves the path to the <code>site-packages</code> directory for the currently running Python interpreter.</li>\n<li><strong>Example 2</strong>: Determines the path to the Python executable used by the current interpreter.</li>\n<li><strong>Example 3</strong>: Fetches a dictionary of all configuration variables available via <code>sysconfig.get_config_vars()</code>.</li>\n<li><strong>Example 4</strong>: Checks if a specified platform is supported by Python using <code>sysconfig.is_python_platform()</code>.</li>\n<li><strong>Example 5</strong>: Finds the path to a specific module in the <code>site-packages</code> directory.</li>\n<li><strong>Example 6</strong>: Retrieves build environment information using <code>sysconfig.get_build_info()</code>.</li>\n<li><strong>Example 7</strong>: Checks for the presence of a Python executable at a specified path using <code>sysconfig.find_executable()</code>.</li>\n<li><strong>Example 8</strong>: Provides platform-specific configuration variables.</li>\n<li><strong>Example 9</strong>: Finds paths to resources within the Python installation directory.</li>\n<li><strong>Example 10</strong>: Determines if the interpreter is running from a source distribution.</li>\n<li><strong>Example 11</strong>: Retrieves site-packages directories for a specific interpreter.</li>\n<li><strong>Example 12</strong>: Checks if a module is installed and accessible using <code>sysconfig.exists_module()</code>.</li>\n<li><strong>Example 13</strong>: Finds the path to an interpreter's <code>site-packages</code> directory by specifying the executable path.</li>\n<li><strong>Example 14</strong>: Checks for the presence of a Python executable at a specified path with a specific interpreter.</li>\n<li><strong>Example 15</strong>: Retrieves paths to resources within the Python installation directory for a specific interpreter.</li>\n<li><strong>Example 16</strong>: Determines if the interpreter is running from a precompiled binary.</li>\n<li><strong>Example 17</strong>: Finds paths to data files in a <code>site-packages</code> directory for a specific interpreter and module.</li>\n<li><strong>Example 18</strong>: Checks for the presence of a Python executable at a specified path with a specific interpreter and module.</li>\n</ol>\n<p>These examples cover various aspects of interacting with Python's configuration settings, providing a comprehensive overview of what can be achieved using the <code>sysconfig</code> module.</p>"
        },
        {
            "filename": "traceback - Print or retrieve a stack traceback.md",
            "content": "<h1>traceback - Print or retrieve a stack traceback</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#explanation\">Explanation:</a></li>\n</ol>\n<p>Below are comprehensive code examples that demonstrate various functionalities of the <code>traceback</code> module in Python, along with clear explanations and comments:</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Import the traceback module\nimport traceback\n\ndef example_function():\n    # Simulate an exception for demonstration purposes\n    try:\n        result = 10 / 0\n    except Exception as e:\n        # Print a stack trace to the console\n        traceback.print_exc()\n\n        # Optionally, retrieve and print the traceback as a string\n        tb_string = traceback.format_exc()\n        print(tb_string)\n\ndef example_traceback():\n    # Example of using traceback to catch and format an exception\n    try:\n        result = 10 / 0\n    except Exception as e:\n        # Use traceback.print_exception to print the traceback to the console\n        traceback.print_exception(type(e), e, e.__traceback__)\n\n        # Format the traceback into a string for further processing\n        tb_string = traceback.format_exception(type(e), e, e.__traceback__)\n        print(tb_string)\n\ndef example_traceback_with_frame_info():\n    # Example of using traceback to extract frame information\n    try:\n        result = 10 / 0\n    except Exception as e:\n        # Use traceback.extract_tb to get the stack trace in list format\n        tb_list = traceback.extract_tb(e.__traceback__)\n\n        # Print each frame's filename, line number, function name, and code snippet\n        for frame_info in tb_list:\n            print(f&quot;File: {frame_info.filename}, Line: {frame_info.lineno}, Function: {frame_info.function}&quot;)\n\n        # Format the traceback into a string with more detailed information\n        tb_string = traceback.format_exception(type(e), e, e.__traceback__)\n        print(tb_string)\n\ndef example_traceback_with_tb_object():\n    # Example of using traceback to work with the Traceback object directly\n    try:\n        result = 10 / 0\n    except Exception as e:\n        # Get the entire traceback object\n        tb_obj = e.__traceback__\n\n        # Print the traceback object's properties\n        print(f&quot;Traceback object: {tb_obj}&quot;)\n\n        # Format the traceback into a string for further processing\n        tb_string = traceback.format_exception(type(e), e, e.__traceback__)\n        print(tb_string)\n\ndef example_traceback_with_file_object():\n    # Example of using traceback to write to a file instead of console\n    try:\n        result = 10 / 0\n    except Exception as e:\n        # Open a file for writing the traceback\n        with open(&quot;error_log.txt&quot;, &quot;w&quot;) as log_file:\n            # Use traceback.print_exception to write the traceback to the file\n            traceback.print_exception(type(e), e, e.__traceback__, file=log_file)\n\n            # Optionally, format the traceback into a string and print it for confirmation\n            tb_string = traceback.format_exception(type(e), e, e.__traceback__)\n            print(f&quot;Formatted traceback written to 'error_log.txt':\\n{tb_string}&quot;)\n\n# Run example functions\nexample_function()\nexample_traceback()\nexample_traceback_with_frame_info()\nexample_traceback_with_tb_object()\nexample_traceback_with_file_object()\n</code></pre>\n\n<h3>Explanation:</h3>\n<ol>\n<li><strong><code>example_function()</code></strong>:</li>\n<li>\n<p>Demonstrates how to print a stack trace using <code>traceback.print_exc()</code>, which prints the traceback to the console.</p>\n</li>\n<li>\n<p><strong><code>example_traceback()</code></strong>:</p>\n</li>\n<li>\n<p>Uses <code>traceback.print_exception()</code> to print and format the traceback into a string, which can be useful for logging or further processing.</p>\n</li>\n<li>\n<p><strong><code>example_traceback_with_frame_info()</code></strong>:</p>\n</li>\n<li>\n<p>Retrieves and prints detailed information about each frame in the stack trace using <code>traceback.extract_tb()</code>. This includes filename, line number, function name, and code snippet.</p>\n</li>\n<li>\n<p><strong><code>example_traceback_with_tb_object()</code></strong>:</p>\n</li>\n<li>\n<p>Accesses and prints the entire traceback object using <code>e.__traceback__</code>, which can provide additional debugging information if needed.</p>\n</li>\n<li>\n<p><strong><code>example_traceback_with_file_object()</code></strong>:</p>\n</li>\n<li>Writes the traceback to a file instead of printing it to the console using <code>traceback.print_exception()</code>. This is useful for logging errors to a log file.</li>\n</ol>\n<p>Each example includes comments that explain the purpose and functionality of each part of the code, making it easy to understand and modify as needed.</p>"
        },
        {
            "filename": "warnings - Warning control.md",
            "content": "<h1>warnings - Warning control</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-simple-warning-example\">1. Simple Warning Example</a></li>\n<li><a href=\"#2-filtering-warnings\">2. Filtering Warnings</a></li>\n<li><a href=\"#3-suppressing-warnings\">3. Suppressing Warnings</a></li>\n<li><a href=\"#4-custom-warning-filters\">4. Custom Warning Filters</a></li>\n<li><a href=\"#5-disabling-warnings\">5. Disabling Warnings</a></li>\n<li><a href=\"#6-enabling-warnings\">6. Enabling Warnings</a></li>\n<li><a href=\"#7-capturing-warnings\">7. Capturing Warnings</a></li>\n</ol>\n<p>The <code>warnings</code> module in Python provides a flexible way to handle warning messages generated by the interpreter or libraries you use. It allows you to filter out unwanted warnings, issue warnings with custom categories and filters, and even enable or disable specific warning categories globally.</p>\n<p>Here are comprehensive examples for various functionalities within the <code>warnings</code> module:</p>\n<h3>1. Simple Warning Example</h3>\n<pre class=\"codehilite\"><code class=\"language-python\"># Import the warnings module\nimport warnings\n\n# Define a custom warning class\nclass MyWarning(Warning):\n    &quot;&quot;&quot;Custom warning category.&quot;&quot;&quot;\n    pass\n\ndef generate_warning():\n    # Generate a warning message using the custom warning class\n    warnings.warn(&quot;This is a custom warning&quot;, MyWarning)\n\nif __name__ == &quot;__main__&quot;:\n    generate_warning()\n</code></pre>\n\n<h3>2. Filtering Warnings</h3>\n<pre class=\"codehilite\"><code class=\"language-python\"># Import the warnings module\nimport warnings\n\n# Define a custom warning class\nclass MyWarning(Warning):\n    &quot;&quot;&quot;Custom warning category.&quot;&quot;&quot;\n    pass\n\ndef generate_warning():\n    # Generate a warning message using the custom warning class\n    warnings.warn(&quot;This is a custom warning&quot;, MyWarning)\n\nif __name__ == &quot;__main__&quot;:\n    # Filter out specific types of warnings\n    with warnings.catch_warnings(record=True) as caught_warnings:\n        warnings.simplefilter(&quot;ignore&quot;, MyWarning)\n        generate_warning()\n\n    # Print captured warnings\n    for warning in caught_warnings:\n        print(warning.message, warning.category, warning.filename, warning.lineno)\n\n# Output will show: No output because the custom warning was ignored.\n</code></pre>\n\n<h3>3. Suppressing Warnings</h3>\n<pre class=\"codehilite\"><code class=\"language-python\"># Import the warnings module\nimport warnings\n\n# Define a custom warning class\nclass MyWarning(Warning):\n    &quot;&quot;&quot;Custom warning category.&quot;&quot;&quot;\n    pass\n\ndef generate_warning():\n    # Generate a warning message using the custom warning class\n    warnings.warn(&quot;This is a custom warning&quot;, MyWarning)\n\nif __name__ == &quot;__main__&quot;:\n    # Suppress all warnings globally\n    warnings.filterwarnings('ignore')\n\n    # Attempt to generate a warning\n    try:\n        generate_warning()\n    except Exception as e:\n        print(f&quot;Exception caught: {e}&quot;)\n\n# Output will show no warning being printed, and the exception will be caught.\n</code></pre>\n\n<h3>4. Custom Warning Filters</h3>\n<pre class=\"codehilite\"><code class=\"language-python\"># Import the warnings module\nimport warnings\n\n# Define a custom warning class\nclass MyWarning(Warning):\n    &quot;&quot;&quot;Custom warning category.&quot;&quot;&quot;\n    pass\n\ndef generate_warning():\n    # Generate a warning message using the custom warning class\n    warnings.warn(&quot;This is a custom warning&quot;, MyWarning)\n\nif __name__ == &quot;__main__&quot;:\n    # Create a custom filter to capture warnings from a specific module\n    warnings.filterwarnings('always', category=MyWarning, module='your_module')\n\n    # Attempt to generate a warning\n    try:\n        import your_module  # Replace 'your_module' with the actual module name\n        generate_warning()\n    except Exception as e:\n        print(f&quot;Exception caught: {e}&quot;)\n\n# Output will show any warnings from 'your_module'.\n</code></pre>\n\n<h3>5. Disabling Warnings</h3>\n<pre class=\"codehilite\"><code class=\"language-python\"># Import the warnings module\nimport warnings\n\ndef disable_warnings():\n    # Disable all warnings globally\n    warnings.disable(warnings.all)\n\nif __name__ == &quot;__main__&quot;:\n    disable_warnings()\n</code></pre>\n\n<h3>6. Enabling Warnings</h3>\n<pre class=\"codehilite\"><code class=\"language-python\"># Import the warnings module\nimport warnings\n\ndef enable_warnings():\n    # Enable all warnings globally\n    warnings.enable(warnings.all)\n\nif __name__ == &quot;__main__&quot;:\n    enable_warnings()\n</code></pre>\n\n<h3>7. Capturing Warnings</h3>\n<pre class=\"codehilite\"><code class=\"language-python\"># Import the warnings module\nimport warnings\n\n# Define a custom warning class\nclass MyWarning(Warning):\n    &quot;&quot;&quot;Custom warning category.&quot;&quot;&quot;\n    pass\n\ndef generate_warning():\n    # Generate a warning message using the custom warning class\n    warnings.warn(&quot;This is a custom warning&quot;, MyWarning)\n\nif __name__ == &quot;__main__&quot;:\n    # Capture all warnings globally\n    with warnings.catch_warnings(record=True) as caught_warnings:\n        generate_warning()\n\n    # Print captured warnings\n    for warning in caught_warnings:\n        print(warning.message, warning.category, warning.filename, warning.lineno)\n</code></pre>\n\n<p>These examples cover the basic functionalities of the <code>warnings</code> module, including generating custom warnings, filtering and suppressing warnings, and capturing warnings globally. You can expand these examples by importing specific modules or using more complex filters to suit your needs.</p>"
        }
    ],
    "Software Packaging and Distribution": [
        {
            "filename": "distutils - Building and installing Python packages.md",
            "content": "<h1>distutils - Building and installing Python packages</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-creating-a-simple-package-with-distutils\">Example 1: Creating a Simple Package with Distutils</a></li>\n<li><a href=\"#step-1-create-a-directory-for-your-package\">Step 1: Create a Directory for Your Package</a></li>\n<li><a href=\"#step-2-initialize-the-package\">Step 2: Initialize the Package</a></li>\n<li><a href=\"#step-3-create-your-modules\">Step 3: Create Your Modules</a></li>\n<li><a href=\"#step-4-create-a-setup-script\">Step 4: Create a Setup Script</a></li>\n<li><a href=\"#step-5-build-the-package\">Step 5: Build the Package</a></li>\n<li><a href=\"#step-6-install-the-package\">Step 6: Install the Package</a></li>\n<li><a href=\"#example-2-building-and-installing-using-setuptools-recommended\">Example 2: Building and Installing Using <code>setuptools</code> (Recommended)</a></li>\n<li><a href=\"#step-1-install-setuptools\">Step 1: Install <code>setuptools</code></a></li>\n<li><a href=\"#step-2-use-setuppy-with-setuptools\">Step 2: Use <code>setup.py</code> with <code>setuptools</code></a></li>\n</ol>\n<p>The <code>distutils</code> module is an older package that is now considered deprecated. It is used to build and install Python packages, but it has been largely replaced by newer tools such as <code>setuptools</code> and <code>wheel</code>. However, I will provide code examples for using the original <code>distutils</code> to illustrate how you might have built and installed a simple Python package in earlier versions of Python.</p>\n<h3>Example 1: Creating a Simple Package with Distutils</h3>\n<h4>Step 1: Create a Directory for Your Package</h4>\n<p>First, create a directory where your package files will be stored. For example:</p>\n<pre class=\"codehilite\"><code class=\"language-bash\">mkdir my_package\ncd my_package\n</code></pre>\n\n<h4>Step 2: Initialize the Package</h4>\n<p>Create an <code>__init__.py</code> file to mark this directory as a Python package:</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># __init__.py\nfrom .module1 import Module1\nfrom .module2 import Module2\n</code></pre>\n\n<h4>Step 3: Create Your Modules</h4>\n<p>Create two modules within your package. For example, create <code>module1.py</code> and <code>module2.py</code> with some basic functionality:</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># module1.py\ndef greet(name):\n    return f&quot;Hello, {name}!&quot;\n\n# module2.py\ndef add_numbers(a, b):\n    return a + b\n</code></pre>\n\n<h4>Step 4: Create a Setup Script</h4>\n<p>Create a <code>setup.py</code> file to specify how your package should be built and installed:</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># setup.py\nfrom setuptools import setup\n\nsetup(\n    name='my_package',\n    version='0.1',\n    packages=['my_package'],\n)\n</code></pre>\n\n<h4>Step 5: Build the Package</h4>\n<p>To build the package, use the following command in the terminal:</p>\n<pre class=\"codehilite\"><code class=\"language-bash\">python setup.py sdist bdist_wheel\n</code></pre>\n\n<p>This will create a <code>.tar.gz</code> distribution and a wheel file in the <code>dist/</code> directory.</p>\n<h4>Step 6: Install the Package</h4>\n<p>To install the package locally, run:</p>\n<pre class=\"codehilite\"><code class=\"language-bash\">pip install dist/my_package-0.1-py3-none-any.whl\n</code></pre>\n\n<p>Or, if you have built a local source distribution (<code>my_package-0.1.tar.gz</code>), use:</p>\n<pre class=\"codehilite\"><code class=\"language-bash\">pip install my_package-0.1.tar.gz\n</code></pre>\n\n<h3>Example 2: Building and Installing Using <code>setuptools</code> (Recommended)</h3>\n<h4>Step 1: Install <code>setuptools</code></h4>\n<p>If you haven't already, you need to install <code>setuptools</code>. You can do this using pip:</p>\n<pre class=\"codehilite\"><code class=\"language-bash\">pip install setuptools\n</code></pre>\n\n<h4>Step 2: Use <code>setup.py</code> with <code>setuptools</code></h4>\n<p>Ensure your <code>setup.py</code> file uses <code>setuptools</code> by adding the necessary import statement at the beginning:</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># setup.py\nfrom setuptools import setup, find_packages\n\nsetup(\n    name='my_package',\n    version='0.1',\n    packages=find_packages(),\n)\n</code></pre>\n\n<h4>Step 3: Build and Install Using <code>setuptools</code></h4>\n<p>Use the following command to build and install your package:</p>\n<pre class=\"codehilite\"><code class=\"language-bash\">python setup.py bdist_wheel\npip install dist/my_package-0.1-py3-none-any.whl\n</code></pre>\n\n<p>or if you have a source distribution:</p>\n<pre class=\"codehilite\"><code class=\"language-bash\">python setup.py sdist bdist_wheel\npip install my_package-0.1.tar.gz\n</code></pre>\n\n<h3>Notes</h3>\n<ul>\n<li><strong>Deprecated</strong>: As mentioned, <code>distutils</code> is deprecated and may not be supported in future Python versions.</li>\n<li><strong>Setuptools</strong>: The newer tools (<code>setuptools</code>, <code>wheel</code>) are recommended for creating and distributing Python packages due to their robustness and ease of use.</li>\n<li><strong>Dependencies</strong>: If your package has dependencies, you should specify them in the <code>setup.py</code> file using the <code>install_requires</code> parameter.</li>\n</ul>\n<p>These examples demonstrate how to create and install a simple Python package using both <code>distutils</code> and <code>setuptools</code>. For production environments, it's advisable to use <code>setuptools</code> for better support and features.</p>"
        },
        {
            "filename": "ensurepip - Bootstrapping the pip installer.md",
            "content": "<h1>ensurepip - Bootstrapping the pip installer</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#usage\">Usage</a></li>\n<li><a href=\"#detailed-example\">Detailed Example</a></li>\n<li><a href=\"#notes\">Notes</a></li>\n</ol>\n<p><strong>ensurepip Module Documentation</strong></p>\n<p>The <code>ensurepip</code> module provides a script that can be used to bootstrap the installation of the <code>pip</code> package manager on systems where it is not already installed. This is particularly useful during system initialization or when setting up new environments.</p>\n<h3>Usage</h3>\n<ol>\n<li><strong>Using <code>sys.executable</code>:</strong>\n   The <code>ensurepip</code> module uses the Python executable itself to bootstrap the installation process. By default, it uses <code>sys.executable</code>, which points to the Python interpreter used by your current script.</li>\n</ol>\n<p><code>python\n   import ensurepip\n   ensurepip.bootstrap()</code></p>\n<ol>\n<li>\n<p><strong>Customizing the Bootstrapping Process:</strong>\n   You can specify a custom pip version or a specific installation directory for the <code>pip</code> package manager.</p>\n</li>\n<li>\n<p>Specifying a specific version of <code>pip</code>:\n     <code>python\n     import ensurepip\n     ensurepip.bootstrap(pip_version='19.3')</code></p>\n</li>\n<li>\n<p>Installing to a specific directory:\n     <code>python\n     import ensurepip\n     ensurepip.bootstrap(target='/path/to/custom/directory')</code></p>\n</li>\n<li>\n<p><strong>Using <code>sys.executable</code> with Additional Arguments:</strong>\n   You can pass additional arguments to the <code>ensurepip.bootstrap()</code> function if needed.</p>\n</li>\n</ol>\n<p><code>python\n   import sys\n   import ensurepip\n   ensurepip.bootstrap(bootstrap_args=['--upgrade'])</code></p>\n<h3>Detailed Example</h3>\n<p>Here's a detailed example of how you might use the <code>ensurepip</code> module in a Python script:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import sys\nimport ensurepip\n\n# Specify a custom version of pip and install it to a specific directory\ndef bootstrap_pip():\n    # Ensure that pip is installed with a specific version and installed in a custom directory\n    ensurepip.bootstrap(pip_version='19.3', target='/path/to/custom/directory')\n\n# Example usage\nif __name__ == &quot;__main__&quot;:\n    print(&quot;Booting up pip...&quot;)\n    try:\n        bootstrap_pip()\n        print(&quot;pip has been successfully bootstrapped.&quot;)\n    except ensurepip.PipError as e:\n        print(f&quot;An error occurred: {e}&quot;)\n</code></pre>\n\n<h3>Notes</h3>\n<ul>\n<li>Ensure that you have the necessary permissions to write to the target directory where <code>pip</code> is being installed.</li>\n<li>The <code>ensurepip.bootstrap()</code> function will handle the installation of <code>pip</code>, including dependencies, if they are not already available.</li>\n</ul>\n<p>This example demonstrates how to use the <code>ensurepip</code> module to bootstrap the pip package manager in a Python script.</p>"
        },
        {
            "filename": "venv - Creation of virtual environments.md",
            "content": "<h1>venv - Creation of virtual environments</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-creating-a-virtual-environment-manually\">Example 1: Creating a Virtual Environment Manually</a></li>\n<li><a href=\"#example-2-activating-a-virtual-environment-on-windows\">Example 2: Activating a Virtual Environment (on Windows)</a></li>\n<li><a href=\"#example-3-activating-a-virtual-environment-on-macoslinux\">Example 3: Activating a Virtual Environment (on macOS/Linux)</a></li>\n<li><a href=\"#example-4-creating-a-virtual-environment-automatically-with-create-method\">Example 4: Creating a Virtual Environment Automatically with <code>create</code> Method</a></li>\n<li><a href=\"#example-5-deactivating-a-virtual-environment\">Example 5: Deactivating a Virtual Environment</a></li>\n<li><a href=\"#example-6-using-pip-within-a-virtual-environment\">Example 6: Using <code>pip</code> within a Virtual Environment</a></li>\n<li><a href=\"#example-7-listing-installed-packages\">Example 7: Listing Installed Packages</a></li>\n<li><a href=\"#example-8-checking-python-version-in-a-virtual-environment\">Example 8: Checking Python Version in a Virtual Environment</a></li>\n</ol>\n<p>Creating a virtual environment in Python using <code>venv</code> is a straightforward process that allows you to manage dependencies for different projects independently without affecting each other. Below are comprehensive examples of how to use the <code>venv</code> module, including comments explaining each step.</p>\n<h3>Example 1: Creating a Virtual Environment Manually</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import venv\n\n# Specify the path where the virtual environment will be created\nvenv_path = '/path/to/your/project/env'\n\n# Create the virtual environment\nvenv.create(venv_path)\n\nprint(f&quot;Virtual environment created at {venv_path}&quot;)\n</code></pre>\n\n<h3>Example 2: Activating a Virtual Environment (on Windows)</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import subprocess\n\n# Specify the path to the virtual environment's activate script\nactivate_script = f&quot;{venv_path}\\\\Scripts\\\\activate&quot;\n\n# Run the activation command using subprocess\nsubprocess.run([activate_script])\n\nprint(&quot;Virtual environment activated. You can now use 'pip' and other commands.&quot;)\n</code></pre>\n\n<h3>Example 3: Activating a Virtual Environment (on macOS/Linux)</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import subprocess\n\n# Specify the path to the virtual environment's activate script\nactivate_script = f&quot;{venv_path}/bin/activate&quot;\n\n# Run the activation command using subprocess\nsubprocess.run(['source', activate_script], shell=True)\n\nprint(&quot;Virtual environment activated. You can now use 'pip' and other commands.&quot;)\n</code></pre>\n\n<h3>Example 4: Creating a Virtual Environment Automatically with <code>create</code> Method</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import venv\n\n# Specify the path where the virtual environment will be created\nvenv_path = '/path/to/your/project/env'\n\n# Create the virtual environment automatically\nwith venv.create(venv_path, with_pip=True) as env:\n    print(f&quot;Virtual environment created at {venv_path}&quot;)\n</code></pre>\n\n<h3>Example 5: Deactivating a Virtual Environment</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import sys\n\ndef deactivate():\n    # Check if we are in an activated virtual environment\n    if 'VIRTUAL_ENV' in os.environ:\n        # Remove the VIRTUAL_ENV variable from the environment\n        del os.environ['VIRTUAL_ENV']\n\n        # Reassign sys.prefix and sys.executable to remove reference to the virtual environment\n        sys.prefix = '/usr'  # or whatever is your default prefix\n        sys.executable = '/usr/bin/python3.10'  # or whatever is your default Python executable\n\n        print(&quot;Virtual environment deactivated.&quot;)\n    else:\n        print(&quot;Not in an activated virtual environment.&quot;)\n\n# Call the deactivate function to exit the virtual environment\ndeactivate()\n</code></pre>\n\n<h3>Example 6: Using <code>pip</code> within a Virtual Environment</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import subprocess\n\n# Specify the path to the virtual environment's bin directory\nbin_dir = f&quot;{venv_path}\\\\Scripts&quot;\n\n# Install a package using pip\nsubprocess.run([f'{bin_dir}\\\\pip', 'install', 'requests'])\n\nprint(&quot;Requests package installed in the virtual environment.&quot;)\n</code></pre>\n\n<h3>Example 7: Listing Installed Packages</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import subprocess\n\n# Specify the path to the virtual environment's bin directory\nbin_dir = f&quot;{venv_path}\\\\Scripts&quot;\n\n# List all installed packages using pip list\nsubprocess.run([f'{bin_dir}\\\\pip', 'list'])\n\nprint(&quot;Installed packages listed.&quot;)\n</code></pre>\n\n<h3>Example 8: Checking Python Version in a Virtual Environment</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import sys\n\n# Check the Python version within the virtual environment\nif 'VIRTUAL_ENV' in os.environ:\n    print(f&quot;Python version in the virtual environment is {sys.version}&quot;)\nelse:\n    print(&quot;Not in an activated virtual environment.&quot;)\n\n# Output: Python version in the virtual environment is 3.12.x (or whatever your installed version is)\n</code></pre>\n\n<p>These examples demonstrate how to create, activate, and manage a virtual environment using Python's <code>venv</code> module. Each example includes comments explaining the purpose of the code snippet and how it interacts with the virtual environment.</p>"
        },
        {
            "filename": "zipapp - Manage executable Python zip archives.md",
            "content": "<h1>zipapp - Manage executable Python zip archives</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-creating-an-executable-from-a-script\">Example 1: Creating an Executable from a Script</a></li>\n<li><a href=\"#example-2-executing-an-executable\">Example 2: Executing an Executable</a></li>\n<li><a href=\"#example-3-installing-the-executable-as-a-command-line-tool\">Example 3: Installing the Executable as a Command-Line Tool</a></li>\n<li><a href=\"#example-4-running-a-script-with-specific-python-interpreter\">Example 4: Running a Script with Specific Python Interpreter</a></li>\n<li><a href=\"#example-5-managing-dependencies\">Example 5: Managing Dependencies</a></li>\n<li><a href=\"#example-6-using-zipapprun_script\">Example 6: Using <code>zipapp.run_script</code></a></li>\n</ol>\n<p>The <code>zipapp</code> module in Python is used to create standalone executables from Python applications by embedding the interpreter into a ZIP archive. This allows you to distribute your application without requiring a separate Python installation, which can be useful for distributing small projects or for creating installable packages.</p>\n<p>Here are some code examples that demonstrate various functionalities of the <code>zipapp</code> module:</p>\n<h3>Example 1: Creating an Executable from a Script</h3>\n<p>Suppose you have a simple script named <code>my_script.py</code>:</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># my_script.py\ndef main():\n    print(&quot;Hello, world!&quot;)\n\nif __name__ == &quot;__main__&quot;:\n    main()\n</code></pre>\n\n<p>You can use the <code>zipapp.create_archive</code> function to create an executable from this script:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import zipapp\n\n# Create a ZIP file containing the script and the Python interpreter\nwith open('my_script.zip', 'wb') as f:\n    z = zipapp.create_archive(\n        # Path to the entry point of the script (main module)\n        'my_script.py',\n        out_file=f,\n        root_dir='.',\n        strip_top_level=True  # Remove top-level directory from ZIP archive\n    )\n</code></pre>\n\n<p>This command will create a standalone executable named <code>my_script.zip</code> that can be run without Python installed on the target system.</p>\n<h3>Example 2: Executing an Executable</h3>\n<p>To execute the created executable:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import subprocess\n\n# Execute the created executable\nsubprocess.run(['./my_script.zip'])\n</code></pre>\n\n<p>This command will invoke the script embedded in <code>my_script.zip</code>.</p>\n<h3>Example 3: Installing the Executable as a Command-Line Tool</h3>\n<p>You can install the executable as a system command by creating an alias or by adding the directory containing the executable to your PATH environment variable. For simplicity, let's assume you want to add the executable to a specific directory:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import shutil\nfrom pathlib import Path\n\n# Specify the destination directory for the executable\ndestination = Path('/usr/local/bin')\n\n# Ensure the destination exists\nif not destination.exists():\n    destination.mkdir(parents=True)\n\n# Copy the executable from the zip file to the destination directory\nshutil.copy('my_script.zip', destination / 'my_script')\n</code></pre>\n\n<p>Now, you can run <code>my_script</code> from anywhere in your system:</p>\n<pre class=\"codehilite\"><code class=\"language-bash\">$ my_script\nHello, world!\n</code></pre>\n\n<h3>Example 4: Running a Script with Specific Python Interpreter</h3>\n<p>If you want to specify a particular Python interpreter when running the script, you can use the <code>-m</code> option with the <code>subprocess.run</code> function:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import subprocess\n\n# Run the script using a specific Python interpreter\nsubprocess.run(['python3', './my_script.zip'])\n</code></pre>\n\n<p>This command will ensure that the specified Python version is used to execute the script.</p>\n<h3>Example 5: Managing Dependencies</h3>\n<p>If your application has dependencies, you can include them in the ZIP archive by adding them to the root directory of the ZIP file. For example, if <code>my_module.py</code> also depends on another module:</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># my_script.py\nimport my_module\n\ndef main():\n    print(&quot;Hello, world!&quot;)\n    my_module.main()\n\nif __name__ == &quot;__main__&quot;:\n    main()\n</code></pre>\n\n<p>And include <code>my_module.py</code> in the ZIP file:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import zipapp\n\nwith open('my_script.zip', 'wb') as f:\n    z = zipapp.create_archive(\n        'my_script.py',\n        out_file=f,\n        root_dir='.',\n        strip_top_level=True,\n        include=['my_module.py']  # Include additional files in the ZIP\n    )\n</code></pre>\n\n<p>This approach allows you to bundle all necessary components into a single, portable executable.</p>\n<h3>Example 6: Using <code>zipapp.run_script</code></h3>\n<p>The <code>zipapp.run_script</code> function is another way to execute scripts directly from a zip archive without creating an executable file:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import zipapp\n\n# Run the script directly from the ZIP archive\nzipapp.run_script(\n    'my_script.zip',\n    # Command-line arguments passed to the script\n    ['arg1', 'arg2']\n)\n</code></pre>\n\n<p>This command will execute <code>my_script.py</code> with the specified arguments.</p>\n<p>These examples provide a comprehensive overview of how you can use the <code>zipapp</code> module to create, manage, and run standalone Python applications. You can modify these examples based on your specific requirements and project structure.</p>"
        }
    ],
    "Structured Markup Processing Tools": [
        {
            "filename": "html - HyperText Markup Language support.md",
            "content": "<h1>html - HyperText Markup Language support</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-parsing-an-html-document\">Example 1: Parsing an HTML Document</a></li>\n<li><a href=\"#example-2-rendering-html-as-a-string\">Example 2: Rendering HTML as a String</a></li>\n<li><a href=\"#example-3-rendering-html-to-a-file\">Example 3: Rendering HTML to a File</a></li>\n<li><a href=\"#example-4-creating-an-html-page-from-python\">Example 4: Creating an HTML Page from Python</a></li>\n<li><a href=\"#example-5-modifying-an-html-document\">Example 5: Modifying an HTML Document</a></li>\n<li><a href=\"#example-6-escaping-special-characters\">Example 6: Escaping Special Characters</a></li>\n<li><a href=\"#example-7-encoding-html-entities\">Example 7: Encoding HTML Entities</a></li>\n<li><a href=\"#example-8-parsing-html-from-a-string\">Example 8: Parsing HTML from a String</a></li>\n<li><a href=\"#example-9-rendering-html-with-custom-styling\">Example 9: Rendering HTML with Custom Styling</a></li>\n<li><a href=\"#example-10-handling-html-entities-in-a-string\">Example 10: Handling HTML Entities in a String</a></li>\n</ol>\n<p>The <code>html</code> module in Python provides tools to parse HTML documents and render them as formatted text, including basic formatting features like bold, italic, lists, links, and images. Below are comprehensive and well-documented code examples for various functionalities provided by the <code>html</code> module.</p>\n<h3>Example 1: Parsing an HTML Document</h3>\n<p>This example demonstrates how to parse an HTML document using the <code>BeautifulSoup</code> library from the <code>bs4</code> package, which is a popular choice for parsing HTML in Python.</p>\n<pre class=\"codehilite\"><code class=\"language-bash\">pip install beautifulsoup4 requests\n</code></pre>\n\n<pre class=\"codehilite\"><code class=\"language-python\">from bs4 import BeautifulSoup\nimport requests\n\n# Fetch an HTML page\nurl = &quot;https://example.com&quot;\nresponse = requests.get(url)\n\n# Parse the HTML content\nsoup = BeautifulSoup(response.content, 'html.parser')\n\n# Extract all links from the parsed document\nlinks = soup.find_all('a')\nfor link in links:\n    print(f&quot;Link: {link.get('href')}, Text: {link.text}&quot;)\n</code></pre>\n\n<h3>Example 2: Rendering HTML as a String</h3>\n<p>This example shows how to render an HTML document into a formatted string using the <code>html</code> module.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from html import escape\n\n# Define some text with HTML tags\ntext = &quot;&lt;strong&gt;Hello, &lt;em&gt;world!&lt;/em&gt;&lt;/strong&gt;&quot;\n\n# Escape any special characters and render as HTML\nformatted_text = escape(text)\nprint(formatted_text)  # Output: &amp;lt;strong&amp;gt;Hello, &amp;lt;em&amp;gt;world!&amp;lt;/em&amp;gt;&amp;lt;/strong&amp;gt;\n</code></pre>\n\n<h3>Example 3: Rendering HTML to a File</h3>\n<p>This example demonstrates how to write an HTML document to a file.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from html import escape\n\n# Define some text with HTML tags\ntext = &quot;&lt;h1&gt;Welcome to Python&lt;/h1&gt;&lt;p&gt;This is a sample paragraph.&lt;/p&gt;&quot;\n\n# Escape any special characters and render as HTML\nformatted_text = escape(text)\n\n# Write the formatted text to a file\nwith open('output.html', 'w') as file:\n    file.write(formatted_text)\n</code></pre>\n\n<h3>Example 4: Creating an HTML Page from Python</h3>\n<p>This example shows how to create a simple HTML page programmatically using the <code>html</code> module.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from html import escape\n\n# Define some content for the HTML page\ntitle = &quot;My Custom Webpage&quot;\ncontent = &quot;&lt;h1&gt;Welcome to My Website&lt;/h1&gt;&lt;p&gt;This is my custom webpage.&lt;/p&gt;&quot;\n\n# Escape any special characters and render as HTML\nformatted_title = escape(title)\nformatted_content = escape(content)\n\n# Create the HTML structure\nhtml_page = f&quot;&quot;&quot;&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;title&gt;{formatted_title}&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    {formatted_content}\n&lt;/body&gt;\n&lt;/html&gt;&quot;&quot;&quot;\n\n# Write the HTML page to a file\nwith open('custom_page.html', 'w') as file:\n    file.write(html_page)\n</code></pre>\n\n<h3>Example 5: Modifying an HTML Document</h3>\n<p>This example demonstrates how to modify an existing HTML document by adding or removing elements.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from bs4 import BeautifulSoup\nimport requests\n\n# Fetch an HTML page\nurl = &quot;https://example.com&quot;\nresponse = requests.get(url)\n\n# Parse the HTML content\nsoup = BeautifulSoup(response.content, 'html.parser')\n\n# Add a new paragraph to the body\nnew_paragraph = soup.new_tag(&quot;p&quot;)\nnew_paragraph.string = &quot;This is a newly added paragraph.&quot;\nsoup.body.append(new_paragraph)\n\n# Remove an existing element\nexisting_element = soup.find('a')\nif existing_element:\n    existing_element.decompose()\n\n# Print the modified HTML content\nprint(soup.prettify())\n</code></pre>\n\n<h3>Example 6: Escaping Special Characters</h3>\n<p>This example shows how to use the <code>html</code> module's <code>escape</code> function to safely render text containing HTML tags.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from html import escape\n\n# Define some text with special characters and HTML tags\ntext = &quot;&lt;&gt;&amp;'\\&quot;&quot;\n\n# Escape any special characters\nescaped_text = escape(text)\nprint(escaped_text)  # Output: &amp;lt;&amp;gt;&amp;#38;&amp;#39;&amp;quot;\n</code></pre>\n\n<h3>Example 7: Encoding HTML Entities</h3>\n<p>This example demonstrates how to use the <code>html</code> module's <code>unescape</code> function to decode HTML entities.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from html import unescape\n\n# Define some text with HTML entities\nescaped_text = &quot;&amp;lt;&gt;&amp;#38;&amp;#39;&amp;quot;&quot;\n\n# Decode the HTML entities\ndecoded_text = unescape(escaped_text)\nprint(decoded_text)  # Output: &lt;&gt;&amp;'&quot;\n</code></pre>\n\n<h3>Example 8: Parsing HTML from a String</h3>\n<p>This example shows how to parse an HTML string using the <code>BeautifulSoup</code> library.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from bs4 import BeautifulSoup\n\n# Define an HTML string\nhtml_string = &quot;&lt;h1&gt;Hello, World!&lt;/h1&gt;&lt;p&gt;This is a paragraph.&lt;/p&gt;&quot;\n\n# Parse the HTML string\nsoup = BeautifulSoup(html_string, 'html.parser')\n\n# Extract all paragraphs from the parsed document\nparagraphs = soup.find_all('p')\nfor para in paragraphs:\n    print(para.text)\n</code></pre>\n\n<h3>Example 9: Rendering HTML with Custom Styling</h3>\n<p>This example demonstrates how to render an HTML document with custom CSS styles.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from html import escape\n\n# Define some text with HTML tags and a simple CSS style\ntext = &quot;&lt;h1&gt;Welcome to Python&lt;/h1&gt;&lt;p style='color: blue; font-size: 20px;'&gt;This is my custom webpage.&lt;/p&gt;&quot;\n\n# Escape any special characters and render as HTML\nformatted_text = escape(text)\nprint(formatted_text)  # Output: &amp;lt;h1&amp;gt;Welcome to Python&amp;lt;/h1&amp;gt;&amp;lt;p style='color: blue; font-size: 20px;'&amp;gt;This is my custom webpage.&amp;lt;/p&amp;gt;\n</code></pre>\n\n<h3>Example 10: Handling HTML Entities in a String</h3>\n<p>This example shows how to handle and decode HTML entities within a string.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from html import unescape\n\n# Define a string containing HTML entities\nhtml_entities = &quot;&amp;amp;&amp;lt;&amp;gt;&quot;\n\n# Decode the HTML entities\ndecoded_string = unescape(html_entities)\nprint(decoded_string)  # Output: &amp; &lt; &gt;\n</code></pre>\n\n<p>These examples cover various aspects of working with HTML in Python using the <code>html</code> module. Each example is well-documented, includes comments explaining each step, and follows best practices for clarity and maintainability.</p>"
        },
        {
            "filename": "html.entities - Definitions of HTML general entities.md",
            "content": "<h1>html.entities - Definitions of HTML general entities</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-reading-entity-definitions\">Example 1: Reading Entity Definitions</a></li>\n<li><a href=\"#example-2-writing-entity-definitions-to-a-file\">Example 2: Writing Entity Definitions to a File</a></li>\n<li><a href=\"#example-3-converting-between-numeric-and-named-entities\">Example 3: Converting Between Numeric and Named Entities</a></li>\n<li><a href=\"#example-4-using-entities-in-html-strings\">Example 4: Using Entities in HTML Strings</a></li>\n<li><a href=\"#example-5-handling-non-ascii-characters\">Example 5: Handling Non-ASCII Characters</a></li>\n<li><a href=\"#example-6-using-entities-with-html-libraries\">Example 6: Using Entities with HTML Libraries</a></li>\n</ol>\n<p>The <code>html.entities</code> module provides a comprehensive dictionary mapping HTML numeric character references to their corresponding characters. These entities are used in HTML documents to represent special characters that cannot be directly included due to formatting issues or restrictions. Below are several examples demonstrating how to use the <code>html.entities</code> module, including reading from and writing to entity files, converting between numeric and named entities, and using them in HTML strings.</p>\n<h3>Example 1: Reading Entity Definitions</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import html.entities as ent\n\n# Access all available HTML character entities as a dictionary\nentity_dict = ent.entitydefs\n\n# Print the first few key-value pairs from the entity dictionary\nfor name, code in list(entity_dict.items())[:5]:\n    print(f&quot;{name}: {code}&quot;)\n</code></pre>\n\n<h3>Example 2: Writing Entity Definitions to a File</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import html.entities as ent\nimport os\n\n# Define the path where you want to save the entity definitions\noutput_file = &quot;entity_definitions.txt&quot;\n\n# Create a list of all entities and their corresponding numeric values\nentities = [(name, code) for name, code in ent.entitydefs.items()]\n\n# Write the entities to a file\nwith open(output_file, &quot;w&quot;) as file:\n    for name, code in entities:\n        file.write(f&quot;{name}: {code}\\n&quot;)\n\nprint(f&quot;Entity definitions have been written to {output_file}&quot;)\n</code></pre>\n\n<h3>Example 3: Converting Between Numeric and Named Entities</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import html.entities as ent\n\n# Convert a named entity to its numeric equivalent\nnamed_entity = &quot;gt&quot;\nnumeric_value = ent.name2codepoint[named_entity]\nprint(f&quot;The numeric value for '{named_entity}' is {numeric_value}&quot;)\n\n# Convert a numeric entity back to its named equivalent\nnumeric_entity = 62\nnamed_entity = ent.codepoint2name[numeric_entity]\nprint(f&quot;The named entity for {numeric_entity} is '{named_entity}'&quot;)\n</code></pre>\n\n<h3>Example 4: Using Entities in HTML Strings</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import html\nimport html.entities as ent\n\n# Define a string with special characters that can be represented by entities\nhtml_string = &quot;&lt;div&gt;This is an example of using HTML entities.&lt;/div&gt;&quot;\n\n# Replace special characters with their corresponding named entities\nescaped_html_string = html.escape(html_string)\nprint(&quot;Original HTML String:&quot;, html_string)\nprint(&quot;Escaped HTML String:&quot;, escaped_html_string)\n\n# Convert back to the original string\nunescaped_html_string = html.unescape(escaped_html_string)\nprint(&quot;Unescaped HTML String:&quot;, unescaped_html_string)\n</code></pre>\n\n<h3>Example 5: Handling Non-ASCII Characters</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import html.entities as ent\n\n# Define a string with non-ASCII characters\nnon_ascii_string = &quot;Hello, world! \ud83d\ude0a&quot;\n\n# Convert non-ASCII characters to their corresponding named entities\nnon_ascii_entities = {char: f&quot;&amp;#x{ord(char):04X};&quot; for char in non_ascii_string if ord(char) &gt; 127}\n\n# Print the original string and its entity replacements\nprint(&quot;Original String:&quot;, non_ascii_string)\nfor char, entity in non_ascii_entities.items():\n    print(f&quot;{char}: {entity}&quot;)\n</code></pre>\n\n<h3>Example 6: Using Entities with HTML Libraries</h3>\n<p>If you are using an HTML library like <code>BeautifulSoup</code> or <code>lxml</code>, the <code>html.entities</code> module can be used to handle character entities in parsed content.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from bs4 import BeautifulSoup\nfrom html import entities as ent\n\n# Define a string with HTML containing special characters\nhtml_content = &quot;&lt;div&gt;This is a &lt;span&gt;sample&lt;/span&gt; of HTML content with special characters: &amp;gt; &amp;lt;&lt;/div&gt;&quot;\n\n# Parse the HTML using BeautifulSoup\nsoup = BeautifulSoup(html_content, &quot;html.parser&quot;)\n\n# Print the parsed content and its entities\nprint(&quot;Original HTML Content:&quot;, html_content)\nprint(&quot;Parsed HTML Content:&quot;, str(soup))\n\n# Use the entity dictionary to manually replace named entities if necessary\nfor text_node in soup.find_all(text=True):\n    new_text = text_node\n    for name, code in ent.html5.items():\n        new_text = new_text.replace(name, f&quot;&amp;#{code};&quot;)\n    text_node.replace_with(new_text)\n\nprint(&quot;Parsed HTML Content with Entities Replaced:&quot;, str(soup))\n</code></pre>\n\n<p>Note: To use <code>BeautifulSoup</code>, you need to install the <code>beautifulsoup4</code> package using pip:</p>\n<pre class=\"codehilite\"><code class=\"language-sh\">pip install beautifulsoup4\n</code></pre>\n\n<p>These examples cover a variety of scenarios involving the <code>html.entities</code> module, from basic entity handling to more advanced uses in web development and data processing.</p>"
        },
        {
            "filename": "html.parser - Simple HTML and XHTML parser.md",
            "content": "<h1>html.parser - Simple HTML and XHTML parser</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-basic-parsing-with-htmlparser\">Example 1: Basic Parsing with <code>HTMLParser</code></a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#example-2-extracting-links-with-beautifulsoup\">Example 2: Extracting Links with <code>BeautifulSoup</code></a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#example-3-parsing-attributes\">Example 3: Parsing Attributes</a></li>\n<li><a href=\"#explanation\">Explanation:</a></li>\n</ol>\n<p>Certainly! Below are comprehensive and well-documented examples for using the <code>html.parser</code> module in Python, which is part of the standard library. This module provides a simple way to parse HTML and XHTML documents.</p>\n<h3>Example 1: Basic Parsing with <code>HTMLParser</code></h3>\n<p>This example demonstrates how to use the <code>HTMLParser</code> class from the <code>html.parser</code> module to extract text from an HTML document.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from html.parser import HTMLParser\n\nclass MyHTMLParser(HTMLParser):\n    def __init__(self):\n        super().__init__()\n        self.data = []\n\n    def handle_data(self, data):\n        # This method is called for each block of plain text in the document\n        self.data.append(data)\n\ndef parse_html(html_content):\n    parser = MyHTMLParser()\n    parser.feed(html_content)\n    return parser.data\n\n# Example usage\nhtml_content = &quot;&quot;&quot;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Sample HTML&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Hello, World!&lt;/h1&gt;\n    &lt;p&gt;This is a sample paragraph.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n&quot;&quot;&quot;\n\nparsed_data = parse_html(html_content)\nprint(parsed_data)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ul>\n<li><strong><code>MyHTMLParser</code> Class</strong>: This class inherits from <code>HTMLParser</code> and overrides the <code>handle_data</code> method to print any plain text found in the HTML.</li>\n<li><strong><code>parse_html</code> Function</strong>: This function creates an instance of <code>MyHTMLParser</code>, feeds it the HTML content, and then returns the extracted data.</li>\n<li><strong>Example Usage</strong>: The HTML content is defined as a string, and the <code>parse_html</code> function is called to extract and print all text from the document.</li>\n</ul>\n<h3>Example 2: Extracting Links with <code>BeautifulSoup</code></h3>\n<p>For more complex parsing tasks, you might use <code>BeautifulSoup</code>, which provides a more powerful interface for working with HTML and XML documents.</p>\n<p>pip install beautifulsoup4</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from bs4 import BeautifulSoup\n\ndef extract_links(html_content):\n    soup = BeautifulSoup(html_content, 'html.parser')\n    links = [a['href'] for a in soup.find_all('a', href=True)]\n    return links\n\n# Example usage\nhtml_content = &quot;&quot;&quot;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Sample HTML&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Hello, World!&lt;/h1&gt;\n    &lt;p&gt;This is a sample paragraph.&lt;/p&gt;\n    &lt;a href=&quot;https://www.example.com&quot;&gt;Visit Example&lt;/a&gt;\n    &lt;a href=&quot;https://www.python.org&quot;&gt;Python Website&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n&quot;&quot;&quot;\n\nlinks = extract_links(html_content)\nprint(links)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ul>\n<li><strong><code>BeautifulSoup</code></strong>: This class is part of the <code>bs4</code> module and provides methods to parse HTML and XML documents.</li>\n<li><strong><code>extract_links</code> Function</strong>: This function uses <code>BeautifulSoup</code> to create a parsed representation of the HTML content. It then finds all <code>&lt;a&gt;</code> tags with an <code>href</code> attribute and extracts their href values.</li>\n<li><strong>Example Usage</strong>: The same HTML content is used, and the function returns a list of links found in the document.</li>\n</ul>\n<h3>Example 3: Parsing Attributes</h3>\n<p>You can also extract attributes from specific elements using BeautifulSoup.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from bs4 import BeautifulSoup\n\ndef extract_title(html_content):\n    soup = BeautifulSoup(html_content, 'html.parser')\n    title = soup.find('title').get_text()\n    return title\n\n# Example usage\nhtml_content = &quot;&quot;&quot;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Sample HTML&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Hello, World!&lt;/h1&gt;\n    &lt;p&gt;This is a sample paragraph.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n&quot;&quot;&quot;\n\ntitle = extract_title(html_content)\nprint(title)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ul>\n<li><strong><code>find</code> Method</strong>: This method searches for the first occurrence of an element in the parsed document.</li>\n<li><strong><code>get_text</code> Method</strong>: This method returns the text content of the found element, which is useful for extracting titles or other simple text data.</li>\n</ul>\n<p>These examples demonstrate how to use different parsing techniques with <code>html.parser</code> and <code>BeautifulSoup</code>, covering basic extraction, more complex operations like link extraction, and attribute access.</p>"
        }
    ],
    "Superseded Modules": [
        {
            "filename": "imp - Access the import internals.md",
            "content": "<h1>imp - Access the import internals</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-using-impload_module-legacy-functionality\">Example 1: Using <code>imp.load_module()</code> (Legacy Functionality)</a></li>\n<li><a href=\"#example-2-using-impfind_module-legacy-functionality\">Example 2: Using <code>imp.find_module()</code> (Legacy Functionality)</a></li>\n<li><a href=\"#example-3-using-impload_compiled-legacy-functionality\">Example 3: Using <code>imp.load_compiled()</code> (Legacy Functionality)</a></li>\n<li><a href=\"#example-4-using-impget_suffixes-legacy-functionality\">Example 4: Using <code>imp.get_suffixes()</code> (Legacy Functionality)</a></li>\n<li><a href=\"#example-5-using-impis_frozen-legacy-functionality\">Example 5: Using <code>imp.is_frozen()</code> (Legacy Functionality)</a></li>\n<li><a href=\"#example-6-using-impget_magic-legacy-functionality\">Example 6: Using <code>imp.get_magic()</code> (Legacy Functionality)</a></li>\n<li><a href=\"#example-7-using-impget_code-legacy-functionality\">Example 7: Using <code>imp.get_code()</code> (Legacy Functionality)</a></li>\n<li><a href=\"#example-8-using-impget_info-legacy-functionality\">Example 8: Using <code>imp.get_info()</code> (Legacy Functionality)</a></li>\n</ol>\n<p>The <code>imp</code> module is a legacy module used to load modules dynamically, but it has been largely replaced by the <code>importlib</code> module, which provides a more modern and flexible interface for importing modules. However, if you need to interact with or understand how <code>imp</code> works, here are some basic examples:</p>\n<h3>Example 1: Using <code>imp.load_module()</code> (Legacy Functionality)</h3>\n<p>The <code>imp.load_module()</code> function is used to load a Python module dynamically from its source code.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import imp\n\n# Define the file path to the Python module you want to import\nmodule_path = 'path/to/your/module.py'\n\n# Load the module\nmodule = imp.load_source('module_name', module_path)\n\n# Access and use the loaded module\nprint(module.some_function())\n</code></pre>\n\n<h3>Example 2: Using <code>imp.find_module()</code> (Legacy Functionality)</h3>\n<p>The <code>imp.find_module()</code> function can be used to locate a Python module file.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import imp\n\n# Define the name of the module you are looking for\nmodule_name = 'your_module'\n\n# Find the location of the module file\ntry:\n    path, filename, description = imp.find_module(module_name)\nexcept ImportError:\n    print(f&quot;Module '{module_name}' not found.&quot;)\nelse:\n    print(f&quot;Found {filename} at {path}&quot;)\n</code></pre>\n\n<h3>Example 3: Using <code>imp.load_compiled()</code> (Legacy Functionality)</h3>\n<p>The <code>imp.load_compiled()</code> function is used to load a compiled Python module from its bytecode file.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import imp\n\n# Define the path to the compiled module file\nmodule_path = 'path/to/your/module.pyc'\n\n# Load the compiled module\nmodule = imp.load_compiled('module_name', module_path)\n\n# Access and use the loaded module\nprint(module.some_function())\n</code></pre>\n\n<h3>Example 4: Using <code>imp.get_suffixes()</code> (Legacy Functionality)</h3>\n<p>The <code>imp.get_suffixes()</code> function returns a list of tuples containing suffixes for Python modules.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import imp\n\n# Get all suffixes for Python modules\nsuffixes = imp.get_suffixes()\n\nfor suffix in suffixes:\n    print(f&quot;Suffix: {suffix}&quot;)\n</code></pre>\n\n<h3>Example 5: Using <code>imp.is_frozen()</code> (Legacy Functionality)</h3>\n<p>The <code>imp.is_frozen()</code> function returns <code>True</code> if the module is being run as a frozen executable.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import imp\n\n# Check if the module is being run as a frozen executable\nif imp.is_frozen():\n    print(&quot;Module is being run as a frozen executable.&quot;)\nelse:\n    print(&quot;Module is being run from source.&quot;)\n</code></pre>\n\n<h3>Example 6: Using <code>imp.get_magic()</code> (Legacy Functionality)</h3>\n<p>The <code>imp.get_magic()</code> function returns the magic number used to detect Python bytecode files.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import imp\n\n# Get the magic number for Python bytecode files\nmagic_number = imp.get_magic()\n\nprint(f&quot;Magic Number: {magic_number}&quot;)\n</code></pre>\n\n<h3>Example 7: Using <code>imp.get_code()</code> (Legacy Functionality)</h3>\n<p>The <code>imp.get_code()</code> function returns the code object for a given module.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import imp\n\n# Define the name of the module you are looking for\nmodule_name = 'your_module'\n\n# Get the code object for the module\ntry:\n    importlib.import_module(module_name)\nexcept ImportError as e:\n    print(f&quot;Module '{module_name}' not found.&quot;)\nelse:\n    code_obj = imp.get_code(module_name)\n</code></pre>\n\n<h3>Example 8: Using <code>imp.get_info()</code> (Legacy Functionality)</h3>\n<p>The <code>imp.get_info()</code> function returns information about a module.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import imp\n\n# Define the name of the module you are looking for\nmodule_name = 'your_module'\n\n# Get information about the module\ntry:\n    importlib.import_module(module_name)\nexcept ImportError as e:\n    print(f&quot;Module '{module_name}' not found.&quot;)\nelse:\n    info = imp.get_info(module_name)\n    print(info)\n</code></pre>\n\n<p>These examples provide a basic understanding of how to use <code>imp</code> for loading and interacting with Python modules. Note that while these functions are still available, they are considered legacy and may be removed in future versions of Python. Consider using <code>importlib</code> for new development if possible.</p>"
        },
        {
            "filename": "optparse - Parser for command line options.md",
            "content": "<h1>optparse - Parser for command line options</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#usage\">Usage:</a></li>\n</ol>\n<p>The <code>optparse</code> module is a simple way to handle command-line options in Python, similar to how <code>getopt</code> works in C. It provides a flexible framework for parsing command-line options and arguments.</p>\n<p>Below are comprehensive code examples that cover various functionalities of the <code>optparse</code> module:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import optparse\n\ndef main():\n    # Create an OptionParser object\n    parser = optparse.OptionParser()\n\n    # Define command-line options\n    # long_opt: --option\n    # short_opt: -o\n    # dest: variable to store the option's value\n    # help: description of the option\n    parser.add_option(&quot;--input&quot;, &quot;-i&quot;, dest=&quot;input_file&quot;, help=&quot;Input file path&quot;)\n\n    parser.add_option(&quot;--output&quot;, &quot;-o&quot;, dest=&quot;output_file&quot;, help=&quot;Output file path&quot;)\n\n    parser.add_option(\n        &quot;--verbose&quot;,\n        &quot;-v&quot;,\n        action=&quot;store_true&quot;,\n        dest=&quot;verbose&quot;,\n        help=&quot;Enable verbose mode&quot;\n    )\n\n    # Parse the command-line options and arguments\n    (options, args) = parser.parse_args()\n\n    # Check if required options are provided\n    if not options.input_file:\n        print(&quot;Error: Input file path is required&quot;)\n        parser.print_help()\n        return\n\n    if not options.output_file:\n        print(&quot;Error: Output file path is required&quot;)\n        parser.print_help()\n        return\n\n    # Process the parsed options and arguments\n    process_options(options, args)\n\ndef process_options(options, args):\n    print(f&quot;Input File: {options.input_file}&quot;)\n    print(f&quot;Output File: {options.output_file}&quot;)\n    if options.verbose:\n        print(&quot;Verbose mode is enabled&quot;)\n\nif __name__ == &quot;__main__&quot;:\n    main()\n</code></pre>\n\n<h3>Explanation:</h3>\n<ol>\n<li><strong>OptionParser Initialization</strong>:</li>\n<li>\n<p>We create an <code>OptionParser</code> object which is used to define and parse the command-line options.</p>\n</li>\n<li>\n<p><strong>Defining Options</strong>:</p>\n</li>\n<li>\n<p><code>add_option</code> method is used to define various types of command-line options:</p>\n<ul>\n<li><code>--input</code> or <code>-i</code>: A long option with a short alias.</li>\n<li><code>--output</code> or <code>-o</code>: Another long option with a short alias.</li>\n<li><code>--verbose</code> or <code>-v</code>: A boolean flag that stores a True/False value.</li>\n</ul>\n</li>\n<li>\n<p><strong>Parsing Options and Arguments</strong>:</p>\n</li>\n<li>\n<p>The <code>parse_args()</code> method is called to parse the command-line arguments. It returns a tuple containing two elements: a namespace object (<code>options</code>) with attributes set from the parsed options, and a list of remaining arguments (<code>args</code>).</p>\n</li>\n<li>\n<p><strong>Validation</strong>:</p>\n</li>\n<li>\n<p>We check if both input and output file paths are provided. If not, we print an error message and help information using <code>parser.print_help()</code>.</p>\n</li>\n<li>\n<p><strong>Processing Options</strong>:</p>\n</li>\n<li>The <code>process_options</code> function demonstrates how to use the parsed options. It prints the values of the input and output files and checks if verbose mode is enabled.</li>\n</ol>\n<h3>Usage:</h3>\n<p>To run this script from the command line, you can use the following commands:</p>\n<pre class=\"codehilite\"><code class=\"language-bash\">python script.py --input=input.txt --output=output.txt -v\n</code></pre>\n\n<p>This will execute the script with the specified options.</p>"
        }
    ],
    "Text Processing Services": [
        {
            "filename": "difflib - Helpers for computing deltas.md",
            "content": "<h1>difflib - Helpers for computing deltas</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-basic-sequence-comparison\">Basic Sequence Comparison</a></li>\n<li><a href=\"#example-2-context-format-differences\">Context Format Differences</a></li>\n<li><a href=\"#example-3-html-format-differences\">Html Format Differences</a></li>\n<li><a href=\"#example-4-sequencematcher---comparing-similarity\">SequenceMatcher - Comparing Similarity</a></li>\n<li><a href=\"#example-5-find-matches-in-two-sequences\">Find Matches in Two Sequences</a></li>\n<li><a href=\"#example-6-get-close-matches-using-sequencematcher\">Get Close Matches Using SequenceMatcher</a></li>\n</ol>\n<p>Below is a comprehensive set of code examples demonstrating various functionalities provided by the <code>difflib</code> module, which is part of Python's standard library and helps in comparing sequences to find differences. Each example includes detailed comments explaining what the code does.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import difflib\n\n# Example 1: Basic Sequence Comparison\noriginal = &quot;The quick brown fox jumps over the lazy dog&quot;\nmodified = &quot;The fast brown fox leaped over the sleepy hound&quot;\n\n# Create a Differ object to compare two sequences (strings in this case)\ndiffer = difflib.Differ()\n\n# Get a list of differences between original and modified strings\ndiffs = list(differ.compare(original.split(), modified.split()))\n\nprint(&quot;Differences (simple):&quot;)\nfor diff in diffs:\n    print(diff)\n\n# Example 2: Context Format Differences\ncontext_diffs = list(difflib.context_diff(original.split(), modified.split()))\n\nprint(&quot;\\nDifferences (context format):&quot;)\nfor diff in context_diffs:\n    print(diff)\n\n# Example 3: Html Format Differences\nhtml_differ = difflib.HtmlDiff()\nhtml_diffs = html_differ.make_file(original.splitlines(), modified.splitlines())\n\nwith open(&quot;diff.html&quot;, &quot;w&quot;) as f:\n    f.write(html_diffs)\nprint(&quot;\\nDifferences (HTML format) written to diff.html&quot;)\n\n# Example 4: SequenceMatcher - Comparing Similarity\ntext1 = &quot;&quot;&quot;The quick brown fox jumps over the lazy dog&quot;&quot;&quot;\ntext2 = &quot;&quot;&quot;A fast brown fox leaped over a drowsy hound&quot;&quot;&quot;\n\nmatcher = difflib.SequenceMatcher(None, text1.split(), text2.split())\n\nprint(&quot;\\nSimilarity Score:&quot;, matcher.ratio())  # Output: Similarity score between 0 and 1\n\n# Example 5: Find Matches in Two Sequences\nsequence_a = &quot;The quick brown fox jumps over the lazy dog&quot;\nsequence_b = &quot;A fast brown fox leaped over a drowsy hound&quot;\n\nsequence_a_words = sequence_a.split()\nsequence_b_words = sequence_b.split()\n\nmatcher = difflib.SequenceMatcher(None, sequence_a_words, sequence_b_words)\n\nfor tag, i1, i2, j1, j2 in matcher.get_opcodes():\n    if tag == 'equal':  # Lines that are equal\n        print(&quot;Equal:&quot;, (i1, i2), &quot; - &quot;, sequence_a_words[i1:i2])\n    elif tag == 'insert':  # New lines in b\n        print(&quot;Insert:&quot;, (j1, j2), &quot; - &quot;, sequence_b_words[j1:j2])\n    elif tag == 'delete':  # Removed lines from a\n        print(&quot;Delete:&quot;, (i1, i2), &quot; - &quot;, sequence_a_words[i1:i2])\n    elif tag == 'replace':  # Replaced lines in both sequences\n        print(&quot;Replace:&quot;, (i1, i2), &quot; to &quot;, (j1, j2), &quot; - &quot;, sequence_a_words[i1:i2], &quot; -&gt; &quot;, sequence_b_words[j1:j2])\n\n# Example 6: Get Close Matches Using SequenceMatcher\nword_list = [&quot;dog&quot;, &quot;cat&quot;, &quot;tiger&quot;, &quot;lion&quot;, &quot;fox&quot;]\nsearch_word = &quot;foxe&quot;\n\nmatches = difflib.get_close_matches(search_word, word_list, n=3, cutoff=0.8)\n\nprint(&quot;\\nClose matches to 'foxe':&quot;)\nfor match in matches:\n    print(match)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ol>\n<li>\n<p><strong>Basic Sequence Comparison</strong>: The <code>Differ</code> class is used to compare two sequences (strings) and output the differences word by word.</p>\n</li>\n<li>\n<p><strong>Context Format Differences</strong>: The <code>context_diff</code> function provides a context format for the differences, which includes additional context lines around changes.</p>\n</li>\n<li>\n<p><strong>Html Format Differences</strong>: Generates an HTML representation of the differences that can be saved to a file or displayed in web browsers.</p>\n</li>\n<li>\n<p><strong>SequenceMatcher - Comparing Similarity</strong>: Measures the similarity between two sequences using <code>SequenceMatcher</code>. It returns a ratio ranging from 0 to 1, where 1 means identical and 0 means no common elements.</p>\n</li>\n<li>\n<p><strong>Find Matches in Two Sequences</strong>: Uses <code>get_opcodes</code> method of <code>SequenceMatcher</code> to find insertions, deletions, replacements, and equal parts between two sequences.</p>\n</li>\n<li>\n<p><strong>Get Close Matches Using SequenceMatcher</strong>: Finds close matches for a word within a list of words using the <code>get_close_matches</code> function, which is useful in spell-checking or autocomplete features.</p>\n</li>\n</ol>\n<p>These examples should cover most common use cases where you need to compare sequences or find differences in Python programs.</p>"
        },
        {
            "filename": "re - Regular expression operations.md",
            "content": "<h1>re - Regular expression operations</h1>\n<p>Below are comprehensive code examples covering various functionalities provided by the <code>re</code> (regular expressions) module in Python 3.12. These examples include detailed comments explaining each step.</p>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-basic-pattern-matching-using-search\">Basic pattern matching using search()</a></li>\n<li><a href=\"#example-2-finding-all-matches-using-findall\">Finding all matches using findall()</a></li>\n<li><a href=\"#example-3-substituting-strings-using-sub\">Substituting strings using sub()</a></li>\n<li><a href=\"#example-4-compilation-and-usage-of-regular-expressions-using-compile\">Compilation and usage of regular expressions using compile()</a></li>\n<li><a href=\"#example-5-using-patterns-with-flags-using-match\">Using patterns with flags using match()</a></li>\n<li><a href=\"#example-6-matching-patterns-with-lookaheads-and-lookbehinds\">Matching patterns with lookaheads and lookbehinds</a></li>\n</ol>\n<pre class=\"codehilite\"><code class=\"language-python\">import re\n\n# Example 1: Basic pattern matching using search()\ndef example_search():\n    &quot;&quot;&quot;\n    This function demonstrates basic pattern matching using re.search().\n\n    The search() method scans through the string, looking for any location where \n    the regular expression pattern produces a match. It returns a Match object if found.\n    If no matches are found, it returns None.\n    &quot;&quot;&quot;\n    text = &quot;Hello, my email is example@example.com&quot;\n    # Define the regex pattern to find an email address\n    pattern = r&quot;\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b&quot;\n\n    match = re.search(pattern, text)\n    if match:\n        print(f&quot;Email found: {match.group()}&quot;)\n    else:\n        print(&quot;No email found.&quot;)\n\n# Example 2: Finding all matches using findall()\ndef example_findall():\n    &quot;&quot;&quot;\n    This function demonstrates finding all non-overlapping matches of a pattern in a string.\n\n    The findall() method returns a list containing all the match objects for every match \n    of the pattern found in the string. If no matches are found, it returns an empty list.\n    &quot;&quot;&quot;\n    text = &quot;The rain in Spain stays mainly in the plain.&quot;\n    # Define the regex pattern to find words starting with 's'\n    pattern = r&quot;\\bs\\w+&quot;\n\n    matches = re.findall(pattern, text)\n    print(f&quot;Matches: {matches}&quot;)\n\n# Example 3: Substituting strings using sub()\ndef example_sub():\n    &quot;&quot;&quot;\n    This function demonstrates how to replace parts of a string where the \n    regular expression pattern matches.\n\n    The sub() method replaces occurrences of the pattern with the specified replacement. \n    The replacement can be a string or a callable object (a function).\n    &quot;&quot;&quot;\n    text = &quot;The quick brown fox jumps over the lazy dog.&quot;\n    # Define the regex pattern to replace 'fox' with 'cat'\n    pattern = r&quot;fox&quot;\n\n    # Using a simple string as the replacement\n    result = re.sub(pattern, &quot;cat&quot;, text)\n    print(f&quot;Simple substitution: {result}&quot;)\n\n    # Using a function as the replacement\n    def replacer(match):\n        return match.group().upper()\n\n    result_func = re.sub(pattern, replacer, text)\n    print(f&quot;Function-based substitution: {result_func}&quot;)\n\n# Example 4: Compilation and usage of regular expressions using compile()\ndef example_compile():\n    &quot;&quot;&quot;\n    This function demonstrates the use of re.compile() to create a pattern object.\n    A compiled pattern can be used for multiple matches without the need to repeat the search().\n\n    The compile() method returns a RegexObject that has methods suitable for searching \n    and replacing text according to the regular expression pattern.\n    &quot;&quot;&quot;\n    text = &quot;I have 12 apples, 34 bananas, and 56 cherries.&quot;\n    # Define the regex pattern to find numbers\n    pattern = r&quot;\\d+&quot;\n\n    compiled_pattern = re.compile(pattern)\n\n    matches = compiled_pattern.findall(text)\n    print(f&quot;Matches: {matches}&quot;)\n\n# Example 5: Using patterns with flags using match()\ndef example_match_flags():\n    &quot;&quot;&quot;\n    This function demonstrates the use of different flags in regular expressions.\n\n    Flags modify the behavior of a pattern. Commonly used flags include:\n        - re.IGNORECASE\n        - re.MULTILINE\n        - re.DOTALL\n\n    The match() method attempts to apply the pattern at the start of the string. \n    It returns a Match object if the pattern is found, otherwise None.\n    &quot;&quot;&quot;\n    text = &quot;Hello\\nWorld&quot;\n\n    # Case-insensitive search\n    pattern = r&quot;hello&quot;\n    match = re.match(pattern, text, flags=re.IGNORECASE)\n    print(f&quot;Match (ignore case): {match}&quot;)\n\n    # Multiline search\n    pattern = r&quot;^Hello.*World$&quot;\n    match = re.match(pattern, text, flags=re.MULTILINE)\n    if match:\n        print(&quot;Multiline match: Match found&quot;)\n    else:\n        print(&quot;Multiline match: No match&quot;)\n\n# Example 6: Matching patterns with lookaheads and lookbehinds\ndef example_lookahead():\n    &quot;&quot;&quot;\n    This function demonstrates the use of positive and negative lookahead and lookbehind assertions.\n\n    Lookaheads and lookbehinds are zero-width matching assertions. \n    They check for a pattern without including it in the match result.\n    &quot;&quot;&quot;\n    text = &quot;The quick brown fox jumps over the lazy dog.&quot;\n\n    # Positive lookahead\n    pattern = r&quot;fox(?=\\s+jumps)&quot;\n    matches = re.findall(pattern, text)\n    print(f&quot;Positive lookahead: {matches}&quot;)\n\n    # Negative lookbehind\n    pattern = r&quot;(?&lt;!quick)\\s+&quot;\n    matches = re.findall(pattern, text)\n    print(f&quot;Negative lookbehind: {matches}&quot;)\n\n# Running the examples\nif __name__ == &quot;__main__&quot;:\n    example_search()\n    example_findall()\n    example_sub()\n    example_compile()\n    example_match_flags()\n    example_lookahead()\n</code></pre>\n\n<p>This code provides a comprehensive set of examples to demonstrate various functionalities provided by the <code>re</code> module, including basic pattern matching, finding all matches, substituting strings, compiling patterns, using flags, and utilizing lookaheads/lookbehinds.</p>"
        },
        {
            "filename": "readline - GNU readline interface.md",
            "content": "<h1>readline - GNU readline interface</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-basic-usage\">1. Basic Usage</a></li>\n<li><a href=\"#2-customizing-the-prompt\">2. Customizing the Prompt</a></li>\n<li><a href=\"#3-adding-history-management\">3. Adding History Management</a></li>\n<li><a href=\"#4-using-completion-functions\">4. Using Completion Functions</a></li>\n<li><a href=\"#5-prompting-with-multiple-choices\">5. Prompting with Multiple Choices</a></li>\n<li><a href=\"#6-using-pre-input-hooks\">6. Using Pre Input Hooks</a></li>\n<li><a href=\"#7-using-history-manipulation-functions\">7. Using History Manipulation Functions</a></li>\n<li><a href=\"#8-using-readline-options\">8. Using Readline Options</a></li>\n</ol>\n<p>The <code>readline</code> module in Python provides a convenient way to handle command line editing, history management, and completion features using GNU Readline.</p>\n<p>Here are comprehensive code examples demonstrating various functionalities of the <code>readline</code> module:</p>\n<h3>1. Basic Usage</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import readline\n\n# Prompt the user for input with basic readline capabilities\nuser_input = input(&quot;Enter something: &quot;)\nprint(f&quot;You entered: {user_input}&quot;)\n</code></pre>\n\n<h3>2. Customizing the Prompt</h3>\n<p>You can customize the prompt to provide more context or instructions to the user.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import readline\n\ndef custom_prompt(line):\n    return &quot;&gt;&gt;&gt; &quot;\n\ndef complete_func(text, state):\n    lines = [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;]\n    return (lines[state] + ' ') if state &lt; len(lines) else None\n\nreadline.set_completer(complete_func)\nreadline.set_completer_delims(' \\t\\n')\nreadline.set_startup_hook(lambda: readline.parse_and_bind(&quot;tab: complete&quot;))\nreadline.parse_and_bind(&quot;set show-all-if-ambiguous on&quot;)\nreadline.parse_and_bind(&quot;bind ^I rl_complete&quot;)  # Use Tab for completion\n\nreadline.set_pre_input_hook(custom_prompt)\n</code></pre>\n\n<h3>3. Adding History Management</h3>\n<p>The <code>readline</code> module supports history management using the <code>history</code> list.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import readline\n\n# Append input to the history list\nreadline.add_history(&quot;first entry&quot;)\nreadline.add_history(&quot;second entry&quot;)\n\n# Retrieve and print a specific entry from the history list\nprint(f&quot;History item 1: {readline.get_history_item(1)}&quot;)\n</code></pre>\n\n<h3>4. Using Completion Functions</h3>\n<p>Completion functions allow you to provide suggestions based on user input.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import readline\n\ndef complete_func(text, state):\n    lines = [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;]\n    return (lines[state] + ' ') if state &lt; len(lines) else None\n\nreadline.set_completer(complete_func)\nreadline.parse_and_bind(&quot;tab: complete&quot;)\n</code></pre>\n\n<h3>5. Prompting with Multiple Choices</h3>\n<p>You can prompt the user for multiple choices by using a custom completion function.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import readline\n\ndef choice_completion(text, state):\n    choices = [&quot;yes&quot;, &quot;no&quot;, &quot;maybe&quot;]\n    return (choices[state] + ' ') if state &lt; len(choices) else None\n\nreadline.set_completer(choice_completion)\nreadline.parse_and_bind(&quot;tab: complete&quot;)\n\nuser_choice = input(&quot;Do you agree? (yes/no/maybe): &quot;)\nprint(f&quot;Your choice was: {user_choice}&quot;)\n</code></pre>\n\n<h3>6. Using Pre Input Hooks</h3>\n<p>Pre-input hooks allow you to modify user input before it is processed.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import readline\n\ndef custom_prompt(line):\n    return &quot;&gt;&gt;&gt; &quot;\n\ndef complete_func(text, state):\n    lines = [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;]\n    return (lines[state] + ' ') if state &lt; len(lines) else None\n\nreadline.set_completer_delims(' \\t\\n')\nreadline.set_completer(complete_func)\nreadline.set_startup_hook(lambda: readline.parse_and_bind(&quot;tab: complete&quot;))\nreadline.parse_and_bind(&quot;set show-all-if-ambiguous on&quot;)\nreadline.parse_and_bind(&quot;bind ^I rl_complete&quot;)  # Use Tab for completion\n\nreadline.set_pre_input_hook(custom_prompt)\n</code></pre>\n\n<h3>7. Using History Manipulation Functions</h3>\n<p>The <code>history</code> list provides functions to manipulate history entries.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import readline\n\n# Append a new entry to the history\nreadline.add_history(&quot;first entry&quot;)\n\n# Delete an entry from the history by index\nreadline.remove_history_item(0)\n\n# Retrieve all entries in the history as a list\nhistory_list = readline.get_current_history_length()\nprint(f&quot;Number of history items: {history_list}&quot;)\n\n# Clear the entire history\nreadline.clear_history()\n</code></pre>\n\n<h3>8. Using Readline Options</h3>\n<p>You can set various options to customize the behavior of <code>readline</code>.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import readline\n\n# Set option to display all possible completions when ambiguous\nreadline.parse_and_bind(&quot;set show-all-if-ambiguous on&quot;)\n\n# Enable tab completion\nreadline.parse_and_bind(&quot;tab: complete&quot;)\n</code></pre>\n\n<p>These examples cover a range of functionalities available in the <code>readline</code> module, demonstrating how to customize prompts, manage history, implement completions, and manipulate user input through pre-input hooks.</p>"
        },
        {
            "filename": "rlcompleter - Completion function for GNU readline.md",
            "content": "<h1>rlcompleter - Completion function for GNU readline</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-basic-completion\">1. Basic Completion</a></li>\n<li><a href=\"#2-custom-completion-function\">2. Custom Completion Function</a></li>\n<li><a href=\"#3-completion-for-custom-objects\">3. Completion for Custom Objects</a></li>\n<li><a href=\"#4-using-readlineparse_and_bind-for-advanced-bindings\">4. Using <code>readline.parse_and_bind</code> for Advanced Bindings</a></li>\n<li><a href=\"#5-completion-for-specific-modules-or-libraries\">5. Completion for Specific Modules or Libraries</a></li>\n<li><a href=\"#6-using-readlineset_completer_delims-to-customize-delimiters\">6. Using <code>readline.set_completer_delims</code> to Customize Delimiters</a></li>\n</ol>\n<p>The <code>rlcompleter</code> module in Python provides a way to enable completion features for interactive shell sessions using the GNU Readline library. This can be particularly useful for enhancing productivity by providing auto-completion as you type commands or variable names.</p>\n<p>Below are comprehensive code examples demonstrating various functionalities of the <code>rlcompleter</code> module:</p>\n<h3>1. Basic Completion</h3>\n<p>First, ensure that the GNU Readline library is installed on your system. You can install it using your package manager (e.g., <code>apt-get install libreadline-dev</code> for Ubuntu).</p>\n<p>Here's a basic example of how to use <code>rlcompleter</code> in a Python script:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import readline\nimport rlcompleter\n\n# Set the completer function to use rlcompleter\nreadline.set_completer(rlcompleter.Completer().complete)\n\n# Enable auto-completion\nreadline.parse_and_bind('tab: complete')\n\n# Example usage of the completer\ndef example_usage():\n    print(&quot;Type a string and press 'Tab' for completion:&quot;)\n    while True:\n        try:\n            input_string = input()\n            print(f&quot;You entered: {input_string}&quot;)\n        except EOFError:\n            print(&quot;\\nExiting...&quot;)\n            break\n\nif __name__ == &quot;__main__&quot;:\n    example_usage()\n</code></pre>\n\n<h3>2. Custom Completion Function</h3>\n<p>You can also create a custom completion function by subclassing <code>rlcompleter.Completer</code> and overriding the <code>_complete</code> method.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import readline\nimport rlcompleter\n\nclass CustomCompleter(rlcompleter.Completer):\n    def complete(self, text, state):\n        # Define your own completion logic here\n        matches = [item for item in dir() if item.startswith(text)]\n        return matches[state] if 0 &lt;= state &lt; len(matches) else None\n\n# Set the custom completer function to use rlcompleter\nreadline.set_completer(CustomCompleter().complete)\n\n# Enable auto-completion\nreadline.parse_and_bind('tab: complete')\n\n# Example usage of the custom completer\ndef example_usage():\n    print(&quot;Type a string and press 'Tab' for completion:&quot;)\n    while True:\n        try:\n            input_string = input()\n            print(f&quot;You entered: {input_string}&quot;)\n        except EOFError:\n            print(&quot;\\nExiting...&quot;)\n            break\n\nif __name__ == &quot;__main__&quot;:\n    example_usage()\n</code></pre>\n\n<h3>3. Completion for Custom Objects</h3>\n<p>If you have custom objects and want to provide completion for them, you can override the <code>_complete</code> method again:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import readline\nimport rlcompleter\n\nclass MyClass:\n    def __init__(self, name):\n        self.name = name\n\nclass InstanceCompleter(rlcompleter.Completer):\n    def complete(self, text, state):\n        if state == 0:\n            # Retrieve all MyClass instance names starting with 'text'\n            self.matches = [name for name, obj in globals().items() if isinstance(obj, MyClass) and name.startswith(text)]\n        try:\n            return self.matches[state]\n        except IndexError:\n            return None\n\ndef example_usage():\n    obj1 = MyClass(&quot;Object 1&quot;)\n    obj2 = MyClass(&quot;Object 2&quot;)\n\n    # Set up completion for instances of MyClass\n    class_instance_completer = InstanceCompleter()\n    readline.set_completer(class_instance_completer.complete)\n\n    # Enable auto-completion\n    readline.parse_and_bind('tab: complete')\n\n    print(&quot;Type 'obj' and press 'Tab' for completion:&quot;)\n    while True:\n        try:\n            input_string = input()\n            obj = eval(input_string)\n            if isinstance(obj, MyClass):\n                print(f&quot;You selected: {obj.name}&quot;)\n            else:\n                print(&quot;Invalid object&quot;)\n        except EOFError:\n            print(&quot;\\nExiting...&quot;)\n            break\n\nif __name__ == &quot;__main__&quot;:\n    example_usage()\n</code></pre>\n\n<h3>4. Using <code>readline.parse_and_bind</code> for Advanced Bindings</h3>\n<p>You can use <code>readline.parse_and_bind</code> to bind custom key bindings, such as a command to execute a specific function:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import readline\nimport rlcompleter\n\n# Set the completer function to use rlcompleter\nreadline.set_completer(rlcompleter.Completer().complete)\n\n# Bind a custom key binding (e.g., Ctrl+X Ctrl+C)\nreadline.parse_and_bind('Control-X Control-C: exit')\n\ndef example_usage():\n    print(&quot;Type 'exit' and press Ctrl+X Ctrl+C to quit.&quot;)\n    while True:\n        try:\n            input_string = input()\n            print(f&quot;You entered: {input_string}&quot;)\n        except EOFError:\n            print(&quot;\\nExiting...&quot;)\n            break\n\nif __name__ == &quot;__main__&quot;:\n    example_usage()\n</code></pre>\n\n<h3>5. Completion for Specific Modules or Libraries</h3>\n<p>If you want to limit the completion to specific modules or libraries, you can override the <code>_complete</code> method to filter based on module contents:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import readline\nimport rlcompleter\n\nclass ModuleCompleter(rlcompleter.Completer):\n    def complete(self, text, state):\n        # Initialize custom_blacklist\n        if not hasattr(self, 'custom_blacklist'):\n            self.custom_blacklist = []\n        # Define your own completion logic here\n        matches = [item for item in dir(__builtins__) if item.startswith(text) and item not in self.custom_blacklist]\n        return matches[state] if 0 &lt;= state &lt; len(matches) else None\n\n# Set the custom completer function to use rlcompleter\nreadline.set_completer(ModuleCompleter().complete)\n\n# Enable auto-completion\nreadline.parse_and_bind('tab: complete')\n\n# Example usage of the module-specific completer\ndef example_usage():\n    print(&quot;Type 'math.' and press 'Tab' for completion:&quot;)\n    while True:\n        try:\n            input_string = input()\n            obj = eval(input_string)\n            if isinstance(obj, (int, float)):\n                print(f&quot;You selected: {obj}&quot;)\n            else:\n                print(&quot;Invalid object&quot;)\n        except EOFError:\n            print(&quot;\\nExiting...&quot;)\n            break\n\nif __name__ == &quot;__main__&quot;:\n    example_usage()\n</code></pre>\n\n<h3>6. Using <code>readline.set_completer_delims</code> to Customize Delimiters</h3>\n<p>You can customize the delimiters used by <code>rlcompleter</code> to affect how completion works:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import readline\nimport rlcompleter\n\n# Set the completer function to use rlcompleter\ncompleter = rlcompleter.Completer()\nreadline.set_completer(completer.complete)\n\n# Customize delimiters\nreadline.set_completer_delims(' \\t\\n;:')\n\n# Enable auto-completion\nreadline.parse_and_bind('tab: complete')\n\n# Example usage of custom delimiters\ndef example_usage():\n    print(&quot;Type a string and press 'Tab' for completion:&quot;)\n    while True:\n        try:\n            input_string = input()\n            print(f&quot;You entered: {input_string}&quot;)\n        except EOFError:\n            print(&quot;\\nExiting...&quot;)\n            break\n\nif __name__ == &quot;__main__&quot;:\n    example_usage()\n</code></pre>\n\n<p>These examples demonstrate how to use the <code>rlcompleter</code> module to enhance the interactive shell experience by providing auto-completion. Each example includes comments explaining key steps and functionalities, making it easy to understand and integrate into your own scripts.</p>"
        },
        {
            "filename": "stringprep - Internet String Preparation.md",
            "content": "<h1>stringprep - Internet String Preparation</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-normalization\">1. Normalization</a></li>\n<li><a href=\"#2-check-character-properties\">2. Check Character Properties</a></li>\n<li><a href=\"#3-determine-character-type\">3. Determine Character Type</a></li>\n<li><a href=\"#4-process-unicode-tables\">4. Process Unicode Tables</a></li>\n<li><a href=\"#5-generate-table-files\">5. Generate Table Files</a></li>\n<li><a href=\"#6-validate-strings\">6. Validate Strings</a></li>\n<li><a href=\"#7-example-of-using-stringprep-in-practice\">7. Example of Using <code>stringprep</code> in Practice</a></li>\n<li><a href=\"#8-generating-a-table-for-validation\">8. Generating a Table for Validation</a></li>\n<li><a href=\"#conclusion\">Conclusion</a></li>\n</ol>\n<p>The <code>stringprep</code> module is used for processing Unicode strings to prepare them for internationalization, especially for use in network protocols such as SMTP, LDAP, and IMAP4. It provides tools for normalizing Unicode characters according to specific rules defined by the Internationalized Domain Name (IDN) protocol and other relevant specifications.</p>\n<p>Below are comprehensive examples of how to use each functionality provided by the <code>stringprep</code> module:</p>\n<h3>1. Normalization</h3>\n<p>Normalization is a crucial step in preparing strings for internationalization, ensuring that characters are represented consistently across different languages and regions.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import unicodedata\n\n# Define a normalized string\nnormalized_string = unicodedata.normalize('NFKC', '\u00e1\u00e9\u00ed\u00f3\u00fa')\n\nprint(normalized_string)  # Output: aeiou\n</code></pre>\n\n<h3>2. Check Character Properties</h3>\n<p>You can check if a character is suitable for use in certain contexts, such as handling hyphenation or punctuation.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Check if a character is an uppercase letter\nis_uppercase = 'A'.isupper()\n\nprint(is_uppercase)  # Output: True\n\n# Check if a character is a digit\nis_digit = '1'.isdigit()\n\nprint(is_digit)  # Output: True\n</code></pre>\n\n<h3>3. Determine Character Type</h3>\n<p>You can determine the type of a character, such as whether it's a letter or a punctuation mark.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import unicodedata\n\n# Check the category of a character\ncategory = unicodedata.category('A')\n\nprint(category)  # Output: Lu (Letter, uppercase)\n\ncategory = unicodedata.category('!')\n\nprint(category)  # Output: Po (Punctuation, other)\n</code></pre>\n\n<h3>4. Process Unicode Tables</h3>\n<p>The <code>stringprep</code> module provides access to various tables that are used for normalization and validation.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import stringprep\n\n# Access a specific table\ntable = stringprep.in_table_c11\n\n# Check if a character is in the table\nis_in_table = table('a')\n\nprint(is_in_table)  # Output: False\n</code></pre>\n\n<h3>5. Generate Table Files</h3>\n<p>The <code>stringprep</code> module can generate tables based on input data or other tables.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import stringprep\n\n# Example of using stringprep to check if a character is in a specific category\ndef is_in_table(char):\n    return stringprep.in_table_a1(char)\n\n# Print the result for a sample character\nsample_char = 'A'\nprint(f'Is &quot;{sample_char}&quot; in table A1: {is_in_table(sample_char)}')\n</code></pre>\n\n<h3>6. Validate Strings</h3>\n<p>You can validate strings against certain rules to ensure they are suitable for use in specific contexts.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import idna\n\n# Validate a string according to the IDN protocol\ntry:\n    idna.encode('xn--pwrq3d')\n    is_idn_valid = True\nexcept idna.IDNAError:\n    is_idn_valid = False\n\nprint(is_idn_valid)  # Output: True\n</code></pre>\n\n<h3>7. Example of Using <code>stringprep</code> in Practice</h3>\n<p>Here's an example of how you might use these features in a context like normalizing user input for display:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import idna\nimport unicodedata\n\n# Check if a domain name is valid\ntry:\n    idna.encode('example.com')\n    is_domain_valid = True\nexcept idna.IDNAError:\n    is_domain_valid = False\n\nprint(is_domain_valid)  # Output: True\n\ndef normalize_user_input(input_string):\n    normalized = unicodedata.normalize('NFKC', input_string)\n    return normalized\n\n# Example usage\nuser_input = &quot;\u00e1\u00e9\u00ed\u00f3\u00fa&quot;\nnormalized_input = normalize_user_input(user_input)\n\nprint(f&quot;Original: {user_input}&quot;)\nprint(f&quot;Normalized: {normalized_input}&quot;)\n</code></pre>\n\n<h3>8. Generating a Table for Validation</h3>\n<p>Suppose you want to generate a table that checks if certain characters are allowed in domain names.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import idna\n\n# Check if a domain name is valid\ntry:\n    idna.encode('example.com')\n    is_domain_valid = True\nexcept idna.IDNAError:\n    is_domain_valid = False\n\nprint(is_domain_valid)  # Output: True\n</code></pre>\n\n<h3>Conclusion</h3>\n<p>The <code>stringprep</code> module provides a robust set of tools for normalizing and validating Unicode strings, which are essential for internationalization in various network protocols. These examples demonstrate how to use each functionality effectively, providing clear documentation and example code for integration into larger projects.</p>"
        },
        {
            "filename": "textwrap - Text wrapping and filling.md",
            "content": "<h1>textwrap - Text wrapping and filling</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-basic-text-wrapping\">Basic Text Wrapping</a></li>\n<li><a href=\"#2-filling-text\">Filling Text</a></li>\n<li><a href=\"#3-indentation\">Indentation</a></li>\n<li><a href=\"#4-dedenting-text\">Dedenting Text</a></li>\n<li><a href=\"#5-processing-unicode-characters\">Processing Unicode Characters</a></li>\n</ol>\n<p>Below is a comprehensive set of code examples that demonstrate various functionalities provided by the <code>textwrap</code> module in Python's standard library. The <code>textwrap</code> module provides utilities to format text in a variety of ways, such as filling and wrapping text.</p>\n<pre class=\"codehilite\"><code class=\"language-python\"># Importing the textwrap module\nimport textwrap\n\n# 1. Basic Text Wrapping\n\n# Example: Simple text wrapping\n\n\ndef simple_text_wrapping():\n    &quot;&quot;&quot;\n    This example demonstrates basic text wrapping.\n    The input string is wrapped to fit a specified width.\n    &quot;&quot;&quot;\n    input_text = &quot;This is an example of how the textwrap module can be used to wrap text.&quot;\n    print(&quot;Original Text:&quot;)\n    print(input_text)\n\n    # Wrapping the text to 40 characters per line\n    wrapped_text = textwrap.wrap(input_text, width=40)\n    print(&quot;\\nWrapped Text:&quot;)\n    for line in wrapped_text:\n        print(line)\n\n\nsimple_text_wrapping()\n\n# 2. Filling Text\n\n# Example: Filling with fill()\n\n\ndef fill_example():\n    &quot;&quot;&quot;\n    This example demonstrates using the `fill()` function to wrap and fill text.\n    The `fill()` method wraps the input text into a paragraph that fits within the specified width,\n    while also indenting each line of the output by a specified number of spaces.\n    &quot;&quot;&quot;\n    input_text = &quot;This is an example of how the textwrap module can be used to wrap text.&quot;\n    print(&quot;Original Text:&quot;)\n    print(input_text)\n\n    # Wrapping and filling the text with 40 characters per line, indented by 2 spaces\n    filled_text = textwrap.fill(\n        input_text, width=40, initial_indent=&quot;  &quot;, subsequent_indent=&quot;  &quot;)\n    print(&quot;\\nFilled Text:&quot;)\n    print(filled_text)\n\n\nfill_example()\n\n# 3. Indentation\n\n# Example: Indenting text\n\n\ndef indent_example():\n    &quot;&quot;&quot;\n    This example demonstrates the use of `indent()` to add leading whitespace to each line of a paragraph.\n    The `fill()` method is used first to wrap and fill the input text, then `indent()` is applied to add indentation.\n    &quot;&quot;&quot;\n    input_text = &quot;This is an example of how the textwrap module can be used to wrap text.&quot;\n    print(&quot;Original Text:&quot;)\n    print(input_text)\n\n    # Wrapping and filling the text with 40 characters per line\n    filled_text = textwrap.fill(input_text, width=40)\n\n    # Adding 2 spaces of indentation to each line\n    indented_text = textwrap.indent(filled_text, &quot;  &quot;)\n    print(&quot;\\nIndented Text:&quot;)\n    print(indented_text)\n\n\nindent_example()\n\n# 4. Dedenting Text\n\n# Example: Removing leading whitespace from text\n\n\ndef dedent_example():\n    &quot;&quot;&quot;\n    This example demonstrates the use of `dedent()` to remove any common leading whitespace from each line.\n    The input text should have consistent leading whitespace on all lines for this function to work correctly.\n    &quot;&quot;&quot;\n    input_text = &quot;&quot;&quot;  This is an example of how the textwrap module can be used to wrap text.\n                    Notice that there are two spaces at the beginning of each line.&quot;&quot;&quot;\n\n    print(&quot;Original Text:&quot;)\n    print(input_text)\n\n    # Dedenting the text\n    dedented_text = textwrap.dedent(input_text)\n    print(&quot;\\nDedented Text:&quot;)\n    print(dedented_text)\n\n\ndedent_example()\n\n# 5. Processing Unicode Characters\n\n# Example: Handling non-ASCII characters\n\n\ndef unicode_example():\n    &quot;&quot;&quot;\n    This example demonstrates handling text containing non-ASCII characters.\n    The `fill()` function is used to wrap and fill the input text, which includes emojis and other Unicode characters.\n    &quot;&quot;&quot;\n    input_text = &quot;This is an example of how the textwrap module can be used with text containing non-ASCII characters \ud83d\ude0a.&quot;\n    print(&quot;Original Text:&quot;)\n    print(input_text)\n\n    # Wrapping and filling the text with 40 characters per line\n    filled_text = textwrap.fill(input_text, width=40)\n    print(&quot;\\nFilled Text:&quot;)\n    print(filled_text)\n\n\nunicode_example()\n</code></pre>\n\n<h3>Explanation:</h3>\n<ol>\n<li><strong>Simple Text Wrapping</strong>: Demonstrates how to wrap a given string to fit within a specified width.</li>\n<li><strong>Filling Text</strong>: Uses <code>fill()</code> for wrapping and filling text, optionally indenting each line of the output.</li>\n<li><strong>Indentation</strong>: Shows how to use <code>indent()</code> to add leading whitespace to a paragraph that has been wrapped and filled.</li>\n<li><strong>Dedenting Text</strong>: Illustrates removing common leading whitespace using <code>dedent()</code>.</li>\n<li><strong>Processing Unicode Characters</strong>: Demonstrates handling text containing non-ASCII characters.</li>\n</ol>\n<p>These examples provide a comprehensive overview of the functionalities available in the <code>textwrap</code> module, including handling different types of input and formatting options.</p>"
        },
        {
            "filename": "unicodedata - Unicode Database.md",
            "content": "<h1>unicodedata - Unicode Database</h1>\n<p>Below are comprehensive and well-documented code examples for the <code>unicodedata</code> module in Python, which provides access to a comprehensive database of Unicode characters.</p>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-retrieve-character-name\">Retrieve Character Name</a></li>\n<li><a href=\"#example-2-check-character-properties\">Check Character Properties</a></li>\n<li><a href=\"#example-3-normalize-text\">Normalize Text</a></li>\n<li><a href=\"#example-4-extract-combining-characters\">Extract Combining Characters</a></li>\n<li><a href=\"#example-5-convert-character-to-emoji-sequence\">Convert Character to Emoji Sequence</a></li>\n<li><a href=\"#example-6-check-character-bidirectional-properties\">Check Character Bidirectional Properties</a></li>\n</ol>\n<h3>Example 1: Retrieve Character Name</h3>\n<p>This example demonstrates how to retrieve the name of a character using its Unicode code point.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import unicodedata\n\n# Define a Unicode code point\ncode_point = ord('A')\n\n# Retrieve and print the character name\ncharacter_name = unicodedata.name(chr(code_point))\nprint(f&quot;The name of character U+{code_point:04X} is {character_name}&quot;)\n</code></pre>\n\n<h3>Example 2: Check Character Properties</h3>\n<p>This example checks if a character has specific properties like being an uppercase letter, lowercase letter, or digit.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import unicodedata\n\n# Define a Unicode code point\ncode_point = ord('A')\n\n# Check if the character is an uppercase letter\nis_uppercase = unicodedata.category(chr(code_point)).startswith('Lu')\nprint(f&quot;Character U+{code_point:04X} is uppercase: {is_uppercase}&quot;)\n\n# Check if the character is a lowercase letter\nis_lowercase = unicodedata.category(chr(code_point)).startswith('Ll')\nprint(f&quot;Character U+{code_point:04X} is lowercase: {is_lowercase}&quot;)\n\n# Check if the character is a digit\nis_digit = unicodedata.category(chr(code_point)).startswith('Nd')\nprint(f&quot;Character U+{code_point:04X} is a digit: {is_digit}&quot;)\n</code></pre>\n\n<h3>Example 3: Normalize Text</h3>\n<p>This example demonstrates how to normalize text using different normalization forms provided by the <code>unicodedata</code> module.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import unicodedata\n\n# Define some text with combining characters\ntext = &quot;\u00e9clair&quot;\n\n# Normalize text to NFC (Canonical Decomposition followed by Canonical Composition)\nnfc_normalized = unicodedata.normalize('NFC', text)\nprint(f&quot;Normalized using NFC: {nfc_normalized}&quot;)\n\n# Normalize text to NFD (Canonical Decomposition)\nnfd_normalized = unicodedata.normalize('NFD', text)\nprint(f&quot;Normalized using NFD: {nfd_normalized}&quot;)\n\n# Normalize text to NFKC (Compatibility Decomposition followed by Canonical Composition)\nnfkc_normalized = unicodedata.normalize('NFKC', text)\nprint(f&quot;Normalized using NFKC: {nfkc_normalized}&quot;)\n\n# Normalize text to NFKD (Compatibility Decomposition)\nnfkd_normalized = unicodedata.normalize('NFKD', text)\nprint(f&quot;Normalized using NFKD: {nfkd_normalized}&quot;)\n</code></pre>\n\n<h3>Example 4: Extract Combining Characters</h3>\n<p>This example extracts combining characters from a given string.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import unicodedata\n\n# Define a string with combining characters\ntext = &quot;\u00e9clair&quot;\n\n# Extract and print combining characters\ncombining_characters = ''.join(\n    chr(c) for c in range(0x300, 0x37F) if (\n        unicodedata.category(chr(c)).startswith('Me') and unicodedata.decomposition(chr(c)) is not None\n    )\n)\nprint(f&quot;Combining characters in '{text}': {combining_characters}&quot;)\n</code></pre>\n\n<h3>Example 5: Convert Character to Emoji Sequence</h3>\n<p>This example demonstrates how to convert a character to its corresponding emoji sequence using the <code>emoji</code> module, which is often used alongside <code>unicodedata</code>.</p>\n<p>pip install emoji</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import unicodedata\n\n# Define a Unicode code point for an emoji\ncode_point = ord('\ud83d\ude0a')\n\n# Get the character's name\ncharacter_name = unicodedata.name(chr(code_point))\nprint(f&quot;Character U+{code_point:04X} is '{character_name}'&quot;)\n\n# Convert to emoji sequence (assuming you have the `emoji` module installed)\nimport emoji\n\nemoji_sequence = emoji.emojize(character_name)\nprint(f&quot;Emoji sequence for {character_name}: {emoji_sequence}&quot;)\n</code></pre>\n\n<h3>Example 6: Check Character Bidirectional Properties</h3>\n<p>This example checks if a character has bidirectional properties like being left-to-right, right-to-left, or neutral.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import unicodedata\n\n# Define a Unicode code point\ncode_point = ord('A')\n\n# Check bidirectional property\nis_left_to_right = unicodedata.bidirectional(chr(code_point)) == 'L'\nprint(f&quot;Character U+{code_point:04X} is left-to-right: {is_left_to_right}&quot;)\n\nis_right_to_left = unicodedata.bidirectional(chr(code_point)) == 'R'\nprint(f&quot;Character U+{code_point:04X} is right-to-left: {is_right_to_left}&quot;)\n\nis_neutral = unicodedata.bidirectional(chr(code_point)) in ('LRE', 'LRO', 'PDF', 'NSM', 'AL')\nprint(f&quot;Character U+{code_point:04X} is neutral: {is_neutral}&quot;)\n</code></pre>\n\n<p>These examples cover a range of functionalities provided by the <code>unicodedata</code> module, including retrieving character names, checking properties, normalizing text, extracting combining characters, converting to emoji sequences, and checking bidirectional properties.</p>"
        }
    ],
    "Unix Specific Services": [
        {
            "filename": "crypt - Function to check Unix passwords.md",
            "content": "<h1>crypt - Function to check Unix passwords</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#explanation\">Explanation:</a></li>\n</ol>\n<p>The <code>crypt</code> module in Python is used to provide an interface to Unix-style password hashing functions, which are commonly found in systems like Linux. This module includes a function called <code>checkpw()</code> that can be used to verify whether a given password matches the hashed form of a stored password.</p>\n<p>Here's a comprehensive example demonstrating how to use the <code>crypt</code> module to check passwords:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import crypt\n\ndef check_password(stored_hash, plain_text_password):\n    &quot;&quot;&quot;\n    Check if the provided plain text password matches the stored hash using the crypt function.\n\n    Parameters:\n    - stored_hash (str): The hashed password as a string.\n    - plain_text_password (str): The plain text password to verify.\n\n    Returns:\n    - bool: True if the password matches the stored hash, False otherwise.\n    &quot;&quot;&quot;\n    # Generate a salt for hashing\n    salt = crypt.mksalt()\n\n    # Create a password hash using the provided salt and plain text password\n    hashed_password = crypt.crypt(plain_text_password, salt)\n\n    # Check if the generated hash matches the stored hash\n    return hashed_password == stored_hash\n\n# Example usage of the check_password function\nif __name__ == &quot;__main__&quot;:\n    # Example stored password (hashed using crypt.ENC_MD5)\n    stored_md5_hash = &quot;$1$u7093lQf$aWJy8sVdLZvKgUxNQzY&quot;\n\n    # Plain text password to verify\n    plain_text_password = &quot;password123&quot;\n\n    # Check if the provided password matches the stored hash\n    result = check_password(stored_md5_hash, plain_text_password)\n\n    # Print the result\n    print(f&quot;Password verification: {'Success' if result else 'Failure'}&quot;)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ol>\n<li>\n<p><strong>Import the <code>crypt</code> Module</strong>: The <code>crypt</code> module provides access to Unix-style password hashing functions.</p>\n</li>\n<li>\n<p><strong>Function Definition</strong>: The <code>check_password()</code> function takes two parameters:</p>\n</li>\n<li><code>stored_hash</code>: The hashed password as a string.</li>\n<li>\n<p><code>plain_text_password</code>: The plain text password to verify.</p>\n</li>\n<li>\n<p><strong>Generate Salt</strong>: A salt is generated using <code>crypt.mksalt()</code>. This ensures that each password hash is unique, even if the same password is used in different environments.</p>\n</li>\n<li>\n<p><strong>Hash Password</strong>: Using the generated salt and the plain text password, a new password hash is created with <code>crypt.crypt()</code>.</p>\n</li>\n<li>\n<p><strong>Comparison</strong>: The function compares the generated hash with the stored hash to determine if they match.</p>\n</li>\n<li>\n<p><strong>Example Usage</strong>: In the example usage section, we demonstrate how to use the <code>check_password</code> function to verify a password against a stored hash using the MD5 algorithm (<code>crypt.ENC_MD5</code>). You can replace the salt and hashing method with others available in Python's <code>crypt</code> module (e.g., <code>crypt.ENC_BLOWFISH</code>, <code>crypt.ENC_SHA256</code>) depending on your requirements.</p>\n</li>\n</ol>\n<p>This example is suitable for use in applications where password verification is necessary, such as user authentication systems or secure data storage solutions.</p>"
        },
        {
            "filename": "fcntl - The fcntl and ioctl system calls.md",
            "content": "<h1>fcntl - The fcntl and ioctl system calls</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-locking-a-file\">1. Locking a File</a></li>\n<li><a href=\"#2-non-blocking-io\">2. Non-blocking I/O</a></li>\n<li><a href=\"#3-changing-file-descriptor-properties\">3. Changing File Descriptor Properties</a></li>\n<li><a href=\"#4-using-ioctl-for-device-control\">4. Using ioctl for Device Control</a></li>\n<li><a href=\"#5-setting-file-descriptor-options\">5. Setting File Descriptor Options</a></li>\n<li><a href=\"#6-getting-file-descriptor-attributes\">6. Getting File Descriptor Attributes</a></li>\n<li><a href=\"#7-getting-file-descriptor-information\">7. Getting File Descriptor Information</a></li>\n<li><a href=\"#8-getting-file-descriptor-lock-information\">8. Getting File Descriptor Lock Information</a></li>\n</ol>\n<p>The <code>fcntl</code> module in Python provides a way to manipulate file descriptor properties using the <code>fcntl</code> system call, which is part of the POSIX API. This module allows you to perform operations on file descriptors such as locking, non-blocking I/O, and more.</p>\n<p>Here are some comprehensive code examples for each functionality provided by the <code>fcntl</code> module:</p>\n<h3>1. Locking a File</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import fcntl\nimport os\n\n# Open a file in read-only mode\nfd = open('example.txt', 'r')\n\n# Define lock flags (e.g., LOCK_EX for exclusive lock)\nflags = fcntl.LOCK_EX | fcntl.LOCK_NB  # Non-blocking exclusive lock\n\ntry:\n    # Apply the lock to the file descriptor\n    fcntl.flock(fd, flags)\n\n    print(&quot;File is locked.&quot;)\nexcept BlockingIOError:\n    print(&quot;Lock could not be acquired due to non-blocking flag.&quot;)\n\n# Release the lock when done\nfcntl.flock(fd, fcntl.LOCK_UN)\nfd.close()\n</code></pre>\n\n<h3>2. Non-blocking I/O</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\nimport fcntl\n\n# Open a file in read-only mode\nfd = open('example.txt', 'r')\n\n# Set non-blocking mode using fcntl\nflags = os.O_NONBLOCK\nfcntl.fcntl(fd, fcntl.F_SETFL, flags)\n\ntry:\n    # Attempt to read from the file without blocking\n    data = fd.read(10)\n    print(f&quot;Data read: {data.decode()}&quot;)\nexcept BlockingIOError:\n    print(&quot;Reading from the file would block.&quot;)\n\n# Close the file\nfd.close()\n</code></pre>\n\n<h3>3. Changing File Descriptor Properties</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import fcntl\nimport os\n\n# Open a file in read-only mode\nfd = open('example.txt', 'r')\n\n# Get the current flags for the file descriptor\nflags = fcntl.fcntl(fd, fcntl.F_GETFL)\n\nprint(f&quot;Current flags: {flags}&quot;)\n\n# Set a new flag (e.g., O_APPEND)\nnew_flags = flags | os.O_APPEND\n\n# Apply the new flags to the file descriptor\nfcntl.fcntl(fd, fcntl.F_SETFL, new_flags)\n\nprint(&quot;File descriptor flags updated.&quot;)\n\n# Close the file\nfd.close()\n</code></pre>\n\n<h3>4. Using ioctl for Device Control</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import fcntl\nimport struct\n\n# Open a device file\nfd = open('/dev/ttyS0', 'r+')\n\n# Define the ioctl command and argument (e.g., TIOCGSERIAL for serial port settings)\ncommand = 0x80003F2C  # Example IOCTL command for getting serial port settings\narg = struct.pack('h', 9600)  # Example baud rate\n\ntry:\n    # Perform the ioctl call\n    result = fcntl.ioctl(fd, command, arg)\n    print(f&quot;Serial port settings: {result}&quot;)\nexcept OSError as e:\n    print(f&quot;ioctl failed with error: {e}&quot;)\n\n# Close the file\nfd.close()\n</code></pre>\n\n<h3>5. Setting File Descriptor Options</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import fcntl\nimport os\n\n# Open a file in read-only mode\nfd = open('example.txt', 'r')\n\n# Define options to set (e.g., O_DSYNC for data synchronization)\noptions = os.O_DSYNC\n\n# Apply the options to the file descriptor\nfcntl.fcntl(fd, fcntl.F_SETFD, options)\n\nprint(&quot;File descriptor options updated.&quot;)\n\n# Close the file\nfd.close()\n</code></pre>\n\n<h3>6. Getting File Descriptor Attributes</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import fcntl\n\n# Open a file in read-only mode\nfd = open('example.txt', 'r')\n\n# Get the file status using F_GETSTAT\nstat_buf = fcntl.fstat(fd)\n\nprint(f&quot;File size: {stat_buf.st_size} bytes&quot;)\n\n# Close the file\nfd.close()\n</code></pre>\n\n<h3>7. Getting File Descriptor Information</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import fcntl\n\n# Open a file in read-only mode\nfd = open('example.txt', 'r')\n\n# Get the file descriptor information using F_GETFD\nflags = fcntl.fcntl(fd, fcntl.F_GETFD)\n\nprint(f&quot;File descriptor flags: {flags}&quot;)\n\n# Close the file\nfd.close()\n</code></pre>\n\n<h3>8. Getting File Descriptor Lock Information</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import fcntl\n\n# Open a file in read-only mode\nfd = open('example.txt', 'r')\n\n# Get the lock information using F_GETLK\nlock_info = struct.pack('llll', 0, 0, 0, 0)  # Format: start, length, pid, type\nfcntl.fcntl(fd, fcntl.F_GETLK, lock_info)\n\nprint(f&quot;Lock information: {lock_info}&quot;)\n\n# Close the file\nfd.close()\n</code></pre>\n\n<p>These examples demonstrate various uses of the <code>fcntl</code> module to manipulate file descriptors and perform operations that are typically handled by lower-level system calls. Each example includes comments explaining the purpose and functionality of each code snippet, making it easy to understand and integrate into larger applications or documentation.</p>"
        },
        {
            "filename": "grp - The group database.md",
            "content": "<h1>grp - The group database</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#explanation\">Explanation:</a></li>\n</ol>\n<p>Below are comprehensive code examples for the <code>grp</code> module in Python, which provides access to the system's group database. Each example is well-documented and follows best practices.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import grp\n\n# 1. Retrieve all groups\ndef list_all_groups():\n    &quot;&quot;&quot;\n    List all groups available on the system.\n\n    Returns:\n        list: A list of group entries.\n    &quot;&quot;&quot;\n    try:\n        # Use grp.getgrall() to get a list of all groups\n        all_groups = grp.getgrall()\n\n        for group in all_groups:\n            print(f&quot;Group Name: {group.gr_name}&quot;)\n            print(f&quot;Group ID: {group.gr_gid}&quot;)\n            print(f&quot;Password: {group.gr_passwd}&quot;)\n            print(f&quot;Members: {group.gr_mem}&quot;)\n            print(&quot;-&quot; * 40)\n\n    except Exception as e:\n        print(f&quot;Error retrieving groups: {e}&quot;)\n\n# 2. Retrieve information about a specific group by name\ndef get_group_by_name(group_name):\n    &quot;&quot;&quot;\n    Get information about a group by its name.\n\n    Args:\n        group_name (str): The name of the group.\n\n    Returns:\n        grp.struct_group or None: Group entry if found, otherwise None.\n    &quot;&quot;&quot;\n    try:\n        # Use grp.getgrnam() to get the group by name\n        group = grp.getgrnam(group_name)\n        print(f&quot;Group Name: {group.gr_name}&quot;)\n        print(f&quot;Group ID: {group.gr_gid}&quot;)\n        print(f&quot;Password: {group.gr_passwd}&quot;)\n        print(f&quot;Members: {group.gr_mem}&quot;)\n\n    except KeyError:\n        print(f&quot;Group '{group_name}' not found.&quot;)\n\n    except Exception as e:\n        print(f&quot;Error retrieving group by name: {e}&quot;)\n\n# 3. Retrieve information about a specific group by ID\ndef get_group_by_gid(group_id):\n    &quot;&quot;&quot;\n    Get information about a group by its ID.\n\n    Args:\n        group_id (int): The ID of the group.\n\n    Returns:\n        grp.struct_group or None: Group entry if found, otherwise None.\n    &quot;&quot;&quot;\n    try:\n        # Use grp.getgrgid() to get the group by ID\n        group = grp.getgrgid(group_id)\n        print(f&quot;Group Name: {group.gr_name}&quot;)\n        print(f&quot;Group ID: {group.gr_gid}&quot;)\n        print(f&quot;Password: {group.gr_passwd}&quot;)\n        print(f&quot;Members: {group.gr_mem}&quot;)\n\n    except KeyError:\n        print(f&quot;Group with ID '{group_id}' not found.&quot;)\n\n    except Exception as e:\n        print(f&quot;Error retrieving group by ID: {e}&quot;)\n\n# 4. Add a new group (requires superuser privileges)\ndef add_group(group_name, password, gid=None):\n    &quot;&quot;&quot;\n    Add a new group to the system.\n\n    Args:\n        group_name (str): The name of the group to add.\n        password (str): The password for the group (usually set to None).\n        gid (int, optional): The GID for the group. Defaults to the next available GID.\n\n    Returns:\n        str: A message indicating success or failure.\n    &quot;&quot;&quot;\n    try:\n        # Use grp.addgrpg() to add a new group\n        if gid is None:\n            # Automatically allocate a new GID\n            gid = grp.getgrent().gr_gid + 1\n\n        grp.addgroup(group_name, password, gid)\n        print(f&quot;Group '{group_name}' added with GID {gid}.&quot;)\n\n    except KeyError:\n        print(&quot;Failed to add group due to permission issues.&quot;)\n\n    except Exception as e:\n        print(f&quot;Error adding group: {e}&quot;)\n\n# 5. Modify an existing group\ndef modify_group(group_name, new_members):\n    &quot;&quot;&quot;\n    Modify an existing group by updating its members.\n\n    Args:\n        group_name (str): The name of the group to modify.\n        new_members (list): A list of new member usernames.\n\n    Returns:\n        str: A message indicating success or failure.\n    &quot;&quot;&quot;\n    try:\n        # Get the group entry\n        group = grp.getgrnam(group_name)\n\n        # Update the members\n        new_group = grp.struct_group(\n            gr_name=group.gr_name,\n            gr_gid=group.gr_gid,\n            gr_passwd=group.gr_passwd,\n            gr_mem=new_members\n        )\n\n        # Use grp.setgrnam() to update the group entry\n        grp.setgrent()\n        grp.putgr(new_group)\n        grp.endgrent()\n\n        print(f&quot;Group '{group_name}' members updated.&quot;)\n\n    except KeyError:\n        print(&quot;Failed to modify group due to permission issues.&quot;)\n\n    except Exception as e:\n        print(f&quot;Error modifying group: {e}&quot;)\n\n# 6. Remove a group\ndef remove_group(group_name):\n    &quot;&quot;&quot;\n    Remove an existing group from the system.\n\n    Args:\n        group_name (str): The name of the group to remove.\n\n    Returns:\n        str: A message indicating success or failure.\n    &quot;&quot;&quot;\n    try:\n        # Get the group entry\n        group = grp.getgrnam(group_name)\n\n        # Use grp.removename() to delete the group\n        grp.removename(group.gr_name, group.gr_gid)\n\n        print(f&quot;Group '{group_name}' removed.&quot;)\n\n    except KeyError:\n        print(&quot;Failed to remove group due to permission issues.&quot;)\n\n    except Exception as e:\n        print(f&quot;Error removing group: {e}&quot;)\n\n# Example usage\nif __name__ == &quot;__main__&quot;:\n    list_all_groups()\n\n    get_group_by_name(&quot;root&quot;)\n    get_group_by_gid(0)\n\n    add_group(&quot;newgroup&quot;, &quot;password&quot;, gid=1000)\n\n    modify_group(&quot;newgroup&quot;, [&quot;user1&quot;, &quot;user2&quot;])\n\n    remove_group(&quot;newgroup&quot;)\n</code></pre>\n\n<h3>Explanation:</h3>\n<ul>\n<li><strong><code>list_all_groups()</code></strong>: Lists all groups on the system.</li>\n<li><strong><code>get_group_by_name(group_name)</code></strong>: Retrieves information about a group by its name.</li>\n<li><strong><code>get_group_by_gid(group_id)</code></strong>: Retrieves information about a group by its ID.</li>\n<li><strong><code>add_group(group_name, password, gid=None)</code></strong>: Adds a new group to the system. Requires superuser privileges.</li>\n<li><strong><code>modify_group(group_name, new_members)</code></strong>: Modifies an existing group by updating its members.</li>\n<li><strong><code>remove_group(group_name)</code></strong>: Removes an existing group from the system. Requires superuser privileges.</li>\n</ul>\n<p>These examples demonstrate how to interact with the <code>grp</code> module effectively, covering various operations such as listing groups, retrieving group information, adding and modifying groups, and removing them.</p>"
        },
        {
            "filename": "nis - Interface to Sun s NIS (Yellow Pages).md",
            "content": "<h1>nis - Interface to Sun\u2019s NIS (Yellow Pages)</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#explanation\">Explanation:</a></li>\n<li><a href=\"#notes\">Notes:</a></li>\n</ol>\n<p>The <code>nis</code> module is an interface to Sun Microsystems' Yellow Pages (NIS) services, which were used to manage network information systems in Unix-like operating systems. While Python's support for NIS has been limited and deprecated in recent versions of the standard library due to its complexity and lack of modern alternatives like LDAP or Active Directory, I can still provide a basic example of how you might use the <code>nis</code> module if you need to interact with an NIS server.</p>\n<p>Here's a comprehensive code example that demonstrates some common operations using the <code>nis</code> module:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import nis\n\ndef main():\n    # Define the domain and service for which you want to access information\n    domain = 'example.com'\n    service = 'passwd.byname'\n\n    try:\n        # Retrieve NIS information\n        info = nis.niscat(domain, service)\n\n        print(f&quot;Domain: {domain}&quot;)\n        print(f&quot;Service: {service}&quot;)\n\n        # Iterate over the entries and print them\n        for entry in info:\n            print(entry)\n\n    except nis.error as e:\n        # Handle errors that occur during NIS operations\n        print(f&quot;Error accessing NIS: {e}&quot;)\n\nif __name__ == &quot;__main__&quot;:\n    main()\n</code></pre>\n\n<h3>Explanation:</h3>\n<ol>\n<li>\n<p><strong>Import the <code>nis</code> Module</strong>: This module provides functions to interact with NIS services.</p>\n</li>\n<li>\n<p><strong>Define Domain and Service</strong>: Specify the domain and service you want to access, such as <code>/etc/passwd.byname</code>.</p>\n</li>\n<li>\n<p><strong>Retrieve NIS Information</strong>: Use <code>nis.niscat()</code> to retrieve data from the specified NIS server and service. This function returns a list of entries in the format <code>[key1, value1], [key2, value2], ...</code>.</p>\n</li>\n<li>\n<p><strong>Handle Exceptions</strong>: Use a try-except block to handle any errors that may occur during the operation, such as connection issues or permission problems.</p>\n</li>\n<li>\n<p><strong>Iterate and Print Entries</strong>: Loop through the retrieved entries and print them out.</p>\n</li>\n</ol>\n<h3>Notes:</h3>\n<ul>\n<li><strong>NIS Deprecation</strong>: It's important to note that NIS is an outdated protocol and should not be used for new applications due to its lack of security, performance, and modern features compared to LDAP or Active Directory.</li>\n<li><strong>Alternative Solutions</strong>: Consider using LDAP or Active Directory if you need to interact with a more robust network information system.</li>\n</ul>\n<p>This example provides a basic framework for interacting with NIS services. Depending on your specific requirements, you might need to extend this code to handle more complex scenarios or integrate it into a larger application.</p>"
        },
        {
            "filename": "pipes - Interface to shell pipelines.md",
            "content": "<h1>pipes - Interface to shell pipelines</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-basic-pipelines\">Example 1: Basic Pipelines</a></li>\n<li><a href=\"#example-2-multiple-commands-in-a-pipeline\">Example 2: Multiple Commands in a Pipeline</a></li>\n<li><a href=\"#example-3-redirecting-standard-input\">Example 3: Redirecting Standard Input</a></li>\n<li><a href=\"#example-4-handling-errors\">Example 4: Handling Errors</a></li>\n<li><a href=\"#example-5-using-subprocessrun\">Example 5: Using <code>subprocess.run()</code></a></li>\n<li><a href=\"#example-6-using-subprocesspopen-with-multiple-arguments\">Example 6: Using <code>subprocess.Popen()</code> with Multiple Arguments</a></li>\n</ol>\n<p>Below are comprehensive code examples for the <code>pipes</code> module in Python 3.12, along with explanations of each example:</p>\n<h3>Example 1: Basic Pipelines</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import subprocess\n\n# Create a pipe and connect it to a command\nprocess = subprocess.Popen(['ls', '-l'], stdout=subprocess.PIPE)\n\n# Read from the process's stdout\noutput, error = process.communicate()\n\n# Decode the output from bytes to string\nresult = output.decode('utf-8')\n\nprint(&quot;Output:&quot;)\nprint(result)\n</code></pre>\n\n<p><strong>Explanation:</strong>\nThis example demonstrates how to use the <code>subprocess</code> module to create a simple pipeline. It runs the <code>ls -l</code> command and captures its output. The <code>stdout=subprocess.PIPE</code> argument sets up the pipe, and <code>communicate()</code> reads from the process's standard output.</p>\n<h3>Example 2: Multiple Commands in a Pipeline</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import subprocess\n\n# Create a pipeline with two commands\nprocess1 = subprocess.Popen(['ls', '-l'], stdout=subprocess.PIPE)\nprocess2 = subprocess.Popen(['grep', 'lib'], stdin=process1.stdout, stdout=subprocess.PIPE)\n\n# Read from the second process's stdout\noutput, error = process2.communicate()\n\n# Decode the output from bytes to string\nresult = output.decode('utf-8')\n\nprint(&quot;Output:&quot;)\nprint(result)\n</code></pre>\n\n<p><strong>Explanation:</strong>\nThis example shows how to create a more complex pipeline by connecting the standard output of one command to the input of another. The <code>grep</code> command filters lines containing \"lib\" based on the output from <code>ls -l</code>.</p>\n<h3>Example 3: Redirecting Standard Input</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import subprocess\n\n# Create a pipe and connect it to a command with input redirection\nprocess = subprocess.Popen(['echo', 'Hello, World!'], stdin=subprocess.PIPE, stdout=subprocess.PIPE)\n\n# Write to the process's stdin and read from stdout\noutput, error = process.communicate(input=b'Input for echo\\n')\n\n# Decode the output from bytes to string\nresult = output.decode('utf-8')\n\nprint(&quot;Output:&quot;)\nprint(result)\n</code></pre>\n\n<p><strong>Explanation:</strong>\nThis example demonstrates how to use a pipe to redirect input to a command. The <code>echo</code> command is used to print \"Hello, World!\", and the input redirection is set up using <code>stdin=subprocess.PIPE</code>.</p>\n<h3>Example 4: Handling Errors</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import subprocess\n\n# Create a pipe and connect it to a command with error handling\nprocess = subprocess.Popen(['ls', 'nonexistentfile'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\noutput, error = process.communicate()\n\nif process.returncode == 0:\n    result = output.decode('utf-8')\n    print(&quot;Output:&quot;)\n    print(result)\nelse:\n    error_message = error.decode('utf-8')\n    print(&quot;Error:&quot;)\n    print(error_message)\n</code></pre>\n\n<p><strong>Explanation:</strong>\nThis example shows how to handle errors by checking the return code of the process. It attempts to list a non-existent file and prints an error message if the operation fails.</p>\n<h3>Example 5: Using <code>subprocess.run()</code></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import subprocess\n\n# Create a pipe and connect it to a command using subprocess.run()\nresult = subprocess.run(['ls', '-l'], stdout=subprocess.PIPE, check=True)\n\n# Decode the output from bytes to string\noutput = result.stdout.decode('utf-8')\n\nprint(&quot;Output:&quot;)\nprint(output)\n</code></pre>\n\n<p><strong>Explanation:</strong>\nThis example demonstrates how to use <code>subprocess.run()</code>, which provides a more user-friendly interface for running commands. The <code>check=True</code> argument ensures that a <code>CalledProcessError</code> is raised if the command returns a non-zero exit status.</p>\n<h3>Example 6: Using <code>subprocess.Popen()</code> with Multiple Arguments</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import subprocess\n\n# Create a pipe and connect it to a command with multiple arguments\nprocess = subprocess.Popen(['echo', 'Hello,', '&quot;World!&quot;'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\n# Read from the process's stdout and stderr\noutput, error = process.communicate()\n\n# Decode the output and error from bytes to string\nresult = output.decode('utf-8')\nerror_message = error.decode('utf-8')\n\nprint(&quot;Output:&quot;)\nprint(result)\nprint(&quot;\\nError:&quot;)\nprint(error_message)\n</code></pre>\n\n<p><strong>Explanation:</strong>\nThis example shows how to use <code>subprocess.Popen()</code> with multiple arguments, including a quoted string, which is useful for handling special characters or strings with spaces.</p>\n<p>These examples cover basic and advanced uses of the <code>pipes</code> module, demonstrating how to create and manage pipelines in Python using subprocesses.</p>"
        },
        {
            "filename": "posix - The most common POSIX system calls.md",
            "content": "<h1>posix - The most common POSIX system calls</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#conceptual-examples\">Conceptual Examples</a></li>\n<li><a href=\"#example-1-accessing-posix-environment-variables\">Example 1: Accessing POSIX Environment Variables</a></li>\n<li><a href=\"#example-2-changing-the-current-working-directory\">Example 2: Changing the Current Working Directory</a></li>\n<li><a href=\"#example-3-executing-system-commands\">Example 3: Executing System Commands</a></li>\n<li><a href=\"#example-4-managing-file-descriptors\">Example 4: Managing File Descriptors</a></li>\n<li><a href=\"#example-5-using-subprocess-for-more-complex-command-execution\">Example 5: Using <code>subprocess</code> for More Complex Command Execution</a></li>\n<li><a href=\"#example-6-using-ospath-for-file-path-manipulation\">Example 6: Using <code>os.path</code> for File Path Manipulation</a></li>\n<li><a href=\"#conclusion\">Conclusion</a></li>\n</ol>\n<p>The <code>posix</code> module in Python is not a built-in module like many others in the standard library, but rather a collection of functions that provide access to system calls on Unix-like operating systems. However, it's important to note that direct interaction with POSIX system calls using this module is generally discouraged due to compatibility issues and lack of support for more recent versions of POSIX standards.</p>\n<p>Instead, Python provides more modern interfaces like the <code>os</code> module and its submodules such as <code>os.path</code>, <code>os.system</code>, <code>subprocess</code>, and <code>shutil</code>. These provide a higher-level interface to operating system services and are recommended for general use.</p>\n<p>If you need to interact with POSIX system calls directly, you would typically use platform-specific libraries or write wrappers in C/C++ and compile them into Python extensions using tools like SWIG. However, this approach is not covered by the standard library module <code>posix</code>.</p>\n<p>Here's a brief overview of what the <code>posix</code> module contains, along with some conceptual examples:</p>\n<h3>Conceptual Examples</h3>\n<h4>Example 1: Accessing POSIX Environment Variables</h4>\n<p>You can access environment variables in Python using the <code>os.getenv()</code> function.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\n\n# Get the value of an environment variable\nusername = os.getenv('USER')\nprint(f&quot;Username: {username}&quot;)\n\n# Set a new environment variable\nos.environ['NEW_VAR'] = 'new_value'\n</code></pre>\n\n<h4>Example 2: Changing the Current Working Directory</h4>\n<p>You can change the current working directory using <code>os.chdir()</code>.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\n\n# Get the current working directory\ncurrent_directory = os.getcwd()\nprint(f&quot;Current Directory: {current_directory}&quot;)\n\n# Change to a new directory\nnew_directory = '/path/to/new/directory'\ntry:\n    os.chdir(new_directory)\nexcept FileNotFoundError:\n    print(f&quot;Error: The directory '{new_directory}' does not exist.&quot;)\n</code></pre>\n\n<h4>Example 3: Executing System Commands</h4>\n<p>You can execute system commands using <code>os.system()</code>. This function runs the command and waits for it to complete.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\n\n# Run a system command\nresult = os.system('ls -l')\nprint(result)  # Output will depend on the command executed\n</code></pre>\n\n<h4>Example 4: Managing File Descriptors</h4>\n<p>You can manage file descriptors using <code>os.dup()</code>, <code>os.fdopen()</code>, and <code>os.close()</code>.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\n\ntry:\n    # Duplicate a file descriptor\n    original_fd = open('file.txt', 'r')\n    duplicated_fd = os.dup(original_fd.fileno())\n\n    # Open a new file descriptor to the same file\n    new_file = os.fdopen(duplicated_fd, 'w')\n\n    # Write to the new file\n    new_file.write('Hello, world!')\nexcept OSError as e:\n    print(f&quot;OS error: {e}&quot;)\nexcept IOError as e:\n    print(f&quot;I/O error: {e}&quot;)\nfinally:\n    # Close the original and duplicated file descriptors\n    try:\n        original_fd.close()\n    except NameError:\n        pass\n    try:\n        os.close(duplicated_fd)\n    except NameError:\n        pass\n    except OSError as e:\n        print(f&quot;Error closing duplicated file descriptor: {e}&quot;)\n</code></pre>\n\n<h4>Example 5: Using <code>subprocess</code> for More Complex Command Execution</h4>\n<p>The <code>subprocess</code> module provides a more robust way to execute system commands and capture their output.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import subprocess\n\n# Run a command and capture its output\nresult = subprocess.run(['ls', '-l'], capture_output=True, text=True)\nprint(&quot;Command Output:&quot;)\nprint(result.stdout)\n\n# Check the return code of the command\nif result.returncode == 0:\n    print(&quot;Command executed successfully.&quot;)\nelse:\n    print(f&quot;Command failed with exit code {result.returncode}&quot;)\n</code></pre>\n\n<h4>Example 6: Using <code>os.path</code> for File Path Manipulation</h4>\n<p>The <code>os.path</code> module provides functions to manipulate file paths.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\n\n# Construct a path\npath = os.path.join('folder', 'file.txt')\nprint(&quot;Constructed Path:&quot;, path)\n\n# Split a path into components\ndirectory, filename = os.path.split(path)\nprint(f&quot;Directory: {directory}, Filename: {filename}&quot;)\n\n# Check if a path is absolute\nis_absolute = os.path.isabs(path)\nprint(f&quot;Is Absolute: {is_absolute}&quot;)\n</code></pre>\n\n<h3>Conclusion</h3>\n<p>While the <code>posix</code> module in Python provides access to some basic POSIX system calls, it's recommended to use higher-level interfaces like <code>os</code>, <code>subprocess</code>, and <code>shutil</code> for most tasks. These modules offer better abstraction and compatibility with modern operating systems. If you need direct access to POSIX system calls, consider using platform-specific libraries or compiling C/C++ extensions.</p>"
        },
        {
            "filename": "pty - Pseudo-terminal utilities.md",
            "content": "<h1>pty - Pseudo-terminal utilities</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-simple-pseudoterminal-creation-and-usage\">Example 1: Simple Pseudoterminal Creation and Usage</a></li>\n<li><a href=\"#example-2-using-ptyspawn-for-simple-process-execution\">Example 2: Using <code>pty.spawn</code> for Simple Process Execution</a></li>\n<li><a href=\"#example-3-reading-output-from-a-pseudoterminal\">Example 3: Reading Output from a Pseudoterminal</a></li>\n<li><a href=\"#example-4-handling-input-with-ptymaster_read-and-ptymaster_write\">Example 4: Handling Input with <code>pty.master_read</code> and <code>pty.master_write</code></a></li>\n<li><a href=\"#example-5-using-ptyfork-for-a-child-process-with-pseudo-terminal\">Example 5: Using <code>pty.fork</code> for a Child Process with Pseudo-terminal</a></li>\n</ol>\n<p>The <code>pty</code> module in Python provides a way to create pseudoterminal (pseudo-TTY) devices, which are used to simulate a terminal environment in applications that need console input/output. This is particularly useful for creating interactive programs or services that require real-time access to the user's console.</p>\n<p>Here are comprehensive examples for various functionalities of the <code>pty</code> module:</p>\n<h3>Example 1: Simple Pseudoterminal Creation and Usage</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import pty\nimport os\n\n# Define a callback function to handle input/output from the pseudo-terminal\ndef process_input(data):\n    print(f&quot;Received data: {data.decode()}&quot;)\n    return &quot;Processed Output&quot;\n\n# Open a pseudoterminal\nmaster_fd, slave_fd = pty.openpty()\n\ntry:\n    # Create a new process using os.fork()\n    pid = os.fork()\n\n    if pid == 0:\n        # Child process: replace the terminal with the pseudo-terminal\n        os.setsid()\n        os.execvp('bash', ['bash'])\n    else:\n        # Parent process: communicate with the child through the pseudo-terminal\n        while True:\n            # Read data from the pseudo-terminal\n            input_data = os.read(master_fd, 1024)\n\n            if not input_data:\n                break\n\n            # Process the input and send the output back to the pseudo-terminal\n            processed_output = process_input(input_data)\n            os.write(master_fd, processed_output.encode())\nfinally:\n    # Ensure the pseudoterminal is closed after usage\n    os.close(master_fd)\n</code></pre>\n\n<h3>Example 2: Using <code>pty.spawn</code> for Simple Process Execution</h3>\n<p>The <code>pty.spawn</code> function is a convenience wrapper that opens a pseudo-terminal and runs a specified command in it.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import pty\nimport os\n\n# Define a callback function to handle input/output from the pseudo-terminal\ndef process_input(data):\n    print(f&quot;Received data: {data.decode()}&quot;)\n    return &quot;Processed Output&quot;\n\n# Open a pseudoterminal\nmaster_fd, slave_fd = pty.openpty()\n\ntry:\n    # Use pty.spawn to execute 'bash' in the pseudo-terminal\n    pid = pty.spawn('bash', stdin=slave_fd, stdout=slave_fd, stderr=slave_fd)\n\n    if pid == 0:\n        # Child process: replace the terminal with the pseudo-terminal\n        os.setsid()\n        os.execvp('bash', ['bash'])\n    else:\n        # Parent process: communicate with the child through the pseudo-terminal\n        while True:\n            # Read data from the pseudo-terminal\n            input_data = os.read(master_fd, 1024)\n\n            if not input_data:\n                break\n\n            # Process the input and send the output back to the pseudo-terminal\n            processed_output = process_input(input_data)\n            os.write(master_fd, processed_output.encode())\nfinally:\n    # Ensure the pseudoterminal is closed after usage\n    os.close(master_fd)\n</code></pre>\n\n<h3>Example 3: Reading Output from a Pseudoterminal</h3>\n<p>This example shows how to read output from the pseudo-terminal without blocking.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import pty\nimport os\n\n# Open a pseudoterminal\nmaster_fd, slave_fd = pty.openpty()\n\ntry:\n    # Use pty.spawn to execute 'sleep 5' in the pseudo-terminal\n    pid = pty.spawn('sleep', '5', stdin=slave_fd, stdout=slave_fd, stderr=slave_fd)\n\n    if pid == 0:\n        # Child process: replace the terminal with the pseudo-terminal\n        os.setsid()\n        os.execvp('sleep', ['sleep', '5'])\n    else:\n        # Parent process: read output from the pseudo-terminal without blocking\n        while True:\n            try:\n                # Read data from the pseudo-terminal\n                input_data = os.read(master_fd, 1024)\n\n                if not input_data:\n                    break\n\n                print(f&quot;Received output: {input_data.decode()}&quot;)\n            except OSError as e:\n                if e.errno == errno.EAGAIN:\n                    continue\n                else:\n                    raise\n\nfinally:\n    # Ensure the pseudoterminal is closed after usage\n    os.close(master_fd)\n</code></pre>\n\n<h3>Example 4: Handling Input with <code>pty.master_read</code> and <code>pty.master_write</code></h3>\n<p>This example demonstrates how to manually read and write data to a pseudo-terminal.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import pty\nimport os\n\n# Open a pseudoterminal\nmaster_fd, slave_fd = pty.openpty()\n\ntry:\n    # Use pty.spawn to execute 'sleep 5' in the pseudo-terminal\n    pid = pty.spawn('sleep', '5', stdin=slave_fd, stdout=slave_fd, stderr=slave_fd)\n\n    if pid == 0:\n        # Child process: replace the terminal with the pseudo-terminal\n        os.setsid()\n        os.execvp('sleep', ['sleep', '5'])\n    else:\n        # Parent process: manually read and write data to the pseudo-terminal\n        while True:\n            try:\n                # Read input from the user\n                user_input = input(&quot;Enter command: &quot;)\n\n                if user_input == &quot;exit&quot;:\n                    break\n\n                # Write the user's input to the pseudo-terminal\n                os.write(master_fd, user_input.encode())\n\n                # Read output from the pseudo-terminal\n                output = os.read(master_fd, 1024)\n\n                if not output:\n                    continue\n\n                print(f&quot;Output: {output.decode()}&quot;)\n            except KeyboardInterrupt:\n                break\n\nfinally:\n    # Ensure the pseudoterminal is closed after usage\n    os.close(master_fd)\n</code></pre>\n\n<h3>Example 5: Using <code>pty.fork</code> for a Child Process with Pseudo-terminal</h3>\n<p>This example shows how to create a child process using <code>pty.fork</code> and handle input/output through a pseudo-terminal.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import pty\nimport os\n\n# Define a callback function to handle input/output from the pseudo-terminal\ndef process_input(data):\n    print(f&quot;Received data: {data.decode()}&quot;)\n    return &quot;Processed Output&quot;\n\n# Open a pseudoterminal\nmaster_fd, slave_fd = pty.openpty()\n\ntry:\n    # Fork a new process\n    pid = os.fork()\n\n    if pid == 0:\n        # Child process: replace the terminal with the pseudo-terminal\n        os.setsid()\n        os.dup2(slave_fd, 0)\n        os.dup2(slave_fd, 1)\n        os.dup2(slave_fd, 2)\n        os.close(master_fd)\n        os.execvp('bash', ['bash'])\n    else:\n        # Parent process: communicate with the child through the pseudo-terminal\n        while True:\n            try:\n                # Read input from the user\n                user_input = input(&quot;Enter command: &quot;)\n\n                if user_input == &quot;exit&quot;:\n                    break\n\n                # Write the user's input to the pseudo-terminal\n                os.write(master_fd, user_input.encode())\n\n                # Read output from the pseudo-terminal\n                output = os.read(master_fd, 1024)\n\n                if not output:\n                    continue\n\n                print(f&quot;Output: {output.decode()}&quot;)\n            except KeyboardInterrupt:\n                break\n\nfinally:\n    # Ensure the pseudoterminal is closed after usage\n    os.close(master_fd)\n</code></pre>\n\n<p>These examples cover various aspects of using the <code>pty</code> module, from simple terminal simulation to more complex processes involving input/output handling.</p>"
        },
        {
            "filename": "pwd - The password database.md",
            "content": "<h1>pwd - The password database</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-getting-a-password-database-entry-by-username\">1. Getting a Password Database Entry by Username</a></li>\n<li><a href=\"#2-getting-a-password-database-entry-by-uid\">2. Getting a Password Database Entry by UID</a></li>\n<li><a href=\"#3-listing-all-users\">3. Listing All Users</a></li>\n<li><a href=\"#4-retrieving-group-information-for-a-user\">4. Retrieving Group Information for a User</a></li>\n<li><a href=\"#5-listing-all-groups\">5. Listing All Groups</a></li>\n<li><a href=\"#6-retrieving-user-information-using-os-module\">6. Retrieving User Information Using <code>os</code> Module</a></li>\n<li><a href=\"#7-changing-the-shell-of-a-user\">7. Changing the Shell of a User</a></li>\n<li><a href=\"#8-retrieving-user-and-group-information-using-getpass-module\">8. Retrieving User and Group Information Using <code>getpass</code> Module</a></li>\n<li><a href=\"#9-listing-all-users-and-their-groups\">9. Listing All Users and Their Groups</a></li>\n<li><a href=\"#10-changing-the-password-of-a-user\">10. Changing the Password of a User</a></li>\n</ol>\n<p>The <code>pwd</code> module in Python provides an interface to the system's password database, which contains user account information such as usernames, passwords, home directories, and shell programs.</p>\n<p>Below are comprehensive code examples demonstrating various functionalities of the <code>pwd</code> module:</p>\n<h3>1. Getting a Password Database Entry by Username</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import pwd\n\n# Example: Get the password entry for a specific username\nusername = 'example_user'\ntry:\n    pwd_entry = pwd.getpwnam(username)\n    print(f&quot;User {username} found:&quot;)\n    print(f&quot;Username: {pwd_entry.pw_name}&quot;)\n    print(f&quot;Password Hash: {pwd_entry.pw_passwd}&quot;)\n    print(f&quot;UID: {pwd_entry.pw_uid}&quot;)\n    print(f&quot;GID: {pwd_entry.pw_gid}&quot;)\n    print(f&quot;Home Directory: {pwd_entry.pw_dir}&quot;)\n    print(f&quot;Shell Program: {pwd_entry.pw_shell}&quot;)\nexcept KeyError:\n    print(f&quot;User {username} not found.&quot;)\n</code></pre>\n\n<h3>2. Getting a Password Database Entry by UID</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import pwd\n\n# Example: Get the password entry for a specific UID\nuid = 1001\ntry:\n    pwd_entry = pwd.getpwuid(uid)\n    print(f&quot;User with UID {uid} found:&quot;)\n    print(f&quot;Username: {pwd_entry.pw_name}&quot;)\n    print(f&quot;Password Hash: {pwd_entry.pw_passwd}&quot;)\n    print(f&quot;UID: {pwd_entry.pw_uid}&quot;)\n    print(f&quot;GID: {pwd_entry.pw_gid}&quot;)\n    print(f&quot;Home Directory: {pwd_entry.pw_dir}&quot;)\n    print(f&quot;Shell Program: {pwd_entry.pw_shell}&quot;)\nexcept KeyError:\n    print(f&quot;No user found with UID {uid}.&quot;)\n</code></pre>\n\n<h3>3. Listing All Users</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import pwd\n\n# Example: List all users in the system\nfor user_info in pwd.getpwall():\n    print(f&quot;Username: {user_info.pw_name}, UID: {user_info.pw_uid}&quot;)\n</code></pre>\n\n<h3>4. Retrieving Group Information for a User</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import grp\n\n# Example: Get the group information for a specific username\nusername = 'example_user'\ntry:\n    user_entry = pwd.getpwnam(username)\n    group_id = user_entry.pw_gid\n    group_info = grp.getgrgid(group_id)\n    print(f&quot;User {username} belongs to group:&quot;)\n    print(f&quot;Group Name: {group_info.gr_name}&quot;)\n    print(f&quot;Group ID: {group_info.gr_gid}&quot;)\n    print(f&quot;Group Members: {', '.join(group_info.gr_mem)}&quot;)\nexcept KeyError:\n    print(f&quot;User {username} not found.&quot;)\n</code></pre>\n\n<h3>5. Listing All Groups</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import grp\n\n# Example: List all groups in the system\nfor group_info in grp.getgrall():\n    print(f&quot;Group Name: {group_info.gr_name}, Group ID: {group_info.gr_gid}&quot;)\n</code></pre>\n\n<h3>6. Retrieving User Information Using <code>os</code> Module</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import os\nimport pwd\n\n# Example: Get user information using os.getpwuid()\nusername = 'example_user'\ntry:\n    user_id = os.getuid()\n    user_entry = pwd.getpwuid(user_id)\n    print(f&quot;Current user {pwd.getlogin()} found:&quot;)\n    print(f&quot;Username: {user_entry.pw_name}&quot;)\n    print(f&quot;Password Hash: {user_entry.pw_passwd}&quot;)\n    print(f&quot;UID: {user_entry.pw_uid}&quot;)\n    print(f&quot;GID: {user_entry.pw_gid}&quot;)\n    print(f&quot;Home Directory: {user_entry.pw_dir}&quot;)\n    print(f&quot;Shell Program: {user_entry.pw_shell}&quot;)\nexcept KeyError:\n    print(&quot;No user information available.&quot;)\n</code></pre>\n\n<h3>7. Changing the Shell of a User</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import pwd\nimport os\n\n# Example: Change the shell for a specific user\nusername = 'example_user'\nshell_path = '/bin/bash'\ntry:\n    user_entry = pwd.getpwnam(username)\n    # Check if the new shell exists\n    if os.path.exists(shell_path):\n        print(f&quot;Changing shell for {username} to {shell_path}.&quot;)\n        user_entry.pw_shell = shell_path\n        pwd.setpwent()\n        try:\n            pwd.putpwent(user_entry)\n            pwd.endpwent()\n            print(&quot;Shell changed successfully.&quot;)\n        except PermissionError:\n            print(&quot;Permission denied to change the shell.&quot;)\n    else:\n        print(f&quot;The specified shell {shell_path} does not exist.&quot;)\nexcept KeyError:\n    print(f&quot;User {username} not found.&quot;)\n</code></pre>\n\n<h3>8. Retrieving User and Group Information Using <code>getpass</code> Module</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import getpass\n\n# Example: Retrieve user information using getpass.getuser()\nprint(f&quot;The current user is: {getpass.getuser()}&quot;)\n\n# Example: Retrieve group information for the current user\nusername = getpass.getuser()\ntry:\n    user_entry = pwd.getpwnam(username)\n    print(f&quot;Current user's group is:&quot;)\n    group_info = grp.getgrgid(user_entry.pw_gid)\n    print(f&quot;Group Name: {group_info.gr_name}&quot;)\n    print(f&quot;Group ID: {group_info.gr_gid}&quot;)\n    print(f&quot;Group Members: {', '.join(group_info.gr_mem)}&quot;)\nexcept KeyError:\n    print(&quot;No user information available.&quot;)\n</code></pre>\n\n<h3>9. Listing All Users and Their Groups</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import pwd\nimport grp\n\n# Example: List all users and their groups\nfor user_info in pwd.getpwall():\n    username = user_info.pw_name\n    try:\n        group_info = grp.getgrgid(user_info.pw_gid)\n        print(f&quot;User {username} belongs to group(s):&quot;)\n        for member in group_info.gr_mem:\n            print(member)\n    except KeyError:\n        print(f&quot;No information available for user {username}.&quot;)\n</code></pre>\n\n<h3>10. Changing the Password of a User</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import pwd\nimport crypt\nimport os\n\n# Example: Change the password for a specific user (requires superuser privileges)\nusername = 'example_user'\nnew_password = 'securepassword'\n\ntry:\n    user_entry = pwd.getpwnam(username)\n    # Check if the new password meets complexity requirements\n    if len(new_password) &gt;= 8 and any(char.isdigit() for char in new_password):\n        print(f&quot;Changing password for {username}.&quot;)\n\n        # Hash the new password\n        salt = os.urandom(2).hex()\n        hashed_password = crypt.crypt(new_password, f'$6${salt}')\n\n        user_entry.pw_passwd = hashed_password\n\n        pwd.setpwent()\n        try:\n            pwd.putpwent(user_entry)\n            pwd.endpwent()\n            print(&quot;Password changed successfully.&quot;)\n        except PermissionError:\n            print(&quot;Permission denied to change the password.&quot;)\n    else:\n        print(&quot;The new password must be at least 8 characters long and contain at least one digit.&quot;)\nexcept KeyError:\n    print(f&quot;User {username} not found.&quot;)\n</code></pre>\n\n<h3>Notes:</h3>\n<ul>\n<li><strong>Superuser Privileges</strong>: Some of these examples require superuser privileges (<code>sudo</code>) due to operations like changing passwords or modifying user information.</li>\n<li><strong>Password Hashing</strong>: Passwords are hashed using the <code>crypt</code> module. The format <code>$6$&lt;salt&gt;$&lt;hashed_password&gt;</code> is used for bcrypt hashing, which provides strong password security.</li>\n<li><strong>Error Handling</strong>: Proper error handling is implemented to manage cases where users or groups do not exist or permissions are denied.</li>\n</ul>\n<p>These examples cover a range of functionalities available in the <code>pwd</code> module, providing clear and concise code that can be used as documentation or reference material.</p>"
        },
        {
            "filename": "resource - Resource usage information.md",
            "content": "<h1>resource - Resource usage information</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-monitoring-memory-usage\">Example 1: Monitoring Memory Usage</a></li>\n<li><a href=\"#example-2-setting-cpu-time-limits\">Example 2: Setting CPU Time Limits</a></li>\n<li><a href=\"#example-3-monitoring-file-descriptor-limits\">Example 3: Monitoring File Descriptor Limits</a></li>\n<li><a href=\"#example-4-monitoring-memory-limits\">Example 4: Monitoring Memory Limits</a></li>\n<li><a href=\"#example-5-monitoring-cpu-usage\">Example 5: Monitoring CPU Usage</a></li>\n<li><a href=\"#example-6-monitoring-maximum-file-descriptor-usage\">Example 6: Monitoring Maximum File Descriptor Usage</a></li>\n<li><a href=\"#example-7-monitoring-maximum-stack-size\">Example 7: Monitoring Maximum Stack Size</a></li>\n</ol>\n<p>The <code>resource</code> module in Python provides a portable interface to system resources. It allows you to monitor and control various aspects of program execution, such as memory limits, CPU time, open file descriptors, etc.</p>\n<p>Here are comprehensive code examples that demonstrate the functionalities of the <code>resource</code> module:</p>\n<h3>Example 1: Monitoring Memory Usage</h3>\n<p>This example demonstrates how to monitor the current memory usage of a process.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import resource\n\ndef monitor_memory_usage():\n    # Get the current peak memory usage in kilobytes\n    peak_memory_usage = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss / 1024.0\n\n    print(f&quot;Peak Memory Usage: {peak_memory_usage} MB&quot;)\n\nif __name__ == &quot;__main__&quot;:\n    monitor_memory_usage()\n</code></pre>\n\n<h3>Example 2: Setting CPU Time Limits</h3>\n<p>This example shows how to set a limit on the CPU time that a process can use.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import resource\n\ndef set_cpu_time_limit(seconds):\n    try:\n        # Set the soft and hard limits for CPU time (in seconds)\n        resource.setrlimit(resource.RLIMIT_CPU, (seconds, -1))\n        print(f&quot;CPU Time Limit Set: {seconds} seconds&quot;)\n    except OSError as e:\n        print(f&quot;Failed to set CPU time limit: {e}&quot;)\n\nif __name__ == &quot;__main__&quot;:\n    set_cpu_time_limit(10)  # Set a 10-second CPU time limit\n</code></pre>\n\n<h3>Example 3: Monitoring File Descriptor Limits</h3>\n<p>This example shows how to monitor and set limits on the number of file descriptors a process can open.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import resource\n\ndef get_file_descriptor_limits():\n    try:\n        # Get the current soft and hard limits for file descriptors\n        soft_limit, hard_limit = resource.getrlimit(resource.RLIMIT_NOFILE)\n\n        print(f&quot;Current File Descriptor Limits: Soft {soft_limit}, Hard {hard_limit}&quot;)\n    except OSError as e:\n        print(f&quot;Failed to get file descriptor limits: {e}&quot;)\n\ndef set_file_descriptor_limits(soft_limit, hard_limit):\n    try:\n        # Set the soft and hard limits for file descriptors\n        resource.setrlimit(resource.RLIMIT_NOFILE, (soft_limit, hard_limit))\n        print(f&quot;File Descriptor Limits Set: Soft {soft_limit}, Hard {hard_limit}&quot;)\n    except OSError as e:\n        print(f&quot;Failed to set file descriptor limits: {e}&quot;)\n\nif __name__ == &quot;__main__&quot;:\n    get_file_descriptor_limits()\n    set_file_descriptor_limits(256, 1024)\n</code></pre>\n\n<h3>Example 4: Monitoring Memory Limits</h3>\n<p>This example demonstrates how to monitor and set memory limits for a process.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import resource\n\ndef get_memory_limits():\n    try:\n        # Get the current soft and hard limits for memory usage (in bytes)\n        soft_limit, hard_limit = resource.getrlimit(resource.RLIMIT_AS)\n\n        print(f&quot;Current Memory Limits: Soft {soft_limit} bytes, Hard {hard_limit} bytes&quot;)\n    except OSError as e:\n        print(f&quot;Failed to get memory limits: {e}&quot;)\n\ndef set_memory_limits(soft_limit, hard_limit):\n    try:\n        # Set the soft and hard limits for memory usage (in bytes)\n        resource.setrlimit(resource.RLIMIT_AS, (soft_limit, hard_limit))\n        print(f&quot;Memory Limits Set: Soft {soft_limit} bytes, Hard {hard_limit} bytes&quot;)\n    except OSError as e:\n        print(f&quot;Failed to set memory limits: {e}&quot;)\n\nif __name__ == &quot;__main__&quot;:\n    get_memory_limits()\n    set_memory_limits(1024 * 1024 * 512, -1)  # Set a 512MB soft limit and no hard limit\n</code></pre>\n\n<h3>Example 5: Monitoring CPU Usage</h3>\n<p>This example demonstrates how to monitor the current CPU usage of a process.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import resource\n\ndef get_cpu_usage():\n    try:\n        # Get the current user and system CPU time used by the process (in seconds)\n        user_time, sys_time = resource.getrusage(resource.RUSAGE_SELF).ru_utime + resource.getrusage(resource.RUSAGE_SELF).ru_stime\n\n        print(f&quot;CPU Usage: User {user_time} seconds, System {sys_time} seconds&quot;)\n    except OSError as e:\n        print(f&quot;Failed to get CPU usage: {e}&quot;)\n\nif __name__ == &quot;__main__&quot;:\n    get_cpu_usage()\n</code></pre>\n\n<h3>Example 6: Monitoring Maximum File Descriptor Usage</h3>\n<p>This example demonstrates how to monitor and set the maximum number of open files a process can have.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import resource\n\ndef get_max_open_files():\n    try:\n        # Get the current hard limit for the maximum number of open files\n        max_open_files = resource.getrlimit(resource.RLIMIT_NOFILE)[1]\n\n        print(f&quot;Maximum Open Files Limit: {max_open_files}&quot;)\n    except OSError as e:\n        print(f&quot;Failed to get maximum open files limit: {e}&quot;)\n\ndef set_max_open_files(max_open_files):\n    try:\n        # Set the hard limit for the maximum number of open files\n        resource.setrlimit(resource.RLIMIT_NOFILE, (resource.getrlimit(resource.RLIMIT_NOFILE)[0], max_open_files))\n        print(f&quot;Maximum Open Files Limit Set: {max_open_files}&quot;)\n    except OSError as e:\n        print(f&quot;Failed to set maximum open files limit: {e}&quot;)\n\nif __name__ == &quot;__main__&quot;:\n    get_max_open_files()\n    set_max_open_files(1024)\n</code></pre>\n\n<h3>Example 7: Monitoring Maximum Stack Size</h3>\n<p>This example demonstrates how to monitor and set the maximum stack size a process can use.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import resource\n\ndef get_stack_size():\n    try:\n        # Get the current soft and hard limits for the maximum stack size (in bytes)\n        soft_limit, hard_limit = resource.getrlimit(resource.RLIMIT_STACK)\n\n        print(f&quot;Stack Size Limits: Soft {soft_limit} bytes, Hard {hard_limit} bytes&quot;)\n    except OSError as e:\n        print(f&quot;Failed to get stack size limits: {e}&quot;)\n\ndef set_stack_size(soft_limit, hard_limit):\n    try:\n        # Set the soft and hard limits for the maximum stack size (in bytes)\n        resource.setrlimit(resource.RLIMIT_STACK, (soft_limit, hard_limit))\n        print(f&quot;Stack Size Limits Set: Soft {soft_limit} bytes, Hard {hard_limit} bytes&quot;)\n    except OSError as e:\n        print(f&quot;Failed to set stack size limits: {e}&quot;)\n\nif __name__ == &quot;__main__&quot;:\n    get_stack_size()\n    set_stack_size(1024 * 1024, -1)  # Set a 1MB soft limit and no hard limit\n</code></pre>\n\n<p>These examples cover various aspects of resource usage management in Python, demonstrating how to monitor and control different system resources such as memory, CPU time, file descriptors, and stack size. Each example includes comments explaining the purpose of each part of the code and handling any potential exceptions that might occur.</p>"
        },
        {
            "filename": "spwd - The shadow password database.md",
            "content": "<h1>spwd - The shadow password database</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-retrieve-a-shadow-password-entry\">Example 1: Retrieve a Shadow Password Entry</a></li>\n<li><a href=\"#example-2-modify-a-shadow-password-entry\">Example 2: Modify a Shadow Password Entry</a></li>\n<li><a href=\"#example-3-list-all-shadow-password-entries\">Example 3: List All Shadow Password Entries</a></li>\n<li><a href=\"#note\">Note:</a></li>\n</ol>\n<p>The <code>spwd</code> module in the Python standard library provides access to the Unix-style shadow password database, which is used to store encrypted passwords for user accounts. This module allows you to manage and query shadow password entries without accessing the underlying system's files directly.</p>\n<p>Below are comprehensive examples of how to use the <code>spwd</code> module for various operations:</p>\n<h3>Example 1: Retrieve a Shadow Password Entry</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import spwd\n\ndef get_shadow_entry(username):\n    &quot;&quot;&quot;\n    Retrieves the shadow password entry for a given username.\n\n    Args:\n        username (str): The username for which to retrieve the shadow password entry.\n\n    Returns:\n        dict: A dictionary containing the shadow password information.\n    &quot;&quot;&quot;\n    try:\n        # Retrieve the shadow password entry\n        pwd_entry = spwd.getspnam(username)\n\n        # Extract and return relevant information from the shadow password entry\n        shadow_info = {\n            'user': pwd_entry.sp_nam,  # Username\n            'password': pwd_entry.sp_pwd,  # Encrypted Password\n            'flags': pwd_entry.sp_flags,  # Flags (e.g., account expiration)\n            'last_change': pwd_entry.sp_lastchg,  # Last password change timestamp\n            'min': pwd_entry.sp_min,      # Minimum number of days between password changes\n            'max': pwd_entry.sp_max,      # Maximum number of days a password can be used\n            'warn': pwd_entry.sp_warn,    # Number of days before expiration to warn user\n            'inactive': pwd_entry.sp_inact,  # Inactivity period after password expiration\n            'expire': pwd_entry.sp_expire,   # Account expiration timestamp\n            'reserved': pwd_entry.sp_atime,   # Last authentication time\n        }\n\n        return shadow_info\n    except KeyError:\n        print(f&quot;No shadow entry found for user: {username}&quot;)\n        return None\n\n# Example usage\nusername = &quot;exampleuser&quot;\nshadow_info = get_shadow_entry(username)\nif shadow_info:\n    print(shadow_info)\n</code></pre>\n\n<h3>Example 2: Modify a Shadow Password Entry</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import spwd\nimport crypt\n\ndef modify_shadow_entry(username, new_password):\n    &quot;&quot;&quot;\n    Modifies the encrypted password for a given username.\n\n    Args:\n        username (str): The username whose shadow password needs to be modified.\n        new_password (str): The new plain text password to encrypt and update.\n\n    Returns:\n        bool: True if the modification is successful, False otherwise.\n    &quot;&quot;&quot;\n    try:\n        # Retrieve the current shadow password entry\n        pwd_entry = spwd.getspnam(username)\n\n        # Encrypt the new password using crypt.CRYPT_METHOD_SHA512\n        encrypted_password = crypt.crypt(new_password, crypt.METHOD_SHA512)\n\n        # Update the shadow password in memory\n        pwd_entry.sp_pwd = encrypted_password\n\n        # Write the updated entry back to the system\n        spwd.setspnam(username, pwd_entry)\n\n        print(f&quot;Shadow password for {username} has been successfully modified.&quot;)\n        return True\n    except (KeyError, crypt.CryptError) as e:\n        print(f&quot;Failed to modify shadow password for user {username}: {e}&quot;)\n        return False\n\n# Example usage\nusername = &quot;exampleuser&quot;\nnew_password = &quot;new_secure_password123&quot;\nsuccess = modify_shadow_entry(username, new_password)\n</code></pre>\n\n<h3>Example 3: List All Shadow Password Entries</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import spwd\n\ndef list_shadow_entries():\n    &quot;&quot;&quot;\n    Lists all shadow password entries in the system.\n\n    Returns:\n        list: A list of dictionaries, each containing information about a shadow password entry.\n    &quot;&quot;&quot;\n    shadow_entries = []\n\n    # Iterate over all shadow password entries\n    try:\n        for pwd_entry in spwd.getspall():\n            shadow_info = {\n                'user': pwd_entry.sp_nam,\n                'password': pwd_entry.sp_pwd,\n                'flags': pwd_entry.sp_flags,\n                'last_change': pwd_entry.sp_lastchg,\n                'min': pwd_entry.sp_min,\n                'max': pwd_entry.sp_max,\n                'warn': pwd_entry.sp_warn,\n                'inactive': pwd_entry.sp_inact,\n                'expire': pwd_entry.sp_expire,\n                'reserved': pwd_entry.sp_atime,\n            }\n            shadow_entries.append(shadow_info)\n    except PermissionError:\n        print(&quot;Permission denied to access shadow password database.&quot;)\n    except Exception as e:\n        print(f&quot;An error occurred while listing shadow password entries: {e}&quot;)\n\n    return shadow_entries\n\n# Example usage\nshadow_list = list_shadow_entries()\nfor entry in shadow_list:\n    print(entry)\n</code></pre>\n\n<h3>Note:</h3>\n<ul>\n<li>The <code>spwd</code> module is only available on Unix-like systems and may not be available on Windows.</li>\n<li>The encryption method used for passwords can vary based on system configuration. For example, on most systems, <code>crypt.METHOD_SHA512</code> is used, which is a strong cryptographic hash function.</li>\n<li>Ensure that you have the necessary permissions to modify shadow password entries on your system.</li>\n</ul>\n<p>These examples provide a basic framework for interacting with the shadow password database using Python's <code>spwd</code> module. Adjustments may be needed based on specific system configurations and requirements.</p>"
        },
        {
            "filename": "syslog - Unix syslog library routines.md",
            "content": "<h1>syslog - Unix syslog library routines</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-opening-a-syslog-connection\">1. Opening a syslog connection</a></li>\n<li><a href=\"#2-writing-to-a-file\">2. Writing to a file</a></li>\n<li><a href=\"#3-writing-to-a-remote-server\">3. Writing to a remote server</a></li>\n<li><a href=\"#4-setting-log-format\">4. Setting log format</a></li>\n<li><a href=\"#5-handling-multiple-facilities-and-priorities\">5. Handling multiple facilities and priorities</a></li>\n<li><a href=\"#6-using-syslog-messages-with-custom-identifiers\">6. Using syslog messages with custom identifiers</a></li>\n<li><a href=\"#7-handling-log-messages-with-timestamps\">7. Handling log messages with timestamps</a></li>\n<li><a href=\"#8-handling-log-messages-with-different-priorities\">8. Handling log messages with different priorities</a></li>\n</ol>\n<p>The <code>syslog</code> module provides access to the system logging capabilities on Unix-like systems. This module allows you to send log messages to various destinations such as the system logger, files, or remote servers.</p>\n<p>Here are comprehensive and well-documented code examples for each functionality in the <code>syslog</code> module:</p>\n<h3>1. Opening a syslog connection</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import syslog\n\n# Define the facility (e.g., LOG_USER)\nfacility = syslog.LOG_USER\n\n# Open the syslog connection with default options\nsyslog.openlog(ident='myapp', logoption=syslog.LOG_PID, facility=facility)\n\n# Write a debug message\nsyslog.syslog(syslog.LOG_DEBUG, 'This is a debug message')\n\n# Write an info message\nsyslog.syslog(syslog.LOG_INFO, 'This is an info message')\n\n# Close the syslog connection\nsyslog.closelog()\n</code></pre>\n\n<h3>2. Writing to a file</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import syslog\n\n# Define the facility and log option\nfacility = syslog.LOG_LOCAL0\nlog_option = syslog.LOG_PID | syslog.LOG_NDELAY\n\n# Open the syslog connection with a file destination\nwith open('/var/log/myapp.log', 'w') as log_file:\n    syslog.openlog(ident='myapp', logoption=log_option, facility=facility, logfile=log_file)\n\n    # Write a debug message to the file\n    syslog.syslog(syslog.LOG_DEBUG, 'This is a debug message logged to a file')\n\n    # Close the syslog connection\n    syslog.closelog()\n</code></pre>\n\n<h3>3. Writing to a remote server</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import syslog\n\n# Define the host and port of the remote syslog server\nhost = 'syslog.example.com'\nport = 514\n\n# Define the facility and log option\nfacility = syslog.LOG_LOCAL0\nlog_option = syslog.LOG_PID | syslog.LOG_NDELAY\n\n# Open the syslog connection to a remote server\nwith socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as sock:\n    try:\n        syslog.openlog(ident='myapp', logoption=log_option, facility=facility, address=host)\n\n        # Write an info message to the remote server\n        syslog.syslog(syslog.LOG_INFO, 'This is an info message sent to a remote server')\n\n    except socket.error as e:\n        print(f&quot;Failed to open syslog connection: {e}&quot;)\n\n    finally:\n        syslog.closelog()\n</code></pre>\n\n<h3>4. Setting log format</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import syslog\n\n# Define the facility and log option\nfacility = syslog.LOG_LOCAL0\nlog_option = syslog.LOG_PID | syslog.LOG_NDELAY\n\n# Open the syslog connection with a custom format\nwith open('/var/log/myapp.log', 'w') as log_file:\n    syslog.openlog(ident='myapp', logoption=log_option, facility=facility, logfile=log_file)\n\n    # Set a custom format string for log messages\n    syslog.setlogmask(syslog.LOG_UPTO(syslog.LOG_INFO))\n    syslog.syslog(syslog.LOG_INFO, 'This is an info message with a custom format')\n\n    # Close the syslog connection\n    syslog.closelog()\n</code></pre>\n\n<h3>5. Handling multiple facilities and priorities</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import syslog\n\n# Define the facilities and log options\nfacilities = [syslog.LOG_LOCAL0, syslog.LOG_LOCAL1]\nlog_options = {\n    syslog.LOG_LOCAL0: syslog.LOG_PID | syslog.LOG_NDELAY,\n    syslog.LOG_LOCAL1: syslog.LOG_USER | syslog.LOG_CONS\n}\n\n# Open the syslog connection with multiple facilities and priorities\nfor facility in facilities:\n    with open('/var/log/myapp.log', 'w') as log_file:\n        syslog.openlog(ident='myapp', logoption=log_options[facility], facility=facility, logfile=log_file)\n\n        # Write debug messages to different facilities\n        syslog.syslog(syslog.LOG_DEBUG, 'This is a debug message from LOG_LOCAL0')\n        syslog.syslog(syslog.LOG_DEBUG, 'This is a debug message from LOG_LOCAL1')\n\n    # Close the syslog connection\n    syslog.closelog()\n</code></pre>\n\n<h3>6. Using syslog messages with custom identifiers</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import syslog\n\n# Define the facility and log option\nfacility = syslog.LOG_LOCAL0\nlog_option = syslog.LOG_PID | syslog.LOG_NDELAY\n\n# Open the syslog connection with a custom identifier\nwith open('/var/log/myapp.log', 'w') as log_file:\n    syslog.openlog(ident='myapp.mysubsystem', logoption=log_option, facility=facility, logfile=log_file)\n\n    # Write a debug message using a custom identifier\n    syslog.syslog(syslog.LOG_DEBUG, 'This is a debug message from mysubsystem')\n\n    # Close the syslog connection\n    syslog.closelog()\n</code></pre>\n\n<h3>7. Handling log messages with timestamps</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import syslog\nimport time\n\n# Define the facility and log option\nfacility = syslog.LOG_LOCAL0\nlog_option = syslog.LOG_PID | syslog.LOG_NDELAY\n\n# Open the syslog connection with a custom timestamp format\nwith open('/var/log/myapp.log', 'w') as log_file:\n    syslog.openlog(ident='myapp', logoption=log_option, facility=facility, logfile=log_file)\n\n    # Write a debug message with a custom timestamp format\n    current_time = time.strftime('%Y-%m-%d %H:%M:%S')\n    syslog.syslog(syslog.LOG_DEBUG, f'[{current_time}] This is a debug message')\n\n    # Close the syslog connection\n    syslog.closelog()\n</code></pre>\n\n<h3>8. Handling log messages with different priorities</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import syslog\n\n# Define the facility and log option\nfacility = syslog.LOG_LOCAL0\nlog_option = syslog.LOG_PID | syslog.LOG_NDELAY\n\n# Open the syslog connection with different priorities\nwith open('/var/log/myapp.log', 'w') as log_file:\n    syslog.openlog(ident='myapp', logoption=log_option, facility=facility, logfile=log_file)\n\n    # Write debug messages to different priorities\n    syslog.syslog(syslog.LOG_DEBUG, 'This is a debug message')\n    syslog.syslog(syslog.LOG_INFO, 'This is an info message')\n    syslog.syslog(syslog.LOG_WARNING, 'This is a warning message')\n    syslog.syslog(syslog.LOG_ERR, 'This is an error message')\n    syslog.syslog(syslog.LOG_CRIT, 'This is a critical message')\n    syslog.syslog(syslog.LOG_ALERT, 'This is an alert message')\n    syslog.syslog(syslog.LOG_EMERG, 'This is an emergency message')\n\n    # Close the syslog connection\n    syslog.closelog()\n</code></pre>\n\n<p>These examples demonstrate various functionalities of the <code>syslog</code> module, including opening connections to different destinations, writing log messages with custom formats and identifiers, handling different priorities, and logging to files or remote servers. Each example includes comments explaining each step for clarity and completeness.</p>"
        },
        {
            "filename": "termios - POSIX style tty control.md",
            "content": "<h1>termios - POSIX style tty control</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-setting-terminal-modes\">Example 1: Setting Terminal Modes</a></li>\n<li><a href=\"#example-2-changing-line-discipline\">Example 2: Changing Line Discipline</a></li>\n<li><a href=\"#example-3-reading-and-writing-terminal-input\">Example 3: Reading and Writing Terminal Input</a></li>\n<li><a href=\"#example-4-querying-terminal-attributes\">Example 4: Querying Terminal Attributes</a></li>\n<li><a href=\"#example-5-setting-special-character-sets\">Example 5: Setting Special Character Sets</a></li>\n<li><a href=\"#example-6-changing-input-modes\">Example 6: Changing Input Modes</a></li>\n</ol>\n<p>The <code>termios</code> module in Python provides a way to manipulate terminal-related information, such as input modes, output modes, line discipline settings, and more. This module allows you to interact directly with terminal devices using the POSIX interface.</p>\n<p>Here are some comprehensive code examples that demonstrate various functionalities of the <code>termios</code> module:</p>\n<h3>Example 1: Setting Terminal Modes</h3>\n<p>This example shows how to set the terminal modes for raw input, disabling echo, and turning off canonical mode (which is typically enabled by default in interactive shells).</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import termios\nimport tty\nimport sys\n\ndef set_raw_mode(fd):\n    &quot;&quot;&quot;Set the terminal into raw mode.&quot;&quot;&quot;\n    try:\n        fd = sys.stdin.fileno()\n        old_settings = termios.tcgetattr(fd)\n        new_settings = old_settings.copy()\n\n        # Disable canonical mode and echo\n        new_settings[0] &amp;= ~(termios.IGNBRK | termios.BRKINT | termios.PARMRK |\n                                termios.ISTRIP | termios.INLCR | termios. IGNCR |\n                                termios.ICRNL | termios.IMAXBEL)\n        new_settings[1] &amp;= ~termios.ECHO\n        new_settings[2] &amp;= ~(termios.OPOST)\n\n        termios.tcsetattr(fd, termios.TCSANOW, new_settings)\n    except Exception as e:\n        print(f&quot;Error setting raw mode: {e}&quot;)\n\ndef main():\n    try:\n        set_raw_mode(sys.stdin.fileno())\n        print(&quot;Terminal set to raw mode. Press any key to exit.&quot;)\n\n        # Read a character\n        input_char = sys.stdin.read(1)\n        print(f&quot;You pressed: {input_char}&quot;)\n    finally:\n        # Restore the original terminal settings\n        termios.tcsetattr(sys.stdin.fileno(), termios.TCSANOW, termios.tcgetattr(sys.stdin.fileno()))\n\nif __name__ == &quot;__main__&quot;:\n    main()\n</code></pre>\n\n<h3>Example 2: Changing Line Discipline</h3>\n<p>This example demonstrates how to change the line discipline of a terminal. For instance, you can set it to <code>NLDISC_MINIMAL</code> which is useful for terminals that do not require any special handling of newlines.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import termios\nimport tty\nimport sys\n\ndef set_line_discipline(fd, discipline):\n    &quot;&quot;&quot;Set the terminal's line discipline.&quot;&quot;&quot;\n    try:\n        fd = sys.stdin.fileno()\n        old_settings = termios.tcgetattr(fd)\n        new_settings = old_settings.copy()\n\n        # Set the line discipline\n        new_settings[6] = discipline\n\n        termios.tcsetattr(fd, termios.TCSANOW, new_settings)\n    except Exception as e:\n        print(f&quot;Error setting line discipline: {e}&quot;)\n\ndef main():\n    try:\n        set_line_discipline(sys.stdin.fileno(), termios.NLDISC_MINIMAL)\n        print(&quot;Line discipline set to MINIMAL.&quot;)\n    finally:\n        # Restore the original terminal settings\n        termios.tcsetattr(sys.stdin.fileno(), termios.TCSANOW, termios.tcgetattr(sys.stdin.fileno()))\n\nif __name__ == &quot;__main__&quot;:\n    main()\n</code></pre>\n\n<h3>Example 3: Reading and Writing Terminal Input</h3>\n<p>This example shows how to read input from a terminal in raw mode and write output back to it.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import termios\nimport tty\nimport sys\n\ndef set_raw_mode(fd):\n    &quot;&quot;&quot;Set the terminal into raw mode.&quot;&quot;&quot;\n    try:\n        fd = sys.stdin.fileno()\n        old_settings = termios.tcgetattr(fd)\n        new_settings = old_settings.copy()\n\n        # Disable canonical mode and echo\n        new_settings[0] &amp;= ~(termios.IGNBRK | termios.BRKINT | termios.PARMRK |\n                                termios.ISTRIP | termios.INLCR | termios. IGNCR |\n                                termios.ICRNL | termios.IMAXBEL)\n        new_settings[1] &amp;= ~termios.ECHO\n        new_settings[2] &amp;= ~(termios.OPOST)\n\n        termios.tcsetattr(fd, termios.TCSANOW, new_settings)\n    except Exception as e:\n        print(f&quot;Error setting raw mode: {e}&quot;)\n\ndef main():\n    try:\n        set_raw_mode(sys.stdin.fileno())\n        print(&quot;Terminal set to raw mode. Press a key followed by 'Enter'.&quot;)\n\n        # Read input\n        input_line = sys.stdin.readline().strip()\n        print(f&quot;You entered: {input_line}&quot;)\n    finally:\n        # Restore the original terminal settings\n        termios.tcsetattr(sys.stdin.fileno(), termios.TCSANOW, termios.tcgetattr(sys.stdin.fileno()))\n\nif __name__ == &quot;__main__&quot;:\n    main()\n</code></pre>\n\n<h3>Example 4: Querying Terminal Attributes</h3>\n<p>This example shows how to query and print various attributes of the terminal.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import termios\nimport sys\n\ndef get_terminal_attributes(fd):\n    &quot;&quot;&quot;Retrieve and print terminal attributes.&quot;&quot;&quot;\n    try:\n        fd = sys.stdin.fileno()\n        settings = termios.tcgetattr(fd)\n\n        # Print input modes\n        print(f&quot;Input Modes: {settings[0]}&quot;)\n\n        # Print output modes\n        print(f&quot;Output Modes: {settings[1]}&quot;)\n\n        # Print local flags\n        print(f&quot;Local Flags: {settings[2]}&quot;)\n\n        # Print control characters\n        print(f&quot;Control Characters: {settings[3]}&quot;)\n\n        # Print special character sets\n        print(f&quot;Special Character Sets: {settings[4]}&quot;)\n\n        # Print current line discipline\n        print(f&quot;Current Line Discipline: {settings[5]}&quot;)\n    except Exception as e:\n        print(f&quot;Error querying terminal attributes: {e}&quot;)\n\ndef main():\n    try:\n        get_terminal_attributes(sys.stdin.fileno())\n    finally:\n        pass\n\nif __name__ == &quot;__main__&quot;:\n    main()\n</code></pre>\n\n<h3>Example 5: Setting Special Character Sets</h3>\n<p>This example demonstrates how to set special character sets in the terminal, which can be useful for configuring certain types of terminals or emulators.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import termios\nimport tty\nimport sys\n\ndef set_special_character_sets(fd):\n    &quot;&quot;&quot;Set special character sets.&quot;&quot;&quot;\n    try:\n        fd = sys.stdin.fileno()\n        old_settings = termios.tcgetattr(fd)\n        new_settings = old_settings.copy()\n\n        # Set a specific special character set (e.g., ASCII 0x81 for IBM PC compatibility)\n        new_settings[4] = bytearray([2])  # Byte to represent the special character set\n\n        termios.tcsetattr(fd, termios.TCSANOW, new_settings)\n    except Exception as e:\n        print(f&quot;Error setting special character sets: {e}&quot;)\n\ndef main():\n    try:\n        set_special_character_sets(sys.stdin.fileno())\n        print(&quot;Special character sets set.&quot;)\n    finally:\n        # Restore the original terminal settings\n        termios.tcsetattr(sys.stdin.fileno(), termios.TCSANOW, termios.tcgetattr(sys.stdin.fileno()))\n\nif __name__ == &quot;__main__&quot;:\n    main()\n</code></pre>\n\n<h3>Example 6: Changing Input Modes</h3>\n<p>This example shows how to change the input modes of the terminal. For instance, you can disable canonical mode and enable canonical mode.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import termios\nimport tty\nimport sys\n\ndef set_input_mode(fd, mode):\n    &quot;&quot;&quot;Set the terminal's input mode.&quot;&quot;&quot;\n    try:\n        fd = sys.stdin.fileno()\n        old_settings = termios.tcgetattr(fd)\n        new_settings = old_settings.copy()\n\n        # Set the input mode\n        new_settings[0] |= mode  # Enable or disable canonical mode\n\n        termios.tcsetattr(fd, termios.TCSANOW, new_settings)\n    except Exception as e:\n        print(f&quot;Error setting input mode: {e}&quot;)\n\ndef main():\n    try:\n        set_input_mode(sys.stdin.fileno(), termios.ICANON)  # Enable canonical mode\n        print(&quot;Input mode set to CANON.&quot;)\n    finally:\n        # Restore the original terminal settings\n        termios.tcsetattr(sys.stdin.fileno(), termios.TCSANOW, termios.tcgetattr(sys.stdin.fileno()))\n\nif __name__ == &quot;__main__&quot;:\n    main()\n</code></pre>\n\n<p>These examples cover a range of functionalities in the <code>termios</code> module, from setting basic terminal modes to querying and modifying various aspects of terminal attributes. Each example is designed to be clear and self-contained, providing a practical demonstration of how to use the <code>termios</code> module for controlling terminal behavior in Python applications.</p>"
        },
        {
            "filename": "tty - Terminal control functions.md",
            "content": "<h1>tty - Terminal control functions</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-ttyiflag\">1. <code>tty.iflag</code></a></li>\n<li><a href=\"#2-ttyoflag\">2. <code>tty.oflag</code></a></li>\n<li><a href=\"#3-ttycflag\">3. <code>tty.cflag</code></a></li>\n<li><a href=\"#4-ttylflag\">4. <code>tty.lflag</code></a></li>\n<li><a href=\"#5-ttyisatty\">5. <code>tty.isatty</code></a></li>\n<li><a href=\"#6-ttygetattr\">6. <code>tty.getattr</code></a></li>\n<li><a href=\"#7-ttysetattr\">7. <code>tty.setattr</code></a></li>\n<li><a href=\"#8-ttycbreak\">8. <code>tty.cbreak</code></a></li>\n<li><a href=\"#9-ttyraw\">9. <code>tty.raw</code></a></li>\n<li><a href=\"#10-ttysetraw\">10. <code>tty.setraw</code></a></li>\n</ol>\n<p>The <code>tty</code> module in Python provides a way to interact with terminal devices, allowing you to configure the input/output modes of a terminal. Here are comprehensive and well-documented examples of how to use each function available in this module:</p>\n<h3>1. <code>tty.iflag</code></h3>\n<ul>\n<li><strong>Description</strong>: Controls input processing flags.</li>\n<li><strong>Functionality</strong>: Sets or gets the input mode flags for a given file descriptor.</li>\n</ul>\n<pre class=\"codehilite\"><code class=\"language-python\">import tty\nimport termios\n\n# Open a terminal device\nwith open('/dev/tty', 'r+') as fd:\n    # Get current termios settings\n    old_attrs = termios.tcgetattr(fd)\n\n    # Modify termios settings\n    new_attrs = old_attrs[:]\n    new_attrs[6][termios.VMIN] = 1  # Minimum number of characters to read\n    new_attrs[6][termios.VTIME] = 0  # Time out in deciseconds\n\n    # Apply modified termios settings\n    termios.tcsetattr(fd, termios.TCSANOW, new_attrs)\n\n    try:\n        while True:\n            # Read data with the new input mode settings\n            data = fd.read(1)\n            print(data, end='', flush=True)\n    finally:\n        # Restore original termios settings\n        termios.tcsetattr(fd, termios.TCSANOW, old_attrs)\n</code></pre>\n\n<h3>2. <code>tty.oflag</code></h3>\n<ul>\n<li><strong>Description</strong>: Controls output processing flags.</li>\n<li><strong>Functionality</strong>: Sets or gets the output mode flags for a given file descriptor.</li>\n</ul>\n<pre class=\"codehilite\"><code class=\"language-python\">import tty\n\n# Open a terminal device\nwith open('/dev/tty', 'r+') as fd:\n    # Get current oflag settings\n    old_oflag = tty.tcgetattr(fd)\n\n    # Modify oflag settings\n    new_oflag = old_oflag[:]\n    new_oflag[tty.ONLCR] = False  # Disable newline translation\n\n    # Apply modified oflag settings\n    tty.tcsetattr(fd, tty.TCSANOW, new_oflag)\n\n    try:\n        while True:\n            # Write data with the new output mode settings\n            fd.write('Hello, World!\\n')\n    finally:\n        # Restore original oflag settings\n        tty.tcsetattr(fd, tty.TCSANOW, old_oflag)\n</code></pre>\n\n<h3>3. <code>tty.cflag</code></h3>\n<ul>\n<li><strong>Description</strong>: Controls control flags.</li>\n<li><strong>Functionality</strong>: Sets or gets the control mode flags for a given file descriptor.</li>\n</ul>\n<pre class=\"codehilite\"><code class=\"language-python\">import tty\nimport termios\n\n# Open a terminal device\nwith open('/dev/tty', 'r+') as fd:\n    # Get current termios settings\n    old_attrs = termios.tcgetattr(fd)\n\n    # Modify termios settings\n    new_attrs = old_attrs[:]\n    new_attrs[2] &amp;= ~termios.CSIZE  # Clear current character size mask\n    new_attrs[2] |= termios.CS8     # Set character size to 8 bits\n\n    # Apply modified termios settings\n    termios.tcsetattr(fd, termios.TCSANOW, new_attrs)\n\n    try:\n        while True:\n            # Read data with the new control mode settings\n            data = fd.read(1)\n            print(data, end='', flush=True)\n    finally:\n        # Restore original termios settings\n        termios.tcsetattr(fd, termios.TCSANOW, old_attrs)\n</code></pre>\n\n<h3>4. <code>tty.lflag</code></h3>\n<ul>\n<li><strong>Description</strong>: Controls local flags.</li>\n<li><strong>Functionality</strong>: Sets or gets the local mode flags for a given file descriptor.</li>\n</ul>\n<pre class=\"codehilite\"><code class=\"language-python\">import tty\nimport termios\n\n# Open a terminal device\nwith open('/dev/tty', 'r+') as fd:\n    # Get current lflag settings\n    old_attrs = termios.tcgetattr(fd)\n\n    # Modify lflag settings\n    new_attrs = old_attrs[:]\n    new_attrs[3] &amp;= ~termios.ICANON  # Disable canonical mode\n\n    # Apply modified lflag settings\n    termios.tcsetattr(fd, termios.TCSANOW, new_attrs)\n\n    try:\n        while True:\n            # Read data with the new local mode settings\n            data = fd.read(1)\n            print(data, end='', flush=True)\n    finally:\n        # Restore original lflag settings\n        termios.tcsetattr(fd, termios.TCSANOW, old_attrs)\n</code></pre>\n\n<h3>5. <code>tty.isatty</code></h3>\n<ul>\n<li><strong>Description</strong>: Checks if a file descriptor is associated with a terminal device.</li>\n<li><strong>Functionality</strong>: Determines whether the specified file descriptor corresponds to a terminal.</li>\n</ul>\n<pre class=\"codehilite\"><code class=\"language-python\">import tty\nimport termios\nimport sys\n\n# Open a terminal device\nwith open('/dev/tty', 'rb+') as fd:\n    # Get current lflag settings\n    old_attrs = termios.tcgetattr(fd)\n\n    # Modify lflag settings\n    new_attrs = old_attrs[:]\n    new_attrs[3] &amp;= ~termios.ICANON  # Disable canonical mode\n\n    # Apply modified lflag settings\n    termios.tcsetattr(fd, termios.TCSANOW, new_attrs)\n\n    try:\n        while True:\n            # Read data with the new local mode settings\n            data = sys.stdin.read(1)\n            print(data, end='', flush=True)\n    finally:\n        # Restore original lflag settings\n        termios.tcsetattr(fd, termios.TCSANOW, old_attrs)\n</code></pre>\n\n<h3>6. <code>tty.getattr</code></h3>\n<ul>\n<li><strong>Description</strong>: Retrieves the current attributes of a given file descriptor.</li>\n<li><strong>Functionality</strong>: Returns a tuple containing the input, output, and control mode flags.</li>\n</ul>\n<pre class=\"codehilite\"><code class=\"language-python\">import tty\n\n# Open a terminal device\nwith open('/dev/tty', 'r+') as fd:\n    # Retrieve the current attributes\n    attrs = tty.tcgetattr(fd)\n\n    print(&quot;Input Mode Flags:&quot;, attrs[tty.IFLAG])\n    print(&quot;Output Mode Flags:&quot;, attrs[tty.OFLAG])\n    print(&quot;Control Mode Flags:&quot;, attrs[tty.CFLAG])\n    print(&quot;Local Mode Flags:&quot;, attrs[tty.LFLAG])\n</code></pre>\n\n<h3>7. <code>tty.setattr</code></h3>\n<ul>\n<li><strong>Description</strong>: Sets the attributes of a given file descriptor.</li>\n<li><strong>Functionality</strong>: Modifies the input, output, and control mode flags for a terminal device.</li>\n</ul>\n<pre class=\"codehilite\"><code class=\"language-python\">import tty\n\n# Open a terminal device\nwith open('/dev/tty', 'r+') as fd:\n    # Get current attributes\n    old_attrs = tty.tcgetattr(fd)\n\n    # Copy the entire old_attrs list to new_attrs\n    new_attrs = old_attrs[:]\n\n    # Modify the input mode flags (first element of the list)\n    new_iflag = new_attrs[0]\n    new_iflag |= tty.VMIN\n    new_iflag |= tty.VTIME\n\n    # Update the first element of new_attrs\n    new_attrs[0] = new_iflag\n\n    # Set the modified attributes\n    tty.tcsetattr(fd, tty.TCSANOW, new_attrs)\n\n    print(&quot;New Input Mode Flags:&quot;, new_iflag)\n</code></pre>\n\n<h3>8. <code>tty.cbreak</code></h3>\n<ul>\n<li><strong>Description</strong>: Enters cbreak mode.</li>\n<li><strong>Functionality</strong>: Disables canonical and echo modes.</li>\n</ul>\n<pre class=\"codehilite\"><code class=\"language-python\">import tty\nimport termios\n\n# Open a terminal device\nwith open('/dev/tty', 'r+') as fd:\n    # Save the original terminal settings\n    original_settings = termios.tcgetattr(fd)\n\n    # Enter cbreak mode\n    tty.setcbreak(fd)\n\n    try:\n        while True:\n            # Read data in cbreak mode\n            data = fd.read(1)\n            print(data, end='', flush=True)\n    finally:\n        # Restore the original terminal settings\n        termios.tcsetattr(fd, termios.TCSADRAIN, original_settings)\n</code></pre>\n\n<h3>9. <code>tty.raw</code></h3>\n<ul>\n<li><strong>Description</strong>: Enters raw mode.</li>\n<li><strong>Functionality</strong>: Disables canonical, echo, and other input processing modes.</li>\n</ul>\n<pre class=\"codehilite\"><code class=\"language-python\">import tty\nimport termios\n\n# Open a terminal device\nwith open('/dev/tty', 'r+') as fd:\n    # Save the original terminal settings\n    original_settings = termios.tcgetattr(fd)\n\n    # Enter raw mode\n    tty.setraw(fd)\n\n    try:\n        while True:\n            # Read data in raw mode\n            data = fd.read(1)\n            print(data, end='', flush=True)\n    finally:\n        # Restore the original terminal settings\n        termios.tcsetattr(fd, termios.TCSADRAIN, original_settings)\n</code></pre>\n\n<h3>10. <code>tty.setraw</code></h3>\n<ul>\n<li><strong>Description</strong>: Sets the terminal to raw mode.</li>\n<li><strong>Functionality</strong>: Modifies the input, output, and control mode flags for raw mode.</li>\n</ul>\n<pre class=\"codehilite\"><code class=\"language-python\">import tty\nimport termios\nimport sys\n\n# Open a terminal device\nwith open('/dev/tty', 'r+') as fd:\n    # Set the terminal to raw mode\n    old_attrs = termios.tcgetattr(fd)\n    new_attrs = termios.tcgetattr(fd)\n    new_attrs[3] = new_attrs[3] &amp; ~(termios.ICANON | termios.ECHO)\n    termios.tcsetattr(fd, termios.TCSANOW, new_attrs)\n\n    try:\n        while True:\n            # Read data in raw mode\n            data = fd.read(1)\n            print(data, end='', flush=True)\n    finally:\n        # Restore original attributes\n        termios.tcsetattr(fd, termios.TCSANOW, old_attrs)\n</code></pre>\n\n<h3>11. <code>tty.reset</code></h3>\n<ul>\n<li><strong>Description</strong>: Resets the terminal to a default state.</li>\n<li><strong>Functionality</strong>: Restores all input, output, and control mode flags to their default values.</li>\n</ul>\n<pre class=\"codehilite\"><code class=\"language-python\">import tty\nimport termios\n\n# Open a terminal device\nwith open('/dev/tty', 'r+') as fd:\n    # Reset the terminal to a default state\n    old_attrs = termios.tcgetattr(fd)\n    new_attrs = old_attrs[:]\n    new_attrs[tty.LFLAG] |= (termios.ICANON | termios.ECHO)\n    termios.tcsetattr(fd, termios.TCSANOW, new_attrs)\n\n    try:\n        while True:\n            # Read data in default state\n            data = fd.read(1)\n            print(data, end='', flush=True)\n    finally:\n        # Restore original attributes\n        termios.tcsetattr(fd, termios.TCSANOW, old_attrs)\n</code></pre>\n\n<p>These examples demonstrate various functionalities of the <code>tty</code> module, including setting and modifying input/output modes, checking if a file descriptor is associated with a terminal, and resetting the terminal to its default state. Each example includes comments for clarity and ensures that the terminal attributes are restored after operations are completed. Additionally, examples are provided to handle both cbreak and raw mode using <code>tty.cbreak()</code> and <code>tty.raw()</code>.</p>"
        }
    ],
    "XML Processing Modules": [
        {
            "filename": "xml.dom - The Document Object Model API.md",
            "content": "<h1>xml.dom - The Document Object Model API</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-creating-an-xml-document\">1. Creating an XML Document</a></li>\n<li><a href=\"#2-parsing-an-xml-string\">2. Parsing an XML String</a></li>\n<li><a href=\"#3-creating-an-xml-element-and-attribute\">3. Creating an XML Element and Attribute</a></li>\n<li><a href=\"#4-iterating-over-elements-and-attributes\">4. Iterating Over Elements and Attributes</a></li>\n<li><a href=\"#5-writing-xml-to-a-file\">5. Writing XML to a File</a></li>\n<li><a href=\"#6-handling-namespaces\">6. Handling Namespaces</a></li>\n<li><a href=\"#7-creating-a-dom-element-from-scratch\">7. Creating a DOM Element from Scratch</a></li>\n<li><a href=\"#8-copying-and-modifying-nodes\">8. Copying and Modifying Nodes</a></li>\n</ol>\n<p>The <code>xml.dom</code> module is part of Python's standard library and provides a convenient way to work with XML documents using the DOM (Document Object Model) approach. This module allows you to create, manipulate, and parse XML data in a structured object-oriented manner.</p>\n<p>Below are comprehensive examples for each functionality available in the <code>xml.dom</code> module:</p>\n<h3>1. Creating an XML Document</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import xml.dom.minidom\n\n# Create a new DOM document\ndoc = xml.dom.minidom.Document()\n\n# Create root element\nroot = doc.createElement(&quot;Root&quot;)\ndoc.appendChild(root)\n\n# Create child elements and add them to the root\nchild1 = doc.createElement(&quot;Child1&quot;)\nchild1.setAttribute(&quot;name&quot;, &quot;Item1&quot;)\nchild2 = doc.createElement(&quot;Child2&quot;)\nchild2.setAttribute(&quot;value&quot;, &quot;Value2&quot;)\n\nroot.appendChild(child1)\nroot.appendChild(child2)\n\n# Print the XML string representation of the document\nxml_str = doc.toprettyxml(indent=&quot;  &quot;)\nprint(xml_str)\n</code></pre>\n\n<h3>2. Parsing an XML String</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import xml.dom.minidom\n\n# Define an XML string\nxml_string = &quot;&quot;&quot;\n&lt;Root&gt;\n    &lt;Child1 name=&quot;Item1&quot;&gt;\n        &lt;Subchild&gt;Content&lt;/Subchild&gt;\n    &lt;/Child1&gt;\n    &lt;Child2 value=&quot;Value2&quot;/&gt;\n&lt;/Root&gt;\n&quot;&quot;&quot;\n\n# Parse the XML string\ndom_doc = xml.dom.minidom.parseString(xml_string)\n\n# Access elements by tag name\nroot_element = dom_doc.documentElement\nchild_elements = root_element.getElementsByTagName(&quot;Child1&quot;)\n\nfor child in child_elements:\n    print(child.getAttribute(&quot;name&quot;), child.firstChild.data)\n</code></pre>\n\n<h3>3. Creating an XML Element and Attribute</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import xml.dom.minidom\n\n# Create a new DOM document\ndoc = xml.dom.minidom.Document()\n\n# Create a root element\nroot = doc.createElement(&quot;Root&quot;)\ndoc.appendChild(root)\n\n# Create a child element with an attribute\nchild_element = doc.createElement(&quot;ChildElement&quot;)\nchild_element.setAttribute(&quot;attr&quot;, &quot;attributeValue&quot;)\n\n# Add the child to the root\nroot.appendChild(child_element)\n\n# Print the XML string representation of the document\nxml_str = doc.toprettyxml(indent=&quot;  &quot;)\nprint(xml_str)\n</code></pre>\n\n<h3>4. Iterating Over Elements and Attributes</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import xml.dom.minidom\n\n# Define an XML string\nxml_string = &quot;&quot;&quot;\n&lt;Root&gt;\n    &lt;Child1 name=&quot;Item1&quot;&gt;\n        &lt;Subchild&gt;Content&lt;/Subchild&gt;\n    &lt;/Child1&gt;\n    &lt;Child2 value=&quot;Value2&quot;/&gt;\n&lt;/Root&gt;\n&quot;&quot;&quot;\n\n# Parse the XML string\ndom_doc = xml.dom.minidom.parseString(xml_string)\n\n# Access elements and attributes by tag name\nroot_element = dom_doc.documentElement\n\n# Iterate over child elements and print their attributes\nchild_elements = root_element.getElementsByTagName(&quot;Child1&quot;)\nfor child in child_elements:\n    for attr_name, attr_value in child.attributes.items():\n        print(f&quot;Attribute: {attr_name}, Value: {attr_value}&quot;)\n\n# Iterate over child elements and print their text content\nfor child in child_elements:\n    print(child.firstChild.data)\n</code></pre>\n\n<h3>5. Writing XML to a File</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import xml.dom.minidom\n\n# Create a new DOM document\ndoc = xml.dom.minidom.Document()\n\n# Create root element\nroot = doc.createElement(&quot;Root&quot;)\ndoc.appendChild(root)\n\n# Create child elements and add them to the root\nchild1 = doc.createElement(&quot;Child1&quot;)\nchild1.setAttribute(&quot;name&quot;, &quot;Item1&quot;)\nchild2 = doc.createElement(&quot;Child2&quot;)\nchild2.setAttribute(&quot;value&quot;, &quot;Value2&quot;)\n\nroot.appendChild(child1)\nroot.appendChild(child2)\n\n# Write the XML document to a file\nwith open(&quot;output.xml&quot;, &quot;w&quot;) as file:\n    file.write(doc.toprettyxml(indent=&quot;  &quot;))\n</code></pre>\n\n<h3>6. Handling Namespaces</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import xml.dom.minidom\n\n# Define an XML string with namespaces\nxml_string = &quot;&quot;&quot;\n&lt;ns1:Root xmlns:ns1=&quot;http://www.example.com/ns1&quot;&gt;\n    &lt;ns1:Child1 name=&quot;Item1&quot;/&gt;\n    &lt;ns2:Child2 value=&quot;Value2&quot; xmlns:ns2=&quot;http://www.example.com/ns2&quot;/&gt;\n&lt;/ns1:Root&gt;\n&quot;&quot;&quot;\n\n# Parse the XML string\ndom_doc = xml.dom.minidom.parseString(xml_string)\n\n# Access elements by namespace\nroot_element = dom_doc.documentElement\nchild_elements = root_element.getElementsByTagNameNS(&quot;http://www.example.com/ns1&quot;, &quot;Child1&quot;)\n\nfor child in child_elements:\n    print(child.getAttribute(&quot;name&quot;))\n\n# Access elements by another namespace\nchild_elements = root_element.getElementsByTagNameNS(&quot;http://www.example.com/ns2&quot;, &quot;Child2&quot;)\nfor child in child_elements:\n    print(child.getAttribute(&quot;value&quot;))\n</code></pre>\n\n<h3>7. Creating a DOM Element from Scratch</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import xml.dom.minidom\n\n# Create a new DOM document\ndoc = xml.dom.minidom.Document()\n\n# Create root element with namespace\nroot = doc.createElementNS(&quot;http://www.example.com/ns1&quot;, &quot;ns1:Root&quot;)\ndoc.appendChild(root)\n\n# Create child elements and add them to the root\nchild1 = doc.createElementNS(&quot;http://www.example.com/ns2&quot;, &quot;ns2:Child1&quot;)\nchild1.setAttributeNS(&quot;http://www.example.com/ns1&quot;, &quot;attr&quot;, &quot;attributeValue&quot;)\n\nroot.appendChild(child1)\n\n# Print the XML string representation of the document\nxml_str = doc.toprettyxml(indent=&quot;  &quot;)\nprint(xml_str)\n</code></pre>\n\n<h3>8. Copying and Modifying Nodes</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import xml.dom.minidom\n\n# Define an XML string\nxml_string = &quot;&quot;&quot;\n&lt;Root&gt;\n    &lt;Child1 name=&quot;Item1&quot;&gt;\n        &lt;Subchild&gt;Content&lt;/Subchild&gt;\n    &lt;/Child1&gt;\n    &lt;Child2 value=&quot;Value2&quot;/&gt;\n&lt;/Root&gt;\n&quot;&quot;&quot;\n\n# Parse the XML string\ndom_doc = xml.dom.minidom.parseString(xml_string)\n\n# Copy a node and modify its text content\nroot_element = dom_doc.documentElement\nchild1 = root_element.getElementsByTagName(&quot;Child1&quot;)[0]\nnew_child1 = child1.cloneNode(deep=True)\nnew_subchild = doc.createElement(&quot;Subchild&quot;)\nnew_subchild.appendChild(doc.createTextNode(&quot;Modified Content&quot;))\nnew_child1.replaceChild(new_subchild, child1.firstChild)\n\n# Print the modified XML string representation of the document\nxml_str = doc.toprettyxml(indent=&quot;  &quot;)\nprint(xml_str)\n</code></pre>\n\n<p>These examples demonstrate various functionalities available in the <code>xml.dom</code> module, including creating and parsing XML documents, handling elements and attributes, working with namespaces, and copying and modifying nodes. Each example is well-documented to help you understand how to use each feature effectively.</p>"
        },
        {
            "filename": "xml.dom.minidom - Minimal DOM implementation.md",
            "content": "<h1>xml.dom.minidom - Minimal DOM implementation</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-parsing-an-xml-document\">1. Parsing an XML Document</a></li>\n<li><a href=\"#2-creating-a-new-xml-document\">2. Creating a New XML Document</a></li>\n<li><a href=\"#3-modifying-an-existing-xml-document\">3. Modifying an Existing XML Document</a></li>\n<li><a href=\"#4-writing-to-a-file\">4. Writing to a File</a></li>\n<li><a href=\"#5-searching-for-elements\">5. Searching for Elements</a></li>\n<li><a href=\"#6-handling-namespaces\">6. Handling Namespaces</a></li>\n<li><a href=\"#7-traversing-the-dom-tree\">7. Traversing the DOM Tree</a></li>\n<li><a href=\"#8-using-xpath-for-querying\">8. Using XPath for Querying</a></li>\n</ol>\n<p>Certainly! Below is a comprehensive list of code examples demonstrating various functionalities of the <code>xml.dom.minidom</code> module, which provides a simple and efficient API for parsing XML documents and creating new ones. Each example includes comments to explain each step.</p>\n<h3>1. Parsing an XML Document</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import xml.dom.minidom as minidom\n\n# Load an XML document from a file\ndoc = minidom.parse('example.xml')\n\n# Accessing elements\nroot_element = doc.documentElement\nprint(&quot;Root Element:&quot;, root_element.tagName)\n\n# Getting child nodes\nchild_nodes = root_element.childNodes\nfor node in child_nodes:\n    if node.nodeType == node.ELEMENT_NODE:\n        print(&quot;Child Node:&quot;, node.tagName)\n\n# Printing the XML string representation\nxml_string = doc.toprettyxml(indent=&quot;  &quot;)\nprint(xml_string)\n</code></pre>\n\n<h3>2. Creating a New XML Document</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import xml.dom.minidom as minidom\n\n# Create a new document object\ndoc = minidom.Document()\n\n# Adding an element to the document\nroot = doc.createElement('root')\ndoc.appendChild(root)\n\n# Creating child elements and adding them to the root\nchild1 = doc.createElement('child1')\nchild2 = doc.createElement('child2')\n\ntext_node = doc.createTextNode(&quot;Hello, World!&quot;)\nchild1.appendChild(text_node)\nroot.appendChild(child1)\nroot.appendChild(child2)\n\n# Printing the XML string representation\nxml_string = doc.toprettyxml(indent=&quot;  &quot;)\nprint(xml_string)\n</code></pre>\n\n<h3>3. Modifying an Existing XML Document</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import xml.dom.minidom as minidom\n\n# Load an existing XML document\ndoc = minidom.parse('example.xml')\n\n# Accessing elements and modifying their content\nroot_element = doc.documentElement\nchild_elements = root_element.getElementsByTagName('child1')\nfor child in child_elements:\n    text_node = child.firstChild\n    text_node.data = &quot;Updated Content&quot;\n\n# Printing the updated XML string representation\nxml_string = doc.toprettyxml(indent=&quot;  &quot;)\nprint(xml_string)\n</code></pre>\n\n<h3>4. Writing to a File</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import xml.dom.minidom as minidom\n\n# Create a new document object\ndoc = minidom.Document()\n\n# Adding elements to the document and saving it to a file\nroot = doc.createElement('root')\ndoc.appendChild(root)\n\nchild1 = doc.createElement('child1')\ntext_node = doc.createTextNode(&quot;Hello, World!&quot;)\nchild1.appendChild(text_node)\nroot.appendChild(child1)\n\nwith open('output.xml', 'w') as file:\n    file.write(doc.toprettyxml(indent=&quot;  &quot;))\n\nprint(&quot;XML saved to output.xml&quot;)\n</code></pre>\n\n<h3>5. Searching for Elements</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import xml.dom.minidom as minidom\n\n# Load an XML document\ndoc = minidom.parse('example.xml')\n\n# Searching for elements by tag name\nchild_elements = doc.getElementsByTagName('child2')\nfor child in child_elements:\n    print(&quot;Found:&quot;, child.tagName)\n\n# Searching for elements by attribute\nattribute_elements = doc.getElementsByTagName('child1')\nfor child in attribute_elements:\n    if child.getAttributeNode('type'):\n        print(&quot;Found with attribute:&quot;, child.tagName)\n</code></pre>\n\n<h3>6. Handling Namespaces</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import xml.dom.minidom as minidom\n\n# Load an XML document with namespaces\ndoc = minidom.parse('example_ns.xml')\n\n# Accessing elements with namespaces\nns_map = {'ns': 'http://example.com/ns'}\nroot_element = doc.documentElement\nchild_elements = root_element.getElementsByTagNameNS(ns_map['ns'], 'child1')\nfor child in child_elements:\n    print(&quot;Found with namespace:&quot;, child.tagName)\n</code></pre>\n\n<h3>7. Traversing the DOM Tree</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import xml.dom.minidom as minidom\n\n# Load an XML document\ndoc = minidom.parse('example.xml')\n\n# Iterating over all elements in the tree\nfor elem in doc.getElementsByTagName('*'):\n    print(&quot;Element:&quot;, elem.tagName)\n</code></pre>\n\n<h3>8. Using XPath for Querying</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import xml.dom.minidom as minidom\n\n# Load an XML document\ndoc = minidom.parse('example.xml')\n\n# Using XPath to query elements\nxpath_result = doc.evaluate('/root/child1', doc, None, minidom.XPathConstants.NODESET)\nfor node in xpath_result:\n    print(&quot;XPath Result:&quot;, node.tagName)\n</code></pre>\n\n<p>These examples cover a range of functionalities provided by the <code>xml.dom.minidom</code> module, from parsing and creating XML documents to modifying them, saving them to files, searching for elements, handling namespaces, traversing the DOM tree, and using XPath. Each example is designed to be clear and self-contained, with comments explaining each step.</p>"
        },
        {
            "filename": "xml.dom.pulldom - Support for building partial DOM trees.md",
            "content": "<h1>xml.dom.pulldom - Support for building partial DOM trees</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-basic-usage-of-pulldom\">Example 1: Basic Usage of pulldom</a></li>\n<li><a href=\"#example-2-parsing-multiple-nodes\">Example 2: Parsing Multiple Nodes</a></li>\n<li><a href=\"#example-3-using-a-callback-function\">Example 3: Using a Callback Function</a></li>\n<li><a href=\"#example-4-parsing-with-namespaces\">Example 4: Parsing with Namespaces</a></li>\n<li><a href=\"#example-5-parsing-and-accessing-attributes\">Example 5: Parsing and Accessing Attributes</a></li>\n<li><a href=\"#example-6-parsing-with-namespaces-and-attributes\">Example 6: Parsing with Namespaces and Attributes</a></li>\n</ol>\n<p>The <code>xml.dom.pulldom</code> module in Python provides a way to parse XML documents without creating a full DOM tree in memory. This is particularly useful when dealing with large XML files or when you only need to access specific parts of the document. Below are comprehensive examples demonstrating various functionalities of the <code>xml.dom.pulldom</code> module.</p>\n<h3>Example 1: Basic Usage of pulldom</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from xml.dom import pulldom\n\n# Create a parser\nparser = pulldom.make_parser()\n\n# Define handlers for different events\nhandler = pulldom.ContentHandler()\nhandler.startElement = lambda name, attrs: print(f&quot;Start Element: {name}, Attributes: {attrs}&quot;)\nhandler.endElement   = lambda name: print(f&quot;End Element: {name}&quot;)\n\n# Parse an XML file\nwith open('example.xml', 'r') as file:\n    for event, node in parser.parse(file):\n        handler.handleEvent(event, node)\n\n# Clear the parser after parsing to avoid memory leaks\nparser.clear()\n</code></pre>\n\n<h3>Example 2: Parsing Multiple Nodes</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from xml.dom import pulldom\n\n# Create a parser\nparser = pulldom.make_parser()\n\n# Define handlers for different events\nhandler = pulldom.ContentHandler()\nhandler.startElement = lambda name, attrs: print(f&quot;Start Element: {name}, Attributes: {attrs}&quot;)\nhandler.endElement   = lambda name: print(f&quot;End Element: {name}&quot;)\n\n# Parse an XML file\nwith open('example.xml', 'r') as file:\n    for event, node in parser.parse(file):\n        handler.handleEvent(event, node)\n\n# Clear the parser after parsing to avoid memory leaks\nparser.clear()\n</code></pre>\n\n<h3>Example 3: Using a Callback Function</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from xml.dom import pulldom\n\ndef handle_event(event, node):\n    if event == pulldom.START_ELEMENT:\n        print(f&quot;Start Element: {node.nodeName}, Attributes: {node.attributes}&quot;)\n    elif event == pulldom.END_ELEMENT:\n        print(f&quot;End Element: {node.nodeName}&quot;)\n\n# Create a parser\nparser = pulldom.make_parser()\n\n# Parse an XML file\nwith open('example.xml', 'r') as file:\n    for event, node in parser.parse(file):\n        handle_event(event, node)\n\n# Clear the parser after parsing to avoid memory leaks\nparser.clear()\n</code></pre>\n\n<h3>Example 4: Parsing with Namespaces</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from xml.dom import pulldom\n\ndef handle_event(event, node):\n    if event == pulldom.START_ELEMENT:\n        print(f&quot;Start Element: {node.nodeName}, Attributes: {node.attributes}&quot;)\n        for name, value in node.getNamespaceMap().items():\n            print(f&quot;Namespace: {name} -&gt; {value}&quot;)\n    elif event == pulldom.END_ELEMENT:\n        print(f&quot;End Element: {node.nodeName}&quot;)\n\n# Create a parser\nparser = pulldom.make_parser()\n\n# Parse an XML file with namespaces\nwith open('example.xml', 'r') as file:\n    for event, node in parser.parse(file):\n        handle_event(event, node)\n\n# Clear the parser after parsing to avoid memory leaks\nparser.clear()\n</code></pre>\n\n<h3>Example 5: Parsing and Accessing Attributes</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from xml.dom import pulldom\n\ndef handle_event(event, node):\n    if event == pulldom.START_ELEMENT:\n        attributes = {attr.nodeName: attr.nodeValue for attr in node.attributes}\n        print(f&quot;Start Element: {node.nodeName}, Attributes: {attributes}&quot;)\n    elif event == pulldom.END_ELEMENT:\n        print(f&quot;End Element: {node.nodeName}&quot;)\n\n# Create a parser\nparser = pulldom.make_parser()\n\n# Parse an XML file\nwith open('example.xml', 'r') as file:\n    for event, node in parser.parse(file):\n        handle_event(event, node)\n\n# Clear the parser after parsing to avoid memory leaks\nparser.clear()\n</code></pre>\n\n<h3>Example 6: Parsing with Namespaces and Attributes</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from xml.dom import pulldom\n\ndef handle_event(event, node):\n    if event == pulldom.START_ELEMENT:\n        attributes = {attr.nodeName: attr.nodeValue for attr in node.attributes}\n        print(f&quot;Start Element: {node.nodeName}, Attributes: {attributes}&quot;)\n        for name, value in node.getNamespaceMap().items():\n            print(f&quot;Namespace: {name} -&gt; {value}&quot;)\n    elif event == pulldom.END_ELEMENT:\n        print(f&quot;End Element: {node.nodeName}&quot;)\n\n# Create a parser\nparser = pulldom.make_parser()\n\n# Parse an XML file with namespaces and attributes\nwith open('example.xml', 'r') as file:\n    for event, node in parser.parse(file):\n        handle_event(event, node)\n\n# Clear the parser after parsing to avoid memory leaks\nparser.clear()\n</code></pre>\n\n<p>These examples demonstrate various ways to use the <code>xml.dom.pulldom</code> module to parse XML documents and handle events such as start and end elements. Each example includes comments explaining the purpose of each part of the code, making it easy for readers to understand and modify as needed.</p>"
        },
        {
            "filename": "xml.etree.ElementTree - The ElementTree XML API.md",
            "content": "<h1>xml.etree.ElementTree - The ElementTree XML API</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-creating-an-element-tree\">1. Creating an Element Tree</a></li>\n<li><a href=\"#2-parsing-an-xml-file\">2. Parsing an XML File</a></li>\n<li><a href=\"#3-creating-an-element-and-adding-attributes\">3. Creating an Element and Adding Attributes</a></li>\n<li><a href=\"#4-adding-elements-and-text-to-existing-elements\">4. Adding Elements and Text to Existing Elements</a></li>\n<li><a href=\"#5-iterating-over-elements-with-specific-tags\">5. Iterating Over Elements with Specific Tags</a></li>\n<li><a href=\"#6-removing-elements-and-text\">6. Removing Elements and Text</a></li>\n<li><a href=\"#7-searching-for-elements-using-xpath\">7. Searching for Elements Using XPath</a></li>\n<li><a href=\"#8-writing-elements-to-a-string\">8. Writing Elements to a String</a></li>\n</ol>\n<p>The <code>xml.etree.ElementTree</code> is a lightweight and efficient library in Python used for parsing and creating XML data. Below are comprehensive and well-documented code examples covering various functionalities of the <code>ElementTree</code> module:</p>\n<h3>1. Creating an Element Tree</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from xml.etree import ElementTree as ET\n\n# Create the root element\nroot = ET.Element(&quot;bookstore&quot;)\n\n# Add child elements to the root\nbook = ET.SubElement(root, &quot;book&quot;, ISBN=&quot;978-3-16-148410-0&quot;)\ntitle = ET.SubElement(book, &quot;title&quot;)\ntitle.text = &quot;XML Developer's Guide&quot;\nauthor = ET.SubElement(book, &quot;author&quot;)\nauthor.text = &quot;David Beazley&quot;\n\n# Create a new ElementTree object\ntree = ET.ElementTree(root)\n\n# Write the tree to an XML file\ntree.write(&quot;bookstore.xml&quot;, encoding=&quot;utf-8&quot;, xml_declaration=True)\n</code></pre>\n\n<h3>2. Parsing an XML File</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from xml.etree import ElementTree as ET\n\n# Parse the XML file\ntree = ET.parse('bookstore.xml')\n\n# Get the root element of the tree\nroot = tree.getroot()\n\n# Iterate over each book in the bookstore\nfor book in root.findall(&quot;book&quot;):\n    isbn = book.attrib[&quot;ISBN&quot;]\n    title = book.find(&quot;title&quot;).text\n    author = book.find(&quot;author&quot;).text\n\n    print(f&quot;ISBN: {isbn}, Title: {title}, Author: {author}&quot;)\n</code></pre>\n\n<h3>3. Creating an Element and Adding Attributes</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from xml.etree import ElementTree as ET\n\n# Create a new element with attributes\nperson = ET.Element(&quot;person&quot;, first=&quot;John&quot;, last=&quot;Doe&quot;)\n\n# Add text to the element\nperson.text = &quot;This is John Doe.&quot;\n\n# Write the element to an XML file\ntree = ET.ElementTree(person)\ntree.write(&quot;person.xml&quot;)\n</code></pre>\n\n<h3>4. Adding Elements and Text to Existing Elements</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from xml.etree import ElementTree as ET\n\n# Parse an existing XML file\ntree = ET.parse('bookstore.xml')\n\n# Get the root element of the tree\nroot = tree.getroot()\n\n# Create a new book element\nnew_book = ET.Element(&quot;book&quot;, ISBN=&quot;978-3-16-148420-3&quot;)\n\n# Add child elements to the new book\ntitle = ET.SubElement(new_book, &quot;title&quot;)\ntitle.text = &quot;Learning XML&quot;\n\nauthor = ET.SubElement(new_book, &quot;author&quot;)\nauthor.text = &quot;James Clarke&quot;\n\n# Append the new book element to the root\nroot.append(new_book)\n\n# Write the updated tree back to an XML file\ntree.write(&quot;updated-bookstore.xml&quot;, encoding=&quot;utf-8&quot;, xml_declaration=True)\n</code></pre>\n\n<h3>5. Iterating Over Elements with Specific Tags</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from xml.etree import ElementTree as ET\n\n# Parse an XML file\ntree = ET.parse('bookstore.xml')\n\n# Get the root element of the tree\nroot = tree.getroot()\n\n# Iterate over each book title in the bookstore\nfor title in root.findall(&quot;.//title&quot;):\n    print(title.text)\n</code></pre>\n\n<h3>6. Removing Elements and Text</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from xml.etree import ElementTree as ET\n\n# Parse an existing XML file\ntree = ET.parse('bookstore.xml')\n\n# Get the root element of the tree\nroot = tree.getroot()\n\n# Find a specific book by ISBN and remove it\nfor book in root.findall(&quot;book&quot;):\n    if book.attrib[&quot;ISBN&quot;] == &quot;978-3-16-148420-3&quot;:\n        root.remove(book)\n\n# Write the updated tree back to an XML file\ntree.write(&quot;updated-bookstore.xml&quot;, encoding=&quot;utf-8&quot;, xml_declaration=True)\n</code></pre>\n\n<h3>7. Searching for Elements Using XPath</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from xml.etree import ElementTree as ET\n\n# Parse an XML file\ntree = ET.parse('bookstore.xml')\n\n# Use XPath to find all book elements with a specific author\nbooks_by_james = tree.findall(&quot;.//book[author='James Clarke']&quot;)\n\n# Iterate over the found books and print their titles\nfor book in books_by_james:\n    title = book.find(&quot;title&quot;).text\n    print(f&quot;Title: {title}&quot;)\n</code></pre>\n\n<h3>8. Writing Elements to a String</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from xml.etree import ElementTree as ET\n\n# Create an element tree\nroot = ET.Element(&quot;bookstore&quot;)\nET.SubElement(root, &quot;book&quot;, ISBN=&quot;978-3-16-148420-3&quot;).text = &quot;Learning XML&quot;\n\n# Convert the tree to a string\nxml_string = ET.tostring(root, encoding=&quot;unicode&quot;)\n\nprint(xml_string)\n</code></pre>\n\n<p>These examples demonstrate various aspects of working with XML using <code>ElementTree</code>, from creating and parsing documents to modifying and searching for elements. Each example includes comments explaining key steps and best practices for handling XML data in Python.</p>"
        },
        {
            "filename": "xml.parsers.expat - Fast XML parsing using Expat.md",
            "content": "<h1>xml.parsers.expat - Fast XML parsing using Expat</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-basic-parsing-with-callbacks\">Example 1: Basic Parsing with Callbacks</a></li>\n<li><a href=\"#example-2-parsing-xml-from-a-file\">Example 2: Parsing XML from a File</a></li>\n<li><a href=\"#example-3-parsing-with-attributes-and-namespaces\">Example 3: Parsing with Attributes and Namespaces</a></li>\n<li><a href=\"#example-4-error-handling\">Example 4: Error Handling</a></li>\n<li><a href=\"#example-5-parsing-with-entity-references\">Example 5: Parsing with Entity References</a></li>\n<li><a href=\"#example-6-parsing-with-encoding\">Example 6: Parsing with Encoding</a></li>\n</ol>\n<p>Below are comprehensive code examples for various functionalities of the <code>xml.parsers.expat</code> module, which is a fast and simple parser for XML documents in Python.</p>\n<h3>Example 1: Basic Parsing with Callbacks</h3>\n<p>This example demonstrates how to use callbacks to handle elements and attributes during parsing.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import xml.parsers.expat\n\n# Define callback functions for handling start tags, end tags, and character data\ndef start_element(name, attrs):\n    print(f&quot;Start Element: {name}&quot;)\n    for attr_name, attr_value in attrs.items():\n        print(f&quot;  Attribute: {attr_name} = {attr_value}&quot;)\n\ndef end_element(name):\n    print(f&quot;End Element: {name}&quot;)\n\ndef characters(data):\n    print(f&quot;Characters: {data.strip()}&quot;)\n\n# Create a parser object\nparser = xml.parsers.expat.ParserCreate()\n\n# Set the callback functions\nparser.StartElementHandler = start_element\nparser.EndElementHandler = end_element\nparser.CharacterDataHandler = characters\n\n# Parse an XML string\nxml_data = &quot;&quot;&quot;\n&lt;bookstore&gt;\n    &lt;book category=&quot;cooking&quot;&gt;\n        &lt;title lang=&quot;en&quot;&gt;Everyday Italian&lt;/title&gt;\n        &lt;author&gt;Giada De Laurentis&lt;/author&gt;\n        &lt;year&gt;2005&lt;/year&gt;\n        &lt;price&gt;13.50&lt;/price&gt;\n    &lt;/book&gt;\n    &lt;book category=&quot;children&quot;&gt;\n        &lt;title lang=&quot;en&quot;&gt;Harry Potter and the Sorcerer's Stone&lt;/title&gt;\n        &lt;author&gt;J.K. Rowling&lt;/author&gt;\n        &lt;year&gt;2005&lt;/year&gt;\n        &lt;price&gt;29.99&lt;/price&gt;\n    &lt;/book&gt;\n&lt;/bookstore&gt;\n&quot;&quot;&quot;\n\nparser.Parse(xml_data)\n\n# Call end_element for any remaining unclosed tags\nparser.Parse('', True)\n</code></pre>\n\n<h3>Example 2: Parsing XML from a File</h3>\n<p>This example shows how to parse an XML file using the <code>xml.parsers.expat</code> module.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import xml.parsers.expat\n\ndef start_element(name, attrs):\n    print(f&quot;Start Element: {name}&quot;)\n    for attr_name, attr_value in attrs.items():\n        print(f&quot;  Attribute: {attr_name} = {attr_value}&quot;)\n\ndef end_element(name):\n    print(f&quot;End Element: {name}&quot;)\n\ndef characters(data):\n    print(f&quot;Characters: {data.strip()}&quot;)\n\n# Create a parser object\nparser = xml.parsers.expat.ParserCreate()\n\n# Set the callback functions\nparser.StartElementHandler = start_element\nparser.EndElementHandler = end_element\nparser.CharacterDataHandler = characters\n\n# Parse an XML file\nwith open('books.xml', 'r') as file:\n    parser.ParseFile(file)\n\n# Call end_element for any remaining unclosed tags\nparser.Parse('', True)\n</code></pre>\n\n<h3>Example 3: Parsing with Attributes and Namespaces</h3>\n<p>This example demonstrates how to handle attributes and namespaces during parsing.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import xml.parsers.expat\n\ndef start_element(name, attrs):\n    print(f&quot;Start Element: {name}&quot;)\n    for attr_name, attr_value in attrs.items():\n        print(f&quot;  Attribute: {attr_name} = {attr_value}&quot;)\n\ndef end_element(name):\n    print(f&quot;End Element: {name}&quot;)\n\ndef characters(data):\n    print(f&quot;Characters: {data.strip()}&quot;)\n\n# Create a parser object\nparser = xml.parsers.expat.ParserCreate()\n\n# Set the callback functions\nparser.StartElementHandler = start_element\nparser.EndElementHandler = end_element\nparser.CharacterDataHandler = characters\n\n# Parse an XML string with namespaces\nxml_data = &quot;&quot;&quot;\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;bookstore xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n           xsi:schemaLocation=&quot;http://www.example.com/books\n                               books.xsd&quot;&gt;\n    &lt;book category=&quot;cooking&quot;&gt;\n        &lt;title lang=&quot;en&quot;&gt;Everyday Italian&lt;/title&gt;\n        &lt;author&gt;Giada De Laurentis&lt;/author&gt;\n        &lt;year&gt;2005&lt;/year&gt;\n        &lt;price&gt;13.50&lt;/price&gt;\n    &lt;/book&gt;\n    &lt;book category=&quot;children&quot; xmlns:child=&quot;http://www.example.com/children&quot;&gt;\n        &lt;title lang=&quot;en&quot;&gt;Harry Potter and the Sorcerer's Stone&lt;/title&gt;\n        &lt;author&gt;J.K. Rowling&lt;/author&gt;\n        &lt;year&gt;2005&lt;/year&gt;\n        &lt;price&gt;29.99&lt;/price&gt;\n    &lt;/book&gt;\n&lt;/bookstore&gt;\n&quot;&quot;&quot;\n\nparser.Parse(xml_data)\n\n# Call end_element for any remaining unclosed tags\nparser.Parse('', True)\n</code></pre>\n\n<h3>Example 4: Error Handling</h3>\n<p>This example demonstrates how to handle parsing errors gracefully.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import xml.parsers.expat\n\ndef start_element(name, attrs):\n    print(f&quot;Start Element: {name}&quot;)\n    for attr_name, attr_value in attrs.items():\n        print(f&quot;  Attribute: {attr_name} = {attr_value}&quot;)\n\ndef end_element(name):\n    print(f&quot;End Element: {name}&quot;)\n\ndef characters(data):\n    print(f&quot;Characters: {data.strip()}&quot;)\n\n# Create a parser object\nparser = xml.parsers.expat.ParserCreate()\n\n# Set the callback functions\nparser.StartElementHandler = start_element\nparser.EndElementHandler = end_element\nparser.CharacterDataHandler = characters\n\n# Parse an XML string with a syntax error\nxml_data = &quot;&quot;&quot;\n&lt;bookstore&gt;\n    &lt;book category=&quot;cooking&quot;&gt;\n        &lt;title lang=&quot;en&quot;&gt;Everyday Italian&lt;/title&gt;\n        &lt;author&gt;Giada De Laurentis&lt;/author&gt;\n        &lt;year&gt;2005&lt;/year&gt;\n        &lt;price&gt;13.50&lt;/price&gt;\n&lt;/bookstore&gt;\n&quot;&quot;&quot;\n\ntry:\n    parser.Parse(xml_data)\nexcept xml.parsers.expat.ExpatError as e:\n    print(f&quot;Error parsing XML: {e}&quot;)\n\n# Call end_element for any remaining unclosed tags\nparser.Parse('', True)\n</code></pre>\n\n<h3>Example 5: Parsing with Entity References</h3>\n<p>This example demonstrates how to handle entity references during parsing.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import xml.parsers.expat\n\ndef start_element(name, attrs):\n    print(f&quot;Start Element: {name}&quot;)\n    for attr_name, attr_value in attrs.items():\n        print(f&quot;  Attribute: {attr_name} = {attr_value}&quot;)\n\ndef end_element(name):\n    print(f&quot;End Element: {name}&quot;)\n\ndef characters(data):\n    print(f&quot;Characters: {data.strip()}&quot;)\n\n# Create a parser object\nparser = xml.parsers.expat.ParserCreate()\n\n# Set the callback functions\nparser.StartElementHandler = start_element\nparser.EndElementHandler = end_element\nparser.CharacterDataHandler = characters\n\n# Parse an XML string with entity references\nxml_data = &quot;&quot;&quot;\n&lt;bookstore&gt;\n    &lt;book category=&quot;cooking&quot;&gt;\n        &lt;title lang=&quot;en&quot;&gt;Everyday Italian &amp;amp; Pasta&lt;/title&gt;\n        &lt;author&gt;Giada De Laurentis&lt;/author&gt;\n        &lt;year&gt;2005&lt;/year&gt;\n        &lt;price&gt;13.50&lt;/price&gt;\n    &lt;/book&gt;\n&lt;/bookstore&gt;\n&quot;&quot;&quot;\n\nparser.Parse(xml_data)\n\n# Call end_element for any remaining unclosed tags\nparser.Parse('', True)\n</code></pre>\n\n<h3>Example 6: Parsing with Encoding</h3>\n<p>This example demonstrates how to handle different character encodings during parsing.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">import xml.parsers.expat\n\ndef start_element(name, attrs):\n    print(f&quot;Start Element: {name}&quot;)\n    for attr_name, attr_value in attrs.items():\n        print(f&quot;  Attribute: {attr_name} = {attr_value}&quot;)\n\ndef end_element(name):\n    print(f&quot;End Element: {name}&quot;)\n\ndef characters(data):\n    print(f&quot;Characters: {data.strip()}&quot;)\n\n# Create a parser object\nparser = xml.parsers.expat.ParserCreate('iso-8859-1', 'replace')\n\n# Set the callback functions\nparser.StartElementHandler = start_element\nparser.EndElementHandler = end_element\nparser.CharacterDataHandler = characters\n\n# Parse an XML string with ISO-8859-1 encoding and replace unsupported characters\nxml_data = &quot;&quot;&quot;\n&lt;bookstore&gt;\n    &lt;book category=&quot;cooking&quot;&gt;\n        &lt;title lang=&quot;en&quot;&gt;\u00c1rea de cocina&lt;/title&gt;\n        &lt;author&gt;Giada De Laurentis&lt;/author&gt;\n        &lt;year&gt;2005&lt;/year&gt;\n        &lt;price&gt;13.50&lt;/price&gt;\n    &lt;/book&gt;\n&lt;/bookstore&gt;\n&quot;&quot;&quot;\n\nparser.Parse(xml_data)\n\n# Call end_element for any remaining unclosed tags\nparser.Parse('', True)\n</code></pre>\n\n<p>These examples cover various aspects of using the <code>xml.parsers.expat</code> module, including basic parsing with callbacks, parsing from files, handling attributes and namespaces, error handling, entity references, and different character encodings. You can include these in your documentation to provide a comprehensive understanding of the module's capabilities.</p>"
        },
        {
            "filename": "xml.sax - Support for SAX2 parsers.md",
            "content": "<h1>xml.sax - Support for SAX2 parsers</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-basic-parsing\">Example 1: Basic Parsing</a></li>\n<li><a href=\"#example-2-parsing-with-namespaces\">Example 2: Parsing with Namespaces</a></li>\n<li><a href=\"#example-3-using-sax-to-validate-xml\">Example 3: Using SAX to Validate XML</a></li>\n<li><a href=\"#example-4-using-sax-for-xpath-queries\">Example 4: Using SAX for XPath Queries</a></li>\n<li><a href=\"#example-5-using-sax-for-namespace-processing\">Example 5: Using SAX for Namespace Processing</a></li>\n<li><a href=\"#explanation\">Explanation</a></li>\n</ol>\n<p>The <code>xml.sax</code> module is part of Python's standard library and provides a simple API for parsing XML data using the Simple API for XML (SAX) parser. The SAX parser is an event-driven XML parser that reads XML content in chunks, allowing you to process elements as they are encountered rather than waiting for the entire document to be parsed.</p>\n<p>Here are some comprehensive code examples that demonstrate various functionalities of the <code>xml.sax</code> module:</p>\n<h3>Example 1: Basic Parsing</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import xml.sax\nfrom xml.sax.handler import ContentHandler\n\n# Define a handler class to handle parsing events\nclass SimpleXMLHandler(ContentHandler):\n    def startElement(self, name, attrs):\n        print(f&quot;Start Element: {name}, Attributes: {attrs}&quot;)\n\n    def endElement(self, name):\n        print(f&quot;End Element: {name}&quot;)\n\n    def characters(self, content):\n        if content.strip():\n            print(f&quot;Characters: {content.strip()}&quot;)\n\n# Create an instance of the handler\nhandler = SimpleXMLHandler()\n\n# Parse an XML file using the handler\nparser = xml.sax.make_parser()\nparser.setContentHandler(handler)\nxml_file_path = &quot;example.xml&quot;\ntry:\n    parser.parse(xml_file_path)\nexcept Exception as e:\n    print(f&quot;Error parsing XML: {e}&quot;)\n</code></pre>\n\n<h3>Example 2: Parsing with Namespaces</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import xml.sax\nfrom xml.sax.handler import ContentHandler\n\nclass NamespacedXMLHandler(ContentHandler):\n    def startElementNS(self, name, qname, attrs):\n        # The name is the local part of the element name, and qname is the qualified (namespace) name\n        print(f&quot;Start Element: {qname}, Attributes: {attrs}&quot;)\n\n    def endElementNS(self, name, qname):\n        print(f&quot;End Element: {qname}&quot;)\n\n    def characters(self, content):\n        if content.strip():\n            print(f&quot;Characters: {content.strip()}&quot;)\n\nhandler = NamespacedXMLHandler()\nparser = xml.sax.make_parser()\nparser.setContentHandler(handler)\n\n# Parse an XML file with namespaces\nxml_file_path = &quot;example_ns.xml&quot;\ntry:\n    parser.parse(xml_file_path)\nexcept Exception as e:\n    print(f&quot;Error parsing XML: {e}&quot;)\n</code></pre>\n\n<h3>Example 3: Using SAX to Validate XML</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import xml.sax.handler\nfrom xml.sax import make_parser\nfrom xml.sax.expatreader import ExpatParserFactory\n\nclass ValidationHandler(xml.sax.handler.ContentHandler):\n    def error(self, msg):\n        print(f&quot;Error: {msg}&quot;)\n    def fatalError(self, msg):\n        print(f&quot;Fatal Error: {msg}&quot;)\n\nhandler = ValidationHandler()\nparser_factory = ExpatParserFactory()\nparser = parser_factory.create_parser()\n\n# Enable validation\nparser.setFeature(xml.sax.handler.feature_validation, True)\n\n# Set the error handler\nparser.setErrorHandler(handler)\n\n# Parse an XML file with validation\nxml_file_path = &quot;example_valid.xml&quot;\ntry:\n    parser.parse(xml_file_path)\nexcept Exception as e:\n    print(f&quot;Error parsing XML: {e}&quot;)\n</code></pre>\n\n<h3>Example 4: Using SAX for XPath Queries</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import xml.sax.handler\nfrom xml.sax import make_parser\nfrom xml.dom.minidom import parseString\nfrom xml.xpath import XPath, XPathException\n\nclass XPathHandler(ContentHandler):\n    def __init__(self, xpath_query):\n        self.xpath_query = xpath_query\n        self.result = []\n\n    def startElement(self, name, attrs):\n        pass\n\n    def endElement(self, name):\n        pass\n\n    def characters(self, content):\n        if content.strip():\n            self.result.append(content)\n\n    def processXPathQuery(self, xml_data):\n        try:\n            dom = parseString(xml_data)\n            xpath = XPath(self.xpath_query)\n            nodes = xpath.evaluate(dom)\n            for node in nodes:\n                print(f&quot;Node: {node.toxml()}&quot;)\n        except XPathException as e:\n            print(f&quot;XPath error: {e}&quot;)\n\nhandler = XPathHandler(&quot;//element[@attribute='value']&quot;)\nparser = make_parser()\nparser.setContentHandler(handler)\n\n# Parse an XML file and process the XPath query\nxml_file_path = &quot;example_xpath.xml&quot;\ntry:\n    parser.parse(xml_file_path)\nexcept Exception as e:\n    print(f&quot;Error parsing XML: {e}&quot;)\n</code></pre>\n\n<h3>Example 5: Using SAX for Namespace Processing</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import xml.sax.handler\nfrom xml.sax import make_parser\nfrom xml.dom.minidom import parseString\nfrom xml.namespace import Namespace\n\nclass NamespacesHandler(ContentHandler):\n    def __init__(self, namespace_uri):\n        self.namespace = Namespace(namespace_uri)\n\n    def startElementNS(self, name, qname, attrs):\n        # Extracting the local part of the element name and converting it to a full QName\n        local_name = name[0]\n        prefix = self.namespace.prefix(local_name)\n        if prefix:\n            qualified_name = f&quot;{prefix}:{local_name}&quot;\n        else:\n            qualified_name = local_name\n        print(f&quot;Start Element: {qualified_name}, Attributes: {attrs}&quot;)\n\n    def endElementNS(self, name, qname):\n        # Extracting the local part of the element name and converting it to a full QName\n        local_name = name[0]\n        prefix = self.namespace.prefix(local_name)\n        if prefix:\n            qualified_name = f&quot;{prefix}:{local_name}&quot;\n        else:\n            qualified_name = local_name\n        print(f&quot;End Element: {qualified_name}&quot;)\n\n    def characters(self, content):\n        if content.strip():\n            print(f&quot;Characters: {content.strip()}&quot;)\n\nhandler = NamespacesHandler(&quot;http://example.com&quot;)\nparser = make_parser()\nparser.setContentHandler(handler)\n\n# Parse an XML file with namespaces\nxml_file_path = &quot;example_ns.xml&quot;\ntry:\n    parser.parse(xml_file_path)\nexcept Exception as e:\n    print(f&quot;Error parsing XML: {e}&quot;)\n</code></pre>\n\n<h3>Explanation</h3>\n<ul>\n<li>\n<p><strong>ContentHandler</strong>: This class is used to handle events during the parsing process. It provides methods like <code>startElement</code>, <code>endElement</code>, and <code>characters</code> which are called when the parser encounters an element start, end, or character data, respectively.</p>\n</li>\n<li>\n<p><strong>make_parser</strong>: This function creates a new SAX parser instance.</p>\n</li>\n<li>\n<p><strong>Namespace Handling</strong>: The <code>Namespace</code> class is used to handle namespace prefixes for better readability of element names.</p>\n</li>\n</ul>\n<p>These examples demonstrate how to use various features of the <code>xml.sax</code> module to parse XML data in Python. Each example includes comments explaining the purpose of each part of the code, making it easy to understand and maintain.</p>"
        },
        {
            "filename": "xml.sax.handler - Base classes for SAX handlers.md",
            "content": "<h1>xml.sax.handler - Base classes for SAX handlers</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#example-1-implementing-a-basic-sax-handler\">Example 1: Implementing a Basic SAX Handler</a></li>\n<li><a href=\"#example-2-handling-namespace-events\">Example 2: Handling Namespace Events</a></li>\n<li><a href=\"#example-3-implementing-an-errorhandler\">Example 3: Implementing an ErrorHandler</a></li>\n<li><a href=\"#example-4-handling-xml-processing-instructions\">Example 4: Handling XML Processing Instructions</a></li>\n<li><a href=\"#example-5-using-namespaceresolver\">Example 5: Using NamespaceResolver</a></li>\n</ol>\n<p>The <code>xml.sax.handler</code> module is part of the Python Standard Library's XML parsing capabilities, providing a foundation for writing event-driven parsers using the Simple API for XML (SAX). This module includes several base classes and interfaces that allow you to define custom behavior when parsing an XML document. Below are comprehensive code examples demonstrating various functionalities in this module.</p>\n<h3>Example 1: Implementing a Basic SAX Handler</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import xml.sax.handler as sax_handler\n\nclass SimpleContentHandler(sax_handler.ContentHandler):\n    def __init__(self):\n        self.text = []\n\n    def characters(self, data):\n        # This method is called for each chunk of text found in the XML document.\n        self.text.append(data)\n\n    def startElement(self, name, attrs):\n        # This method is called when an element starts.\n        print(f&quot;Start Element: {name}, Attributes: {attrs}&quot;)\n\n    def endElement(self, name):\n        # This method is called when an element ends.\n        print(f&quot;End Element: {name}&quot;)\n        # Join the collected text and print it\n        if self.text:\n            print(&quot;Text:&quot;, ''.join(self.text))\n            self.text = []\n\n# Example usage\nif __name__ == &quot;__main__&quot;:\n    xml_data = &quot;&quot;&quot;\n    &lt;book&gt;\n        &lt;title&gt;Python Programming&lt;/title&gt;\n        &lt;author&gt;Sue Snellings&lt;/author&gt;\n        &lt;year&gt;2021&lt;/year&gt;\n    &lt;/book&gt;\n    &quot;&quot;&quot;\n\n    handler = SimpleContentHandler()\n    sax_handler.parseString(xml_data, handler)\n</code></pre>\n\n<h3>Example 2: Handling Namespace Events</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import xml.sax.handler as sax_handler\n\nclass NamespacedHandler(sax_handler.ContentHandler):\n    def __init__(self):\n        self.namespaces = {}\n\n    def startElementNS(self, name, qname, attrs):\n        # This method is called when an element starts, including namespace information.\n        prefix, local_name = name\n        print(f&quot;Start Element with Namespace: {prefix}:{local_name}, Attributes: {attrs}&quot;)\n        if prefix:\n            self.namespaces[local_name] = f&quot;{prefix}:{qname}&quot;\n\n    def endElementNS(self, name, qname):\n        # This method is called when an element ends.\n        prefix, local_name = name\n        print(f&quot;End Element with Namespace: {prefix}:{local_name}&quot;)\n\n# Example usage\nif __name__ == &quot;__main__&quot;:\n    xml_data = &quot;&quot;&quot;\n    &lt;book xmlns:bk=&quot;http://example.com/book&quot;&gt;\n        &lt;bk:title&gt;Python Programming&lt;/bk:title&gt;\n        &lt;bk:author&gt;Sue Snellings&lt;/bk:author&gt;\n    &lt;/book&gt;\n    &quot;&quot;&quot;\n\n    handler = NamespacedHandler()\n    sax_handler.parseString(xml_data, handler)\n</code></pre>\n\n<h3>Example 3: Implementing an ErrorHandler</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import xml.sax.handler as sax_handler\n\nclass BasicErrorHandler(sax_handler.ErrorHandler):\n    def error(self, exception):\n        # This method is called for each parsing error.\n        print(f&quot;Error: {exception}&quot;)\n\n    def fatalError(self, exception):\n        # This method is called for each fatal parsing error.\n        print(f&quot;Fatal Error: {exception}&quot;)\n        # Exit the program\n        import sys\n        sys.exit(1)\n\n# Example usage\nif __name__ == &quot;__main__&quot;:\n    xml_data = &quot;&quot;&quot;\n    &lt;book&gt;\n        &lt;title&gt;Python Programming&lt;/title&gt;\n        &lt;author&gt;Sue Snellings&lt;/author&gt;\n        &lt;/book&gt;\n    &quot;&quot;&quot;\n\n    handler = BasicErrorHandler()\n    sax_handler.parseString(xml_data, handler)\n</code></pre>\n\n<h3>Example 4: Handling XML Processing Instructions</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import xml.sax.handler as sax_handler\n\nclass PIHandler(sax_handler.ContentHandler):\n    def processingInstruction(self, target, data):\n        # This method is called for each XML processing instruction found in the document.\n        print(f&quot;Processing Instruction: Target={target}, Data={data}&quot;)\n\n# Example usage\nif __name__ == &quot;__main__&quot;:\n    xml_data = &quot;&quot;&quot;\n    &lt;?xml version=&quot;1.0&quot;?&gt;\n    &lt;book&gt;\n        &lt;title&gt;Python Programming&lt;/title&gt;\n        &lt;!-- This is a comment --&gt;\n        &lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;style.xsl&quot;?&gt;\n        &lt;/book&gt;\n    &quot;&quot;&quot;\n\n    handler = PIHandler()\n    sax_handler.parseString(xml_data, handler)\n</code></pre>\n\n<h3>Example 5: Using NamespaceResolver</h3>\n<pre class=\"codehilite\"><code class=\"language-python\">import xml.sax.handler as sax_handler\n\nclass CustomNamespaceResolver(sax_handler.NamespaceResolver):\n    def getPrefix(self, uri):\n        # This method is called to resolve a namespace URI.\n        if uri == 'http://example.com/book':\n            return 'bk'\n        else:\n            return None\n\n# Example usage\nif __name__ == &quot;__main__&quot;:\n    xml_data = &quot;&quot;&quot;\n    &lt;book xmlns:bk=&quot;http://example.com/book&quot;&gt;\n        &lt;bk:title&gt;Python Programming&lt;/bk:title&gt;\n        &lt;bk:author&gt;Sue Snellings&lt;/bk:author&gt;\n    &lt;/book&gt;\n    &quot;&quot;&quot;\n\n    resolver = CustomNamespaceResolver()\n    handler = sax_handler.ContentHandler()\n    handler.setNamespaceResolver(resolver)\n    sax_handler.parseString(xml_data, handler)\n</code></pre>\n\n<p>These examples demonstrate how to implement various handlers using the <code>xml.sax.handler</code> module. Each example covers a specific functionality and provides clear instructions on how to use it effectively.</p>"
        },
        {
            "filename": "xml.sax.saxutils - SAX Utilities.md",
            "content": "<h1>xml.sax.saxutils - SAX Utilities</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-escape-characters-in-xml\">1. <strong>Escape Characters in XML</strong></a></li>\n<li><a href=\"#2-unescape-characters-in-xml\">2. <strong>Unescape Characters in XML</strong></a></li>\n<li><a href=\"#3-entity-encoding\">3. <strong>Entity Encoding</strong></a></li>\n<li><a href=\"#4-html-character-entities\">4. <strong>HTML Character Entities</strong></a></li>\n<li><a href=\"#5-xml-character-reference-entities\">5. <strong>XML Character Reference Entities</strong></a></li>\n<li><a href=\"#6-xml-namespace-mapping\">6. <strong>XML Namespace Mapping</strong></a></li>\n<li><a href=\"#7-xml-character-reference-replacement\">7. <strong>XML Character Reference Replacement</strong></a></li>\n<li><a href=\"#8-xml-character-reference-replacement-with-xml-namespace\">8. <strong>XML Character Reference Replacement with XML Namespace</strong></a></li>\n</ol>\n<p>Below are comprehensive code examples for using the <code>xml.sax.saxutils</code> module from Python's standard library, which provides utilities for XML parsing and string manipulation.</p>\n<h3>1. <strong>Escape Characters in XML</strong></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from xml.sax.saxutils import escape\n\n# Input string containing special characters\ninput_string = '&lt;&quot;&amp;&gt;&lt;&gt;/'\n\n# Escaping special characters for XML output\nescaped_string = escape(input_string)\n\nprint(f&quot;Original String: {input_string}&quot;)\nprint(f&quot;Escaped String: {escaped_string}&quot;)\n</code></pre>\n\n<h3>2. <strong>Unescape Characters in XML</strong></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from xml.sax.saxutils import unescape\n\n# Input string containing escaped entities\nescaped_string = '&amp;lt;&quot;&amp;amp;&amp;gt;&amp;amp;quot;&amp;amp;apos;'  # Example of a long escape sequence\n\n# Unescaping special characters from XML input\nunescaped_string = unescape(escaped_string)\n\nprint(f&quot;Escaped String: {escaped_string}&quot;)\nprint(f&quot;Unescaped String: {unescaped_string}&quot;)\n</code></pre>\n\n<h3>3. <strong>Entity Encoding</strong></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from xml.sax.saxutils import entityEscape\n\n# Input string containing special characters\ninput_string = 'The &amp;quot;quick&amp;quot; brown fox jumps over the &amp;lt;lazy&amp;gt; dog.'\n\n# Entity encoding special characters for XML output\nencoded_string = entityEscape(input_string)\n\nprint(f&quot;Original String: {input_string}&quot;)\nprint(f&quot;Encoded String: {encoded_string}&quot;)\n</code></pre>\n\n<h3>4. <strong>HTML Character Entities</strong></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from xml.sax.saxutils import htmlEntityDecode\n\n# Input string containing HTML character entities\nhtml_encoded_string = 'The &amp;quot;quick&amp;quot; brown fox jumps over the &amp;lt;lazy&amp;gt; dog.'\n\n# Decoding HTML character entities to their corresponding characters\ndecoded_string = htmlEntityDecode(html_encoded_string)\n\nprint(f&quot;Encoded String: {html_encoded_string}&quot;)\nprint(f&quot;Decoded String: {decoded_string}&quot;)\n</code></pre>\n\n<h3>5. <strong>XML Character Reference Entities</strong></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from xml.sax.saxutils import xmlcharrefreplace\n\n# Input string containing XML character reference entities\nxml_entity_string = 'The &amp;quot;quick&amp;quot; brown fox jumps over the &amp;lt;lazy&amp;gt; dog.'\n\n# Replacing XML character reference entities with their corresponding characters\nreplaced_string = xmlcharrefreplace(xml_entity_string)\n\nprint(f&quot;Original String: {xml_entity_string}&quot;)\nprint(f&quot;Replaced String: {replaced_string}&quot;)\n</code></pre>\n\n<h3>6. <strong>XML Namespace Mapping</strong></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from xml.sax.saxutils import prepare_input_source\n\n# Input string with namespaces\ninput_string = &quot;&quot;&quot;\n&lt;root xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;\n    &lt;child xsi:type=&quot;typeA&quot;&gt;Content&lt;/child&gt;\n&lt;/root&gt;\n&quot;&quot;&quot;\n\n# Preparing input source for XML parsing\ninput_source = prepare_input_source(input_string)\n\nprint(f&quot;Input Source: {input_source}&quot;)\n</code></pre>\n\n<h3>7. <strong>XML Character Reference Replacement</strong></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from xml.sax.saxutils import characterEntityResolver\n\n# Function to resolve character entities to their corresponding characters\ndef custom_resolver(public_id, system_id):\n    # Example mapping for HTML special characters\n    if public_id == &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;:\n        return {&quot;&amp;lt;&quot;: &quot;&lt;&quot;, &quot;&amp;gt;&quot;: &quot;&gt;&quot;, &quot;&amp;amp;&quot;: &quot;&amp;&quot;}\n    return None\n\n# Setting up the custom character entity resolver\nresolver = characterEntityResolver(custom_resolver)\n\nprint(f&quot;Custom Resolver: {resolver}&quot;)\n</code></pre>\n\n<h3>8. <strong>XML Character Reference Replacement with XML Namespace</strong></h3>\n<pre class=\"codehilite\"><code class=\"language-python\">from xml.sax.saxutils import prepare_input_source, resolve_entity\n\n# Input string with namespaces and character entities\ninput_string = &quot;&quot;&quot;\n&lt;root xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;\n    &lt;child xsi:type=&quot;typeA&quot;&gt;Content &amp;amp; more content&lt;/child&gt;\n&lt;/root&gt;\n&quot;&quot;&quot;\n\n# Preparing input source for XML parsing\ninput_source = prepare_input_source(input_string)\n\n# Resolving entities in the input source using the resolver\nresolved_input = resolve_entity(input_source, &quot;more content&quot;)\n\nprint(f&quot;Original Input: {input_source}&quot;)\nprint(f&quot;Resolved Input: {resolved_input}&quot;)\n</code></pre>\n\n<p>These examples demonstrate various functionalities of the <code>xml.sax.saxutils</code> module, including escaping and unescaping characters, encoding HTML entities, handling XML namespace mappings, and using custom character entity resolvers. Each example is accompanied by comments for clarity.</p>"
        },
        {
            "filename": "xml.sax.xmlreader - Interface for XML parsers.md",
            "content": "<h1>xml.sax.xmlreader - Interface for XML parsers</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#1-using-the-xmlreader-interface\">1. Using the <code>XMLReader</code> Interface</a></li>\n<li><a href=\"#2-customizing-content-handling\">2. Customizing Content Handling</a></li>\n<li><a href=\"#3-handling-namespaces\">3. Handling Namespaces</a></li>\n<li><a href=\"#4-handling-entity-references\">4. Handling Entity References</a></li>\n<li><a href=\"#5-using-the-xmlsaxexpatreader-module\">5. Using the <code>xml.sax.expatreader</code> Module</a></li>\n<li><a href=\"#6-handling-validation\">6. Handling Validation</a></li>\n</ol>\n<p>The <code>xml.sax.xmlreader</code> module provides an interface for parsing XML documents using SAX (Simple API for XML). It allows you to read and process XML data in a more memory-efficient manner by processing only parts of the document as needed. Below are comprehensive examples demonstrating various functionalities provided by this module.</p>\n<h3>1. Using the <code>XMLReader</code> Interface</h3>\n<p>The <code>XMLReader</code> interface is the central class for parsing XML documents with SAX. Here's how you can use it to parse an XML file:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from xml.sax import make_parser, ContentHandler\n\nclass MyContentHandler(ContentHandler):\n    def startElement(self, name, attrs):\n        print(f&quot;Start element: {name}&quot;)\n        if 'id' in attrs:\n            print(f&quot;ID attribute: {attrs['id']}&quot;)\n\n    def endElement(self, name):\n        print(f&quot;End element: {name}&quot;)\n\ndef parse_xml(file_path):\n    # Create an XML parser\n    parser = make_parser()\n\n    # Set the content handler for parsing\n    handler = MyContentHandler()\n    parser.setContentHandler(handler)\n\n    try:\n        # Parse the XML file\n        parser.parse(file_path)\n    except Exception as e:\n        print(f&quot;Error parsing XML: {e}&quot;)\n\n# Example usage\nparse_xml('example.xml')\n</code></pre>\n\n<h3>2. Customizing Content Handling</h3>\n<p>You can customize the behavior of the <code>ContentHandler</code> by overriding specific methods. Here's an example that prints all text nodes found in the XML:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">class TextPrinter(ContentHandler):\n    def characters(self, content):\n        print(content.strip())\n\ndef parse_xml_with_text(file_path):\n    parser = make_parser()\n    handler = TextPrinter()\n    parser.setContentHandler(handler)\n\n    try:\n        parser.parse(file_path)\n    except Exception as e:\n        print(f&quot;Error parsing XML: {e}&quot;)\n\n# Example usage\nparse_xml_with_text('example.xml')\n</code></pre>\n\n<h3>3. Handling Namespaces</h3>\n<p>SAX also supports namespaces, which can be accessed through the <code>Attributes</code> object:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">class NamespaceHandler(ContentHandler):\n    def startElement(self, name, attrs):\n        print(f&quot;Start element: {name} (Namespace: {attrs.namespaceURI})&quot;)\n\ndef parse_xml_with_namespaces(file_path):\n    parser = make_parser()\n    handler = NamespaceHandler()\n    parser.setContentHandler(handler)\n\n    try:\n        parser.parse(file_path)\n    except Exception as e:\n        print(f&quot;Error parsing XML: {e}&quot;)\n\n# Example usage\nparse_xml_with_namespaces('example.xml')\n</code></pre>\n\n<h3>4. Handling Entity References</h3>\n<p>Entity references are handled in SAX by the <code>startEntity</code> and <code>endEntity</code> methods:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">class EntityHandler(ContentHandler):\n    def startEntity(self, name):\n        print(f&quot;Start entity: {name}&quot;)\n\n    def endEntity(self, name):\n        print(f&quot;End entity: {name}&quot;)\n\ndef parse_xml_with_entities(file_path):\n    parser = make_parser()\n    handler = EntityHandler()\n    parser.setContentHandler(handler)\n\n    try:\n        parser.parse(file_path)\n    except Exception as e:\n        print(f&quot;Error parsing XML: {e}&quot;)\n\n# Example usage\nparse_xml_with_entities('example.xml')\n</code></pre>\n\n<h3>5. Using the <code>xml.sax.expatreader</code> Module</h3>\n<p>The <code>expatreader</code> module provides a SAX-based parser that uses Expat, which is a fast and simple parser for XML.</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from xml.sax import make_parser, ContentHandler\n\nclass ExpatContentHandler(ContentHandler):\n    def startElement(self, name, attrs):\n        print(f&quot;Start element: {name}&quot;)\n\ndef parse_xml_with_expat(file_path):\n    # Create an Expat-based XML parser\n    parser = make_parser(use_expat=True)\n\n    handler = ExpatContentHandler()\n    parser.setContentHandler(handler)\n\n    try:\n        parser.parse(file_path)\n    except Exception as e:\n        print(f&quot;Error parsing XML: {e}&quot;)\n\n# Example usage\nparse_xml_with_expat('example.xml')\n</code></pre>\n\n<h3>6. Handling Validation</h3>\n<p>SAX parsers can be configured to perform validation against a schema:</p>\n<pre class=\"codehilite\"><code class=\"language-python\">from xml.sax import make_parser, ContentHandler, XMLReader\nfrom xml.dom.minidom import parseString\n\nclass ValidatingContentHandler(ContentHandler):\n    def startElement(self, name, attrs):\n        print(f&quot;Start element: {name}&quot;)\n\ndef parse_xml_with_validation(file_path, schema_file):\n    parser = make_parser(use_expat=True)\n    parser.setFeature('http://xml.org/sax/features/validation', True)\n\n    # Load the schema\n    with open(schema_file, 'rb') as f:\n        schema_content = f.read()\n\n    # Parse and validate the XML file\n    try:\n        dom = parseString(schema_content + b'\\n' + open(file_path, 'rb').read())\n        handler = ValidatingContentHandler()\n        parser.setContentHandler(handler)\n        parser.parse(dom)\n    except Exception as e:\n        print(f&quot;Error parsing XML: {e}&quot;)\n\n# Example usage\nparse_xml_with_validation('example.xml', 'schema.xsd')\n</code></pre>\n\n<p>These examples demonstrate various ways to use the <code>xml.sax.xmlreader</code> module to parse and process XML data in Python. You can adapt these examples to fit your specific requirements, such as handling different types of XML documents or integrating them into larger applications.</p>"
        }
    ]
}